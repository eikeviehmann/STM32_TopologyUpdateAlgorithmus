
STM32_TopologyUpdateAlgorithm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068fc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000236c  08006a08  08006a08  00016a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d74  08008d74  00020594  2**0
                  CONTENTS
  4 .ARM          00000000  08008d74  08008d74  00020594  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008d74  08008d74  00020594  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d74  08008d74  00018d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d78  08008d78  00018d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000594  20000000  08008d7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  20000594  08009310  00020594  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008c8  08009310  000208c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020594  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012c0b  00000000  00000000  000205bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002553  00000000  00000000  000331c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009b8  00000000  00000000  00035720  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008e8  00000000  00000000  000360d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000143d4  00000000  00000000  000369c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008789  00000000  00000000  0004ad94  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005ec9e  00000000  00000000  0005351d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b21bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cbc  00000000  00000000  000b2238  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000594 	.word	0x20000594
 8000128:	00000000 	.word	0x00000000
 800012c:	080069f0 	.word	0x080069f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000598 	.word	0x20000598
 8000148:	080069f0 	.word	0x080069f0

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <main>:
#include "rf24/rf24.h"

/*-------------------------MAIN FUNCTION------------------------------*/

int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	rf24_init();
 8000174:	f001 f82a 	bl	80011cc <rf24_init>

    while(1)
 8000178:	e7fe      	b.n	8000178 <main+0x8>
	...

0800017c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800017c:	b480      	push	{r7}
 800017e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000180:	4b15      	ldr	r3, [pc, #84]	; (80001d8 <SystemInit+0x5c>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a14      	ldr	r2, [pc, #80]	; (80001d8 <SystemInit+0x5c>)
 8000186:	f043 0301 	orr.w	r3, r3, #1
 800018a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800018c:	4b12      	ldr	r3, [pc, #72]	; (80001d8 <SystemInit+0x5c>)
 800018e:	685a      	ldr	r2, [r3, #4]
 8000190:	4911      	ldr	r1, [pc, #68]	; (80001d8 <SystemInit+0x5c>)
 8000192:	4b12      	ldr	r3, [pc, #72]	; (80001dc <SystemInit+0x60>)
 8000194:	4013      	ands	r3, r2
 8000196:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000198:	4b0f      	ldr	r3, [pc, #60]	; (80001d8 <SystemInit+0x5c>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4a0e      	ldr	r2, [pc, #56]	; (80001d8 <SystemInit+0x5c>)
 800019e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80001a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80001a6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80001a8:	4b0b      	ldr	r3, [pc, #44]	; (80001d8 <SystemInit+0x5c>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	4a0a      	ldr	r2, [pc, #40]	; (80001d8 <SystemInit+0x5c>)
 80001ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80001b2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80001b4:	4b08      	ldr	r3, [pc, #32]	; (80001d8 <SystemInit+0x5c>)
 80001b6:	685b      	ldr	r3, [r3, #4]
 80001b8:	4a07      	ldr	r2, [pc, #28]	; (80001d8 <SystemInit+0x5c>)
 80001ba:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80001be:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80001c0:	4b05      	ldr	r3, [pc, #20]	; (80001d8 <SystemInit+0x5c>)
 80001c2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80001c6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80001c8:	4b05      	ldr	r3, [pc, #20]	; (80001e0 <SystemInit+0x64>)
 80001ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80001ce:	609a      	str	r2, [r3, #8]
#endif 
}
 80001d0:	bf00      	nop
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bc80      	pop	{r7}
 80001d6:	4770      	bx	lr
 80001d8:	40021000 	.word	0x40021000
 80001dc:	f8ff0000 	.word	0xf8ff0000
 80001e0:	e000ed00 	.word	0xe000ed00

080001e4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b085      	sub	sp, #20
 80001e8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmull = 0U, pllsource = 0U;
 80001ea:	2300      	movs	r3, #0
 80001ec:	60fb      	str	r3, [r7, #12]
 80001ee:	2300      	movs	r3, #0
 80001f0:	60bb      	str	r3, [r7, #8]
 80001f2:	2300      	movs	r3, #0
 80001f4:	607b      	str	r3, [r7, #4]
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80001f6:	4b2c      	ldr	r3, [pc, #176]	; (80002a8 <SystemCoreClockUpdate+0xc4>)
 80001f8:	685b      	ldr	r3, [r3, #4]
 80001fa:	f003 030c 	and.w	r3, r3, #12
 80001fe:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	2b04      	cmp	r3, #4
 8000204:	d007      	beq.n	8000216 <SystemCoreClockUpdate+0x32>
 8000206:	2b08      	cmp	r3, #8
 8000208:	d009      	beq.n	800021e <SystemCoreClockUpdate+0x3a>
 800020a:	2b00      	cmp	r3, #0
 800020c:	d133      	bne.n	8000276 <SystemCoreClockUpdate+0x92>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 800020e:	4b27      	ldr	r3, [pc, #156]	; (80002ac <SystemCoreClockUpdate+0xc8>)
 8000210:	4a27      	ldr	r2, [pc, #156]	; (80002b0 <SystemCoreClockUpdate+0xcc>)
 8000212:	601a      	str	r2, [r3, #0]
      break;
 8000214:	e033      	b.n	800027e <SystemCoreClockUpdate+0x9a>
    case 0x04U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000216:	4b25      	ldr	r3, [pc, #148]	; (80002ac <SystemCoreClockUpdate+0xc8>)
 8000218:	4a25      	ldr	r2, [pc, #148]	; (80002b0 <SystemCoreClockUpdate+0xcc>)
 800021a:	601a      	str	r2, [r3, #0]
      break;
 800021c:	e02f      	b.n	800027e <SystemCoreClockUpdate+0x9a>
    case 0x08U:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800021e:	4b22      	ldr	r3, [pc, #136]	; (80002a8 <SystemCoreClockUpdate+0xc4>)
 8000220:	685b      	ldr	r3, [r3, #4]
 8000222:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000226:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000228:	4b1f      	ldr	r3, [pc, #124]	; (80002a8 <SystemCoreClockUpdate+0xc4>)
 800022a:	685b      	ldr	r3, [r3, #4]
 800022c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000230:	607b      	str	r3, [r7, #4]
      
#if !defined(STM32F105xC) && !defined(STM32F107xC)      
      pllmull = ( pllmull >> 18U) + 2U;
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	0c9b      	lsrs	r3, r3, #18
 8000236:	3302      	adds	r3, #2
 8000238:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00U)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d106      	bne.n	800024e <SystemCoreClockUpdate+0x6a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 8000240:	68bb      	ldr	r3, [r7, #8]
 8000242:	4a1c      	ldr	r2, [pc, #112]	; (80002b4 <SystemCoreClockUpdate+0xd0>)
 8000244:	fb02 f303 	mul.w	r3, r2, r3
 8000248:	4a18      	ldr	r2, [pc, #96]	; (80002ac <SystemCoreClockUpdate+0xc8>)
 800024a:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F105xC */ 
      break;
 800024c:	e017      	b.n	800027e <SystemCoreClockUpdate+0x9a>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 800024e:	4b16      	ldr	r3, [pc, #88]	; (80002a8 <SystemCoreClockUpdate+0xc4>)
 8000250:	685b      	ldr	r3, [r3, #4]
 8000252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000256:	2b00      	cmp	r3, #0
 8000258:	d006      	beq.n	8000268 <SystemCoreClockUpdate+0x84>
          SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 800025a:	68bb      	ldr	r3, [r7, #8]
 800025c:	4a15      	ldr	r2, [pc, #84]	; (80002b4 <SystemCoreClockUpdate+0xd0>)
 800025e:	fb02 f303 	mul.w	r3, r2, r3
 8000262:	4a12      	ldr	r2, [pc, #72]	; (80002ac <SystemCoreClockUpdate+0xc8>)
 8000264:	6013      	str	r3, [r2, #0]
      break;
 8000266:	e00a      	b.n	800027e <SystemCoreClockUpdate+0x9a>
          SystemCoreClock = HSE_VALUE * pllmull;
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	4a11      	ldr	r2, [pc, #68]	; (80002b0 <SystemCoreClockUpdate+0xcc>)
 800026c:	fb02 f303 	mul.w	r3, r2, r3
 8000270:	4a0e      	ldr	r2, [pc, #56]	; (80002ac <SystemCoreClockUpdate+0xc8>)
 8000272:	6013      	str	r3, [r2, #0]
      break;
 8000274:	e003      	b.n	800027e <SystemCoreClockUpdate+0x9a>

    default:
      SystemCoreClock = HSI_VALUE;
 8000276:	4b0d      	ldr	r3, [pc, #52]	; (80002ac <SystemCoreClockUpdate+0xc8>)
 8000278:	4a0d      	ldr	r2, [pc, #52]	; (80002b0 <SystemCoreClockUpdate+0xcc>)
 800027a:	601a      	str	r2, [r3, #0]
      break;
 800027c:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800027e:	4b0a      	ldr	r3, [pc, #40]	; (80002a8 <SystemCoreClockUpdate+0xc4>)
 8000280:	685b      	ldr	r3, [r3, #4]
 8000282:	091b      	lsrs	r3, r3, #4
 8000284:	f003 030f 	and.w	r3, r3, #15
 8000288:	4a0b      	ldr	r2, [pc, #44]	; (80002b8 <SystemCoreClockUpdate+0xd4>)
 800028a:	5cd3      	ldrb	r3, [r2, r3]
 800028c:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 800028e:	4b07      	ldr	r3, [pc, #28]	; (80002ac <SystemCoreClockUpdate+0xc8>)
 8000290:	681a      	ldr	r2, [r3, #0]
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	fa22 f303 	lsr.w	r3, r2, r3
 8000298:	4a04      	ldr	r2, [pc, #16]	; (80002ac <SystemCoreClockUpdate+0xc8>)
 800029a:	6013      	str	r3, [r2, #0]
}
 800029c:	bf00      	nop
 800029e:	3714      	adds	r7, #20
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bc80      	pop	{r7}
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	40021000 	.word	0x40021000
 80002ac:	20000000 	.word	0x20000000
 80002b0:	007a1200 	.word	0x007a1200
 80002b4:	003d0900 	.word	0x003d0900
 80002b8:	080087d0 	.word	0x080087d0

080002bc <Encode>:
  }

// Encodes input (UINT4) into output (BYTE). Assumes len is
// a multiple of 4.
static void Encode (uint8_t *output, const uint32_t *input, uint16_t len )
{
 80002bc:	b480      	push	{r7}
 80002be:	b087      	sub	sp, #28
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	60f8      	str	r0, [r7, #12]
 80002c4:	60b9      	str	r1, [r7, #8]
 80002c6:	4613      	mov	r3, r2
 80002c8:	80fb      	strh	r3, [r7, #6]
  uint16_t i, j;

  for (i = 0, j = 0; j < len; i++, j += 4)
 80002ca:	2300      	movs	r3, #0
 80002cc:	82fb      	strh	r3, [r7, #22]
 80002ce:	2300      	movs	r3, #0
 80002d0:	82bb      	strh	r3, [r7, #20]
 80002d2:	e033      	b.n	800033c <Encode+0x80>
  {
    output[j]     = (uint8_t)(input[i] & 0xff);
 80002d4:	8afb      	ldrh	r3, [r7, #22]
 80002d6:	009b      	lsls	r3, r3, #2
 80002d8:	68ba      	ldr	r2, [r7, #8]
 80002da:	4413      	add	r3, r2
 80002dc:	6819      	ldr	r1, [r3, #0]
 80002de:	8abb      	ldrh	r3, [r7, #20]
 80002e0:	68fa      	ldr	r2, [r7, #12]
 80002e2:	4413      	add	r3, r2
 80002e4:	b2ca      	uxtb	r2, r1
 80002e6:	701a      	strb	r2, [r3, #0]
    *(output+j+1) = (uint8_t)((input[i] >> 8) & 0xff);
 80002e8:	8afb      	ldrh	r3, [r7, #22]
 80002ea:	009b      	lsls	r3, r3, #2
 80002ec:	68ba      	ldr	r2, [r7, #8]
 80002ee:	4413      	add	r3, r2
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	0a19      	lsrs	r1, r3, #8
 80002f4:	8abb      	ldrh	r3, [r7, #20]
 80002f6:	3301      	adds	r3, #1
 80002f8:	68fa      	ldr	r2, [r7, #12]
 80002fa:	4413      	add	r3, r2
 80002fc:	b2ca      	uxtb	r2, r1
 80002fe:	701a      	strb	r2, [r3, #0]
    *(output+j+2) = (uint8_t)((input[i] >> 16) & 0xff);
 8000300:	8afb      	ldrh	r3, [r7, #22]
 8000302:	009b      	lsls	r3, r3, #2
 8000304:	68ba      	ldr	r2, [r7, #8]
 8000306:	4413      	add	r3, r2
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	0c19      	lsrs	r1, r3, #16
 800030c:	8abb      	ldrh	r3, [r7, #20]
 800030e:	3302      	adds	r3, #2
 8000310:	68fa      	ldr	r2, [r7, #12]
 8000312:	4413      	add	r3, r2
 8000314:	b2ca      	uxtb	r2, r1
 8000316:	701a      	strb	r2, [r3, #0]
    *(output+j+3) = (uint8_t)((input[i] >> 24) & 0xff);
 8000318:	8afb      	ldrh	r3, [r7, #22]
 800031a:	009b      	lsls	r3, r3, #2
 800031c:	68ba      	ldr	r2, [r7, #8]
 800031e:	4413      	add	r3, r2
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	0e19      	lsrs	r1, r3, #24
 8000324:	8abb      	ldrh	r3, [r7, #20]
 8000326:	3303      	adds	r3, #3
 8000328:	68fa      	ldr	r2, [r7, #12]
 800032a:	4413      	add	r3, r2
 800032c:	b2ca      	uxtb	r2, r1
 800032e:	701a      	strb	r2, [r3, #0]
  for (i = 0, j = 0; j < len; i++, j += 4)
 8000330:	8afb      	ldrh	r3, [r7, #22]
 8000332:	3301      	adds	r3, #1
 8000334:	82fb      	strh	r3, [r7, #22]
 8000336:	8abb      	ldrh	r3, [r7, #20]
 8000338:	3304      	adds	r3, #4
 800033a:	82bb      	strh	r3, [r7, #20]
 800033c:	8aba      	ldrh	r2, [r7, #20]
 800033e:	88fb      	ldrh	r3, [r7, #6]
 8000340:	429a      	cmp	r2, r3
 8000342:	d3c7      	bcc.n	80002d4 <Encode+0x18>
  }
}
 8000344:	bf00      	nop
 8000346:	371c      	adds	r7, #28
 8000348:	46bd      	mov	sp, r7
 800034a:	bc80      	pop	{r7}
 800034c:	4770      	bx	lr

0800034e <Decode>:

// Decodes input (BYTE) into output (UINT4). Assumes len is
// multiple of 4.
static void Decode (uint32_t *output, const uint8_t *input, uint16_t len )
{
 800034e:	b480      	push	{r7}
 8000350:	b087      	sub	sp, #28
 8000352:	af00      	add	r7, sp, #0
 8000354:	60f8      	str	r0, [r7, #12]
 8000356:	60b9      	str	r1, [r7, #8]
 8000358:	4613      	mov	r3, r2
 800035a:	80fb      	strh	r3, [r7, #6]
  uint16_t i, j;

  for (i = 0, j = 0; j < len; i++, j += 4)
 800035c:	2300      	movs	r3, #0
 800035e:	82fb      	strh	r3, [r7, #22]
 8000360:	2300      	movs	r3, #0
 8000362:	82bb      	strh	r3, [r7, #20]
 8000364:	e026      	b.n	80003b4 <Decode+0x66>
    output[i] = ((uint32_t)input[j]) | (((uint32_t)*(input + j + 1)) << 8) | (((uint32_t)*(input + j + 2)) << 16) | (((uint32_t)*(input + j + 3)) << 24);
 8000366:	8abb      	ldrh	r3, [r7, #20]
 8000368:	68ba      	ldr	r2, [r7, #8]
 800036a:	4413      	add	r3, r2
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	4619      	mov	r1, r3
 8000370:	8abb      	ldrh	r3, [r7, #20]
 8000372:	3301      	adds	r3, #1
 8000374:	68ba      	ldr	r2, [r7, #8]
 8000376:	4413      	add	r3, r2
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	021b      	lsls	r3, r3, #8
 800037c:	ea41 0203 	orr.w	r2, r1, r3
 8000380:	8abb      	ldrh	r3, [r7, #20]
 8000382:	3302      	adds	r3, #2
 8000384:	68b9      	ldr	r1, [r7, #8]
 8000386:	440b      	add	r3, r1
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	041b      	lsls	r3, r3, #16
 800038c:	ea42 0103 	orr.w	r1, r2, r3
 8000390:	8abb      	ldrh	r3, [r7, #20]
 8000392:	3303      	adds	r3, #3
 8000394:	68ba      	ldr	r2, [r7, #8]
 8000396:	4413      	add	r3, r2
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	061a      	lsls	r2, r3, #24
 800039c:	8afb      	ldrh	r3, [r7, #22]
 800039e:	009b      	lsls	r3, r3, #2
 80003a0:	68f8      	ldr	r0, [r7, #12]
 80003a2:	4403      	add	r3, r0
 80003a4:	430a      	orrs	r2, r1
 80003a6:	601a      	str	r2, [r3, #0]
  for (i = 0, j = 0; j < len; i++, j += 4)
 80003a8:	8afb      	ldrh	r3, [r7, #22]
 80003aa:	3301      	adds	r3, #1
 80003ac:	82fb      	strh	r3, [r7, #22]
 80003ae:	8abb      	ldrh	r3, [r7, #20]
 80003b0:	3304      	adds	r3, #4
 80003b2:	82bb      	strh	r3, [r7, #20]
 80003b4:	8aba      	ldrh	r2, [r7, #20]
 80003b6:	88fb      	ldrh	r3, [r7, #6]
 80003b8:	429a      	cmp	r2, r3
 80003ba:	d3d4      	bcc.n	8000366 <Decode+0x18>
}
 80003bc:	bf00      	nop
 80003be:	371c      	adds	r7, #28
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bc80      	pop	{r7}
 80003c4:	4770      	bx	lr
	...

080003c8 <MD5Transform>:
//}

// MD5 basic transformation. Transforms state based on block.

static void MD5Transform (uint32_t state[4], const uint8_t block[64])
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b096      	sub	sp, #88	; 0x58
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
 80003d0:	6039      	str	r1, [r7, #0]
  uint32_t a = state[0], b = state[1], c = state[2], d = state[3], x[16];
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	657b      	str	r3, [r7, #84]	; 0x54
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	685b      	ldr	r3, [r3, #4]
 80003dc:	653b      	str	r3, [r7, #80]	; 0x50
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	689b      	ldr	r3, [r3, #8]
 80003e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	68db      	ldr	r3, [r3, #12]
 80003e8:	64bb      	str	r3, [r7, #72]	; 0x48

  Decode (x, block, 64);
 80003ea:	f107 0308 	add.w	r3, r7, #8
 80003ee:	2240      	movs	r2, #64	; 0x40
 80003f0:	6839      	ldr	r1, [r7, #0]
 80003f2:	4618      	mov	r0, r3
 80003f4:	f7ff ffab 	bl	800034e <Decode>

  // Round 1
  FF (a, b, c, d, x[ 0], S11, 0xd76aa478); // 1
 80003f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80003fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80003fc:	401a      	ands	r2, r3
 80003fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000400:	43d9      	mvns	r1, r3
 8000402:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000404:	400b      	ands	r3, r1
 8000406:	431a      	orrs	r2, r3
 8000408:	68bb      	ldr	r3, [r7, #8]
 800040a:	441a      	add	r2, r3
 800040c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800040e:	441a      	add	r2, r3
 8000410:	4ba2      	ldr	r3, [pc, #648]	; (800069c <MD5Transform+0x2d4>)
 8000412:	4413      	add	r3, r2
 8000414:	657b      	str	r3, [r7, #84]	; 0x54
 8000416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000418:	ea4f 6373 	mov.w	r3, r3, ror #25
 800041c:	657b      	str	r3, [r7, #84]	; 0x54
 800041e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000422:	4413      	add	r3, r2
 8000424:	657b      	str	r3, [r7, #84]	; 0x54
  FF (d, a, b, c, x[ 1], S12, 0xe8c7b756); // 2
 8000426:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000428:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800042a:	401a      	ands	r2, r3
 800042c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800042e:	43d9      	mvns	r1, r3
 8000430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000432:	400b      	ands	r3, r1
 8000434:	431a      	orrs	r2, r3
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	441a      	add	r2, r3
 800043a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800043c:	441a      	add	r2, r3
 800043e:	4b98      	ldr	r3, [pc, #608]	; (80006a0 <MD5Transform+0x2d8>)
 8000440:	4413      	add	r3, r2
 8000442:	64bb      	str	r3, [r7, #72]	; 0x48
 8000444:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000446:	ea4f 5333 	mov.w	r3, r3, ror #20
 800044a:	64bb      	str	r3, [r7, #72]	; 0x48
 800044c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800044e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000450:	4413      	add	r3, r2
 8000452:	64bb      	str	r3, [r7, #72]	; 0x48
  FF (c, d, a, b, x[ 2], S13, 0x242070db); // 3
 8000454:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000456:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000458:	401a      	ands	r2, r3
 800045a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800045c:	43d9      	mvns	r1, r3
 800045e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000460:	400b      	ands	r3, r1
 8000462:	431a      	orrs	r2, r3
 8000464:	693b      	ldr	r3, [r7, #16]
 8000466:	441a      	add	r2, r3
 8000468:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800046a:	441a      	add	r2, r3
 800046c:	4b8d      	ldr	r3, [pc, #564]	; (80006a4 <MD5Transform+0x2dc>)
 800046e:	4413      	add	r3, r2
 8000470:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000474:	ea4f 33f3 	mov.w	r3, r3, ror #15
 8000478:	64fb      	str	r3, [r7, #76]	; 0x4c
 800047a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800047c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800047e:	4413      	add	r3, r2
 8000480:	64fb      	str	r3, [r7, #76]	; 0x4c
  FF (b, c, d, a, x[ 3], S14, 0xc1bdceee); // 4
 8000482:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000486:	401a      	ands	r2, r3
 8000488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800048a:	43d9      	mvns	r1, r3
 800048c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800048e:	400b      	ands	r3, r1
 8000490:	431a      	orrs	r2, r3
 8000492:	697b      	ldr	r3, [r7, #20]
 8000494:	441a      	add	r2, r3
 8000496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000498:	441a      	add	r2, r3
 800049a:	4b83      	ldr	r3, [pc, #524]	; (80006a8 <MD5Transform+0x2e0>)
 800049c:	4413      	add	r3, r2
 800049e:	653b      	str	r3, [r7, #80]	; 0x50
 80004a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80004a2:	ea4f 23b3 	mov.w	r3, r3, ror #10
 80004a6:	653b      	str	r3, [r7, #80]	; 0x50
 80004a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80004aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80004ac:	4413      	add	r3, r2
 80004ae:	653b      	str	r3, [r7, #80]	; 0x50
  FF (a, b, c, d, x[ 4], S11, 0xf57c0faf); // 5
 80004b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80004b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80004b4:	401a      	ands	r2, r3
 80004b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80004b8:	43d9      	mvns	r1, r3
 80004ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80004bc:	400b      	ands	r3, r1
 80004be:	431a      	orrs	r2, r3
 80004c0:	69bb      	ldr	r3, [r7, #24]
 80004c2:	441a      	add	r2, r3
 80004c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80004c6:	441a      	add	r2, r3
 80004c8:	4b78      	ldr	r3, [pc, #480]	; (80006ac <MD5Transform+0x2e4>)
 80004ca:	4413      	add	r3, r2
 80004cc:	657b      	str	r3, [r7, #84]	; 0x54
 80004ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80004d0:	ea4f 6373 	mov.w	r3, r3, ror #25
 80004d4:	657b      	str	r3, [r7, #84]	; 0x54
 80004d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80004d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80004da:	4413      	add	r3, r2
 80004dc:	657b      	str	r3, [r7, #84]	; 0x54
  FF (d, a, b, c, x[ 5], S12, 0x4787c62a); // 6
 80004de:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80004e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80004e2:	401a      	ands	r2, r3
 80004e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80004e6:	43d9      	mvns	r1, r3
 80004e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80004ea:	400b      	ands	r3, r1
 80004ec:	431a      	orrs	r2, r3
 80004ee:	69fb      	ldr	r3, [r7, #28]
 80004f0:	441a      	add	r2, r3
 80004f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80004f4:	441a      	add	r2, r3
 80004f6:	4b6e      	ldr	r3, [pc, #440]	; (80006b0 <MD5Transform+0x2e8>)
 80004f8:	4413      	add	r3, r2
 80004fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80004fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80004fe:	ea4f 5333 	mov.w	r3, r3, ror #20
 8000502:	64bb      	str	r3, [r7, #72]	; 0x48
 8000504:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000506:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000508:	4413      	add	r3, r2
 800050a:	64bb      	str	r3, [r7, #72]	; 0x48
  FF (c, d, a, b, x[ 6], S13, 0xa8304613); // 7
 800050c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800050e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000510:	401a      	ands	r2, r3
 8000512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000514:	43d9      	mvns	r1, r3
 8000516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000518:	400b      	ands	r3, r1
 800051a:	431a      	orrs	r2, r3
 800051c:	6a3b      	ldr	r3, [r7, #32]
 800051e:	441a      	add	r2, r3
 8000520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000522:	441a      	add	r2, r3
 8000524:	4b63      	ldr	r3, [pc, #396]	; (80006b4 <MD5Transform+0x2ec>)
 8000526:	4413      	add	r3, r2
 8000528:	64fb      	str	r3, [r7, #76]	; 0x4c
 800052a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800052c:	ea4f 33f3 	mov.w	r3, r3, ror #15
 8000530:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000532:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000534:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000536:	4413      	add	r3, r2
 8000538:	64fb      	str	r3, [r7, #76]	; 0x4c
  FF (b, c, d, a, x[ 7], S14, 0xfd469501); // 8
 800053a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800053c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800053e:	401a      	ands	r2, r3
 8000540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000542:	43d9      	mvns	r1, r3
 8000544:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000546:	400b      	ands	r3, r1
 8000548:	431a      	orrs	r2, r3
 800054a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800054c:	441a      	add	r2, r3
 800054e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000550:	441a      	add	r2, r3
 8000552:	4b59      	ldr	r3, [pc, #356]	; (80006b8 <MD5Transform+0x2f0>)
 8000554:	4413      	add	r3, r2
 8000556:	653b      	str	r3, [r7, #80]	; 0x50
 8000558:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800055a:	ea4f 23b3 	mov.w	r3, r3, ror #10
 800055e:	653b      	str	r3, [r7, #80]	; 0x50
 8000560:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000564:	4413      	add	r3, r2
 8000566:	653b      	str	r3, [r7, #80]	; 0x50
  FF (a, b, c, d, x[ 8], S11, 0x698098d8); // 9
 8000568:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800056a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800056c:	401a      	ands	r2, r3
 800056e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000570:	43d9      	mvns	r1, r3
 8000572:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000574:	400b      	ands	r3, r1
 8000576:	431a      	orrs	r2, r3
 8000578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800057a:	441a      	add	r2, r3
 800057c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800057e:	441a      	add	r2, r3
 8000580:	4b4e      	ldr	r3, [pc, #312]	; (80006bc <MD5Transform+0x2f4>)
 8000582:	4413      	add	r3, r2
 8000584:	657b      	str	r3, [r7, #84]	; 0x54
 8000586:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000588:	ea4f 6373 	mov.w	r3, r3, ror #25
 800058c:	657b      	str	r3, [r7, #84]	; 0x54
 800058e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000592:	4413      	add	r3, r2
 8000594:	657b      	str	r3, [r7, #84]	; 0x54
  FF (d, a, b, c, x[ 9], S12, 0x8b44f7af); // 10
 8000596:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000598:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800059a:	401a      	ands	r2, r3
 800059c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800059e:	43d9      	mvns	r1, r3
 80005a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005a2:	400b      	ands	r3, r1
 80005a4:	431a      	orrs	r2, r3
 80005a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005a8:	441a      	add	r2, r3
 80005aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80005ac:	441a      	add	r2, r3
 80005ae:	4b44      	ldr	r3, [pc, #272]	; (80006c0 <MD5Transform+0x2f8>)
 80005b0:	4413      	add	r3, r2
 80005b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80005b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80005b6:	ea4f 5333 	mov.w	r3, r3, ror #20
 80005ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80005bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80005be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80005c0:	4413      	add	r3, r2
 80005c2:	64bb      	str	r3, [r7, #72]	; 0x48
  FF (c, d, a, b, x[10], S13, 0xffff5bb1); // 11
 80005c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80005c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80005c8:	401a      	ands	r2, r3
 80005ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80005cc:	43d9      	mvns	r1, r3
 80005ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80005d0:	400b      	ands	r3, r1
 80005d2:	431a      	orrs	r2, r3
 80005d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005d6:	441a      	add	r2, r3
 80005d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005da:	4413      	add	r3, r2
 80005dc:	f5a3 4324 	sub.w	r3, r3, #41984	; 0xa400
 80005e0:	3b4f      	subs	r3, #79	; 0x4f
 80005e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80005e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005e6:	ea4f 33f3 	mov.w	r3, r3, ror #15
 80005ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80005ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80005ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80005f0:	4413      	add	r3, r2
 80005f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  FF (b, c, d, a, x[11], S14, 0x895cd7be); // 12
 80005f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80005f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80005f8:	401a      	ands	r2, r3
 80005fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005fc:	43d9      	mvns	r1, r3
 80005fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000600:	400b      	ands	r3, r1
 8000602:	431a      	orrs	r2, r3
 8000604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000606:	441a      	add	r2, r3
 8000608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800060a:	441a      	add	r2, r3
 800060c:	4b2d      	ldr	r3, [pc, #180]	; (80006c4 <MD5Transform+0x2fc>)
 800060e:	4413      	add	r3, r2
 8000610:	653b      	str	r3, [r7, #80]	; 0x50
 8000612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000614:	ea4f 23b3 	mov.w	r3, r3, ror #10
 8000618:	653b      	str	r3, [r7, #80]	; 0x50
 800061a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800061c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800061e:	4413      	add	r3, r2
 8000620:	653b      	str	r3, [r7, #80]	; 0x50
  FF (a, b, c, d, x[12], S11, 0x6b901122); // 13
 8000622:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000626:	401a      	ands	r2, r3
 8000628:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800062a:	43d9      	mvns	r1, r3
 800062c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800062e:	400b      	ands	r3, r1
 8000630:	431a      	orrs	r2, r3
 8000632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000634:	441a      	add	r2, r3
 8000636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000638:	441a      	add	r2, r3
 800063a:	4b23      	ldr	r3, [pc, #140]	; (80006c8 <MD5Transform+0x300>)
 800063c:	4413      	add	r3, r2
 800063e:	657b      	str	r3, [r7, #84]	; 0x54
 8000640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000642:	ea4f 6373 	mov.w	r3, r3, ror #25
 8000646:	657b      	str	r3, [r7, #84]	; 0x54
 8000648:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800064a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800064c:	4413      	add	r3, r2
 800064e:	657b      	str	r3, [r7, #84]	; 0x54
  FF (d, a, b, c, x[13], S12, 0xfd987193); // 14
 8000650:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000654:	401a      	ands	r2, r3
 8000656:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000658:	43d9      	mvns	r1, r3
 800065a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800065c:	400b      	ands	r3, r1
 800065e:	431a      	orrs	r2, r3
 8000660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000662:	441a      	add	r2, r3
 8000664:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000666:	441a      	add	r2, r3
 8000668:	4b18      	ldr	r3, [pc, #96]	; (80006cc <MD5Transform+0x304>)
 800066a:	4413      	add	r3, r2
 800066c:	64bb      	str	r3, [r7, #72]	; 0x48
 800066e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000670:	ea4f 5333 	mov.w	r3, r3, ror #20
 8000674:	64bb      	str	r3, [r7, #72]	; 0x48
 8000676:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800067a:	4413      	add	r3, r2
 800067c:	64bb      	str	r3, [r7, #72]	; 0x48
  FF (c, d, a, b, x[14], S13, 0xa679438e); // 15
 800067e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000682:	401a      	ands	r2, r3
 8000684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000686:	43d9      	mvns	r1, r3
 8000688:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800068a:	400b      	ands	r3, r1
 800068c:	431a      	orrs	r2, r3
 800068e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000690:	441a      	add	r2, r3
 8000692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000694:	441a      	add	r2, r3
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <MD5Transform+0x308>)
 8000698:	4413      	add	r3, r2
 800069a:	e01b      	b.n	80006d4 <MD5Transform+0x30c>
 800069c:	d76aa478 	.word	0xd76aa478
 80006a0:	e8c7b756 	.word	0xe8c7b756
 80006a4:	242070db 	.word	0x242070db
 80006a8:	c1bdceee 	.word	0xc1bdceee
 80006ac:	f57c0faf 	.word	0xf57c0faf
 80006b0:	4787c62a 	.word	0x4787c62a
 80006b4:	a8304613 	.word	0xa8304613
 80006b8:	fd469501 	.word	0xfd469501
 80006bc:	698098d8 	.word	0x698098d8
 80006c0:	8b44f7af 	.word	0x8b44f7af
 80006c4:	895cd7be 	.word	0x895cd7be
 80006c8:	6b901122 	.word	0x6b901122
 80006cc:	fd987193 	.word	0xfd987193
 80006d0:	a679438e 	.word	0xa679438e
 80006d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80006d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80006d8:	ea4f 33f3 	mov.w	r3, r3, ror #15
 80006dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80006de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80006e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80006e2:	4413      	add	r3, r2
 80006e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  FF (b, c, d, a, x[15], S14, 0x49b40821); // 16
 80006e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80006e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80006ea:	401a      	ands	r2, r3
 80006ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80006ee:	43d9      	mvns	r1, r3
 80006f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80006f2:	400b      	ands	r3, r1
 80006f4:	431a      	orrs	r2, r3
 80006f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80006f8:	441a      	add	r2, r3
 80006fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80006fc:	441a      	add	r2, r3
 80006fe:	4ba2      	ldr	r3, [pc, #648]	; (8000988 <MD5Transform+0x5c0>)
 8000700:	4413      	add	r3, r2
 8000702:	653b      	str	r3, [r7, #80]	; 0x50
 8000704:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000706:	ea4f 23b3 	mov.w	r3, r3, ror #10
 800070a:	653b      	str	r3, [r7, #80]	; 0x50
 800070c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800070e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000710:	4413      	add	r3, r2
 8000712:	653b      	str	r3, [r7, #80]	; 0x50

  // Round 2
  GG (a, b, c, d, x[ 1], S21, 0xf61e2562); // 17
 8000714:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000718:	401a      	ands	r2, r3
 800071a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800071c:	43d9      	mvns	r1, r3
 800071e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000720:	400b      	ands	r3, r1
 8000722:	431a      	orrs	r2, r3
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	441a      	add	r2, r3
 8000728:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800072a:	441a      	add	r2, r3
 800072c:	4b97      	ldr	r3, [pc, #604]	; (800098c <MD5Transform+0x5c4>)
 800072e:	4413      	add	r3, r2
 8000730:	657b      	str	r3, [r7, #84]	; 0x54
 8000732:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000734:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8000738:	657b      	str	r3, [r7, #84]	; 0x54
 800073a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800073c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800073e:	4413      	add	r3, r2
 8000740:	657b      	str	r3, [r7, #84]	; 0x54
  GG (d, a, b, c, x[ 6], S22, 0xc040b340); // 18
 8000742:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000746:	401a      	ands	r2, r3
 8000748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800074a:	43d9      	mvns	r1, r3
 800074c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800074e:	400b      	ands	r3, r1
 8000750:	431a      	orrs	r2, r3
 8000752:	6a3b      	ldr	r3, [r7, #32]
 8000754:	441a      	add	r2, r3
 8000756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000758:	441a      	add	r2, r3
 800075a:	4b8d      	ldr	r3, [pc, #564]	; (8000990 <MD5Transform+0x5c8>)
 800075c:	4413      	add	r3, r2
 800075e:	64bb      	str	r3, [r7, #72]	; 0x48
 8000760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000762:	ea4f 53f3 	mov.w	r3, r3, ror #23
 8000766:	64bb      	str	r3, [r7, #72]	; 0x48
 8000768:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800076a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800076c:	4413      	add	r3, r2
 800076e:	64bb      	str	r3, [r7, #72]	; 0x48
  GG (c, d, a, b, x[11], S23, 0x265e5a51); // 19
 8000770:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000772:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000774:	401a      	ands	r2, r3
 8000776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000778:	43d9      	mvns	r1, r3
 800077a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800077c:	400b      	ands	r3, r1
 800077e:	431a      	orrs	r2, r3
 8000780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000782:	441a      	add	r2, r3
 8000784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000786:	441a      	add	r2, r3
 8000788:	4b82      	ldr	r3, [pc, #520]	; (8000994 <MD5Transform+0x5cc>)
 800078a:	4413      	add	r3, r2
 800078c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800078e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000790:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8000794:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000796:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000798:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800079a:	4413      	add	r3, r2
 800079c:	64fb      	str	r3, [r7, #76]	; 0x4c
  GG (b, c, d, a, x[ 0], S24, 0xe9b6c7aa); // 20
 800079e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80007a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80007a2:	401a      	ands	r2, r3
 80007a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80007a6:	43d9      	mvns	r1, r3
 80007a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007aa:	400b      	ands	r3, r1
 80007ac:	431a      	orrs	r2, r3
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	441a      	add	r2, r3
 80007b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80007b4:	441a      	add	r2, r3
 80007b6:	4b78      	ldr	r3, [pc, #480]	; (8000998 <MD5Transform+0x5d0>)
 80007b8:	4413      	add	r3, r2
 80007ba:	653b      	str	r3, [r7, #80]	; 0x50
 80007bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80007be:	ea4f 3333 	mov.w	r3, r3, ror #12
 80007c2:	653b      	str	r3, [r7, #80]	; 0x50
 80007c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80007c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80007c8:	4413      	add	r3, r2
 80007ca:	653b      	str	r3, [r7, #80]	; 0x50
  GG (a, b, c, d, x[ 5], S21, 0xd62f105d); // 21
 80007cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80007ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007d0:	401a      	ands	r2, r3
 80007d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007d4:	43d9      	mvns	r1, r3
 80007d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80007d8:	400b      	ands	r3, r1
 80007da:	431a      	orrs	r2, r3
 80007dc:	69fb      	ldr	r3, [r7, #28]
 80007de:	441a      	add	r2, r3
 80007e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80007e2:	441a      	add	r2, r3
 80007e4:	4b6d      	ldr	r3, [pc, #436]	; (800099c <MD5Transform+0x5d4>)
 80007e6:	4413      	add	r3, r2
 80007e8:	657b      	str	r3, [r7, #84]	; 0x54
 80007ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80007ec:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80007f0:	657b      	str	r3, [r7, #84]	; 0x54
 80007f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80007f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80007f6:	4413      	add	r3, r2
 80007f8:	657b      	str	r3, [r7, #84]	; 0x54
  GG (d, a, b, c, x[10], S22,  0x2441453); // 22
 80007fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80007fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80007fe:	401a      	ands	r2, r3
 8000800:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000802:	43d9      	mvns	r1, r3
 8000804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000806:	400b      	ands	r3, r1
 8000808:	431a      	orrs	r2, r3
 800080a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800080c:	441a      	add	r2, r3
 800080e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000810:	441a      	add	r2, r3
 8000812:	4b63      	ldr	r3, [pc, #396]	; (80009a0 <MD5Transform+0x5d8>)
 8000814:	4413      	add	r3, r2
 8000816:	64bb      	str	r3, [r7, #72]	; 0x48
 8000818:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800081a:	ea4f 53f3 	mov.w	r3, r3, ror #23
 800081e:	64bb      	str	r3, [r7, #72]	; 0x48
 8000820:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000824:	4413      	add	r3, r2
 8000826:	64bb      	str	r3, [r7, #72]	; 0x48
  GG (c, d, a, b, x[15], S23, 0xd8a1e681); // 23
 8000828:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800082a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800082c:	401a      	ands	r2, r3
 800082e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000830:	43d9      	mvns	r1, r3
 8000832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000834:	400b      	ands	r3, r1
 8000836:	431a      	orrs	r2, r3
 8000838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800083a:	441a      	add	r2, r3
 800083c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800083e:	441a      	add	r2, r3
 8000840:	4b58      	ldr	r3, [pc, #352]	; (80009a4 <MD5Transform+0x5dc>)
 8000842:	4413      	add	r3, r2
 8000844:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000848:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800084c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800084e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000850:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000852:	4413      	add	r3, r2
 8000854:	64fb      	str	r3, [r7, #76]	; 0x4c
  GG (b, c, d, a, x[ 4], S24, 0xe7d3fbc8); // 24
 8000856:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800085a:	401a      	ands	r2, r3
 800085c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800085e:	43d9      	mvns	r1, r3
 8000860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000862:	400b      	ands	r3, r1
 8000864:	431a      	orrs	r2, r3
 8000866:	69bb      	ldr	r3, [r7, #24]
 8000868:	441a      	add	r2, r3
 800086a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800086c:	441a      	add	r2, r3
 800086e:	4b4e      	ldr	r3, [pc, #312]	; (80009a8 <MD5Transform+0x5e0>)
 8000870:	4413      	add	r3, r2
 8000872:	653b      	str	r3, [r7, #80]	; 0x50
 8000874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000876:	ea4f 3333 	mov.w	r3, r3, ror #12
 800087a:	653b      	str	r3, [r7, #80]	; 0x50
 800087c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800087e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000880:	4413      	add	r3, r2
 8000882:	653b      	str	r3, [r7, #80]	; 0x50
  GG (a, b, c, d, x[ 9], S21, 0x21e1cde6); // 25
 8000884:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000886:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000888:	401a      	ands	r2, r3
 800088a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800088c:	43d9      	mvns	r1, r3
 800088e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000890:	400b      	ands	r3, r1
 8000892:	431a      	orrs	r2, r3
 8000894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000896:	441a      	add	r2, r3
 8000898:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800089a:	441a      	add	r2, r3
 800089c:	4b43      	ldr	r3, [pc, #268]	; (80009ac <MD5Transform+0x5e4>)
 800089e:	4413      	add	r3, r2
 80008a0:	657b      	str	r3, [r7, #84]	; 0x54
 80008a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80008a4:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80008a8:	657b      	str	r3, [r7, #84]	; 0x54
 80008aa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80008ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80008ae:	4413      	add	r3, r2
 80008b0:	657b      	str	r3, [r7, #84]	; 0x54
  GG (d, a, b, c, x[14], S22, 0xc33707d6); // 26
 80008b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80008b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80008b6:	401a      	ands	r2, r3
 80008b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80008ba:	43d9      	mvns	r1, r3
 80008bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80008be:	400b      	ands	r3, r1
 80008c0:	431a      	orrs	r2, r3
 80008c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80008c4:	441a      	add	r2, r3
 80008c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80008c8:	441a      	add	r2, r3
 80008ca:	4b39      	ldr	r3, [pc, #228]	; (80009b0 <MD5Transform+0x5e8>)
 80008cc:	4413      	add	r3, r2
 80008ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80008d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80008d2:	ea4f 53f3 	mov.w	r3, r3, ror #23
 80008d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80008d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80008da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80008dc:	4413      	add	r3, r2
 80008de:	64bb      	str	r3, [r7, #72]	; 0x48
  GG (c, d, a, b, x[ 3], S23, 0xf4d50d87); // 27
 80008e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80008e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80008e4:	401a      	ands	r2, r3
 80008e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80008e8:	43d9      	mvns	r1, r3
 80008ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80008ec:	400b      	ands	r3, r1
 80008ee:	431a      	orrs	r2, r3
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	441a      	add	r2, r3
 80008f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80008f6:	441a      	add	r2, r3
 80008f8:	4b2e      	ldr	r3, [pc, #184]	; (80009b4 <MD5Transform+0x5ec>)
 80008fa:	4413      	add	r3, r2
 80008fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80008fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000900:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8000904:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000906:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000908:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800090a:	4413      	add	r3, r2
 800090c:	64fb      	str	r3, [r7, #76]	; 0x4c
  GG (b, c, d, a, x[ 8], S24, 0x455a14ed); // 28
 800090e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000910:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000912:	401a      	ands	r2, r3
 8000914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000916:	43d9      	mvns	r1, r3
 8000918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800091a:	400b      	ands	r3, r1
 800091c:	431a      	orrs	r2, r3
 800091e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000920:	441a      	add	r2, r3
 8000922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000924:	441a      	add	r2, r3
 8000926:	4b24      	ldr	r3, [pc, #144]	; (80009b8 <MD5Transform+0x5f0>)
 8000928:	4413      	add	r3, r2
 800092a:	653b      	str	r3, [r7, #80]	; 0x50
 800092c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800092e:	ea4f 3333 	mov.w	r3, r3, ror #12
 8000932:	653b      	str	r3, [r7, #80]	; 0x50
 8000934:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000938:	4413      	add	r3, r2
 800093a:	653b      	str	r3, [r7, #80]	; 0x50
  GG (a, b, c, d, x[13], S21, 0xa9e3e905); // 29
 800093c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800093e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000940:	401a      	ands	r2, r3
 8000942:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000944:	43d9      	mvns	r1, r3
 8000946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000948:	400b      	ands	r3, r1
 800094a:	431a      	orrs	r2, r3
 800094c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800094e:	441a      	add	r2, r3
 8000950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000952:	441a      	add	r2, r3
 8000954:	4b19      	ldr	r3, [pc, #100]	; (80009bc <MD5Transform+0x5f4>)
 8000956:	4413      	add	r3, r2
 8000958:	657b      	str	r3, [r7, #84]	; 0x54
 800095a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800095c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8000960:	657b      	str	r3, [r7, #84]	; 0x54
 8000962:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000966:	4413      	add	r3, r2
 8000968:	657b      	str	r3, [r7, #84]	; 0x54
  GG (d, a, b, c, x[ 2], S22, 0xfcefa3f8); // 30
 800096a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800096c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800096e:	401a      	ands	r2, r3
 8000970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000972:	43d9      	mvns	r1, r3
 8000974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000976:	400b      	ands	r3, r1
 8000978:	431a      	orrs	r2, r3
 800097a:	693b      	ldr	r3, [r7, #16]
 800097c:	441a      	add	r2, r3
 800097e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000980:	441a      	add	r2, r3
 8000982:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <MD5Transform+0x5f8>)
 8000984:	4413      	add	r3, r2
 8000986:	e01d      	b.n	80009c4 <MD5Transform+0x5fc>
 8000988:	49b40821 	.word	0x49b40821
 800098c:	f61e2562 	.word	0xf61e2562
 8000990:	c040b340 	.word	0xc040b340
 8000994:	265e5a51 	.word	0x265e5a51
 8000998:	e9b6c7aa 	.word	0xe9b6c7aa
 800099c:	d62f105d 	.word	0xd62f105d
 80009a0:	02441453 	.word	0x02441453
 80009a4:	d8a1e681 	.word	0xd8a1e681
 80009a8:	e7d3fbc8 	.word	0xe7d3fbc8
 80009ac:	21e1cde6 	.word	0x21e1cde6
 80009b0:	c33707d6 	.word	0xc33707d6
 80009b4:	f4d50d87 	.word	0xf4d50d87
 80009b8:	455a14ed 	.word	0x455a14ed
 80009bc:	a9e3e905 	.word	0xa9e3e905
 80009c0:	fcefa3f8 	.word	0xfcefa3f8
 80009c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80009c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80009c8:	ea4f 53f3 	mov.w	r3, r3, ror #23
 80009cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80009ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80009d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009d2:	4413      	add	r3, r2
 80009d4:	64bb      	str	r3, [r7, #72]	; 0x48
  GG (c, d, a, b, x[ 7], S23, 0x676f02d9); // 31
 80009d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80009d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009da:	401a      	ands	r2, r3
 80009dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009de:	43d9      	mvns	r1, r3
 80009e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009e2:	400b      	ands	r3, r1
 80009e4:	431a      	orrs	r2, r3
 80009e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e8:	441a      	add	r2, r3
 80009ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80009ec:	441a      	add	r2, r3
 80009ee:	4ba0      	ldr	r3, [pc, #640]	; (8000c70 <MD5Transform+0x8a8>)
 80009f0:	4413      	add	r3, r2
 80009f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80009f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80009f6:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80009fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80009fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80009fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a00:	4413      	add	r3, r2
 8000a02:	64fb      	str	r3, [r7, #76]	; 0x4c
  GG (b, c, d, a, x[12], S24, 0x8d2a4c8a); // 32
 8000a04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a08:	401a      	ands	r2, r3
 8000a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a0c:	43d9      	mvns	r1, r3
 8000a0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a10:	400b      	ands	r3, r1
 8000a12:	431a      	orrs	r2, r3
 8000a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a16:	441a      	add	r2, r3
 8000a18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a1a:	441a      	add	r2, r3
 8000a1c:	4b95      	ldr	r3, [pc, #596]	; (8000c74 <MD5Transform+0x8ac>)
 8000a1e:	4413      	add	r3, r2
 8000a20:	653b      	str	r3, [r7, #80]	; 0x50
 8000a22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a24:	ea4f 3333 	mov.w	r3, r3, ror #12
 8000a28:	653b      	str	r3, [r7, #80]	; 0x50
 8000a2a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a2e:	4413      	add	r3, r2
 8000a30:	653b      	str	r3, [r7, #80]	; 0x50

  // Round 3
  HH (a, b, c, d, x[ 5], S31, 0xfffa3942); // 33
 8000a32:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000a34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a36:	405a      	eors	r2, r3
 8000a38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a3a:	405a      	eors	r2, r3
 8000a3c:	69fb      	ldr	r3, [r7, #28]
 8000a3e:	441a      	add	r2, r3
 8000a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a42:	4413      	add	r3, r2
 8000a44:	f5a3 23b8 	sub.w	r3, r3, #376832	; 0x5c000
 8000a48:	f2a3 63be 	subw	r3, r3, #1726	; 0x6be
 8000a4c:	657b      	str	r3, [r7, #84]	; 0x54
 8000a4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a50:	ea4f 7333 	mov.w	r3, r3, ror #28
 8000a54:	657b      	str	r3, [r7, #84]	; 0x54
 8000a56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000a58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a5a:	4413      	add	r3, r2
 8000a5c:	657b      	str	r3, [r7, #84]	; 0x54
  HH (d, a, b, c, x[ 8], S32, 0x8771f681); // 34
 8000a5e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000a60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a62:	405a      	eors	r2, r3
 8000a64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a66:	405a      	eors	r2, r3
 8000a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6a:	441a      	add	r2, r3
 8000a6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a6e:	441a      	add	r2, r3
 8000a70:	4b81      	ldr	r3, [pc, #516]	; (8000c78 <MD5Transform+0x8b0>)
 8000a72:	4413      	add	r3, r2
 8000a74:	64bb      	str	r3, [r7, #72]	; 0x48
 8000a76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a78:	ea4f 5373 	mov.w	r3, r3, ror #21
 8000a7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8000a7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000a80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a82:	4413      	add	r3, r2
 8000a84:	64bb      	str	r3, [r7, #72]	; 0x48
  HH (c, d, a, b, x[11], S33, 0x6d9d6122); // 35
 8000a86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a8a:	405a      	eors	r2, r3
 8000a8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a8e:	405a      	eors	r2, r3
 8000a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a92:	441a      	add	r2, r3
 8000a94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a96:	441a      	add	r2, r3
 8000a98:	4b78      	ldr	r3, [pc, #480]	; (8000c7c <MD5Transform+0x8b4>)
 8000a9a:	4413      	add	r3, r2
 8000a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000aa0:	ea4f 4333 	mov.w	r3, r3, ror #16
 8000aa4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000aa6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000aa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000aaa:	4413      	add	r3, r2
 8000aac:	64fb      	str	r3, [r7, #76]	; 0x4c
  HH (b, c, d, a, x[14], S34, 0xfde5380c); // 36
 8000aae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000ab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ab2:	405a      	eors	r2, r3
 8000ab4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ab6:	405a      	eors	r2, r3
 8000ab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000aba:	441a      	add	r2, r3
 8000abc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000abe:	441a      	add	r2, r3
 8000ac0:	4b6f      	ldr	r3, [pc, #444]	; (8000c80 <MD5Transform+0x8b8>)
 8000ac2:	4413      	add	r3, r2
 8000ac4:	653b      	str	r3, [r7, #80]	; 0x50
 8000ac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ac8:	ea4f 2373 	mov.w	r3, r3, ror #9
 8000acc:	653b      	str	r3, [r7, #80]	; 0x50
 8000ace:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000ad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ad2:	4413      	add	r3, r2
 8000ad4:	653b      	str	r3, [r7, #80]	; 0x50
  HH (a, b, c, d, x[ 1], S31, 0xa4beea44); // 37
 8000ad6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000ad8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ada:	405a      	eors	r2, r3
 8000adc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ade:	405a      	eors	r2, r3
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	441a      	add	r2, r3
 8000ae4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ae6:	441a      	add	r2, r3
 8000ae8:	4b66      	ldr	r3, [pc, #408]	; (8000c84 <MD5Transform+0x8bc>)
 8000aea:	4413      	add	r3, r2
 8000aec:	657b      	str	r3, [r7, #84]	; 0x54
 8000aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000af0:	ea4f 7333 	mov.w	r3, r3, ror #28
 8000af4:	657b      	str	r3, [r7, #84]	; 0x54
 8000af6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000af8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000afa:	4413      	add	r3, r2
 8000afc:	657b      	str	r3, [r7, #84]	; 0x54
  HH (d, a, b, c, x[ 4], S32, 0x4bdecfa9); // 38
 8000afe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b02:	405a      	eors	r2, r3
 8000b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b06:	405a      	eors	r2, r3
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	441a      	add	r2, r3
 8000b0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000b0e:	441a      	add	r2, r3
 8000b10:	4b5d      	ldr	r3, [pc, #372]	; (8000c88 <MD5Transform+0x8c0>)
 8000b12:	4413      	add	r3, r2
 8000b14:	64bb      	str	r3, [r7, #72]	; 0x48
 8000b16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000b18:	ea4f 5373 	mov.w	r3, r3, ror #21
 8000b1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8000b1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000b20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b22:	4413      	add	r3, r2
 8000b24:	64bb      	str	r3, [r7, #72]	; 0x48
  HH (c, d, a, b, x[ 7], S33, 0xf6bb4b60); // 39
 8000b26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000b28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b2a:	405a      	eors	r2, r3
 8000b2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b2e:	405a      	eors	r2, r3
 8000b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b32:	441a      	add	r2, r3
 8000b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b36:	441a      	add	r2, r3
 8000b38:	4b54      	ldr	r3, [pc, #336]	; (8000c8c <MD5Transform+0x8c4>)
 8000b3a:	4413      	add	r3, r2
 8000b3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b40:	ea4f 4333 	mov.w	r3, r3, ror #16
 8000b44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000b48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000b4a:	4413      	add	r3, r2
 8000b4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  HH (b, c, d, a, x[10], S34, 0xbebfbc70); // 40
 8000b4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000b50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000b52:	405a      	eors	r2, r3
 8000b54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b56:	405a      	eors	r2, r3
 8000b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b5a:	441a      	add	r2, r3
 8000b5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b5e:	441a      	add	r2, r3
 8000b60:	4b4b      	ldr	r3, [pc, #300]	; (8000c90 <MD5Transform+0x8c8>)
 8000b62:	4413      	add	r3, r2
 8000b64:	653b      	str	r3, [r7, #80]	; 0x50
 8000b66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b68:	ea4f 2373 	mov.w	r3, r3, ror #9
 8000b6c:	653b      	str	r3, [r7, #80]	; 0x50
 8000b6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000b70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b72:	4413      	add	r3, r2
 8000b74:	653b      	str	r3, [r7, #80]	; 0x50
  HH (a, b, c, d, x[13], S31, 0x289b7ec6); // 41
 8000b76:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000b78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b7a:	405a      	eors	r2, r3
 8000b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000b7e:	405a      	eors	r2, r3
 8000b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b82:	441a      	add	r2, r3
 8000b84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b86:	441a      	add	r2, r3
 8000b88:	4b42      	ldr	r3, [pc, #264]	; (8000c94 <MD5Transform+0x8cc>)
 8000b8a:	4413      	add	r3, r2
 8000b8c:	657b      	str	r3, [r7, #84]	; 0x54
 8000b8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b90:	ea4f 7333 	mov.w	r3, r3, ror #28
 8000b94:	657b      	str	r3, [r7, #84]	; 0x54
 8000b96:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b9a:	4413      	add	r3, r2
 8000b9c:	657b      	str	r3, [r7, #84]	; 0x54
  HH (d, a, b, c, x[ 0], S32, 0xeaa127fa); // 42
 8000b9e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000ba0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ba2:	405a      	eors	r2, r3
 8000ba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ba6:	405a      	eors	r2, r3
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	441a      	add	r2, r3
 8000bac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000bae:	441a      	add	r2, r3
 8000bb0:	4b39      	ldr	r3, [pc, #228]	; (8000c98 <MD5Transform+0x8d0>)
 8000bb2:	4413      	add	r3, r2
 8000bb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8000bb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000bb8:	ea4f 5373 	mov.w	r3, r3, ror #21
 8000bbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8000bbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000bc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000bc2:	4413      	add	r3, r2
 8000bc4:	64bb      	str	r3, [r7, #72]	; 0x48
  HH (c, d, a, b, x[ 3], S33, 0xd4ef3085); // 43
 8000bc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000bca:	405a      	eors	r2, r3
 8000bcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000bce:	405a      	eors	r2, r3
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	441a      	add	r2, r3
 8000bd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bd6:	441a      	add	r2, r3
 8000bd8:	4b30      	ldr	r3, [pc, #192]	; (8000c9c <MD5Transform+0x8d4>)
 8000bda:	4413      	add	r3, r2
 8000bdc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000be0:	ea4f 4333 	mov.w	r3, r3, ror #16
 8000be4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000be6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000be8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000bea:	4413      	add	r3, r2
 8000bec:	64fb      	str	r3, [r7, #76]	; 0x4c
  HH (b, c, d, a, x[ 6], S34,  0x4881d05); // 44
 8000bee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000bf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000bf2:	405a      	eors	r2, r3
 8000bf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000bf6:	405a      	eors	r2, r3
 8000bf8:	6a3b      	ldr	r3, [r7, #32]
 8000bfa:	441a      	add	r2, r3
 8000bfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000bfe:	441a      	add	r2, r3
 8000c00:	4b27      	ldr	r3, [pc, #156]	; (8000ca0 <MD5Transform+0x8d8>)
 8000c02:	4413      	add	r3, r2
 8000c04:	653b      	str	r3, [r7, #80]	; 0x50
 8000c06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c08:	ea4f 2373 	mov.w	r3, r3, ror #9
 8000c0c:	653b      	str	r3, [r7, #80]	; 0x50
 8000c0e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c12:	4413      	add	r3, r2
 8000c14:	653b      	str	r3, [r7, #80]	; 0x50
  HH (a, b, c, d, x[ 9], S31, 0xd9d4d039); // 45
 8000c16:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c1a:	405a      	eors	r2, r3
 8000c1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c1e:	405a      	eors	r2, r3
 8000c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c22:	441a      	add	r2, r3
 8000c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c26:	441a      	add	r2, r3
 8000c28:	4b1e      	ldr	r3, [pc, #120]	; (8000ca4 <MD5Transform+0x8dc>)
 8000c2a:	4413      	add	r3, r2
 8000c2c:	657b      	str	r3, [r7, #84]	; 0x54
 8000c2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c30:	ea4f 7333 	mov.w	r3, r3, ror #28
 8000c34:	657b      	str	r3, [r7, #84]	; 0x54
 8000c36:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c3a:	4413      	add	r3, r2
 8000c3c:	657b      	str	r3, [r7, #84]	; 0x54
  HH (d, a, b, c, x[12], S32, 0xe6db99e5); // 46
 8000c3e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000c40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c42:	405a      	eors	r2, r3
 8000c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c46:	405a      	eors	r2, r3
 8000c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c4a:	441a      	add	r2, r3
 8000c4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c4e:	441a      	add	r2, r3
 8000c50:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <MD5Transform+0x8e0>)
 8000c52:	4413      	add	r3, r2
 8000c54:	64bb      	str	r3, [r7, #72]	; 0x48
 8000c56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c58:	ea4f 5373 	mov.w	r3, r3, ror #21
 8000c5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8000c5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c62:	4413      	add	r3, r2
 8000c64:	64bb      	str	r3, [r7, #72]	; 0x48
  HH (c, d, a, b, x[15], S33, 0x1fa27cf8); // 47
 8000c66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c6a:	405a      	eors	r2, r3
 8000c6c:	e01e      	b.n	8000cac <MD5Transform+0x8e4>
 8000c6e:	bf00      	nop
 8000c70:	676f02d9 	.word	0x676f02d9
 8000c74:	8d2a4c8a 	.word	0x8d2a4c8a
 8000c78:	8771f681 	.word	0x8771f681
 8000c7c:	6d9d6122 	.word	0x6d9d6122
 8000c80:	fde5380c 	.word	0xfde5380c
 8000c84:	a4beea44 	.word	0xa4beea44
 8000c88:	4bdecfa9 	.word	0x4bdecfa9
 8000c8c:	f6bb4b60 	.word	0xf6bb4b60
 8000c90:	bebfbc70 	.word	0xbebfbc70
 8000c94:	289b7ec6 	.word	0x289b7ec6
 8000c98:	eaa127fa 	.word	0xeaa127fa
 8000c9c:	d4ef3085 	.word	0xd4ef3085
 8000ca0:	04881d05 	.word	0x04881d05
 8000ca4:	d9d4d039 	.word	0xd9d4d039
 8000ca8:	e6db99e5 	.word	0xe6db99e5
 8000cac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000cae:	405a      	eors	r2, r3
 8000cb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cb2:	441a      	add	r2, r3
 8000cb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cb6:	441a      	add	r2, r3
 8000cb8:	4ba2      	ldr	r3, [pc, #648]	; (8000f44 <MD5Transform+0xb7c>)
 8000cba:	4413      	add	r3, r2
 8000cbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cc0:	ea4f 4333 	mov.w	r3, r3, ror #16
 8000cc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000cc6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000cc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cca:	4413      	add	r3, r2
 8000ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
  HH (b, c, d, a, x[ 2], S34, 0xc4ac5665); // 48
 8000cce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000cd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cd2:	405a      	eors	r2, r3
 8000cd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000cd6:	405a      	eors	r2, r3
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	441a      	add	r2, r3
 8000cdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000cde:	441a      	add	r2, r3
 8000ce0:	4b99      	ldr	r3, [pc, #612]	; (8000f48 <MD5Transform+0xb80>)
 8000ce2:	4413      	add	r3, r2
 8000ce4:	653b      	str	r3, [r7, #80]	; 0x50
 8000ce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ce8:	ea4f 2373 	mov.w	r3, r3, ror #9
 8000cec:	653b      	str	r3, [r7, #80]	; 0x50
 8000cee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000cf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cf2:	4413      	add	r3, r2
 8000cf4:	653b      	str	r3, [r7, #80]	; 0x50

  // Round 4
  II (a, b, c, d, x[ 0], S41, 0xf4292244); // 49
 8000cf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cf8:	43da      	mvns	r2, r3
 8000cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000cfc:	431a      	orrs	r2, r3
 8000cfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d00:	405a      	eors	r2, r3
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	441a      	add	r2, r3
 8000d06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d08:	441a      	add	r2, r3
 8000d0a:	4b90      	ldr	r3, [pc, #576]	; (8000f4c <MD5Transform+0xb84>)
 8000d0c:	4413      	add	r3, r2
 8000d0e:	657b      	str	r3, [r7, #84]	; 0x54
 8000d10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d12:	ea4f 63b3 	mov.w	r3, r3, ror #26
 8000d16:	657b      	str	r3, [r7, #84]	; 0x54
 8000d18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000d1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d1c:	4413      	add	r3, r2
 8000d1e:	657b      	str	r3, [r7, #84]	; 0x54
  II (d, a, b, c, x[ 7], S42, 0x432aff97); // 50
 8000d20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d22:	43da      	mvns	r2, r3
 8000d24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d26:	431a      	orrs	r2, r3
 8000d28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d2a:	405a      	eors	r2, r3
 8000d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2e:	441a      	add	r2, r3
 8000d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d32:	441a      	add	r2, r3
 8000d34:	4b86      	ldr	r3, [pc, #536]	; (8000f50 <MD5Transform+0xb88>)
 8000d36:	4413      	add	r3, r2
 8000d38:	64bb      	str	r3, [r7, #72]	; 0x48
 8000d3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d3c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8000d40:	64bb      	str	r3, [r7, #72]	; 0x48
 8000d42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000d44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d46:	4413      	add	r3, r2
 8000d48:	64bb      	str	r3, [r7, #72]	; 0x48
  II (c, d, a, b, x[14], S43, 0xab9423a7); // 51
 8000d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d4c:	43da      	mvns	r2, r3
 8000d4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d50:	431a      	orrs	r2, r3
 8000d52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d54:	405a      	eors	r2, r3
 8000d56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d58:	441a      	add	r2, r3
 8000d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d5c:	441a      	add	r2, r3
 8000d5e:	4b7d      	ldr	r3, [pc, #500]	; (8000f54 <MD5Transform+0xb8c>)
 8000d60:	4413      	add	r3, r2
 8000d62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d66:	ea4f 4373 	mov.w	r3, r3, ror #17
 8000d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000d6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d70:	4413      	add	r3, r2
 8000d72:	64fb      	str	r3, [r7, #76]	; 0x4c
  II (b, c, d, a, x[ 5], S44, 0xfc93a039); // 52
 8000d74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d76:	43da      	mvns	r2, r3
 8000d78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d7a:	431a      	orrs	r2, r3
 8000d7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d7e:	405a      	eors	r2, r3
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	441a      	add	r2, r3
 8000d84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d86:	441a      	add	r2, r3
 8000d88:	4b73      	ldr	r3, [pc, #460]	; (8000f58 <MD5Transform+0xb90>)
 8000d8a:	4413      	add	r3, r2
 8000d8c:	653b      	str	r3, [r7, #80]	; 0x50
 8000d8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d90:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8000d94:	653b      	str	r3, [r7, #80]	; 0x50
 8000d96:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000d98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d9a:	4413      	add	r3, r2
 8000d9c:	653b      	str	r3, [r7, #80]	; 0x50
  II (a, b, c, d, x[12], S41, 0x655b59c3); // 53
 8000d9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000da0:	43da      	mvns	r2, r3
 8000da2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000da4:	431a      	orrs	r2, r3
 8000da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000da8:	405a      	eors	r2, r3
 8000daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dac:	441a      	add	r2, r3
 8000dae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000db0:	441a      	add	r2, r3
 8000db2:	4b6a      	ldr	r3, [pc, #424]	; (8000f5c <MD5Transform+0xb94>)
 8000db4:	4413      	add	r3, r2
 8000db6:	657b      	str	r3, [r7, #84]	; 0x54
 8000db8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000dba:	ea4f 63b3 	mov.w	r3, r3, ror #26
 8000dbe:	657b      	str	r3, [r7, #84]	; 0x54
 8000dc0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000dc4:	4413      	add	r3, r2
 8000dc6:	657b      	str	r3, [r7, #84]	; 0x54
  II (d, a, b, c, x[ 3], S42, 0x8f0ccc92); // 54
 8000dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000dca:	43da      	mvns	r2, r3
 8000dcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000dce:	431a      	orrs	r2, r3
 8000dd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000dd2:	405a      	eors	r2, r3
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	441a      	add	r2, r3
 8000dd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000dda:	441a      	add	r2, r3
 8000ddc:	4b60      	ldr	r3, [pc, #384]	; (8000f60 <MD5Transform+0xb98>)
 8000dde:	4413      	add	r3, r2
 8000de0:	64bb      	str	r3, [r7, #72]	; 0x48
 8000de2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000de4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8000de8:	64bb      	str	r3, [r7, #72]	; 0x48
 8000dea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000dec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000dee:	4413      	add	r3, r2
 8000df0:	64bb      	str	r3, [r7, #72]	; 0x48
  II (c, d, a, b, x[10], S43, 0xffeff47d); // 55
 8000df2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000df4:	43da      	mvns	r2, r3
 8000df6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000dfc:	405a      	eors	r2, r3
 8000dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e00:	441a      	add	r2, r3
 8000e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e04:	4413      	add	r3, r2
 8000e06:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8000e0a:	f6a3 3383 	subw	r3, r3, #2947	; 0xb83
 8000e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e12:	ea4f 4373 	mov.w	r3, r3, ror #17
 8000e16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000e1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e1c:	4413      	add	r3, r2
 8000e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  II (b, c, d, a, x[ 1], S44, 0x85845dd1); // 56
 8000e20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e22:	43da      	mvns	r2, r3
 8000e24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e26:	431a      	orrs	r2, r3
 8000e28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e2a:	405a      	eors	r2, r3
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	441a      	add	r2, r3
 8000e30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e32:	441a      	add	r2, r3
 8000e34:	4b4b      	ldr	r3, [pc, #300]	; (8000f64 <MD5Transform+0xb9c>)
 8000e36:	4413      	add	r3, r2
 8000e38:	653b      	str	r3, [r7, #80]	; 0x50
 8000e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e3c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8000e40:	653b      	str	r3, [r7, #80]	; 0x50
 8000e42:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000e44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e46:	4413      	add	r3, r2
 8000e48:	653b      	str	r3, [r7, #80]	; 0x50
  II (a, b, c, d, x[ 8], S41, 0x6fa87e4f); // 57
 8000e4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e4c:	43da      	mvns	r2, r3
 8000e4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e50:	431a      	orrs	r2, r3
 8000e52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e54:	405a      	eors	r2, r3
 8000e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e58:	441a      	add	r2, r3
 8000e5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e5c:	441a      	add	r2, r3
 8000e5e:	4b42      	ldr	r3, [pc, #264]	; (8000f68 <MD5Transform+0xba0>)
 8000e60:	4413      	add	r3, r2
 8000e62:	657b      	str	r3, [r7, #84]	; 0x54
 8000e64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e66:	ea4f 63b3 	mov.w	r3, r3, ror #26
 8000e6a:	657b      	str	r3, [r7, #84]	; 0x54
 8000e6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000e6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e70:	4413      	add	r3, r2
 8000e72:	657b      	str	r3, [r7, #84]	; 0x54
  II (d, a, b, c, x[15], S42, 0xfe2ce6e0); // 58
 8000e74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e76:	43da      	mvns	r2, r3
 8000e78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e7a:	431a      	orrs	r2, r3
 8000e7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e7e:	405a      	eors	r2, r3
 8000e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e82:	441a      	add	r2, r3
 8000e84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e86:	441a      	add	r2, r3
 8000e88:	4b38      	ldr	r3, [pc, #224]	; (8000f6c <MD5Transform+0xba4>)
 8000e8a:	4413      	add	r3, r2
 8000e8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8000e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e90:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8000e94:	64bb      	str	r3, [r7, #72]	; 0x48
 8000e96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000e98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e9a:	4413      	add	r3, r2
 8000e9c:	64bb      	str	r3, [r7, #72]	; 0x48
  II (c, d, a, b, x[ 6], S43, 0xa3014314); // 59
 8000e9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ea0:	43da      	mvns	r2, r3
 8000ea2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ea4:	431a      	orrs	r2, r3
 8000ea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ea8:	405a      	eors	r2, r3
 8000eaa:	6a3b      	ldr	r3, [r7, #32]
 8000eac:	441a      	add	r2, r3
 8000eae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000eb0:	441a      	add	r2, r3
 8000eb2:	4b2f      	ldr	r3, [pc, #188]	; (8000f70 <MD5Transform+0xba8>)
 8000eb4:	4413      	add	r3, r2
 8000eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000eb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000eba:	ea4f 4373 	mov.w	r3, r3, ror #17
 8000ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000ec0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000ec2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ec4:	4413      	add	r3, r2
 8000ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
  II (b, c, d, a, x[13], S44, 0x4e0811a1); // 60
 8000ec8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000eca:	43da      	mvns	r2, r3
 8000ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ece:	431a      	orrs	r2, r3
 8000ed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ed2:	405a      	eors	r2, r3
 8000ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ed6:	441a      	add	r2, r3
 8000ed8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000eda:	441a      	add	r2, r3
 8000edc:	4b25      	ldr	r3, [pc, #148]	; (8000f74 <MD5Transform+0xbac>)
 8000ede:	4413      	add	r3, r2
 8000ee0:	653b      	str	r3, [r7, #80]	; 0x50
 8000ee2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ee4:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8000ee8:	653b      	str	r3, [r7, #80]	; 0x50
 8000eea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000eec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000eee:	4413      	add	r3, r2
 8000ef0:	653b      	str	r3, [r7, #80]	; 0x50
  II (a, b, c, d, x[ 4], S41, 0xf7537e82); // 61
 8000ef2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ef4:	43da      	mvns	r2, r3
 8000ef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ef8:	431a      	orrs	r2, r3
 8000efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000efc:	405a      	eors	r2, r3
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	441a      	add	r2, r3
 8000f02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f04:	441a      	add	r2, r3
 8000f06:	4b1c      	ldr	r3, [pc, #112]	; (8000f78 <MD5Transform+0xbb0>)
 8000f08:	4413      	add	r3, r2
 8000f0a:	657b      	str	r3, [r7, #84]	; 0x54
 8000f0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f0e:	ea4f 63b3 	mov.w	r3, r3, ror #26
 8000f12:	657b      	str	r3, [r7, #84]	; 0x54
 8000f14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000f16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f18:	4413      	add	r3, r2
 8000f1a:	657b      	str	r3, [r7, #84]	; 0x54
  II (d, a, b, c, x[11], S42, 0xbd3af235); // 62
 8000f1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f1e:	43da      	mvns	r2, r3
 8000f20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f22:	431a      	orrs	r2, r3
 8000f24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f26:	405a      	eors	r2, r3
 8000f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f2a:	441a      	add	r2, r3
 8000f2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f2e:	441a      	add	r2, r3
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <MD5Transform+0xbb4>)
 8000f32:	4413      	add	r3, r2
 8000f34:	64bb      	str	r3, [r7, #72]	; 0x48
 8000f36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f38:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8000f3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8000f3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000f40:	e01e      	b.n	8000f80 <MD5Transform+0xbb8>
 8000f42:	bf00      	nop
 8000f44:	1fa27cf8 	.word	0x1fa27cf8
 8000f48:	c4ac5665 	.word	0xc4ac5665
 8000f4c:	f4292244 	.word	0xf4292244
 8000f50:	432aff97 	.word	0x432aff97
 8000f54:	ab9423a7 	.word	0xab9423a7
 8000f58:	fc93a039 	.word	0xfc93a039
 8000f5c:	655b59c3 	.word	0x655b59c3
 8000f60:	8f0ccc92 	.word	0x8f0ccc92
 8000f64:	85845dd1 	.word	0x85845dd1
 8000f68:	6fa87e4f 	.word	0x6fa87e4f
 8000f6c:	fe2ce6e0 	.word	0xfe2ce6e0
 8000f70:	a3014314 	.word	0xa3014314
 8000f74:	4e0811a1 	.word	0x4e0811a1
 8000f78:	f7537e82 	.word	0xf7537e82
 8000f7c:	bd3af235 	.word	0xbd3af235
 8000f80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f82:	4413      	add	r3, r2
 8000f84:	64bb      	str	r3, [r7, #72]	; 0x48
  II (c, d, a, b, x[ 2], S43, 0x2ad7d2bb); // 63
 8000f86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f88:	43da      	mvns	r2, r3
 8000f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f8c:	431a      	orrs	r2, r3
 8000f8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f90:	405a      	eors	r2, r3
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	441a      	add	r2, r3
 8000f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f98:	441a      	add	r2, r3
 8000f9a:	4b24      	ldr	r3, [pc, #144]	; (800102c <MD5Transform+0xc64>)
 8000f9c:	4413      	add	r3, r2
 8000f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000fa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fa2:	ea4f 4373 	mov.w	r3, r3, ror #17
 8000fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000fa8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000faa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000fac:	4413      	add	r3, r2
 8000fae:	64fb      	str	r3, [r7, #76]	; 0x4c
  II (b, c, d, a, x[ 9], S44, 0xeb86d391); // 64
 8000fb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fb2:	43da      	mvns	r2, r3
 8000fb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fb6:	431a      	orrs	r2, r3
 8000fb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000fba:	405a      	eors	r2, r3
 8000fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fbe:	441a      	add	r2, r3
 8000fc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000fc2:	441a      	add	r2, r3
 8000fc4:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <MD5Transform+0xc68>)
 8000fc6:	4413      	add	r3, r2
 8000fc8:	653b      	str	r3, [r7, #80]	; 0x50
 8000fca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000fcc:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8000fd0:	653b      	str	r3, [r7, #80]	; 0x50
 8000fd2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000fd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fd6:	4413      	add	r3, r2
 8000fd8:	653b      	str	r3, [r7, #80]	; 0x50

  state[0] += a;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fe0:	441a      	add	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	601a      	str	r2, [r3, #0]
  state[1] += b;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3304      	adds	r3, #4
 8000fea:	6819      	ldr	r1, [r3, #0]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3304      	adds	r3, #4
 8000ff0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000ff2:	440a      	add	r2, r1
 8000ff4:	601a      	str	r2, [r3, #0]
  state[2] += c;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	3308      	adds	r3, #8
 8000ffa:	6819      	ldr	r1, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3308      	adds	r3, #8
 8001000:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001002:	440a      	add	r2, r1
 8001004:	601a      	str	r2, [r3, #0]
  state[3] += d;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	330c      	adds	r3, #12
 800100a:	6819      	ldr	r1, [r3, #0]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	330c      	adds	r3, #12
 8001010:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001012:	440a      	add	r2, r1
 8001014:	601a      	str	r2, [r3, #0]

  // Zeroize sensitive information.
  MD5_memset ((char *)x, 0, sizeof (x));
 8001016:	f107 0308 	add.w	r3, r7, #8
 800101a:	2240      	movs	r2, #64	; 0x40
 800101c:	2100      	movs	r1, #0
 800101e:	4618      	mov	r0, r3
 8001020:	f004 ff12 	bl	8005e48 <memset>
}
 8001024:	bf00      	nop
 8001026:	3758      	adds	r7, #88	; 0x58
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	2ad7d2bb 	.word	0x2ad7d2bb
 8001030:	eb86d391 	.word	0xeb86d391

08001034 <MD5Init>:

void MD5Init (MD5_CTX *context)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  context->count[0] = context->count[1] = 0;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	615a      	str	r2, [r3, #20]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	695a      	ldr	r2, [r3, #20]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	611a      	str	r2, [r3, #16]
  // Load magic initialization constants.

  context->state[0] = 0x67452301;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a07      	ldr	r2, [pc, #28]	; (800106c <MD5Init+0x38>)
 800104e:	601a      	str	r2, [r3, #0]
  context->state[1] = 0xefcdab89;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4a07      	ldr	r2, [pc, #28]	; (8001070 <MD5Init+0x3c>)
 8001054:	605a      	str	r2, [r3, #4]
  context->state[2] = 0x98badcfe;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a06      	ldr	r2, [pc, #24]	; (8001074 <MD5Init+0x40>)
 800105a:	609a      	str	r2, [r3, #8]
  context->state[3] = 0x10325476;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a06      	ldr	r2, [pc, #24]	; (8001078 <MD5Init+0x44>)
 8001060:	60da      	str	r2, [r3, #12]
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr
 800106c:	67452301 	.word	0x67452301
 8001070:	efcdab89 	.word	0xefcdab89
 8001074:	98badcfe 	.word	0x98badcfe
 8001078:	10325476 	.word	0x10325476

0800107c <MD5Update>:
// MD5 block update operation. Continues an MD5 message-digest
// operation, processing another message block, and updating the
// context.

void MD5Update ( MD5_CTX *context, const uint8_t *input, uint32_t inputLen )
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
  uint16_t i, index, partLen;

  // Compute number of bytes mod 64
  index = (uint16_t)((context->count[0] >> 3) & 0x3F);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	691b      	ldr	r3, [r3, #16]
 800108c:	08db      	lsrs	r3, r3, #3
 800108e:	b29b      	uxth	r3, r3
 8001090:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001094:	82bb      	strh	r3, [r7, #20]

  // Update number of bits
  if ((context->count[0] += (inputLen << 3)) < (inputLen << 3))
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	691a      	ldr	r2, [r3, #16]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	00db      	lsls	r3, r3, #3
 800109e:	441a      	add	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	611a      	str	r2, [r3, #16]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	691a      	ldr	r2, [r3, #16]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d204      	bcs.n	80010ba <MD5Update+0x3e>
    context->count[1]++;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	695b      	ldr	r3, [r3, #20]
 80010b4:	1c5a      	adds	r2, r3, #1
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	615a      	str	r2, [r3, #20]

  context->count[1] += (inputLen >> 29);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	695a      	ldr	r2, [r3, #20]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	0f5b      	lsrs	r3, r3, #29
 80010c2:	441a      	add	r2, r3
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	615a      	str	r2, [r3, #20]

  partLen = 64 - index;
 80010c8:	8abb      	ldrh	r3, [r7, #20]
 80010ca:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80010ce:	827b      	strh	r3, [r7, #18]

  // Transform as many times as possible.

  if (inputLen >= partLen)
 80010d0:	8a7b      	ldrh	r3, [r7, #18]
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d325      	bcc.n	8001124 <MD5Update+0xa8>
  {
    MD5_memcpy(&context->buffer[index], (char *)input, (int)partLen);
 80010d8:	8abb      	ldrh	r3, [r7, #20]
 80010da:	3318      	adds	r3, #24
 80010dc:	68fa      	ldr	r2, [r7, #12]
 80010de:	4413      	add	r3, r2
 80010e0:	8a7a      	ldrh	r2, [r7, #18]
 80010e2:	68b9      	ldr	r1, [r7, #8]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f004 fea4 	bl	8005e32 <memcpy>
    MD5Transform (context->state, context->buffer);
 80010ea:	68fa      	ldr	r2, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	3318      	adds	r3, #24
 80010f0:	4619      	mov	r1, r3
 80010f2:	4610      	mov	r0, r2
 80010f4:	f7ff f968 	bl	80003c8 <MD5Transform>

    for (i = partLen; i + 63 < inputLen; i += 64)
 80010f8:	8a7b      	ldrh	r3, [r7, #18]
 80010fa:	82fb      	strh	r3, [r7, #22]
 80010fc:	e009      	b.n	8001112 <MD5Update+0x96>
       MD5Transform (context->state, &input[i]);
 80010fe:	68f8      	ldr	r0, [r7, #12]
 8001100:	8afb      	ldrh	r3, [r7, #22]
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	4413      	add	r3, r2
 8001106:	4619      	mov	r1, r3
 8001108:	f7ff f95e 	bl	80003c8 <MD5Transform>
    for (i = partLen; i + 63 < inputLen; i += 64)
 800110c:	8afb      	ldrh	r3, [r7, #22]
 800110e:	3340      	adds	r3, #64	; 0x40
 8001110:	82fb      	strh	r3, [r7, #22]
 8001112:	8afb      	ldrh	r3, [r7, #22]
 8001114:	333f      	adds	r3, #63	; 0x3f
 8001116:	461a      	mov	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4293      	cmp	r3, r2
 800111c:	d8ef      	bhi.n	80010fe <MD5Update+0x82>

    index = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	82bb      	strh	r3, [r7, #20]
 8001122:	e001      	b.n	8001128 <MD5Update+0xac>
  }
  else
    i = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	82fb      	strh	r3, [r7, #22]

  // Buffer remaining input
  MD5_memcpy(&context->buffer[index], (char *)&input[i],(int)(inputLen-i));
 8001128:	8abb      	ldrh	r3, [r7, #20]
 800112a:	3318      	adds	r3, #24
 800112c:	68fa      	ldr	r2, [r7, #12]
 800112e:	18d0      	adds	r0, r2, r3
 8001130:	8afb      	ldrh	r3, [r7, #22]
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	18d1      	adds	r1, r2, r3
 8001136:	8afb      	ldrh	r3, [r7, #22]
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	461a      	mov	r2, r3
 800113e:	f004 fe78 	bl	8005e32 <memcpy>
}
 8001142:	bf00      	nop
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <MD5Final>:

// MD5 finalization. Ends an MD5 message-digest operation, writing the
// the message digest and zeroizing the context.
void MD5Final ( uint8_t digest[16], MD5_CTX *context )
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
  uint8_t bits[8];
  uint16_t index, padLen;

  // Save number of bits
  Encode (bits, context->count, 8);
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	f103 0110 	add.w	r1, r3, #16
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	2208      	movs	r2, #8
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff f8aa 	bl	80002bc <Encode>

  // Pad out to 56 mod 64.

  index = (uint16_t)((context->count[0] >> 3) & 0x3f);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	691b      	ldr	r3, [r3, #16]
 800116c:	08db      	lsrs	r3, r3, #3
 800116e:	b29b      	uxth	r3, r3
 8001170:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001174:	82fb      	strh	r3, [r7, #22]
  padLen = (index < 56) ? (56 - index) : (120 - index);
 8001176:	8afb      	ldrh	r3, [r7, #22]
 8001178:	2b37      	cmp	r3, #55	; 0x37
 800117a:	d804      	bhi.n	8001186 <MD5Final+0x3a>
 800117c:	8afb      	ldrh	r3, [r7, #22]
 800117e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8001182:	b29b      	uxth	r3, r3
 8001184:	e003      	b.n	800118e <MD5Final+0x42>
 8001186:	8afb      	ldrh	r3, [r7, #22]
 8001188:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 800118c:	b29b      	uxth	r3, r3
 800118e:	82bb      	strh	r3, [r7, #20]
  MD5Update (context, PADDING, (uint32_t)padLen);
 8001190:	8abb      	ldrh	r3, [r7, #20]
 8001192:	461a      	mov	r2, r3
 8001194:	490c      	ldr	r1, [pc, #48]	; (80011c8 <MD5Final+0x7c>)
 8001196:	6838      	ldr	r0, [r7, #0]
 8001198:	f7ff ff70 	bl	800107c <MD5Update>

  // Append length (before padding)
  MD5Update (context, bits, 8L);
 800119c:	f107 030c 	add.w	r3, r7, #12
 80011a0:	2208      	movs	r2, #8
 80011a2:	4619      	mov	r1, r3
 80011a4:	6838      	ldr	r0, [r7, #0]
 80011a6:	f7ff ff69 	bl	800107c <MD5Update>

  // Store state in digest
  Encode (digest, context->state, 16);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	2210      	movs	r2, #16
 80011ae:	4619      	mov	r1, r3
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff f883 	bl	80002bc <Encode>

  // Zeroize sensitive information.
  MD5_memset ((char *)context, 0, sizeof (*context));
 80011b6:	2258      	movs	r2, #88	; 0x58
 80011b8:	2100      	movs	r1, #0
 80011ba:	6838      	ldr	r0, [r7, #0]
 80011bc:	f004 fe44 	bl	8005e48 <memset>
}
 80011c0:	bf00      	nop
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	080087e0 	.word	0x080087e0

080011cc <rf24_init>:
#include "rf24.h"
#include "rf24_network/rf24_worker.h"
#include "rf24_network/rf24_network.h"

void rf24_init()
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
	rf24_network_init();
 80011d0:	f002 fc16 	bl	8003a00 <rf24_network_init>
}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <rf24_debug_enable>:
bool rf24_debug_enabled = true;
bool rf24_debug_source_enable[5];
bool rf24_debug_msg_type_enable[5];

void rf24_debug_enable()
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
	rf24_debug_enabled = true;
 80011de:	4b12      	ldr	r3, [pc, #72]	; (8001228 <rf24_debug_enable+0x50>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<5; i++) rf24_debug_source_enable[i] = true;
 80011e4:	2300      	movs	r3, #0
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	e007      	b.n	80011fa <rf24_debug_enable+0x22>
 80011ea:	4a10      	ldr	r2, [pc, #64]	; (800122c <rf24_debug_enable+0x54>)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4413      	add	r3, r2
 80011f0:	2201      	movs	r2, #1
 80011f2:	701a      	strb	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3301      	adds	r3, #1
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b04      	cmp	r3, #4
 80011fe:	ddf4      	ble.n	80011ea <rf24_debug_enable+0x12>
	for(int i=0; i<5; i++) rf24_debug_msg_type_enable[i] = true;
 8001200:	2300      	movs	r3, #0
 8001202:	603b      	str	r3, [r7, #0]
 8001204:	e007      	b.n	8001216 <rf24_debug_enable+0x3e>
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <rf24_debug_enable+0x58>)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	4413      	add	r3, r2
 800120c:	2201      	movs	r2, #1
 800120e:	701a      	strb	r2, [r3, #0]
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	3301      	adds	r3, #1
 8001214:	603b      	str	r3, [r7, #0]
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	2b04      	cmp	r3, #4
 800121a:	ddf4      	ble.n	8001206 <rf24_debug_enable+0x2e>
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	2000005c 	.word	0x2000005c
 800122c:	200006e4 	.word	0x200006e4
 8001230:	2000065c 	.word	0x2000065c

08001234 <rf24_debug_disable>:

void rf24_debug_disable()
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
	rf24_debug_enabled = false;
 8001238:	4b03      	ldr	r3, [pc, #12]	; (8001248 <rf24_debug_disable+0x14>)
 800123a:	2200      	movs	r2, #0
 800123c:	701a      	strb	r2, [r3, #0]
}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	bc80      	pop	{r7}
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	2000005c 	.word	0x2000005c

0800124c <rf24_debug>:
	rf24_debug_msg_type msg_type,
	uint8_t frame_subtype,
	uint8_t frame_subtype_reference,
	rf24_mac_addr *receiver,
	char* format, ...)
{
 800124c:	b590      	push	{r4, r7, lr}
 800124e:	b08d      	sub	sp, #52	; 0x34
 8001250:	af00      	add	r7, sp, #0
 8001252:	4604      	mov	r4, r0
 8001254:	4608      	mov	r0, r1
 8001256:	4611      	mov	r1, r2
 8001258:	461a      	mov	r2, r3
 800125a:	4623      	mov	r3, r4
 800125c:	71fb      	strb	r3, [r7, #7]
 800125e:	4603      	mov	r3, r0
 8001260:	71bb      	strb	r3, [r7, #6]
 8001262:	460b      	mov	r3, r1
 8001264:	717b      	strb	r3, [r7, #5]
 8001266:	4613      	mov	r3, r2
 8001268:	713b      	strb	r3, [r7, #4]
	if(rf24_debug_enabled /*&& rf24_debug_source_enable[source] &&  rf24_debug_msg_type_enable[msg_type]*/)
 800126a:	4b32      	ldr	r3, [pc, #200]	; (8001334 <rf24_debug+0xe8>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d05b      	beq.n	800132a <rf24_debug+0xde>
	{
		// Print source & msg_type
		rf24_printf("%-10s %-7s",
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	4a30      	ldr	r2, [pc, #192]	; (8001338 <rf24_debug+0xec>)
 8001276:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800127a:	79bb      	ldrb	r3, [r7, #6]
 800127c:	4a2f      	ldr	r2, [pc, #188]	; (800133c <rf24_debug+0xf0>)
 800127e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001282:	461a      	mov	r2, r3
 8001284:	482e      	ldr	r0, [pc, #184]	; (8001340 <rf24_debug+0xf4>)
 8001286:	f000 f865 	bl	8001354 <rf24_printf>
					rf24_debug_source_string[source],
					rf24_debug_msg_type_string[msg_type]);

		// Print subtype & reference
		char string[30] = "";
 800128a:	2300      	movs	r3, #0
 800128c:	613b      	str	r3, [r7, #16]
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
 800129c:	611a      	str	r2, [r3, #16]
 800129e:	615a      	str	r2, [r3, #20]
 80012a0:	831a      	strh	r2, [r3, #24]

		if(frame_subtype > 0)
 80012a2:	797b      	ldrb	r3, [r7, #5]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d01b      	beq.n	80012e0 <rf24_debug+0x94>
		{
			if(frame_subtype_reference > 0){
 80012a8:	793b      	ldrb	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d00e      	beq.n	80012cc <rf24_debug+0x80>
				sprintf(string, "%s(%s)",
 80012ae:	797b      	ldrb	r3, [r7, #5]
 80012b0:	4a24      	ldr	r2, [pc, #144]	; (8001344 <rf24_debug+0xf8>)
 80012b2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80012b6:	793b      	ldrb	r3, [r7, #4]
 80012b8:	4a22      	ldr	r2, [pc, #136]	; (8001344 <rf24_debug+0xf8>)
 80012ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012be:	f107 0010 	add.w	r0, r7, #16
 80012c2:	460a      	mov	r2, r1
 80012c4:	4920      	ldr	r1, [pc, #128]	; (8001348 <rf24_debug+0xfc>)
 80012c6:	f004 fed5 	bl	8006074 <siprintf>
 80012ca:	e009      	b.n	80012e0 <rf24_debug+0x94>
						rf24_mac_frame_subtype_string_short[frame_subtype],
						rf24_mac_frame_subtype_string_short[frame_subtype_reference]);
			}
			else{
				sprintf(string, "%s",
 80012cc:	797b      	ldrb	r3, [r7, #5]
 80012ce:	4a1d      	ldr	r2, [pc, #116]	; (8001344 <rf24_debug+0xf8>)
 80012d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012d4:	f107 0310 	add.w	r3, r7, #16
 80012d8:	4611      	mov	r1, r2
 80012da:	4618      	mov	r0, r3
 80012dc:	f004 fef9 	bl	80060d2 <strcpy>
						rf24_mac_frame_subtype_string_short[frame_subtype]);
			}
		}

		rf24_printf("%-20s", string);
 80012e0:	f107 0310 	add.w	r3, r7, #16
 80012e4:	4619      	mov	r1, r3
 80012e6:	4819      	ldr	r0, [pc, #100]	; (800134c <rf24_debug+0x100>)
 80012e8:	f000 f834 	bl	8001354 <rf24_printf>

		// Print receiver address
		string[0] = '\0';
 80012ec:	2300      	movs	r3, #0
 80012ee:	743b      	strb	r3, [r7, #16]
		if(receiver != NULL) sprintf(string, "%s", decimal_to_string(receiver->bytes, 6, ':'));
 80012f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d00c      	beq.n	8001310 <rf24_debug+0xc4>
 80012f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012f8:	223a      	movs	r2, #58	; 0x3a
 80012fa:	2106      	movs	r1, #6
 80012fc:	4618      	mov	r0, r3
 80012fe:	f000 f907 	bl	8001510 <decimal_to_string>
 8001302:	4602      	mov	r2, r0
 8001304:	f107 0310 	add.w	r3, r7, #16
 8001308:	4611      	mov	r1, r2
 800130a:	4618      	mov	r0, r3
 800130c:	f004 fee1 	bl	80060d2 <strcpy>
		rf24_printf("%-24s", string);
 8001310:	f107 0310 	add.w	r3, r7, #16
 8001314:	4619      	mov	r1, r3
 8001316:	480e      	ldr	r0, [pc, #56]	; (8001350 <rf24_debug+0x104>)
 8001318:	f000 f81c 	bl	8001354 <rf24_printf>

		// Print vargs
		va_list args;
		va_start(args, format);
 800131c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001320:	60fb      	str	r3, [r7, #12]
		rf24_printf_vargs(format, args);
 8001322:	68f9      	ldr	r1, [r7, #12]
 8001324:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001326:	f000 f827 	bl	8001378 <rf24_printf_vargs>
		va_end(args);
	}
}
 800132a:	bf00      	nop
 800132c:	3734      	adds	r7, #52	; 0x34
 800132e:	46bd      	mov	sp, r7
 8001330:	bd90      	pop	{r4, r7, pc}
 8001332:	bf00      	nop
 8001334:	2000005c 	.word	0x2000005c
 8001338:	20000028 	.word	0x20000028
 800133c:	20000040 	.word	0x20000040
 8001340:	08006cc0 	.word	0x08006cc0
 8001344:	20000004 	.word	0x20000004
 8001348:	08006ccc 	.word	0x08006ccc
 800134c:	08006cd4 	.word	0x08006cd4
 8001350:	08006cdc 	.word	0x08006cdc

08001354 <rf24_printf>:

void rf24_printf(char* format, ...)
{
 8001354:	b40f      	push	{r0, r1, r2, r3}
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, format);
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	607b      	str	r3, [r7, #4]
	rf24_printf_vargs(format, args);
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	6938      	ldr	r0, [r7, #16]
 8001366:	f000 f807 	bl	8001378 <rf24_printf_vargs>
	va_end(args);
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001374:	b004      	add	sp, #16
 8001376:	4770      	bx	lr

08001378 <rf24_printf_vargs>:

void rf24_printf_vargs(char* format, va_list args)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	; 0x28
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
	while (*format != '\0')
 8001382:	e0b8      	b.n	80014f6 <rf24_printf_vargs+0x17e>
	{
		if (*format == '%')
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b25      	cmp	r3, #37	; 0x25
 800138a:	f040 80ac 	bne.w	80014e6 <rf24_printf_vargs+0x16e>
		{
			format++;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	3301      	adds	r3, #1
 8001392:	607b      	str	r3, [r7, #4]

			switch(*format)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b64      	cmp	r3, #100	; 0x64
 800139a:	d03e      	beq.n	800141a <rf24_printf_vargs+0xa2>
 800139c:	2b64      	cmp	r3, #100	; 0x64
 800139e:	dc04      	bgt.n	80013aa <rf24_printf_vargs+0x32>
 80013a0:	2b2d      	cmp	r3, #45	; 0x2d
 80013a2:	d048      	beq.n	8001436 <rf24_printf_vargs+0xbe>
 80013a4:	2b63      	cmp	r3, #99	; 0x63
 80013a6:	d02e      	beq.n	8001406 <rf24_printf_vargs+0x8e>
 80013a8:	e0a2      	b.n	80014f0 <rf24_printf_vargs+0x178>
 80013aa:	2b6c      	cmp	r3, #108	; 0x6c
 80013ac:	d003      	beq.n	80013b6 <rf24_printf_vargs+0x3e>
 80013ae:	2b73      	cmp	r3, #115	; 0x73
 80013b0:	f000 808f 	beq.w	80014d2 <rf24_printf_vargs+0x15a>
 80013b4:	e09c      	b.n	80014f0 <rf24_printf_vargs+0x178>
			{
				case 'l':
				{
					format++;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3301      	adds	r3, #1
 80013ba:	607b      	str	r3, [r7, #4]

					switch(*format)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b73      	cmp	r3, #115	; 0x73
 80013c2:	d011      	beq.n	80013e8 <rf24_printf_vargs+0x70>
 80013c4:	2b75      	cmp	r3, #117	; 0x75
 80013c6:	d000      	beq.n	80013ca <rf24_printf_vargs+0x52>
							itoa(ls, debug_buffer, 10);
							rf24_stm32f1xx_usart_write_str(debug_buffer);
							break;
						}
					}
					break;
 80013c8:	e092      	b.n	80014f0 <rf24_printf_vargs+0x178>
							unsigned long int lu = va_arg(args, unsigned long int);
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	1d1a      	adds	r2, r3, #4
 80013ce:	603a      	str	r2, [r7, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	61fb      	str	r3, [r7, #28]
							itoa(lu, debug_buffer, 10);
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	220a      	movs	r2, #10
 80013d8:	494b      	ldr	r1, [pc, #300]	; (8001508 <rf24_printf_vargs+0x190>)
 80013da:	4618      	mov	r0, r3
 80013dc:	f004 fd08 	bl	8005df0 <itoa>
							rf24_stm32f1xx_usart_write_str(debug_buffer);
 80013e0:	4849      	ldr	r0, [pc, #292]	; (8001508 <rf24_printf_vargs+0x190>)
 80013e2:	f003 fe47 	bl	8005074 <rf24_stm32f1xx_usart_write_str>
							break;
 80013e6:	e00d      	b.n	8001404 <rf24_printf_vargs+0x8c>
							long int ls = va_arg(args, long int);
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	1d1a      	adds	r2, r3, #4
 80013ec:	603a      	str	r2, [r7, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	61bb      	str	r3, [r7, #24]
							itoa(ls, debug_buffer, 10);
 80013f2:	220a      	movs	r2, #10
 80013f4:	4944      	ldr	r1, [pc, #272]	; (8001508 <rf24_printf_vargs+0x190>)
 80013f6:	69b8      	ldr	r0, [r7, #24]
 80013f8:	f004 fcfa 	bl	8005df0 <itoa>
							rf24_stm32f1xx_usart_write_str(debug_buffer);
 80013fc:	4842      	ldr	r0, [pc, #264]	; (8001508 <rf24_printf_vargs+0x190>)
 80013fe:	f003 fe39 	bl	8005074 <rf24_stm32f1xx_usart_write_str>
							break;
 8001402:	bf00      	nop
					break;
 8001404:	e074      	b.n	80014f0 <rf24_printf_vargs+0x178>
				}
				case 'c':
				{
					char c = va_arg(args, int);
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	1d1a      	adds	r2, r3, #4
 800140a:	603a      	str	r2, [r7, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	74fb      	strb	r3, [r7, #19]
					rf24_stm32f1xx_usart_write_byte(c);
 8001410:	7cfb      	ldrb	r3, [r7, #19]
 8001412:	4618      	mov	r0, r3
 8001414:	f003 fe12 	bl	800503c <rf24_stm32f1xx_usart_write_byte>
					break;
 8001418:	e06a      	b.n	80014f0 <rf24_printf_vargs+0x178>
				}
				case 'd':
				{
					int d = va_arg(args, int);
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	1d1a      	adds	r2, r3, #4
 800141e:	603a      	str	r2, [r7, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	617b      	str	r3, [r7, #20]
					itoa(d, debug_buffer, 10);
 8001424:	220a      	movs	r2, #10
 8001426:	4938      	ldr	r1, [pc, #224]	; (8001508 <rf24_printf_vargs+0x190>)
 8001428:	6978      	ldr	r0, [r7, #20]
 800142a:	f004 fce1 	bl	8005df0 <itoa>
					rf24_stm32f1xx_usart_write_str(debug_buffer);
 800142e:	4836      	ldr	r0, [pc, #216]	; (8001508 <rf24_printf_vargs+0x190>)
 8001430:	f003 fe20 	bl	8005074 <rf24_stm32f1xx_usart_write_str>
					break;
 8001434:	e05c      	b.n	80014f0 <rf24_printf_vargs+0x178>
				}
				case '-':
				{
					format++;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	3301      	adds	r3, #1
 800143a:	607b      	str	r3, [r7, #4]
					uint8_t index = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					char spaces_string[4];
					uint8_t spaces_number = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	74bb      	strb	r3, [r7, #18]

					while(*format != 's')
 8001446:	e016      	b.n	8001476 <rf24_printf_vargs+0xfe>
					{
						if(index > 2) rf24_stm32f1xx_usart_write_str("[format: %-123s]");
 8001448:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800144c:	2b02      	cmp	r3, #2
 800144e:	d902      	bls.n	8001456 <rf24_printf_vargs+0xde>
 8001450:	482e      	ldr	r0, [pc, #184]	; (800150c <rf24_printf_vargs+0x194>)
 8001452:	f003 fe0f 	bl	8005074 <rf24_stm32f1xx_usart_write_str>
						spaces_string[index++] = *format;
 8001456:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800145a:	1c5a      	adds	r2, r3, #1
 800145c:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8001460:	4619      	mov	r1, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	781a      	ldrb	r2, [r3, #0]
 8001466:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800146a:	440b      	add	r3, r1
 800146c:	f803 2c20 	strb.w	r2, [r3, #-32]
						format++;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3301      	adds	r3, #1
 8001474:	607b      	str	r3, [r7, #4]
					while(*format != 's')
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b73      	cmp	r3, #115	; 0x73
 800147c:	d1e4      	bne.n	8001448 <rf24_printf_vargs+0xd0>
					}

					spaces_string[index] = '\0';
 800147e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001482:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001486:	4413      	add	r3, r2
 8001488:	2200      	movs	r2, #0
 800148a:	f803 2c20 	strb.w	r2, [r3, #-32]
					spaces_number = atoi(spaces_string);
 800148e:	f107 0308 	add.w	r3, r7, #8
 8001492:	4618      	mov	r0, r3
 8001494:	f004 fc6b 	bl	8005d6e <atoi>
 8001498:	4603      	mov	r3, r0
 800149a:	74bb      	strb	r3, [r7, #18]
					char *str = va_arg(args, char*);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	1d1a      	adds	r2, r3, #4
 80014a0:	603a      	str	r2, [r7, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	60fb      	str	r3, [r7, #12]
					uint8_t string_length = rf24_stm32f1xx_usart_write_str(str);
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	f003 fde4 	bl	8005074 <rf24_stm32f1xx_usart_write_str>
 80014ac:	4603      	mov	r3, r0
 80014ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

					while(string_length < spaces_number)
 80014b2:	e007      	b.n	80014c4 <rf24_printf_vargs+0x14c>
					{
						string_length++;
 80014b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014b8:	3301      	adds	r3, #1
 80014ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						rf24_stm32f1xx_usart_write_byte(' ');
 80014be:	2020      	movs	r0, #32
 80014c0:	f003 fdbc 	bl	800503c <rf24_stm32f1xx_usart_write_byte>
					while(string_length < spaces_number)
 80014c4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80014c8:	7cbb      	ldrb	r3, [r7, #18]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d3f2      	bcc.n	80014b4 <rf24_printf_vargs+0x13c>
					}

					break;
 80014ce:	bf00      	nop
 80014d0:	e00e      	b.n	80014f0 <rf24_printf_vargs+0x178>
				}
				case 's':
				{
					char *str = va_arg(args, char*);
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	1d1a      	adds	r2, r3, #4
 80014d6:	603a      	str	r2, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	623b      	str	r3, [r7, #32]
					rf24_stm32f1xx_usart_write_str(str);
 80014dc:	6a38      	ldr	r0, [r7, #32]
 80014de:	f003 fdc9 	bl	8005074 <rf24_stm32f1xx_usart_write_str>
					break;
 80014e2:	bf00      	nop
 80014e4:	e004      	b.n	80014f0 <rf24_printf_vargs+0x178>
				}
				default:{}
			}
		}
		else rf24_stm32f1xx_usart_write_byte(*format);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f003 fda6 	bl	800503c <rf24_stm32f1xx_usart_write_byte>

		format++;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3301      	adds	r3, #1
 80014f4:	607b      	str	r3, [r7, #4]
	while (*format != '\0')
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f47f af42 	bne.w	8001384 <rf24_printf_vargs+0xc>
	}
}
 8001500:	bf00      	nop
 8001502:	3728      	adds	r7, #40	; 0x28
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	200006ec 	.word	0x200006ec
 800150c:	08006ce4 	.word	0x08006ce4

08001510 <decimal_to_string>:

char* decimal_to_string(uint8_t* arr, uint8_t length, char space)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	70fb      	strb	r3, [r7, #3]
 800151c:	4613      	mov	r3, r2
 800151e:	70bb      	strb	r3, [r7, #2]
	//char *str = (char*) malloc(length+1);

	uint8_t i = 0, k = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	73fb      	strb	r3, [r7, #15]
 8001524:	2300      	movs	r3, #0
 8001526:	73bb      	strb	r3, [r7, #14]

	for (i = 0; i < (length-1); i++)
 8001528:	2300      	movs	r3, #0
 800152a:	73fb      	strb	r3, [r7, #15]
 800152c:	e013      	b.n	8001556 <decimal_to_string+0x46>
		k += sprintf(&converter_buffer[k], "%d%c", arr[i], space);
 800152e:	7bbb      	ldrb	r3, [r7, #14]
 8001530:	4a13      	ldr	r2, [pc, #76]	; (8001580 <decimal_to_string+0x70>)
 8001532:	1898      	adds	r0, r3, r2
 8001534:	7bfb      	ldrb	r3, [r7, #15]
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	4413      	add	r3, r2
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	461a      	mov	r2, r3
 800153e:	78bb      	ldrb	r3, [r7, #2]
 8001540:	4910      	ldr	r1, [pc, #64]	; (8001584 <decimal_to_string+0x74>)
 8001542:	f004 fd97 	bl	8006074 <siprintf>
 8001546:	4603      	mov	r3, r0
 8001548:	b2da      	uxtb	r2, r3
 800154a:	7bbb      	ldrb	r3, [r7, #14]
 800154c:	4413      	add	r3, r2
 800154e:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < (length-1); i++)
 8001550:	7bfb      	ldrb	r3, [r7, #15]
 8001552:	3301      	adds	r3, #1
 8001554:	73fb      	strb	r3, [r7, #15]
 8001556:	7bfa      	ldrb	r2, [r7, #15]
 8001558:	78fb      	ldrb	r3, [r7, #3]
 800155a:	3b01      	subs	r3, #1
 800155c:	429a      	cmp	r2, r3
 800155e:	dbe6      	blt.n	800152e <decimal_to_string+0x1e>

	sprintf(&converter_buffer[k], "%d", arr[i]);
 8001560:	7bbb      	ldrb	r3, [r7, #14]
 8001562:	4a07      	ldr	r2, [pc, #28]	; (8001580 <decimal_to_string+0x70>)
 8001564:	1898      	adds	r0, r3, r2
 8001566:	7bfb      	ldrb	r3, [r7, #15]
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	4413      	add	r3, r2
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	461a      	mov	r2, r3
 8001570:	4905      	ldr	r1, [pc, #20]	; (8001588 <decimal_to_string+0x78>)
 8001572:	f004 fd7f 	bl	8006074 <siprintf>

	return converter_buffer;
 8001576:	4b02      	ldr	r3, [pc, #8]	; (8001580 <decimal_to_string+0x70>)
}
 8001578:	4618      	mov	r0, r3
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000664 	.word	0x20000664
 8001584:	08006cf8 	.word	0x08006cf8
 8001588:	08006d00 	.word	0x08006d00

0800158c <decimal_to_binary>:

char* decimal_to_binary(int n)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
	int c, d, count;
	char *pointer;

	count = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	613b      	str	r3, [r7, #16]
	pointer = (char*) malloc(8+1);
 8001598:	2009      	movs	r0, #9
 800159a:	f004 fc2b 	bl	8005df4 <malloc>
 800159e:	4603      	mov	r3, r0
 80015a0:	60fb      	str	r3, [r7, #12]

	if (pointer == NULL){}

	for (c = 7 ; c >= 0 ; c--)
 80015a2:	2307      	movs	r3, #7
 80015a4:	617b      	str	r3, [r7, #20]
 80015a6:	e01a      	b.n	80015de <decimal_to_binary+0x52>
	{
		d = n >> c;
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	fa42 f303 	asr.w	r3, r2, r3
 80015b0:	60bb      	str	r3, [r7, #8]

		if (d & 1)
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d005      	beq.n	80015c8 <decimal_to_binary+0x3c>
		*(pointer+count) = 1 + '0';
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	4413      	add	r3, r2
 80015c2:	2231      	movs	r2, #49	; 0x31
 80015c4:	701a      	strb	r2, [r3, #0]
 80015c6:	e004      	b.n	80015d2 <decimal_to_binary+0x46>
		else
		*(pointer+count) = 0 + '0';
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	4413      	add	r3, r2
 80015ce:	2230      	movs	r2, #48	; 0x30
 80015d0:	701a      	strb	r2, [r3, #0]

		count++;
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	3301      	adds	r3, #1
 80015d6:	613b      	str	r3, [r7, #16]
	for (c = 7 ; c >= 0 ; c--)
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	3b01      	subs	r3, #1
 80015dc:	617b      	str	r3, [r7, #20]
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	dae1      	bge.n	80015a8 <decimal_to_binary+0x1c>
	}
	*(pointer+count) = '\0';
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	4413      	add	r3, r2
 80015ea:	2200      	movs	r2, #0
 80015ec:	701a      	strb	r2, [r3, #0]

	return pointer;
 80015ee:	68fb      	ldr	r3, [r7, #12]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <rf24_module_read_register>:
// FUNCTIONS

// REGISTER ACCESS

uint8_t rf24_module_read_register(uint8_t register_name)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]
	rf24_stm32f1xx_spi_csn_low();
 8001602:	f003 fc81 	bl	8004f08 <rf24_stm32f1xx_spi_csn_low>

	rf24_stm32f1xx_spi_shift_byte(R_REGISTER | (REGISTER_MASK & register_name));
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	f003 031f 	and.w	r3, r3, #31
 800160c:	b2db      	uxtb	r3, r3
 800160e:	4618      	mov	r0, r3
 8001610:	f003 fc92 	bl	8004f38 <rf24_stm32f1xx_spi_shift_byte>

	uint8_t value = rf24_stm32f1xx_spi_shift_byte(NOP);
 8001614:	20ff      	movs	r0, #255	; 0xff
 8001616:	f003 fc8f 	bl	8004f38 <rf24_stm32f1xx_spi_shift_byte>
 800161a:	4603      	mov	r3, r0
 800161c:	73fb      	strb	r3, [r7, #15]

	rf24_stm32f1xx_spi_csn_high();
 800161e:	f003 fc7f 	bl	8004f20 <rf24_stm32f1xx_spi_csn_high>

	return value;
 8001622:	7bfb      	ldrb	r3, [r7, #15]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <rf24_module_write_register>:

uint8_t rf24_module_write_register(uint8_t register_name, uint8_t data)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	460a      	mov	r2, r1
 8001636:	71fb      	strb	r3, [r7, #7]
 8001638:	4613      	mov	r3, r2
 800163a:	71bb      	strb	r3, [r7, #6]
	rf24_stm32f1xx_spi_csn_low();
 800163c:	f003 fc64 	bl	8004f08 <rf24_stm32f1xx_spi_csn_low>

	rf24_stm32f1xx_spi_shift_byte(W_REGISTER | (REGISTER_MASK & register_name));
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	f003 031f 	and.w	r3, r3, #31
 8001646:	b2db      	uxtb	r3, r3
 8001648:	f043 0320 	orr.w	r3, r3, #32
 800164c:	b2db      	uxtb	r3, r3
 800164e:	4618      	mov	r0, r3
 8001650:	f003 fc72 	bl	8004f38 <rf24_stm32f1xx_spi_shift_byte>

	uint8_t status = rf24_stm32f1xx_spi_shift_byte(data);
 8001654:	79bb      	ldrb	r3, [r7, #6]
 8001656:	4618      	mov	r0, r3
 8001658:	f003 fc6e 	bl	8004f38 <rf24_stm32f1xx_spi_shift_byte>
 800165c:	4603      	mov	r3, r0
 800165e:	73fb      	strb	r3, [r7, #15]

	rf24_stm32f1xx_spi_csn_high();
 8001660:	f003 fc5e 	bl	8004f20 <rf24_stm32f1xx_spi_csn_high>

	return status;
 8001664:	7bfb      	ldrb	r3, [r7, #15]
}
 8001666:	4618      	mov	r0, r3
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <rf24_module_readwrite_register>:

void rf24_module_readwrite_register(rf24_module_read_write read_write, uint8_t register_name, uint8_t *data_inout, uint8_t length)
{
 800166e:	b590      	push	{r4, r7, lr}
 8001670:	b085      	sub	sp, #20
 8001672:	af00      	add	r7, sp, #0
 8001674:	603a      	str	r2, [r7, #0]
 8001676:	461a      	mov	r2, r3
 8001678:	4603      	mov	r3, r0
 800167a:	71fb      	strb	r3, [r7, #7]
 800167c:	460b      	mov	r3, r1
 800167e:	71bb      	strb	r3, [r7, #6]
 8001680:	4613      	mov	r3, r2
 8001682:	717b      	strb	r3, [r7, #5]
	if (read_write == write && register_name != W_TX_PAYLOAD && register_name != W_TX_PAYLOAD_NO_ACK)
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d108      	bne.n	800169c <rf24_module_readwrite_register+0x2e>
 800168a:	79bb      	ldrb	r3, [r7, #6]
 800168c:	2ba0      	cmp	r3, #160	; 0xa0
 800168e:	d005      	beq.n	800169c <rf24_module_readwrite_register+0x2e>
 8001690:	79bb      	ldrb	r3, [r7, #6]
 8001692:	2bb0      	cmp	r3, #176	; 0xb0
 8001694:	d002      	beq.n	800169c <rf24_module_readwrite_register+0x2e>
	{
		register_name = W_REGISTER + register_name;
 8001696:	79bb      	ldrb	r3, [r7, #6]
 8001698:	3320      	adds	r3, #32
 800169a:	71bb      	strb	r3, [r7, #6]
	}

	rf24_stm32f1xx_spi_csn_low();
 800169c:	f003 fc34 	bl	8004f08 <rf24_stm32f1xx_spi_csn_low>

	rf24_stm32f1xx_spi_shift_byte(register_name);
 80016a0:	79bb      	ldrb	r3, [r7, #6]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f003 fc48 	bl	8004f38 <rf24_stm32f1xx_spi_shift_byte>

	for(int i=0; i<length; i++)
 80016a8:	2300      	movs	r3, #0
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	e017      	b.n	80016de <rf24_module_readwrite_register+0x70>
	{
		if(read_write == read)
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d107      	bne.n	80016c4 <rf24_module_readwrite_register+0x56>
		{
			data_inout[i] = rf24_stm32f1xx_spi_shift_byte(NOP);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	683a      	ldr	r2, [r7, #0]
 80016b8:	18d4      	adds	r4, r2, r3
 80016ba:	20ff      	movs	r0, #255	; 0xff
 80016bc:	f003 fc3c 	bl	8004f38 <rf24_stm32f1xx_spi_shift_byte>
 80016c0:	4603      	mov	r3, r0
 80016c2:	7023      	strb	r3, [r4, #0]
		}
		if(read_write == write)
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d106      	bne.n	80016d8 <rf24_module_readwrite_register+0x6a>
		{
			rf24_stm32f1xx_spi_shift_byte(data_inout[i]);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	4413      	add	r3, r2
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f003 fc30 	bl	8004f38 <rf24_stm32f1xx_spi_shift_byte>
	for(int i=0; i<length; i++)
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	3301      	adds	r3, #1
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	797b      	ldrb	r3, [r7, #5]
 80016e0:	68fa      	ldr	r2, [r7, #12]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	dbe3      	blt.n	80016ae <rf24_module_readwrite_register+0x40>
		}
	}

	rf24_stm32f1xx_spi_csn_high();
 80016e6:	f003 fc1b 	bl	8004f20 <rf24_stm32f1xx_spi_csn_high>
}
 80016ea:	bf00      	nop
 80016ec:	3714      	adds	r7, #20
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd90      	pop	{r4, r7, pc}
	...

080016f4 <rf24_module_write_attribute>:

// FUNCTON ACCESS

bool rf24_module_write_attribute(rf24_module_attribute *attribute, rf24_module_attribute_value *value_in)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
	switch(attribute->type)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b03      	cmp	r3, #3
 8001704:	d035      	beq.n	8001772 <rf24_module_write_attribute+0x7e>
 8001706:	2b05      	cmp	r3, #5
 8001708:	d065      	beq.n	80017d6 <rf24_module_write_attribute+0xe2>
 800170a:	2b01      	cmp	r3, #1
 800170c:	d16d      	bne.n	80017ea <rf24_module_write_attribute+0xf6>
	{
		/* w1: set/clear bit in register */
		case w1_rw:
		{
			if(value_in->w1 >= attribute->w1.min && value_in->w1 <= attribute->w1.max)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	781a      	ldrb	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	791b      	ldrb	r3, [r3, #4]
 8001716:	429a      	cmp	r2, r3
 8001718:	d326      	bcc.n	8001768 <rf24_module_write_attribute+0x74>
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	781a      	ldrb	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	795b      	ldrb	r3, [r3, #5]
 8001722:	429a      	cmp	r2, r3
 8001724:	d820      	bhi.n	8001768 <rf24_module_write_attribute+0x74>
			{
				uint8_t rf24_module_register = rf24_module_read_register(attribute->reg_addr) & attribute->mask;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	785b      	ldrb	r3, [r3, #1]
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff ff64 	bl	80015f8 <rf24_module_read_register>
 8001730:	4603      	mov	r3, r0
 8001732:	461a      	mov	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	789b      	ldrb	r3, [r3, #2]
 8001738:	4013      	ands	r3, r2
 800173a:	73bb      	strb	r3, [r7, #14]
				rf24_module_register |= ( (value_in->w1) << attribute->mnemonic );
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	461a      	mov	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	78db      	ldrb	r3, [r3, #3]
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	b25a      	sxtb	r2, r3
 800174c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001750:	4313      	orrs	r3, r2
 8001752:	b25b      	sxtb	r3, r3
 8001754:	73bb      	strb	r3, [r7, #14]
				rf24_module_write_register(attribute->reg_addr, rf24_module_register);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	785b      	ldrb	r3, [r3, #1]
 800175a:	7bba      	ldrb	r2, [r7, #14]
 800175c:	4611      	mov	r1, r2
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff ff64 	bl	800162c <rf24_module_write_register>
				return true;
 8001764:	2301      	movs	r3, #1
 8001766:	e041      	b.n	80017ec <rf24_module_write_attribute+0xf8>
			}
			else
			{
				#ifdef DEBUG
					rf24_stm32f1xx_usart_write_line("[i] input of wrong value or wrong format!");
 8001768:	4822      	ldr	r0, [pc, #136]	; (80017f4 <rf24_module_write_attribute+0x100>)
 800176a:	f003 fc9e 	bl	80050aa <rf24_stm32f1xx_usart_write_line>
				#endif
				return false;
 800176e:	2300      	movs	r3, #0
 8001770:	e03c      	b.n	80017ec <rf24_module_write_attribute+0xf8>
		}

		/* w8: set/clear bits of register */
		case w8_rw:
		{
			if(value_in->w8 >= attribute->w8.min && value_in->w8 <= attribute->w8.max)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	785a      	ldrb	r2, [r3, #1]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	791b      	ldrb	r3, [r3, #4]
 800177a:	429a      	cmp	r2, r3
 800177c:	d326      	bcc.n	80017cc <rf24_module_write_attribute+0xd8>
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	785a      	ldrb	r2, [r3, #1]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	795b      	ldrb	r3, [r3, #5]
 8001786:	429a      	cmp	r2, r3
 8001788:	d820      	bhi.n	80017cc <rf24_module_write_attribute+0xd8>
			{
				uint8_t rf24_module_register = rf24_module_read_register(attribute->reg_addr) & attribute->mask;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	785b      	ldrb	r3, [r3, #1]
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff ff32 	bl	80015f8 <rf24_module_read_register>
 8001794:	4603      	mov	r3, r0
 8001796:	461a      	mov	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	789b      	ldrb	r3, [r3, #2]
 800179c:	4013      	ands	r3, r2
 800179e:	73fb      	strb	r3, [r7, #15]
				rf24_module_register |= (value_in->w8) << attribute->mnemonic;
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	785b      	ldrb	r3, [r3, #1]
 80017a4:	461a      	mov	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	78db      	ldrb	r3, [r3, #3]
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	b25a      	sxtb	r2, r3
 80017b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	b25b      	sxtb	r3, r3
 80017b8:	73fb      	strb	r3, [r7, #15]
				rf24_module_write_register(attribute->reg_addr, rf24_module_register);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	785b      	ldrb	r3, [r3, #1]
 80017be:	7bfa      	ldrb	r2, [r7, #15]
 80017c0:	4611      	mov	r1, r2
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff ff32 	bl	800162c <rf24_module_write_register>
				return true;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e00f      	b.n	80017ec <rf24_module_write_attribute+0xf8>
			}
			else
			{
				#ifdef DEBUG
					rf24_stm32f1xx_usart_write_line("[i] input of wrong value or wrong format!");
 80017cc:	4809      	ldr	r0, [pc, #36]	; (80017f4 <rf24_module_write_attribute+0x100>)
 80017ce:	f003 fc6c 	bl	80050aa <rf24_stm32f1xx_usart_write_line>
				#endif
				return false;
 80017d2:	2300      	movs	r3, #0
 80017d4:	e00a      	b.n	80017ec <rf24_module_write_attribute+0xf8>
		}

		/* w40: write into register w40 (5x8byte)*/
		case w40_rw:
		{
			rf24_module_readwrite_register(write, attribute->reg_addr, value_in->w40, 5);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	7859      	ldrb	r1, [r3, #1]
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685a      	ldr	r2, [r3, #4]
 80017de:	2305      	movs	r3, #5
 80017e0:	2001      	movs	r0, #1
 80017e2:	f7ff ff44 	bl	800166e <rf24_module_readwrite_register>
			return true;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e000      	b.n	80017ec <rf24_module_write_attribute+0xf8>
		}
		default:break;
	}

	return false;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	08006f60 	.word	0x08006f60

080017f8 <rf24_module_read_attribute>:

bool rf24_module_read_attribute(rf24_module_attribute *attribute, rf24_module_attribute_value *value_out)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
	switch(attribute->type){
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b05      	cmp	r3, #5
 8001808:	d84f      	bhi.n	80018aa <rf24_module_read_attribute+0xb2>
 800180a:	a201      	add	r2, pc, #4	; (adr r2, 8001810 <rf24_module_read_attribute+0x18>)
 800180c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001810:	08001829 	.word	0x08001829
 8001814:	08001829 	.word	0x08001829
 8001818:	08001865 	.word	0x08001865
 800181c:	08001865 	.word	0x08001865
 8001820:	08001897 	.word	0x08001897
 8001824:	08001897 	.word	0x08001897

		case w1_r:
		case w1_rw:{
			uint8_t reg = rf24_module_read_register(attribute->reg_addr) & ~(attribute->mask);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	785b      	ldrb	r3, [r3, #1]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fee3 	bl	80015f8 <rf24_module_read_register>
 8001832:	4603      	mov	r3, r0
 8001834:	b25a      	sxtb	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	789b      	ldrb	r3, [r3, #2]
 800183a:	b25b      	sxtb	r3, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	b25b      	sxtb	r3, r3
 8001840:	4013      	ands	r3, r2
 8001842:	b25b      	sxtb	r3, r3
 8001844:	737b      	strb	r3, [r7, #13]
			uint8_t reg_value = reg >> attribute->mnemonic;
 8001846:	7b7b      	ldrb	r3, [r7, #13]
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	78d2      	ldrb	r2, [r2, #3]
 800184c:	4113      	asrs	r3, r2
 800184e:	733b      	strb	r3, [r7, #12]
			value_out->w1 = reg_value;
 8001850:	7b3b      	ldrb	r3, [r7, #12]
 8001852:	2b00      	cmp	r3, #0
 8001854:	bf14      	ite	ne
 8001856:	2301      	movne	r3, #1
 8001858:	2300      	moveq	r3, #0
 800185a:	b2da      	uxtb	r2, r3
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	701a      	strb	r2, [r3, #0]
			return true;
 8001860:	2301      	movs	r3, #1
 8001862:	e023      	b.n	80018ac <rf24_module_read_attribute+0xb4>
		}

		case w8_r:
		case w8_rw:
		{
			uint8_t reg = rf24_module_read_register(attribute->reg_addr) & ~(attribute->mask);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	785b      	ldrb	r3, [r3, #1]
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fec5 	bl	80015f8 <rf24_module_read_register>
 800186e:	4603      	mov	r3, r0
 8001870:	b25a      	sxtb	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	789b      	ldrb	r3, [r3, #2]
 8001876:	b25b      	sxtb	r3, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	b25b      	sxtb	r3, r3
 800187c:	4013      	ands	r3, r2
 800187e:	b25b      	sxtb	r3, r3
 8001880:	73fb      	strb	r3, [r7, #15]
			uint8_t reg_value = reg >> attribute->mnemonic;
 8001882:	7bfb      	ldrb	r3, [r7, #15]
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	78d2      	ldrb	r2, [r2, #3]
 8001888:	4113      	asrs	r3, r2
 800188a:	73bb      	strb	r3, [r7, #14]
			value_out->w8 = reg_value;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	7bba      	ldrb	r2, [r7, #14]
 8001890:	705a      	strb	r2, [r3, #1]
			return true;
 8001892:	2301      	movs	r3, #1
 8001894:	e00a      	b.n	80018ac <rf24_module_read_attribute+0xb4>
		}

		case w40_r:
		case w40_rw:
		{
			rf24_module_readwrite_register(read, attribute->reg_addr, value_out->w40, 5);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	7859      	ldrb	r1, [r3, #1]
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	2305      	movs	r3, #5
 80018a0:	2000      	movs	r0, #0
 80018a2:	f7ff fee4 	bl	800166e <rf24_module_readwrite_register>
			return true;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e000      	b.n	80018ac <rf24_module_read_attribute+0xb4>
		}
	}

	return false;
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <rf24_module_value_w1>:

rf24_module_attribute_value* rf24_module_value_w1(bool value){
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	71fb      	strb	r3, [r7, #7]
	value_in.w1 = value;
 80018be:	4a04      	ldr	r2, [pc, #16]	; (80018d0 <rf24_module_value_w1+0x1c>)
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	7013      	strb	r3, [r2, #0]
	return &value_in;
 80018c4:	4b02      	ldr	r3, [pc, #8]	; (80018d0 <rf24_module_value_w1+0x1c>)
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr
 80018d0:	20000600 	.word	0x20000600

080018d4 <rf24_module_value_w8>:

rf24_module_attribute_value* rf24_module_value_w8(uint8_t value){
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]
	value_in.w8 = value;
 80018de:	4a04      	ldr	r2, [pc, #16]	; (80018f0 <rf24_module_value_w8+0x1c>)
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	7053      	strb	r3, [r2, #1]
	return &value_in;
 80018e4:	4b02      	ldr	r3, [pc, #8]	; (80018f0 <rf24_module_value_w8+0x1c>)
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr
 80018f0:	20000600 	.word	0x20000600

080018f4 <rf24_module_value_w40>:

rf24_module_attribute_value* rf24_module_value_w40(uint8_t *value, uint8_t value_length){
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	460b      	mov	r3, r1
 80018fe:	70fb      	strb	r3, [r7, #3]
	value_in.w40 = value;
 8001900:	4a05      	ldr	r2, [pc, #20]	; (8001918 <rf24_module_value_w40+0x24>)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6053      	str	r3, [r2, #4]
	value_in.length = value_length;
 8001906:	4a04      	ldr	r2, [pc, #16]	; (8001918 <rf24_module_value_w40+0x24>)
 8001908:	78fb      	ldrb	r3, [r7, #3]
 800190a:	7213      	strb	r3, [r2, #8]
	return &value_in;
 800190c:	4b02      	ldr	r3, [pc, #8]	; (8001918 <rf24_module_value_w40+0x24>)
}
 800190e:	4618      	mov	r0, r3
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr
 8001918:	20000600 	.word	0x20000600

0800191c <rf24_module_set_ce>:

// NRF24L01 INTERNAL FUNCTIONS

void rf24_module_set_ce(rf24_stm32f1xx_pin_state ce_state)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	71fb      	strb	r3, [r7, #7]
	switch(ce_state)
 8001926:	79fb      	ldrb	r3, [r7, #7]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d005      	beq.n	8001938 <rf24_module_set_ce+0x1c>
 800192c:	2b01      	cmp	r3, #1
 800192e:	d000      	beq.n	8001932 <rf24_module_set_ce+0x16>
	{
		case high: rf24_stm32f1xx_ce_high(); break;
		case low: rf24_stm32f1xx_ce_low(); break;
	}
}
 8001930:	e005      	b.n	800193e <rf24_module_set_ce+0x22>
		case high: rf24_stm32f1xx_ce_high(); break;
 8001932:	f003 fa01 	bl	8004d38 <rf24_stm32f1xx_ce_high>
 8001936:	e002      	b.n	800193e <rf24_module_set_ce+0x22>
		case low: rf24_stm32f1xx_ce_low(); break;
 8001938:	f003 fa0a 	bl	8004d50 <rf24_stm32f1xx_ce_low>
 800193c:	bf00      	nop
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
	...

08001948 <rf24_module_set_prim_rx>:
// NRF24L01 USER EXPORT FUNCTIONS

// REGISTER ACCESS FUNCTIONS

void rf24_module_set_prim_rx(rf24_stm32f1xx_pin_state prim_rx_state)
{
 8001948:	b590      	push	{r4, r7, lr}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	71fb      	strb	r3, [r7, #7]
	switch(prim_rx_state)
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d00d      	beq.n	8001974 <rf24_module_set_prim_rx+0x2c>
 8001958:	2b01      	cmp	r3, #1
 800195a:	d000      	beq.n	800195e <rf24_module_set_prim_rx+0x16>
			break;
		case low:
			rf24_module_write_attribute(rf24_module_attributes.prim_rx, rf24_module_value_w1(false));
			break;
	}
}
 800195c:	e015      	b.n	800198a <rf24_module_set_prim_rx+0x42>
			rf24_module_write_attribute(rf24_module_attributes.prim_rx, rf24_module_value_w1(true));
 800195e:	4b0d      	ldr	r3, [pc, #52]	; (8001994 <rf24_module_set_prim_rx+0x4c>)
 8001960:	681c      	ldr	r4, [r3, #0]
 8001962:	2001      	movs	r0, #1
 8001964:	f7ff ffa6 	bl	80018b4 <rf24_module_value_w1>
 8001968:	4603      	mov	r3, r0
 800196a:	4619      	mov	r1, r3
 800196c:	4620      	mov	r0, r4
 800196e:	f7ff fec1 	bl	80016f4 <rf24_module_write_attribute>
			break;
 8001972:	e00a      	b.n	800198a <rf24_module_set_prim_rx+0x42>
			rf24_module_write_attribute(rf24_module_attributes.prim_rx, rf24_module_value_w1(false));
 8001974:	4b07      	ldr	r3, [pc, #28]	; (8001994 <rf24_module_set_prim_rx+0x4c>)
 8001976:	681c      	ldr	r4, [r3, #0]
 8001978:	2000      	movs	r0, #0
 800197a:	f7ff ff9b 	bl	80018b4 <rf24_module_value_w1>
 800197e:	4603      	mov	r3, r0
 8001980:	4619      	mov	r1, r3
 8001982:	4620      	mov	r0, r4
 8001984:	f7ff feb6 	bl	80016f4 <rf24_module_write_attribute>
			break;
 8001988:	bf00      	nop
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	bd90      	pop	{r4, r7, pc}
 8001992:	bf00      	nop
 8001994:	20000060 	.word	0x20000060

08001998 <rf24_module_power_up>:

void rf24_module_power_up()
{
 8001998:	b598      	push	{r3, r4, r7, lr}
 800199a:	af00      	add	r7, sp, #0
	rf24_module_write_attribute(rf24_module_attributes.pwr_up, rf24_module_value_w1(true));
 800199c:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <rf24_module_power_up+0x1c>)
 800199e:	685c      	ldr	r4, [r3, #4]
 80019a0:	2001      	movs	r0, #1
 80019a2:	f7ff ff87 	bl	80018b4 <rf24_module_value_w1>
 80019a6:	4603      	mov	r3, r0
 80019a8:	4619      	mov	r1, r3
 80019aa:	4620      	mov	r0, r4
 80019ac:	f7ff fea2 	bl	80016f4 <rf24_module_write_attribute>
}
 80019b0:	bf00      	nop
 80019b2:	bd98      	pop	{r3, r4, r7, pc}
 80019b4:	20000060 	.word	0x20000060

080019b8 <rf24_module_enable_crc>:
{
	rf24_module_write_attribute(rf24_module_attributes.pwr_up, rf24_module_value_w1(false));
}

void rf24_module_enable_crc()
{
 80019b8:	b598      	push	{r3, r4, r7, lr}
 80019ba:	af00      	add	r7, sp, #0
	rf24_module_write_attribute(rf24_module_attributes.en_crc, rf24_module_value_w1(true));
 80019bc:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <rf24_module_enable_crc+0x1c>)
 80019be:	68dc      	ldr	r4, [r3, #12]
 80019c0:	2001      	movs	r0, #1
 80019c2:	f7ff ff77 	bl	80018b4 <rf24_module_value_w1>
 80019c6:	4603      	mov	r3, r0
 80019c8:	4619      	mov	r1, r3
 80019ca:	4620      	mov	r0, r4
 80019cc:	f7ff fe92 	bl	80016f4 <rf24_module_write_attribute>
}
 80019d0:	bf00      	nop
 80019d2:	bd98      	pop	{r3, r4, r7, pc}
 80019d4:	20000060 	.word	0x20000060

080019d8 <rf24_module_disable_crc>:

void rf24_module_disable_crc()
{
 80019d8:	b598      	push	{r3, r4, r7, lr}
 80019da:	af00      	add	r7, sp, #0
	rf24_module_write_attribute(rf24_module_attributes.en_crc, rf24_module_value_w1(false));
 80019dc:	4b05      	ldr	r3, [pc, #20]	; (80019f4 <rf24_module_disable_crc+0x1c>)
 80019de:	68dc      	ldr	r4, [r3, #12]
 80019e0:	2000      	movs	r0, #0
 80019e2:	f7ff ff67 	bl	80018b4 <rf24_module_value_w1>
 80019e6:	4603      	mov	r3, r0
 80019e8:	4619      	mov	r1, r3
 80019ea:	4620      	mov	r0, r4
 80019ec:	f7ff fe82 	bl	80016f4 <rf24_module_write_attribute>
}
 80019f0:	bf00      	nop
 80019f2:	bd98      	pop	{r3, r4, r7, pc}
 80019f4:	20000060 	.word	0x20000060

080019f8 <rf24_module_crc_enabled>:

bool rf24_module_crc_enabled()
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
	rf24_module_read_attribute(rf24_module_attributes.en_crc, &value_out);
 80019fc:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <rf24_module_crc_enabled+0x18>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	4904      	ldr	r1, [pc, #16]	; (8001a14 <rf24_module_crc_enabled+0x1c>)
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff fef8 	bl	80017f8 <rf24_module_read_attribute>
	return value_out.w1;
 8001a08:	4b02      	ldr	r3, [pc, #8]	; (8001a14 <rf24_module_crc_enabled+0x1c>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20000060 	.word	0x20000060
 8001a14:	20000644 	.word	0x20000644

08001a18 <rf24_module_set_crc_length>:

void rf24_module_set_crc_length(rf24_module_crc_length crc_length)
{
 8001a18:	b590      	push	{r4, r7, lr}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	71fb      	strb	r3, [r7, #7]
	rf24_module_write_attribute(rf24_module_attributes.crc0, rf24_module_value_w1(crc_length));
 8001a22:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <rf24_module_set_crc_length+0x34>)
 8001a24:	689c      	ldr	r4, [r3, #8]
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	bf14      	ite	ne
 8001a2c:	2301      	movne	r3, #1
 8001a2e:	2300      	moveq	r3, #0
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff ff3e 	bl	80018b4 <rf24_module_value_w1>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4620      	mov	r0, r4
 8001a3e:	f7ff fe59 	bl	80016f4 <rf24_module_write_attribute>
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd90      	pop	{r4, r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000060 	.word	0x20000060

08001a50 <rf24_module_get_crc_length>:

rf24_module_crc_length rf24_module_get_crc_length()
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
	rf24_module_read_attribute(rf24_module_attributes.crc0, &value_out);
 8001a54:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <rf24_module_get_crc_length+0x18>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	4904      	ldr	r1, [pc, #16]	; (8001a6c <rf24_module_get_crc_length+0x1c>)
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff fecc 	bl	80017f8 <rf24_module_read_attribute>
	return (rf24_module_crc_length) value_out.w1;
 8001a60:	4b02      	ldr	r3, [pc, #8]	; (8001a6c <rf24_module_get_crc_length+0x1c>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20000060 	.word	0x20000060
 8001a6c:	20000644 	.word	0x20000644

08001a70 <rf24_module_enable_max_retries_interrupt>:

void rf24_module_enable_max_retries_interrupt()
{
 8001a70:	b598      	push	{r3, r4, r7, lr}
 8001a72:	af00      	add	r7, sp, #0
	rf24_module_write_attribute(rf24_module_attributes.mask_max_rt, rf24_module_value_w1(false));
 8001a74:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <rf24_module_enable_max_retries_interrupt+0x1c>)
 8001a76:	691c      	ldr	r4, [r3, #16]
 8001a78:	2000      	movs	r0, #0
 8001a7a:	f7ff ff1b 	bl	80018b4 <rf24_module_value_w1>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	4619      	mov	r1, r3
 8001a82:	4620      	mov	r0, r4
 8001a84:	f7ff fe36 	bl	80016f4 <rf24_module_write_attribute>
}
 8001a88:	bf00      	nop
 8001a8a:	bd98      	pop	{r3, r4, r7, pc}
 8001a8c:	20000060 	.word	0x20000060

08001a90 <rf24_module_enable_tx_data_sent_interrupt>:
{
	rf24_module_write_attribute(rf24_module_attributes.mask_max_rt, rf24_module_value_w1(true));
}

void rf24_module_enable_tx_data_sent_interrupt()
{
 8001a90:	b598      	push	{r3, r4, r7, lr}
 8001a92:	af00      	add	r7, sp, #0
	rf24_module_write_attribute(rf24_module_attributes.mask_tx_ds, rf24_module_value_w1(false));
 8001a94:	4b05      	ldr	r3, [pc, #20]	; (8001aac <rf24_module_enable_tx_data_sent_interrupt+0x1c>)
 8001a96:	695c      	ldr	r4, [r3, #20]
 8001a98:	2000      	movs	r0, #0
 8001a9a:	f7ff ff0b 	bl	80018b4 <rf24_module_value_w1>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4620      	mov	r0, r4
 8001aa4:	f7ff fe26 	bl	80016f4 <rf24_module_write_attribute>
}
 8001aa8:	bf00      	nop
 8001aaa:	bd98      	pop	{r3, r4, r7, pc}
 8001aac:	20000060 	.word	0x20000060

08001ab0 <rf24_module_enable_rx_data_read_interrupt>:
{
	rf24_module_write_attribute(rf24_module_attributes.mask_tx_ds, rf24_module_value_w1(true));
}

void rf24_module_enable_rx_data_read_interrupt()
{
 8001ab0:	b598      	push	{r3, r4, r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
	rf24_module_write_attribute(rf24_module_attributes.mask_rx_dr, rf24_module_value_w1(false));
 8001ab4:	4b05      	ldr	r3, [pc, #20]	; (8001acc <rf24_module_enable_rx_data_read_interrupt+0x1c>)
 8001ab6:	699c      	ldr	r4, [r3, #24]
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f7ff fefb 	bl	80018b4 <rf24_module_value_w1>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4620      	mov	r0, r4
 8001ac4:	f7ff fe16 	bl	80016f4 <rf24_module_write_attribute>
}
 8001ac8:	bf00      	nop
 8001aca:	bd98      	pop	{r3, r4, r7, pc}
 8001acc:	20000060 	.word	0x20000060

08001ad0 <rf24_module_enable_rx_pipe>:
		rf24_module_write_register(EN_AA, rf24_module_read_register(EN_AA) | (1<<rx_pipes));
	}
}

void rf24_module_enable_rx_pipe(rf24_module_rx_pipes rx_pipes)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	71fb      	strb	r3, [r7, #7]
	rf24_module_write_register(EN_RXADDR, rf24_module_read_register(EN_RXADDR) | (1<<rx_pipes));
 8001ada:	2002      	movs	r0, #2
 8001adc:	f7ff fd8c 	bl	80015f8 <rf24_module_read_register>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	b25a      	sxtb	r2, r3
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8001aec:	b25b      	sxtb	r3, r3
 8001aee:	4313      	orrs	r3, r2
 8001af0:	b25b      	sxtb	r3, r3
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	4619      	mov	r1, r3
 8001af6:	2002      	movs	r0, #2
 8001af8:	f7ff fd98 	bl	800162c <rf24_module_write_register>
}
 8001afc:	bf00      	nop
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <rf24_module_set_address_width>:

void rf24_module_set_address_width(rf24_module_address_width address_width)
{
 8001b04:	b590      	push	{r4, r7, lr}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	71fb      	strb	r3, [r7, #7]
	rf24_module_write_attribute(rf24_module_attributes.aw, rf24_module_value_w8(address_width - rf24_module_address_width_offset));
 8001b0e:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <rf24_module_set_address_width+0x2c>)
 8001b10:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	3b02      	subs	r3, #2
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff fedb 	bl	80018d4 <rf24_module_value_w8>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	4619      	mov	r1, r3
 8001b22:	4620      	mov	r0, r4
 8001b24:	f7ff fde6 	bl	80016f4 <rf24_module_write_attribute>
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd90      	pop	{r4, r7, pc}
 8001b30:	20000060 	.word	0x20000060

08001b34 <rf24_module_get_address_width>:

rf24_module_address_width rf24_module_get_address_width()
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
	rf24_module_read_attribute(rf24_module_attributes.aw, &value_out);
 8001b38:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <rf24_module_get_address_width+0x1c>)
 8001b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3c:	4905      	ldr	r1, [pc, #20]	; (8001b54 <rf24_module_get_address_width+0x20>)
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff fe5a 	bl	80017f8 <rf24_module_read_attribute>
	return (rf24_module_address_width) value_out.w8 + rf24_module_address_width_offset;
 8001b44:	4b03      	ldr	r3, [pc, #12]	; (8001b54 <rf24_module_get_address_width+0x20>)
 8001b46:	785b      	ldrb	r3, [r3, #1]
 8001b48:	3302      	adds	r3, #2
 8001b4a:	b2db      	uxtb	r3, r3
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	20000060 	.word	0x20000060
 8001b54:	20000644 	.word	0x20000644

08001b58 <rf24_module_set_autoretransmit_delay>:

void rf24_module_set_autoretransmit_delay(rf24_module_autoretransmit_delay autoretransmit_delay)
{
 8001b58:	b590      	push	{r4, r7, lr}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	71fb      	strb	r3, [r7, #7]
	rf24_module_write_attribute(rf24_module_attributes.ard, rf24_module_value_w8(autoretransmit_delay));
 8001b62:	4b07      	ldr	r3, [pc, #28]	; (8001b80 <rf24_module_set_autoretransmit_delay+0x28>)
 8001b64:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 8001b66:	79fb      	ldrb	r3, [r7, #7]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff feb3 	bl	80018d4 <rf24_module_value_w8>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	4619      	mov	r1, r3
 8001b72:	4620      	mov	r0, r4
 8001b74:	f7ff fdbe 	bl	80016f4 <rf24_module_write_attribute>
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd90      	pop	{r4, r7, pc}
 8001b80:	20000060 	.word	0x20000060

08001b84 <rf24_module_get_autoretransmit_delay>:

rf24_module_autoretransmit_delay rf24_module_get_autoretransmit_delay()
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
	rf24_module_read_attribute(rf24_module_attributes.ard, &value_out);
 8001b88:	4b04      	ldr	r3, [pc, #16]	; (8001b9c <rf24_module_get_autoretransmit_delay+0x18>)
 8001b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b8c:	4904      	ldr	r1, [pc, #16]	; (8001ba0 <rf24_module_get_autoretransmit_delay+0x1c>)
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fe32 	bl	80017f8 <rf24_module_read_attribute>
	return (rf24_module_autoretransmit_delay) value_out.w8;
 8001b94:	4b02      	ldr	r3, [pc, #8]	; (8001ba0 <rf24_module_get_autoretransmit_delay+0x1c>)
 8001b96:	785b      	ldrb	r3, [r3, #1]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20000060 	.word	0x20000060
 8001ba0:	20000644 	.word	0x20000644

08001ba4 <rf24_module_set_autoretransmit_count>:

void rf24_module_set_autoretransmit_count(rf24_module_autoretransmit_count autoretransmit_count)
{
 8001ba4:	b590      	push	{r4, r7, lr}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	71fb      	strb	r3, [r7, #7]
	rf24_module_write_attribute(rf24_module_attributes.arc, rf24_module_value_w8(autoretransmit_count));
 8001bae:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <rf24_module_set_autoretransmit_count+0x28>)
 8001bb0:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff fe8d 	bl	80018d4 <rf24_module_value_w8>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4620      	mov	r0, r4
 8001bc0:	f7ff fd98 	bl	80016f4 <rf24_module_write_attribute>
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd90      	pop	{r4, r7, pc}
 8001bcc:	20000060 	.word	0x20000060

08001bd0 <rf24_module_get_autoretransmit_count>:

rf24_module_autoretransmit_count rf24_module_get_autoretransmit_count()
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
	rf24_module_read_attribute(rf24_module_attributes.arc, &value_out);
 8001bd4:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <rf24_module_get_autoretransmit_count+0x18>)
 8001bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd8:	4904      	ldr	r1, [pc, #16]	; (8001bec <rf24_module_get_autoretransmit_count+0x1c>)
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff fe0c 	bl	80017f8 <rf24_module_read_attribute>
	return (rf24_module_autoretransmit_count) value_out.w8;
 8001be0:	4b02      	ldr	r3, [pc, #8]	; (8001bec <rf24_module_get_autoretransmit_count+0x1c>)
 8001be2:	785b      	ldrb	r3, [r3, #1]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20000060 	.word	0x20000060
 8001bec:	20000644 	.word	0x20000644

08001bf0 <rf24_module_set_rf_channel>:

void rf24_module_set_rf_channel(uint8_t rfchannel)
{
 8001bf0:	b590      	push	{r4, r7, lr}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	71fb      	strb	r3, [r7, #7]
	rf24_module_write_attribute(rf24_module_attributes.rf_ch, rf24_module_value_w8(rfchannel));
 8001bfa:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <rf24_module_set_rf_channel+0x28>)
 8001bfc:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fe67 	bl	80018d4 <rf24_module_value_w8>
 8001c06:	4603      	mov	r3, r0
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4620      	mov	r0, r4
 8001c0c:	f7ff fd72 	bl	80016f4 <rf24_module_write_attribute>
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd90      	pop	{r4, r7, pc}
 8001c18:	20000060 	.word	0x20000060

08001c1c <rf24_module_get_rf_channel>:

uint8_t rf24_module_get_rf_channel()
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
	rf24_module_read_attribute(rf24_module_attributes.rf_ch, &value_out);
 8001c20:	4b04      	ldr	r3, [pc, #16]	; (8001c34 <rf24_module_get_rf_channel+0x18>)
 8001c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c24:	4904      	ldr	r1, [pc, #16]	; (8001c38 <rf24_module_get_rf_channel+0x1c>)
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff fde6 	bl	80017f8 <rf24_module_read_attribute>
	return value_out.w8;
 8001c2c:	4b02      	ldr	r3, [pc, #8]	; (8001c38 <rf24_module_get_rf_channel+0x1c>)
 8001c2e:	785b      	ldrb	r3, [r3, #1]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20000060 	.word	0x20000060
 8001c38:	20000644 	.word	0x20000644

08001c3c <rf24_module_set_rf_outputpower>:

void rf24_module_set_rf_outputpower(rf24_module_rf_output_power rf_output_power)
{
 8001c3c:	b590      	push	{r4, r7, lr}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	71fb      	strb	r3, [r7, #7]
	rf24_module_write_attribute(rf24_module_attributes.rf_pwr, rf24_module_value_w8(rf_output_power));
 8001c46:	4b07      	ldr	r3, [pc, #28]	; (8001c64 <rf24_module_set_rf_outputpower+0x28>)
 8001c48:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff fe41 	bl	80018d4 <rf24_module_value_w8>
 8001c52:	4603      	mov	r3, r0
 8001c54:	4619      	mov	r1, r3
 8001c56:	4620      	mov	r0, r4
 8001c58:	f7ff fd4c 	bl	80016f4 <rf24_module_write_attribute>
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd90      	pop	{r4, r7, pc}
 8001c64:	20000060 	.word	0x20000060

08001c68 <rf24_module_get_rf_outputpower>:

rf24_module_rf_output_power rf24_module_get_rf_outputpower()
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
	rf24_module_read_attribute(rf24_module_attributes.rf_pwr, &value_out);
 8001c6c:	4b04      	ldr	r3, [pc, #16]	; (8001c80 <rf24_module_get_rf_outputpower+0x18>)
 8001c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c70:	4904      	ldr	r1, [pc, #16]	; (8001c84 <rf24_module_get_rf_outputpower+0x1c>)
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff fdc0 	bl	80017f8 <rf24_module_read_attribute>
	return (rf24_module_rf_output_power) value_out.w8;
 8001c78:	4b02      	ldr	r3, [pc, #8]	; (8001c84 <rf24_module_get_rf_outputpower+0x1c>)
 8001c7a:	785b      	ldrb	r3, [r3, #1]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	20000060 	.word	0x20000060
 8001c84:	20000644 	.word	0x20000644

08001c88 <rf24_module_set_datarate>:

void rf24_module_set_datarate(rf24_module_datarate datarate)
{
 8001c88:	b590      	push	{r4, r7, lr}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	71fb      	strb	r3, [r7, #7]
	switch(datarate)
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	db2a      	blt.n	8001cee <rf24_module_set_datarate+0x66>
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	dd0d      	ble.n	8001cb8 <rf24_module_set_datarate+0x30>
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d000      	beq.n	8001ca2 <rf24_module_set_datarate+0x1a>
		case rf24_module_datarate_2Mbps:
			rf24_module_write_attribute(rf24_module_attributes.rf_dr_low, rf24_module_value_w1(false));
			rf24_module_write_attribute(rf24_module_attributes.rf_dr_high, rf24_module_value_w1(datarate));
			break;
	}
}
 8001ca0:	e025      	b.n	8001cee <rf24_module_set_datarate+0x66>
			rf24_module_write_attribute(rf24_module_attributes.rf_dr_low, rf24_module_value_w1(true));
 8001ca2:	4b15      	ldr	r3, [pc, #84]	; (8001cf8 <rf24_module_set_datarate+0x70>)
 8001ca4:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 8001ca6:	2001      	movs	r0, #1
 8001ca8:	f7ff fe04 	bl	80018b4 <rf24_module_value_w1>
 8001cac:	4603      	mov	r3, r0
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4620      	mov	r0, r4
 8001cb2:	f7ff fd1f 	bl	80016f4 <rf24_module_write_attribute>
			break;
 8001cb6:	e01a      	b.n	8001cee <rf24_module_set_datarate+0x66>
			rf24_module_write_attribute(rf24_module_attributes.rf_dr_low, rf24_module_value_w1(false));
 8001cb8:	4b0f      	ldr	r3, [pc, #60]	; (8001cf8 <rf24_module_set_datarate+0x70>)
 8001cba:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 8001cbc:	2000      	movs	r0, #0
 8001cbe:	f7ff fdf9 	bl	80018b4 <rf24_module_value_w1>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4620      	mov	r0, r4
 8001cc8:	f7ff fd14 	bl	80016f4 <rf24_module_write_attribute>
			rf24_module_write_attribute(rf24_module_attributes.rf_dr_high, rf24_module_value_w1(datarate));
 8001ccc:	4b0a      	ldr	r3, [pc, #40]	; (8001cf8 <rf24_module_set_datarate+0x70>)
 8001cce:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	bf14      	ite	ne
 8001cd6:	2301      	movne	r3, #1
 8001cd8:	2300      	moveq	r3, #0
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff fde9 	bl	80018b4 <rf24_module_value_w1>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4620      	mov	r0, r4
 8001ce8:	f7ff fd04 	bl	80016f4 <rf24_module_write_attribute>
			break;
 8001cec:	bf00      	nop
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd90      	pop	{r4, r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000060 	.word	0x20000060

08001cfc <rf24_module_get_datarate>:

rf24_module_datarate rf24_module_get_datarate()
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
	rf24_module_read_attribute(rf24_module_attributes.rf_dr_low, &value_out);
 8001d02:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <rf24_module_get_datarate+0x40>)
 8001d04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d06:	490e      	ldr	r1, [pc, #56]	; (8001d40 <rf24_module_get_datarate+0x44>)
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff fd75 	bl	80017f8 <rf24_module_read_attribute>
	bool rf_dr_low = value_out.w1;
 8001d0e:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <rf24_module_get_datarate+0x44>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	71fb      	strb	r3, [r7, #7]

	if(rf_dr_low) return rf24_module_datarate_250kbps;
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <rf24_module_get_datarate+0x22>
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	e009      	b.n	8001d32 <rf24_module_get_datarate+0x36>

	rf24_module_read_attribute(rf24_module_attributes.rf_dr_high, &value_out);
 8001d1e:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <rf24_module_get_datarate+0x40>)
 8001d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d22:	4907      	ldr	r1, [pc, #28]	; (8001d40 <rf24_module_get_datarate+0x44>)
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff fd67 	bl	80017f8 <rf24_module_read_attribute>
	bool rf_dr_high = value_out.w1;
 8001d2a:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <rf24_module_get_datarate+0x44>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	71bb      	strb	r3, [r7, #6]

	return (rf24_module_datarate) rf_dr_high;
 8001d30:	79bb      	ldrb	r3, [r7, #6]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000060 	.word	0x20000060
 8001d40:	20000644 	.word	0x20000644

08001d44 <rf24_module_get_rx_available_pipe>:
	rf24_module_read_attribute(rf24_module_attributes.tx_full, &value_out);
	return (value_out.w1 == 1);
}

rf24_module_rx_pipes rf24_module_get_rx_available_pipe()
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
	rf24_module_read_attribute(rf24_module_attributes.rx_p_no, &value_out);
 8001d48:	4b04      	ldr	r3, [pc, #16]	; (8001d5c <rf24_module_get_rx_available_pipe+0x18>)
 8001d4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d4c:	4904      	ldr	r1, [pc, #16]	; (8001d60 <rf24_module_get_rx_available_pipe+0x1c>)
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff fd52 	bl	80017f8 <rf24_module_read_attribute>
	return (rf24_module_rx_pipes) value_out.w8;
 8001d54:	4b02      	ldr	r3, [pc, #8]	; (8001d60 <rf24_module_get_rx_available_pipe+0x1c>)
 8001d56:	785b      	ldrb	r3, [r3, #1]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20000060 	.word	0x20000060
 8001d60:	20000644 	.word	0x20000644

08001d64 <rf24_module_max_retransmits>:

bool rf24_module_max_retransmits()
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
	rf24_module_read_attribute(rf24_module_attributes.max_rt, &value_out);
 8001d68:	4b04      	ldr	r3, [pc, #16]	; (8001d7c <rf24_module_max_retransmits+0x18>)
 8001d6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d6c:	4904      	ldr	r1, [pc, #16]	; (8001d80 <rf24_module_max_retransmits+0x1c>)
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff fd42 	bl	80017f8 <rf24_module_read_attribute>
	return (value_out.w1 == 1);
 8001d74:	4b02      	ldr	r3, [pc, #8]	; (8001d80 <rf24_module_max_retransmits+0x1c>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	20000060 	.word	0x20000060
 8001d80:	20000644 	.word	0x20000644

08001d84 <rf24_module_package_transmitted>:
{
	rf24_module_read_attribute(rf24_module_attributes.max_rt, rf24_module_value_w1(true));
}

bool rf24_module_package_transmitted()
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
	rf24_module_read_attribute(rf24_module_attributes.tx_ds, &value_out);
 8001d88:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <rf24_module_package_transmitted+0x18>)
 8001d8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d8c:	4904      	ldr	r1, [pc, #16]	; (8001da0 <rf24_module_package_transmitted+0x1c>)
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff fd32 	bl	80017f8 <rf24_module_read_attribute>
	return (value_out.w1 == 1);
 8001d94:	4b02      	ldr	r3, [pc, #8]	; (8001da0 <rf24_module_package_transmitted+0x1c>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20000060 	.word	0x20000060
 8001da0:	20000644 	.word	0x20000644

08001da4 <rf24_module_rx_data_available>:
	uint8_t status = rf24_module_read_register(STATUS);
	rf24_module_write_register(STATUS, status & (1<<TX_DS) );
}

bool rf24_module_rx_data_available()
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
	rf24_module_read_attribute(rf24_module_attributes.rx_dr, &value_out);
 8001da8:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <rf24_module_rx_data_available+0x1c>)
 8001daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001dae:	4905      	ldr	r1, [pc, #20]	; (8001dc4 <rf24_module_rx_data_available+0x20>)
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff fd21 	bl	80017f8 <rf24_module_read_attribute>
	return (value_out.w1 == 1);
 8001db6:	4b03      	ldr	r3, [pc, #12]	; (8001dc4 <rf24_module_rx_data_available+0x20>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000060 	.word	0x20000060
 8001dc4:	20000644 	.word	0x20000644

08001dc8 <rf24_module_clear_all_interrupts>:
	uint8_t status = rf24_module_read_register(STATUS);
	rf24_module_write_register(STATUS, status & (1<<RX_DR) );
}

void rf24_module_clear_all_interrupts()
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
	uint8_t status = rf24_module_read_register(STATUS);
 8001dce:	2007      	movs	r0, #7
 8001dd0:	f7ff fc12 	bl	80015f8 <rf24_module_read_register>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	71fb      	strb	r3, [r7, #7]
	rf24_module_write_register(STATUS, status & ( (1<<MAX_RT) | (1<<TX_DS) | (1<<RX_DR) ) );
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	4619      	mov	r1, r3
 8001de2:	2007      	movs	r0, #7
 8001de4:	f7ff fc22 	bl	800162c <rf24_module_write_register>
}
 8001de8:	bf00      	nop
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <rf24_module_set_rx_address_pipe0>:

uint8_t rf24_module_get_received_power_detector(){
	return 0;
}

void rf24_module_set_rx_address_pipe0(uint8_t *rx_address /*3-5 bytes*/, uint8_t rx_address_length){
 8001df0:	b590      	push	{r4, r7, lr}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	70fb      	strb	r3, [r7, #3]
	rf24_module_write_attribute(rf24_module_attributes.rx_addr_p0, rf24_module_value_w40(rx_address, rx_address_length));
 8001dfc:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <rf24_module_set_rx_address_pipe0+0x30>)
 8001dfe:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
 8001e02:	78fb      	ldrb	r3, [r7, #3]
 8001e04:	4619      	mov	r1, r3
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7ff fd74 	bl	80018f4 <rf24_module_value_w40>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4620      	mov	r0, r4
 8001e12:	f7ff fc6f 	bl	80016f4 <rf24_module_write_attribute>
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd90      	pop	{r4, r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000060 	.word	0x20000060

08001e24 <rf24_module_set_tx_address>:

void rf24_module_set_rx_address_pipe5(uint8_t rx_address /*1 byte*/){
	rf24_module_write_attribute(rf24_module_attributes.rx_addr_p5, rf24_module_value_w8(rx_address));
}

void rf24_module_set_tx_address(uint8_t *tx_address /*3-5 bytes*/, uint8_t tx_address_length){
 8001e24:	b590      	push	{r4, r7, lr}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	70fb      	strb	r3, [r7, #3]
	rf24_module_write_attribute(rf24_module_attributes.tx_addr, rf24_module_value_w40(tx_address, tx_address_length));
 8001e30:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <rf24_module_set_tx_address+0x30>)
 8001e32:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8001e36:	78fb      	ldrb	r3, [r7, #3]
 8001e38:	4619      	mov	r1, r3
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7ff fd5a 	bl	80018f4 <rf24_module_value_w40>
 8001e40:	4603      	mov	r3, r0
 8001e42:	4619      	mov	r1, r3
 8001e44:	4620      	mov	r0, r4
 8001e46:	f7ff fc55 	bl	80016f4 <rf24_module_write_attribute>
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd90      	pop	{r4, r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000060 	.word	0x20000060

08001e58 <rf24_module_get_tx_address>:

void rf24_module_get_tx_address(uint8_t *tx_address_out /*3-5 bytes*/){
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
	value_out.w40 = tx_address_out;
 8001e60:	4a06      	ldr	r2, [pc, #24]	; (8001e7c <rf24_module_get_tx_address+0x24>)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6053      	str	r3, [r2, #4]
	rf24_module_read_attribute(rf24_module_attributes.tx_addr, &value_out);
 8001e66:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <rf24_module_get_tx_address+0x28>)
 8001e68:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001e6c:	4903      	ldr	r1, [pc, #12]	; (8001e7c <rf24_module_get_tx_address+0x24>)
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff fcc2 	bl	80017f8 <rf24_module_read_attribute>
}
 8001e74:	bf00      	nop
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20000644 	.word	0x20000644
 8001e80:	20000060 	.word	0x20000060

08001e84 <rf24_module_set_payload_width_pipe>:

void rf24_module_set_payload_width_pipe(rf24_module_rx_pipes rx_pipe, uint8_t payload_width){
 8001e84:	b590      	push	{r4, r7, lr}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	460a      	mov	r2, r1
 8001e8e:	71fb      	strb	r3, [r7, #7]
 8001e90:	4613      	mov	r3, r2
 8001e92:	71bb      	strb	r3, [r7, #6]

	//rf24_module_write_register(RX_PW_P0 + rx_pipe, payload_width & 0b00111111);

	switch(rx_pipe)
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	2b05      	cmp	r3, #5
 8001e98:	d85c      	bhi.n	8001f54 <rf24_module_set_payload_width_pipe+0xd0>
 8001e9a:	a201      	add	r2, pc, #4	; (adr r2, 8001ea0 <rf24_module_set_payload_width_pipe+0x1c>)
 8001e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ea0:	08001eb9 	.word	0x08001eb9
 8001ea4:	08001ed3 	.word	0x08001ed3
 8001ea8:	08001eed 	.word	0x08001eed
 8001eac:	08001f07 	.word	0x08001f07
 8001eb0:	08001f21 	.word	0x08001f21
 8001eb4:	08001f3b 	.word	0x08001f3b
	{
		case 0: rf24_module_write_attribute(rf24_module_attributes.rx_pw_p0, rf24_module_value_w8(payload_width)); break;
 8001eb8:	4b28      	ldr	r3, [pc, #160]	; (8001f5c <rf24_module_set_payload_width_pipe+0xd8>)
 8001eba:	f8d3 40ac 	ldr.w	r4, [r3, #172]	; 0xac
 8001ebe:	79bb      	ldrb	r3, [r7, #6]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff fd07 	bl	80018d4 <rf24_module_value_w8>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4620      	mov	r0, r4
 8001ecc:	f7ff fc12 	bl	80016f4 <rf24_module_write_attribute>
 8001ed0:	e040      	b.n	8001f54 <rf24_module_set_payload_width_pipe+0xd0>
		case 1: rf24_module_write_attribute(rf24_module_attributes.rx_pw_p1, rf24_module_value_w8(payload_width)); break;
 8001ed2:	4b22      	ldr	r3, [pc, #136]	; (8001f5c <rf24_module_set_payload_width_pipe+0xd8>)
 8001ed4:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
 8001ed8:	79bb      	ldrb	r3, [r7, #6]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff fcfa 	bl	80018d4 <rf24_module_value_w8>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	f7ff fc05 	bl	80016f4 <rf24_module_write_attribute>
 8001eea:	e033      	b.n	8001f54 <rf24_module_set_payload_width_pipe+0xd0>
		case 2: rf24_module_write_attribute(rf24_module_attributes.rx_pw_p2, rf24_module_value_w8(payload_width)); break;
 8001eec:	4b1b      	ldr	r3, [pc, #108]	; (8001f5c <rf24_module_set_payload_width_pipe+0xd8>)
 8001eee:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8001ef2:	79bb      	ldrb	r3, [r7, #6]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff fced 	bl	80018d4 <rf24_module_value_w8>
 8001efa:	4603      	mov	r3, r0
 8001efc:	4619      	mov	r1, r3
 8001efe:	4620      	mov	r0, r4
 8001f00:	f7ff fbf8 	bl	80016f4 <rf24_module_write_attribute>
 8001f04:	e026      	b.n	8001f54 <rf24_module_set_payload_width_pipe+0xd0>
		case 3: rf24_module_write_attribute(rf24_module_attributes.rx_pw_p3, rf24_module_value_w8(payload_width)); break;
 8001f06:	4b15      	ldr	r3, [pc, #84]	; (8001f5c <rf24_module_set_payload_width_pipe+0xd8>)
 8001f08:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 8001f0c:	79bb      	ldrb	r3, [r7, #6]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff fce0 	bl	80018d4 <rf24_module_value_w8>
 8001f14:	4603      	mov	r3, r0
 8001f16:	4619      	mov	r1, r3
 8001f18:	4620      	mov	r0, r4
 8001f1a:	f7ff fbeb 	bl	80016f4 <rf24_module_write_attribute>
 8001f1e:	e019      	b.n	8001f54 <rf24_module_set_payload_width_pipe+0xd0>
		case 4: rf24_module_write_attribute(rf24_module_attributes.rx_pw_p4, rf24_module_value_w8(payload_width)); break;
 8001f20:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <rf24_module_set_payload_width_pipe+0xd8>)
 8001f22:	f8d3 40bc 	ldr.w	r4, [r3, #188]	; 0xbc
 8001f26:	79bb      	ldrb	r3, [r7, #6]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff fcd3 	bl	80018d4 <rf24_module_value_w8>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	4619      	mov	r1, r3
 8001f32:	4620      	mov	r0, r4
 8001f34:	f7ff fbde 	bl	80016f4 <rf24_module_write_attribute>
 8001f38:	e00c      	b.n	8001f54 <rf24_module_set_payload_width_pipe+0xd0>
		case 5: rf24_module_write_attribute(rf24_module_attributes.rx_pw_p5, rf24_module_value_w8(payload_width)); break;
 8001f3a:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <rf24_module_set_payload_width_pipe+0xd8>)
 8001f3c:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
 8001f40:	79bb      	ldrb	r3, [r7, #6]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff fcc6 	bl	80018d4 <rf24_module_value_w8>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4620      	mov	r0, r4
 8001f4e:	f7ff fbd1 	bl	80016f4 <rf24_module_write_attribute>
 8001f52:	bf00      	nop
	}
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd90      	pop	{r4, r7, pc}
 8001f5c:	20000060 	.word	0x20000060

08001f60 <rf24_module_flush_tx>:
void rf24_module_disable_transmission_without_ack(){
	rf24_module_write_attribute(rf24_module_attributes.en_dyn_ack, rf24_module_value_w1(false));
}

void rf24_module_flush_tx()
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
	rf24_stm32f1xx_spi_csn_low();
 8001f64:	f002 ffd0 	bl	8004f08 <rf24_stm32f1xx_spi_csn_low>
	rf24_stm32f1xx_spi_shift_byte(FLUSH_TX);
 8001f68:	20e1      	movs	r0, #225	; 0xe1
 8001f6a:	f002 ffe5 	bl	8004f38 <rf24_stm32f1xx_spi_shift_byte>
	rf24_stm32f1xx_spi_csn_high();
 8001f6e:	f002 ffd7 	bl	8004f20 <rf24_stm32f1xx_spi_csn_high>
}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <rf24_module_flush_rx>:

void rf24_module_flush_rx()
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	af00      	add	r7, sp, #0
	rf24_stm32f1xx_spi_csn_low();
 8001f7a:	f002 ffc5 	bl	8004f08 <rf24_stm32f1xx_spi_csn_low>
	rf24_stm32f1xx_spi_shift_byte(FLUSH_RX);
 8001f7e:	20e2      	movs	r0, #226	; 0xe2
 8001f80:	f002 ffda 	bl	8004f38 <rf24_stm32f1xx_spi_shift_byte>
	rf24_stm32f1xx_spi_csn_high();
 8001f84:	f002 ffcc 	bl	8004f20 <rf24_stm32f1xx_spi_csn_high>
}
 8001f88:	bf00      	nop
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <rf24_module_collect_rx_data>:

void rf24_module_collect_rx_data(rf24_module_rx_data *rx_data)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
	rf24_module_readwrite_register(read, R_RX_PAYLOAD, rx_data->payload, 32);
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	2320      	movs	r3, #32
 8001f98:	2161      	movs	r1, #97	; 0x61
 8001f9a:	2000      	movs	r0, #0
 8001f9c:	f7ff fb67 	bl	800166e <rf24_module_readwrite_register>
	rx_data->length = 32;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	f883 2020 	strb.w	r2, [r3, #32]
	rx_data->rx_pipe = rf24_module_get_rx_available_pipe();
 8001fa8:	f7ff fecc 	bl	8001d44 <rf24_module_get_rx_available_pipe>
 8001fac:	4603      	mov	r3, r0
 8001fae:	461a      	mov	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8001fb6:	bf00      	nop
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
	...

08001fc0 <rf24_module_goto_state>:

// USER FUNCTIONS

void rf24_module_goto_state(rf24_module_states goto_state)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	71fb      	strb	r3, [r7, #7]
	#ifdef RF24_MODULE_DEBUG_STATE_MACHINE
		usart_write_str("[rf24]: switched state from ");
		usart_write_str(rf24_module_states_string[rf24_module_state]);
	#endif

	switch(rf24_module_state){
 8001fca:	4b42      	ldr	r3, [pc, #264]	; (80020d4 <rf24_module_goto_state+0x114>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2b09      	cmp	r3, #9
 8001fd2:	d87a      	bhi.n	80020ca <rf24_module_goto_state+0x10a>
 8001fd4:	a201      	add	r2, pc, #4	; (adr r2, 8001fdc <rf24_module_goto_state+0x1c>)
 8001fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fda:	bf00      	nop
 8001fdc:	08002005 	.word	0x08002005
 8001fe0:	080020cb 	.word	0x080020cb
 8001fe4:	0800201d 	.word	0x0800201d
 8001fe8:	080020cb 	.word	0x080020cb
 8001fec:	0800203f 	.word	0x0800203f
 8001ff0:	080020cb 	.word	0x080020cb
 8001ff4:	080020cb 	.word	0x080020cb
 8001ff8:	080020b5 	.word	0x080020b5
 8001ffc:	080020cb 	.word	0x080020cb
 8002000:	0800209d 	.word	0x0800209d

		/* UNDEFINED -> POWER_DOWN */
		case UNDEFINED:{
			switch(goto_state){
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	2b02      	cmp	r3, #2
 8002008:	d000      	beq.n	800200c <rf24_module_goto_state+0x4c>
				case POWER_DOWN:
					delay_ms(20); //10.3ms
					rf24_module_state = POWER_DOWN;
					break;
				default:break;
 800200a:	e006      	b.n	800201a <rf24_module_goto_state+0x5a>
					delay_ms(20); //10.3ms
 800200c:	2014      	movs	r0, #20
 800200e:	f002 fdd5 	bl	8004bbc <delay_ms>
					rf24_module_state = POWER_DOWN;
 8002012:	4b30      	ldr	r3, [pc, #192]	; (80020d4 <rf24_module_goto_state+0x114>)
 8002014:	2202      	movs	r2, #2
 8002016:	701a      	strb	r2, [r3, #0]
					break;
 8002018:	bf00      	nop
			}
			break;
 800201a:	e057      	b.n	80020cc <rf24_module_goto_state+0x10c>
		}

		/* POWER_DOWN -> STAND_BY_I */
		case POWER_DOWN:{
			switch(goto_state){
 800201c:	79fb      	ldrb	r3, [r7, #7]
 800201e:	2b04      	cmp	r3, #4
 8002020:	d000      	beq.n	8002024 <rf24_module_goto_state+0x64>
					rf24_module_state = START_UP;
					delay_ms(2); //1.5ms
					rf24_module_state = STAND_BY_I;
					break;
				}
				default:break;
 8002022:	e00b      	b.n	800203c <rf24_module_goto_state+0x7c>
					rf24_module_power_up();
 8002024:	f7ff fcb8 	bl	8001998 <rf24_module_power_up>
					rf24_module_state = START_UP;
 8002028:	4b2a      	ldr	r3, [pc, #168]	; (80020d4 <rf24_module_goto_state+0x114>)
 800202a:	2203      	movs	r2, #3
 800202c:	701a      	strb	r2, [r3, #0]
					delay_ms(2); //1.5ms
 800202e:	2002      	movs	r0, #2
 8002030:	f002 fdc4 	bl	8004bbc <delay_ms>
					rf24_module_state = STAND_BY_I;
 8002034:	4b27      	ldr	r3, [pc, #156]	; (80020d4 <rf24_module_goto_state+0x114>)
 8002036:	2204      	movs	r2, #4
 8002038:	701a      	strb	r2, [r3, #0]
					break;
 800203a:	bf00      	nop
			}
			break;
 800203c:	e046      	b.n	80020cc <rf24_module_goto_state+0x10c>
		}

		/* STAND_BY_I -> TX_MODE, RX_MODE */
		case STAND_BY_I:{
			switch(goto_state){
 800203e:	79fb      	ldrb	r3, [r7, #7]
 8002040:	2b07      	cmp	r3, #7
 8002042:	d002      	beq.n	800204a <rf24_module_goto_state+0x8a>
 8002044:	2b09      	cmp	r3, #9
 8002046:	d010      	beq.n	800206a <rf24_module_goto_state+0xaa>
					rf24_module_state = TX_SETTING;
					delay_us(130); //130us
					rf24_module_state = TX_MODE;
					break;
				}
				default:break;
 8002048:	e028      	b.n	800209c <rf24_module_goto_state+0xdc>
					rf24_module_set_prim_rx(high);
 800204a:	2001      	movs	r0, #1
 800204c:	f7ff fc7c 	bl	8001948 <rf24_module_set_prim_rx>
					rf24_module_set_ce(high);
 8002050:	2001      	movs	r0, #1
 8002052:	f7ff fc63 	bl	800191c <rf24_module_set_ce>
					rf24_module_state = RX_SETTING;
 8002056:	4b1f      	ldr	r3, [pc, #124]	; (80020d4 <rf24_module_goto_state+0x114>)
 8002058:	2206      	movs	r2, #6
 800205a:	701a      	strb	r2, [r3, #0]
					delay_us(130); //130us
 800205c:	2082      	movs	r0, #130	; 0x82
 800205e:	f002 fdcd 	bl	8004bfc <delay_us>
					rf24_module_state = RX_MODE;
 8002062:	4b1c      	ldr	r3, [pc, #112]	; (80020d4 <rf24_module_goto_state+0x114>)
 8002064:	2207      	movs	r2, #7
 8002066:	701a      	strb	r2, [r3, #0]
					break;
 8002068:	e018      	b.n	800209c <rf24_module_goto_state+0xdc>
					rf24_module_set_prim_rx(low);
 800206a:	2000      	movs	r0, #0
 800206c:	f7ff fc6c 	bl	8001948 <rf24_module_set_prim_rx>
					rf24_module_set_ce(low);
 8002070:	2000      	movs	r0, #0
 8002072:	f7ff fc53 	bl	800191c <rf24_module_set_ce>
					rf24_module_set_ce(high);
 8002076:	2001      	movs	r0, #1
 8002078:	f7ff fc50 	bl	800191c <rf24_module_set_ce>
					delay_us(20); // > 10us
 800207c:	2014      	movs	r0, #20
 800207e:	f002 fdbd 	bl	8004bfc <delay_us>
					rf24_module_set_ce(low);
 8002082:	2000      	movs	r0, #0
 8002084:	f7ff fc4a 	bl	800191c <rf24_module_set_ce>
					rf24_module_state = TX_SETTING;
 8002088:	4b12      	ldr	r3, [pc, #72]	; (80020d4 <rf24_module_goto_state+0x114>)
 800208a:	2208      	movs	r2, #8
 800208c:	701a      	strb	r2, [r3, #0]
					delay_us(130); //130us
 800208e:	2082      	movs	r0, #130	; 0x82
 8002090:	f002 fdb4 	bl	8004bfc <delay_us>
					rf24_module_state = TX_MODE;
 8002094:	4b0f      	ldr	r3, [pc, #60]	; (80020d4 <rf24_module_goto_state+0x114>)
 8002096:	2209      	movs	r2, #9
 8002098:	701a      	strb	r2, [r3, #0]
					break;
 800209a:	bf00      	nop
			}
		}

		/* TX_MODE -> STAND_BY_I */
		case TX_MODE:{
			switch(goto_state){
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	2b04      	cmp	r3, #4
 80020a0:	d000      	beq.n	80020a4 <rf24_module_goto_state+0xe4>
				case STAND_BY_I:{
					rf24_module_set_ce(low);
					rf24_module_state = STAND_BY_I;
					break;
				}
				default:break;
 80020a2:	e006      	b.n	80020b2 <rf24_module_goto_state+0xf2>
					rf24_module_set_ce(low);
 80020a4:	2000      	movs	r0, #0
 80020a6:	f7ff fc39 	bl	800191c <rf24_module_set_ce>
					rf24_module_state = STAND_BY_I;
 80020aa:	4b0a      	ldr	r3, [pc, #40]	; (80020d4 <rf24_module_goto_state+0x114>)
 80020ac:	2204      	movs	r2, #4
 80020ae:	701a      	strb	r2, [r3, #0]
					break;
 80020b0:	bf00      	nop
			}
			break;
 80020b2:	e00b      	b.n	80020cc <rf24_module_goto_state+0x10c>
		}

		/* RX_MODE -> STAND_BY_I */
		case RX_MODE:{
			switch(goto_state){
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d000      	beq.n	80020bc <rf24_module_goto_state+0xfc>
					rf24_module_set_ce(low);
					rf24_module_state = STAND_BY_I;
				}
				default:break;
			}
			break;
 80020ba:	e007      	b.n	80020cc <rf24_module_goto_state+0x10c>
					rf24_module_set_ce(low);
 80020bc:	2000      	movs	r0, #0
 80020be:	f7ff fc2d 	bl	800191c <rf24_module_set_ce>
					rf24_module_state = STAND_BY_I;
 80020c2:	4b04      	ldr	r3, [pc, #16]	; (80020d4 <rf24_module_goto_state+0x114>)
 80020c4:	2204      	movs	r2, #4
 80020c6:	701a      	strb	r2, [r3, #0]
			break;
 80020c8:	e000      	b.n	80020cc <rf24_module_goto_state+0x10c>
		}

		default: break;
 80020ca:	bf00      	nop
	#ifdef RF24_MODULE_DEBUG_STATE_MACHINE
		usart_write_str(" to ");
		usart_write_line(rf24_module_states_string[rf24_module_state]);
	#endif

}
 80020cc:	bf00      	nop
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	200005b0 	.word	0x200005b0

080020d8 <rf24_module_init>:
	rf24_module_read_attribute(rf24_module_attributes.aw, &value_in);
	return (value_in.w8 >= 1 && value_in.w8 <= 3);
}

bool rf24_module_init(uint32_t baudrate)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af04      	add	r7, sp, #16
 80020de:	6078      	str	r0, [r7, #4]
	// init hardware: system clock, timers, interrupts, pin out-/inputs, etc.
	rf24_stm32f1xx_init();
 80020e0:	f002 fe96 	bl	8004e10 <rf24_stm32f1xx_init>
	// init usart
	rf24_stm32f1xx_usart_init(baudrate);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f002 ff5f 	bl	8004fa8 <rf24_stm32f1xx_usart_init>
	// init spi
	rf24_stm32f1xx_spi_init();
 80020ea:	f002 fea7 	bl	8004e3c <rf24_stm32f1xx_spi_init>
		usart_write_line("rf24: module not responding, check pin connections");
		return false;
	}*/

	// switch to state power down (from undefined)
	rf24_module_goto_state(POWER_DOWN);
 80020ee:	2002      	movs	r0, #2
 80020f0:	f7ff ff66 	bl	8001fc0 <rf24_module_goto_state>

	// configure rf module
	rf24_module_config();
 80020f4:	f000 f828 	bl	8002148 <rf24_module_config>

	// switch to rx mode over stand_by mode
	rf24_module_goto_state(STAND_BY_I);
 80020f8:	2004      	movs	r0, #4
 80020fa:	f7ff ff61 	bl	8001fc0 <rf24_module_goto_state>
	rf24_module_goto_state(RX_MODE);
 80020fe:	2007      	movs	r0, #7
 8002100:	f7ff ff5e 	bl	8001fc0 <rf24_module_goto_state>


	rf24_debug(RF_MODULE, INFO, VOID, VOID, NULL, "Initialization finished\n", "");
 8002104:	4b08      	ldr	r3, [pc, #32]	; (8002128 <rf24_module_init+0x50>)
 8002106:	9302      	str	r3, [sp, #8]
 8002108:	4b08      	ldr	r3, [pc, #32]	; (800212c <rf24_module_init+0x54>)
 800210a:	9301      	str	r3, [sp, #4]
 800210c:	2300      	movs	r3, #0
 800210e:	9300      	str	r3, [sp, #0]
 8002110:	2300      	movs	r3, #0
 8002112:	2200      	movs	r2, #0
 8002114:	2106      	movs	r1, #6
 8002116:	2001      	movs	r0, #1
 8002118:	f7ff f898 	bl	800124c <rf24_debug>


	return true;
 800211c:	2301      	movs	r3, #1
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	08006e8c 	.word	0x08006e8c
 800212c:	08006f8c 	.word	0x08006f8c

08002130 <rf24_module_disable_autoack>:

void rf24_module_disable_autoack()
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
	rf24_module_write_register(EN_AA, 0x00);
 8002134:	2100      	movs	r1, #0
 8002136:	2001      	movs	r0, #1
 8002138:	f7ff fa78 	bl	800162c <rf24_module_write_register>
	rf24_module_set_autoretransmit_count(rf24_module_autoretransmit_disable);
 800213c:	2000      	movs	r0, #0
 800213e:	f7ff fd31 	bl	8001ba4 <rf24_module_set_autoretransmit_count>
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <rf24_module_config>:

void rf24_module_config()
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
	rf24_module_set_rf_channel(5);
 800214e:	2005      	movs	r0, #5
 8002150:	f7ff fd4e 	bl	8001bf0 <rf24_module_set_rf_channel>
	rf24_module_set_rf_outputpower(rf24_module_rf_output_power3);
 8002154:	2002      	movs	r0, #2
 8002156:	f7ff fd71 	bl	8001c3c <rf24_module_set_rf_outputpower>
	rf24_module_set_datarate(rf24_module_datarate_250kbps);
 800215a:	2002      	movs	r0, #2
 800215c:	f7ff fd94 	bl	8001c88 <rf24_module_set_datarate>
	//rf24_module_enable_autoack_pipe(rf24_module_rx_pipe0);
	rf24_module_enable_rx_pipe(rf24_module_rx_pipe0);
 8002160:	2000      	movs	r0, #0
 8002162:	f7ff fcb5 	bl	8001ad0 <rf24_module_enable_rx_pipe>

	rf24_module_disable_autoack();
 8002166:	f7ff ffe3 	bl	8002130 <rf24_module_disable_autoack>

	rf24_module_enable_crc();
 800216a:	f7ff fc25 	bl	80019b8 <rf24_module_enable_crc>
	//rf24_module_disable_crc();
	rf24_module_set_crc_length(rf24_module_crc_length_2bytes);
 800216e:	2001      	movs	r0, #1
 8002170:	f7ff fc52 	bl	8001a18 <rf24_module_set_crc_length>
	rf24_module_enable_max_retries_interrupt();
 8002174:	f7ff fc7c 	bl	8001a70 <rf24_module_enable_max_retries_interrupt>
	rf24_module_enable_tx_data_sent_interrupt();
 8002178:	f7ff fc8a 	bl	8001a90 <rf24_module_enable_tx_data_sent_interrupt>
	rf24_module_enable_rx_data_read_interrupt();
 800217c:	f7ff fc98 	bl	8001ab0 <rf24_module_enable_rx_data_read_interrupt>

	rf24_module_set_address_width(rf24_module_address_width_5bytes);
 8002180:	2005      	movs	r0, #5
 8002182:	f7ff fcbf 	bl	8001b04 <rf24_module_set_address_width>
	rf24_module_set_payload_width_pipe(rf24_module_rx_pipe0, 32);
 8002186:	2120      	movs	r1, #32
 8002188:	2000      	movs	r0, #0
 800218a:	f7ff fe7b 	bl	8001e84 <rf24_module_set_payload_width_pipe>

	//rf24_module_set_autoretransmit_delay(rf24_module_autoretransmit_delay_750us);
	//rf24_module_set_autoretransmit_count(rf24_module_autoretransmit_count_15);
	rf24_module_set_autoretransmit_count(rf24_module_autoretransmit_disable);
 800218e:	2000      	movs	r0, #0
 8002190:	f7ff fd08 	bl	8001ba4 <rf24_module_set_autoretransmit_count>
	//rf24_module_enable_dynamic_payload();
	//rf24_module_enable_dynamic_payload_pipe(rf24_module_rx_pipe0);
	//rf24_module_enable_dynamic_payload_with_ack();
	//rf24_module_enable_transmission_without_ack();

	uint8_t address[5] = {'n','R','F','2','4'};
 8002194:	4a10      	ldr	r2, [pc, #64]	; (80021d8 <rf24_module_config+0x90>)
 8002196:	463b      	mov	r3, r7
 8002198:	e892 0003 	ldmia.w	r2, {r0, r1}
 800219c:	6018      	str	r0, [r3, #0]
 800219e:	3304      	adds	r3, #4
 80021a0:	7019      	strb	r1, [r3, #0]
	uint8_t address_width = rf24_module_get_address_width();
 80021a2:	f7ff fcc7 	bl	8001b34 <rf24_module_get_address_width>
 80021a6:	4603      	mov	r3, r0
 80021a8:	71fb      	strb	r3, [r7, #7]
	rf24_module_set_tx_address(address, address_width);
 80021aa:	79fa      	ldrb	r2, [r7, #7]
 80021ac:	463b      	mov	r3, r7
 80021ae:	4611      	mov	r1, r2
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff fe37 	bl	8001e24 <rf24_module_set_tx_address>
	rf24_module_set_rx_address_pipe0(address, address_width);
 80021b6:	79fa      	ldrb	r2, [r7, #7]
 80021b8:	463b      	mov	r3, r7
 80021ba:	4611      	mov	r1, r2
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff fe17 	bl	8001df0 <rf24_module_set_rx_address_pipe0>

	rf24_module_flush_tx();
 80021c2:	f7ff fecd 	bl	8001f60 <rf24_module_flush_tx>
	rf24_module_flush_rx();
 80021c6:	f7ff fed6 	bl	8001f76 <rf24_module_flush_rx>
	rf24_module_clear_all_interrupts();
 80021ca:	f7ff fdfd 	bl	8001dc8 <rf24_module_clear_all_interrupts>
}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	08006fa8 	.word	0x08006fa8

080021dc <rf24_module_transmit>:

uint8_t rf24_module_transmit(rf24_module_tx_data *tx_data){
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08c      	sub	sp, #48	; 0x30
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]

	// 1) flush tx___________________________________________________________________________________________
		rf24_stm32f1xx_spi_shift_byte(FLUSH_TX);
 80021e4:	20e1      	movs	r0, #225	; 0xe1
 80021e6:	f002 fea7 	bl	8004f38 <rf24_stm32f1xx_spi_shift_byte>

	// 2) Goto STAND_BY_I________________________________________________________________________________
		// Switch state from "RX_MODE" to "STAND_BY_I"
		rf24_module_goto_state(STAND_BY_I);
 80021ea:	2004      	movs	r0, #4
 80021ec:	f7ff fee8 	bl	8001fc0 <rf24_module_goto_state>
	// 3) Fill tx fifo___________________________________________________________________________________
		// Write payload into tx buffer

		uint8_t payload[32];

		for(int i=0; i<32; i++){
 80021f0:	2300      	movs	r3, #0
 80021f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021f4:	e01a      	b.n	800222c <rf24_module_transmit+0x50>
			if(i < tx_data->length) payload[i] = tx_data->payload[i];
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021fc:	461a      	mov	r2, r3
 80021fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002200:	4293      	cmp	r3, r2
 8002202:	da0a      	bge.n	800221a <rf24_module_transmit+0x3e>
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002208:	4413      	add	r3, r2
 800220a:	7819      	ldrb	r1, [r3, #0]
 800220c:	f107 020c 	add.w	r2, r7, #12
 8002210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002212:	4413      	add	r3, r2
 8002214:	460a      	mov	r2, r1
 8002216:	701a      	strb	r2, [r3, #0]
 8002218:	e005      	b.n	8002226 <rf24_module_transmit+0x4a>
			else payload[i] = '\0';
 800221a:	f107 020c 	add.w	r2, r7, #12
 800221e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002220:	4413      	add	r3, r2
 8002222:	2200      	movs	r2, #0
 8002224:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<32; i++){
 8002226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002228:	3301      	adds	r3, #1
 800222a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800222c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800222e:	2b1f      	cmp	r3, #31
 8002230:	dde1      	ble.n	80021f6 <rf24_module_transmit+0x1a>
		}

		rf24_module_readwrite_register(write, W_TX_PAYLOAD, payload, 32);
 8002232:	f107 020c 	add.w	r2, r7, #12
 8002236:	2320      	movs	r3, #32
 8002238:	21a0      	movs	r1, #160	; 0xa0
 800223a:	2001      	movs	r0, #1
 800223c:	f7ff fa17 	bl	800166e <rf24_module_readwrite_register>

	// 4) Start transmit_________________________________________________________________________________
		// Switch state from "STAND_BY_I" to "TX_MODE"
		rf24_module_goto_state(TX_MODE);
 8002240:	2009      	movs	r0, #9
 8002242:	f7ff febd 	bl	8001fc0 <rf24_module_goto_state>

	return 1;
 8002246:	2301      	movs	r3, #1
}
 8002248:	4618      	mov	r0, r3
 800224a:	3730      	adds	r7, #48	; 0x30
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <rf24_module_attach_notify_data_received>:

void rf24_module_attach_notify_data_received(rf24_module_rx_data_fct_ptr fct_ptr)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
	rx_data_received_notify_fct_ptr = fct_ptr;
 8002258:	4a03      	ldr	r2, [pc, #12]	; (8002268 <rf24_module_attach_notify_data_received+0x18>)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6013      	str	r3, [r2, #0]
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr
 8002268:	20000630 	.word	0x20000630

0800226c <rf24_module_attach_notify_data_transmitted>:

void rf24_module_attach_notify_data_transmitted(rf24_module_fct_ptr fct_ptr)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
	tx_data_transmitted_notify_fct_ptr = fct_ptr;
 8002274:	4a03      	ldr	r2, [pc, #12]	; (8002284 <rf24_module_attach_notify_data_transmitted+0x18>)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6013      	str	r3, [r2, #0]
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr
 8002284:	200005fc 	.word	0x200005fc

08002288 <rf24_module_irq_handler>:
	rf24_stm32f1xx_usart_write_line(str);*/
	rf24_stm32f1xx_usart_write_str("\n");
}

void rf24_module_irq_handler()
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
	if(rf24_module_max_retransmits())
 800228c:	f7ff fd6a 	bl	8001d64 <rf24_module_max_retransmits>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d008      	beq.n	80022a8 <rf24_module_irq_handler+0x20>
	{
		rf24_module_flags.max_retransmits = true;
 8002296:	4b1a      	ldr	r3, [pc, #104]	; (8002300 <rf24_module_irq_handler+0x78>)
 8002298:	2201      	movs	r2, #1
 800229a:	705a      	strb	r2, [r3, #1]

		// switch back to receiver mode
		rf24_module_goto_state(STAND_BY_I);
 800229c:	2004      	movs	r0, #4
 800229e:	f7ff fe8f 	bl	8001fc0 <rf24_module_goto_state>
		rf24_module_goto_state(RX_MODE);
 80022a2:	2007      	movs	r0, #7
 80022a4:	f7ff fe8c 	bl	8001fc0 <rf24_module_goto_state>
		#ifdef RF24_MODULE_DEBUG_IRQ
			rf24_debug("max retransmits");
		#endif
	}

	if(rf24_module_package_transmitted())
 80022a8:	f7ff fd6c 	bl	8001d84 <rf24_module_package_transmitted>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00f      	beq.n	80022d2 <rf24_module_irq_handler+0x4a>
	{
		rf24_module_flags.package_transmitted = true;
 80022b2:	4b13      	ldr	r3, [pc, #76]	; (8002300 <rf24_module_irq_handler+0x78>)
 80022b4:	2201      	movs	r2, #1
 80022b6:	701a      	strb	r2, [r3, #0]

		// switch back to receiver mode
		rf24_module_goto_state(STAND_BY_I);
 80022b8:	2004      	movs	r0, #4
 80022ba:	f7ff fe81 	bl	8001fc0 <rf24_module_goto_state>
		rf24_module_goto_state(RX_MODE);
 80022be:	2007      	movs	r0, #7
 80022c0:	f7ff fe7e 	bl	8001fc0 <rf24_module_goto_state>

		// if a callback function attached, notify
		// [WARNING:] DONT ATTACH ANY LONG PROCEEDINGS TO THIS NOTIFY
		if(tx_data_transmitted_notify_fct_ptr)
 80022c4:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <rf24_module_irq_handler+0x7c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d002      	beq.n	80022d2 <rf24_module_irq_handler+0x4a>
			tx_data_transmitted_notify_fct_ptr();
 80022cc:	4b0d      	ldr	r3, [pc, #52]	; (8002304 <rf24_module_irq_handler+0x7c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4798      	blx	r3
		#ifdef RF24_MODULE_DEBUG_IRQ
			rf24_debug("package transmitted");
		#endif
	}

	if(rf24_module_rx_data_available())
 80022d2:	f7ff fd67 	bl	8001da4 <rf24_module_rx_data_available>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00d      	beq.n	80022f8 <rf24_module_irq_handler+0x70>
	{
		rf24_module_flags.package_received = true;
 80022dc:	4b08      	ldr	r3, [pc, #32]	; (8002300 <rf24_module_irq_handler+0x78>)
 80022de:	2201      	movs	r2, #1
 80022e0:	709a      	strb	r2, [r3, #2]

		// read rx data from chip, store it into global struct rx_data
		rf24_module_collect_rx_data(&rx_data);
 80022e2:	4809      	ldr	r0, [pc, #36]	; (8002308 <rf24_module_irq_handler+0x80>)
 80022e4:	f7ff fe52 	bl	8001f8c <rf24_module_collect_rx_data>

		// if a callback function attached, notify
		// [WARNING:] DONT ATTACH ANY LONG PROCEEDINGS TO THIS NOTIFY
		if(rx_data_received_notify_fct_ptr)
 80022e8:	4b08      	ldr	r3, [pc, #32]	; (800230c <rf24_module_irq_handler+0x84>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d003      	beq.n	80022f8 <rf24_module_irq_handler+0x70>
			rx_data_received_notify_fct_ptr(&rx_data);
 80022f0:	4b06      	ldr	r3, [pc, #24]	; (800230c <rf24_module_irq_handler+0x84>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4804      	ldr	r0, [pc, #16]	; (8002308 <rf24_module_irq_handler+0x80>)
 80022f6:	4798      	blx	r3
		#ifdef RF24_MODULE_DEBUG_IRQ
			rf24_module_print_rx_data(&rx_data);
		#endif
	}

	rf24_module_clear_all_interrupts();
 80022f8:	f7ff fd66 	bl	8001dc8 <rf24_module_clear_all_interrupts>
}
 80022fc:	bf00      	nop
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	2000076c 	.word	0x2000076c
 8002304:	200005fc 	.word	0x200005fc
 8002308:	2000060c 	.word	0x2000060c
 800230c:	20000630 	.word	0x20000630

08002310 <rf24_csma_ca_frame_received_handler>:
rf24_csma_ca_fct_ptr_rts_received	csma_ca_fct_ptr_rts_received;

// INTERRUPTS

void rf24_csma_ca_frame_received_handler(rf24_mac_frame *mac_frame)
{
 8002310:	b590      	push	{r4, r7, lr}
 8002312:	b089      	sub	sp, #36	; 0x24
 8002314:	af04      	add	r7, sp, #16
 8002316:	6078      	str	r0, [r7, #4]
	bool addressed_to_me = memcmp(mac_frame->receiver.bytes, rf24_mac_get_address()->bytes, 6) == 0;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	1d1c      	adds	r4, r3, #4
 800231c:	f000 fcb0 	bl	8002c80 <rf24_mac_get_address>
 8002320:	4603      	mov	r3, r0
 8002322:	2206      	movs	r2, #6
 8002324:	4619      	mov	r1, r3
 8002326:	4620      	mov	r0, r4
 8002328:	f003 fd74 	bl	8005e14 <memcmp>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	bf0c      	ite	eq
 8002332:	2301      	moveq	r3, #1
 8002334:	2300      	movne	r3, #0
 8002336:	73fb      	strb	r3, [r7, #15]

	switch(mac_frame->frame_control.subtype)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	781a      	ldrb	r2, [r3, #0]
 800233c:	0992      	lsrs	r2, r2, #6
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	785b      	ldrb	r3, [r3, #1]
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4313      	orrs	r3, r2
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b03      	cmp	r3, #3
 800234e:	d002      	beq.n	8002356 <rf24_csma_ca_frame_received_handler+0x46>
 8002350:	2b04      	cmp	r3, #4
 8002352:	d04f      	beq.n	80023f4 <rf24_csma_ca_frame_received_handler+0xe4>
 8002354:	e0a5      	b.n	80024a2 <rf24_csma_ca_frame_received_handler+0x192>
	{
		case CONTROL_RTS:
		{
			if(addressed_to_me)
 8002356:	7bfb      	ldrb	r3, [r7, #15]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d034      	beq.n	80023c6 <rf24_csma_ca_frame_received_handler+0xb6>
			{
				// Attach send CTS task, wait a SIFS before transmitting CTS
				struct rf24_task *task = rf24_worker_build_task(send_cts, 1, T_SIFS_US, true);
 800235c:	2301      	movs	r3, #1
 800235e:	f242 7210 	movw	r2, #10000	; 0x2710
 8002362:	2101      	movs	r1, #1
 8002364:	2006      	movs	r0, #6
 8002366:	f002 f895 	bl	8004494 <rf24_worker_build_task>
 800236a:	60b8      	str	r0, [r7, #8]

				// Set destination & slot time (duration) for CTS reply
				task->data.csma.receiver = mac_frame->transmitter;
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	330c      	adds	r3, #12
 8002372:	320a      	adds	r2, #10
 8002374:	6810      	ldr	r0, [r2, #0]
 8002376:	6018      	str	r0, [r3, #0]
 8002378:	8892      	ldrh	r2, [r2, #4]
 800237a:	809a      	strh	r2, [r3, #4]

				// Bind send CTS function to task
				rf24_worker_attach(task, rf24_csma_ca_send_cts);
 800237c:	4952      	ldr	r1, [pc, #328]	; (80024c8 <rf24_csma_ca_frame_received_handler+0x1b8>)
 800237e:	68b8      	ldr	r0, [r7, #8]
 8002380:	f002 f86a 	bl	8004458 <rf24_worker_attach>

				// Set flag RTS received
				csma_ca_flags.rts_received = true;
 8002384:	4a51      	ldr	r2, [pc, #324]	; (80024cc <rf24_csma_ca_frame_received_handler+0x1bc>)
 8002386:	7813      	ldrb	r3, [r2, #0]
 8002388:	f043 0304 	orr.w	r3, r3, #4
 800238c:	7013      	strb	r3, [r2, #0]

				// Call RTS received fct ptr (callback to receiving thread)
				if(csma_ca_fct_ptr_rts_received) csma_ca_fct_ptr_rts_received(mac_frame);
 800238e:	4b50      	ldr	r3, [pc, #320]	; (80024d0 <rf24_csma_ca_frame_received_handler+0x1c0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <rf24_csma_ca_frame_received_handler+0x8e>
 8002396:	4b4e      	ldr	r3, [pc, #312]	; (80024d0 <rf24_csma_ca_frame_received_handler+0x1c0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	4798      	blx	r3

				rf24_debug(CSMA_CA, RECEIVE, CONTROL_RTS, mac_frame->rts.subtype, &mac_frame->transmitter, "addressed to me\n", "");
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	7c5b      	ldrb	r3, [r3, #17]
 80023a2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	4619      	mov	r1, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	330a      	adds	r3, #10
 80023ae:	4a49      	ldr	r2, [pc, #292]	; (80024d4 <rf24_csma_ca_frame_received_handler+0x1c4>)
 80023b0:	9202      	str	r2, [sp, #8]
 80023b2:	4a49      	ldr	r2, [pc, #292]	; (80024d8 <rf24_csma_ca_frame_received_handler+0x1c8>)
 80023b4:	9201      	str	r2, [sp, #4]
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	460b      	mov	r3, r1
 80023ba:	2203      	movs	r2, #3
 80023bc:	2102      	movs	r1, #2
 80023be:	2003      	movs	r0, #3
 80023c0:	f7fe ff44 	bl	800124c <rf24_debug>
				rf24_csma_ca_wait_nav(mac_frame);

				rf24_debug(CSMA_CA, RECEIVE, CONTROL_RTS, mac_frame->rts.subtype, &mac_frame->transmitter, "jammed\n", "");
			}

			break;
 80023c4:	e07c      	b.n	80024c0 <rf24_csma_ca_frame_received_handler+0x1b0>
				rf24_csma_ca_wait_nav(mac_frame);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f88e 	bl	80024e8 <rf24_csma_ca_wait_nav>
				rf24_debug(CSMA_CA, RECEIVE, CONTROL_RTS, mac_frame->rts.subtype, &mac_frame->transmitter, "jammed\n", "");
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	7c5b      	ldrb	r3, [r3, #17]
 80023d0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	4619      	mov	r1, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	330a      	adds	r3, #10
 80023dc:	4a3d      	ldr	r2, [pc, #244]	; (80024d4 <rf24_csma_ca_frame_received_handler+0x1c4>)
 80023de:	9202      	str	r2, [sp, #8]
 80023e0:	4a3e      	ldr	r2, [pc, #248]	; (80024dc <rf24_csma_ca_frame_received_handler+0x1cc>)
 80023e2:	9201      	str	r2, [sp, #4]
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	460b      	mov	r3, r1
 80023e8:	2203      	movs	r2, #3
 80023ea:	2102      	movs	r1, #2
 80023ec:	2003      	movs	r0, #3
 80023ee:	f7fe ff2d 	bl	800124c <rf24_debug>
			break;
 80023f2:	e065      	b.n	80024c0 <rf24_csma_ca_frame_received_handler+0x1b0>
		/***************************************************************************************/

		case CONTROL_CTS:
		{
			// Check if CTS frame is addressed to me
			bool addressed_to_me = memcmp(mac_frame->receiver.bytes, rf24_mac_get_address()->bytes, 6) == 0;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	1d1c      	adds	r4, r3, #4
 80023f8:	f000 fc42 	bl	8002c80 <rf24_mac_get_address>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2206      	movs	r2, #6
 8002400:	4619      	mov	r1, r3
 8002402:	4620      	mov	r0, r4
 8002404:	f003 fd06 	bl	8005e14 <memcmp>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	bf0c      	ite	eq
 800240e:	2301      	moveq	r3, #1
 8002410:	2300      	movne	r3, #0
 8002412:	73bb      	strb	r3, [r7, #14]

			if(addressed_to_me)
 8002414:	7bbb      	ldrb	r3, [r7, #14]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d02c      	beq.n	8002474 <rf24_csma_ca_frame_received_handler+0x164>
			{
				// Notice CTS received
				csma_ca_flags.cts_received = true;
 800241a:	4a2c      	ldr	r2, [pc, #176]	; (80024cc <rf24_csma_ca_frame_received_handler+0x1bc>)
 800241c:	7813      	ldrb	r3, [r2, #0]
 800241e:	f043 0308 	orr.w	r3, r3, #8
 8002422:	7013      	strb	r3, [r2, #0]

				// Stop stop-watch
				csma_ca_order.t_cts_response_us = rf24_stm32f1xx_stop_stopwatch();
 8002424:	f002 fa6e 	bl	8004904 <rf24_stm32f1xx_stop_stopwatch>
 8002428:	4602      	mov	r2, r0
 800242a:	4b2d      	ldr	r3, [pc, #180]	; (80024e0 <rf24_csma_ca_frame_received_handler+0x1d0>)
 800242c:	609a      	str	r2, [r3, #8]

				// Pop CTS timeout from task stack
				if(rf24_worker_current_task()->task == wait_for_cts) rf24_worker_pop_task();
 800242e:	f002 f8a9 	bl	8004584 <rf24_worker_current_task>
 8002432:	4603      	mov	r3, r0
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	2b08      	cmp	r3, #8
 8002438:	d101      	bne.n	800243e <rf24_csma_ca_frame_received_handler+0x12e>
 800243a:	f002 f8ad 	bl	8004598 <rf24_worker_pop_task>

				// Reset CSMA/CA routine
				//rf24_csma_ca_reset();

				// Call CTS received function pointer (callback function to ordering thread)
				if(csma_ca_order.fct_ptr_access_medium) csma_ca_order.fct_ptr_access_medium();
 800243e:	4b28      	ldr	r3, [pc, #160]	; (80024e0 <rf24_csma_ca_frame_received_handler+0x1d0>)
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d002      	beq.n	800244c <rf24_csma_ca_frame_received_handler+0x13c>
 8002446:	4b26      	ldr	r3, [pc, #152]	; (80024e0 <rf24_csma_ca_frame_received_handler+0x1d0>)
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	4798      	blx	r3

				rf24_debug(CSMA_CA, RECEIVE, CONTROL_CTS, mac_frame->rts.subtype, &mac_frame->transmitter, "access to medium\n", "");
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	7c5b      	ldrb	r3, [r3, #17]
 8002450:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002454:	b2db      	uxtb	r3, r3
 8002456:	4619      	mov	r1, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	330a      	adds	r3, #10
 800245c:	4a1d      	ldr	r2, [pc, #116]	; (80024d4 <rf24_csma_ca_frame_received_handler+0x1c4>)
 800245e:	9202      	str	r2, [sp, #8]
 8002460:	4a20      	ldr	r2, [pc, #128]	; (80024e4 <rf24_csma_ca_frame_received_handler+0x1d4>)
 8002462:	9201      	str	r2, [sp, #4]
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	460b      	mov	r3, r1
 8002468:	2204      	movs	r2, #4
 800246a:	2102      	movs	r1, #2
 800246c:	2003      	movs	r0, #3
 800246e:	f7fe feed 	bl	800124c <rf24_debug>

				// Wait NAV
				rf24_csma_ca_wait_nav(mac_frame);
			}

			break;
 8002472:	e025      	b.n	80024c0 <rf24_csma_ca_frame_received_handler+0x1b0>
				rf24_debug(CSMA_CA, RECEIVE, CONTROL_CTS, mac_frame->rts.subtype, &mac_frame->transmitter, "jammed\n", "");
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	7c5b      	ldrb	r3, [r3, #17]
 8002478:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800247c:	b2db      	uxtb	r3, r3
 800247e:	4619      	mov	r1, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	330a      	adds	r3, #10
 8002484:	4a13      	ldr	r2, [pc, #76]	; (80024d4 <rf24_csma_ca_frame_received_handler+0x1c4>)
 8002486:	9202      	str	r2, [sp, #8]
 8002488:	4a14      	ldr	r2, [pc, #80]	; (80024dc <rf24_csma_ca_frame_received_handler+0x1cc>)
 800248a:	9201      	str	r2, [sp, #4]
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	460b      	mov	r3, r1
 8002490:	2204      	movs	r2, #4
 8002492:	2102      	movs	r1, #2
 8002494:	2003      	movs	r0, #3
 8002496:	f7fe fed9 	bl	800124c <rf24_debug>
				rf24_csma_ca_wait_nav(mac_frame);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f824 	bl	80024e8 <rf24_csma_ca_wait_nav>
			break;
 80024a0:	e00e      	b.n	80024c0 <rf24_csma_ca_frame_received_handler+0x1b0>
		/***************************************************************************************/

		default:
		{
			// All frames which aren't addressed to me and have a valid NAV attached
			if(!addressed_to_me)
 80024a2:	7bfb      	ldrb	r3, [r7, #15]
 80024a4:	f083 0301 	eor.w	r3, r3, #1
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d007      	beq.n	80024be <rf24_csma_ca_frame_received_handler+0x1ae>
			{
				// Wait NAV
				if(mac_frame->duration > 0) rf24_csma_ca_wait_nav(mac_frame);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	885b      	ldrh	r3, [r3, #2]
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d002      	beq.n	80024be <rf24_csma_ca_frame_received_handler+0x1ae>
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f000 f815 	bl	80024e8 <rf24_csma_ca_wait_nav>
			}

			break;
 80024be:	bf00      	nop
		}
	}
}
 80024c0:	bf00      	nop
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd90      	pop	{r4, r7, pc}
 80024c8:	080026c5 	.word	0x080026c5
 80024cc:	200005b4 	.word	0x200005b4
 80024d0:	20000784 	.word	0x20000784
 80024d4:	080071c8 	.word	0x080071c8
 80024d8:	08007334 	.word	0x08007334
 80024dc:	08007348 	.word	0x08007348
 80024e0:	20000770 	.word	0x20000770
 80024e4:	08007350 	.word	0x08007350

080024e8 <rf24_csma_ca_wait_nav>:

void rf24_csma_ca_wait_nav(rf24_mac_frame *mac_frame)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
	uint32_t t_nav_us = mac_frame->duration * 1000;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	885b      	ldrh	r3, [r3, #2]
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	461a      	mov	r2, r3
 80024f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024fc:	fb03 f302 	mul.w	r3, r3, r2
 8002500:	60fb      	str	r3, [r7, #12]

	// Pointer to current (working) tasks
	struct rf24_task *task = rf24_worker_current_task();
 8002502:	f002 f83f 	bl	8004584 <rf24_worker_current_task>
 8002506:	60b8      	str	r0, [r7, #8]

	// Am i trying to access medium? -> current task == wait random back-off
	if(task->task == wait_random_backoff)
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b04      	cmp	r3, #4
 800250e:	d109      	bne.n	8002524 <rf24_csma_ca_wait_nav+0x3c>
	{
		// Push a new SIFS before remaining back-off timer (task) into task-pipe
		rf24_worker_push_wait(wait_sifs, T_SIFS_US);
 8002510:	f242 7110 	movw	r1, #10000	; 0x2710
 8002514:	2000      	movs	r0, #0
 8002516:	f001 ff8b 	bl	8004430 <rf24_worker_push_wait>

		// Set flag back off competition lost
		csma_ca_flags.backoff_competition_lost = true;
 800251a:	4a1d      	ldr	r2, [pc, #116]	; (8002590 <rf24_csma_ca_wait_nav+0xa8>)
 800251c:	7813      	ldrb	r3, [r2, #0]
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	7013      	strb	r3, [r2, #0]
			//rf24_debug("CSMA/CA: [BACK-OFF] competition lost against %s", decimal_to_string(mac_frame->transmitter.bytes, 6, ':'));
		#endif
	}

	// Am I already waiting?
	if(task->task == wait_nav)
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b03      	cmp	r3, #3
 800252a:	d122      	bne.n	8002572 <rf24_csma_ca_wait_nav+0x8a>
	{
		switch(mac_frame->frame_control.subtype)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	781a      	ldrb	r2, [r3, #0]
 8002530:	0992      	lsrs	r2, r2, #6
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	785b      	ldrb	r3, [r3, #1]
 8002536:	f003 0303 	and.w	r3, r3, #3
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4313      	orrs	r3, r2
 800253e:	b2db      	uxtb	r3, r3
 8002540:	3b03      	subs	r3, #3
 8002542:	2b01      	cmp	r3, #1
 8002544:	d80d      	bhi.n	8002562 <rf24_csma_ca_wait_nav+0x7a>
		{
			// If RTS or CTS received a new transmission starts, therefore reset wait NAV task
			case CONTROL_RTS: case CONTROL_CTS:
			{
				// Pop current wait NAV task
				rf24_worker_pop_task();
 8002546:	f002 f827 	bl	8004598 <rf24_worker_pop_task>

				// Build a new wait NAV task
				task = rf24_worker_build_task(wait_nav, 1, t_nav_us, false);
 800254a:	2300      	movs	r3, #0
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	2101      	movs	r1, #1
 8002550:	2003      	movs	r0, #3
 8002552:	f001 ff9f 	bl	8004494 <rf24_worker_build_task>
 8002556:	60b8      	str	r0, [r7, #8]

				// Attach it to NAV expired function
				rf24_worker_push(task, rf24_csma_ca_nav_expired);
 8002558:	490e      	ldr	r1, [pc, #56]	; (8002594 <rf24_csma_ca_wait_nav+0xac>)
 800255a:	68b8      	ldr	r0, [r7, #8]
 800255c:	f001 ff8b 	bl	8004476 <rf24_worker_push>

				break;
 8002560:	e012      	b.n	8002588 <rf24_csma_ca_wait_nav+0xa0>
			}
			// Otherwise update wait NAV task (add duration of new MAC frame on top of current task)
			default:
				task->t_cycle_us += t_nav_us;
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	685a      	ldr	r2, [r3, #4]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	441a      	add	r2, r3
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	605a      	str	r2, [r3, #4]
				break;
 800256e:	bf00      	nop
 8002570:	e00a      	b.n	8002588 <rf24_csma_ca_wait_nav+0xa0>
		#endif
	}
	else
	{
		// Build a new wait NAV task
		task = rf24_worker_build_task(wait_nav, 1, t_nav_us /*1s test*/, false);
 8002572:	2300      	movs	r3, #0
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	2101      	movs	r1, #1
 8002578:	2003      	movs	r0, #3
 800257a:	f001 ff8b 	bl	8004494 <rf24_worker_build_task>
 800257e:	60b8      	str	r0, [r7, #8]

		// Attach it to NAV expired function
		rf24_worker_push(task, rf24_csma_ca_nav_expired);
 8002580:	4904      	ldr	r1, [pc, #16]	; (8002594 <rf24_csma_ca_wait_nav+0xac>)
 8002582:	68b8      	ldr	r0, [r7, #8]
 8002584:	f001 ff77 	bl	8004476 <rf24_worker_push>
					rf24_mac_frame_subtype_str[mac_frame->frame_control.subtype],
					decimal_to_string(mac_frame->transmitter.bytes, 6, ':'));*/
		#endif
	}

}
 8002588:	bf00      	nop
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	200005b4 	.word	0x200005b4
 8002594:	08002799 	.word	0x08002799

08002598 <rf24_cmsa_ca_init>:

void rf24_cmsa_ca_init(rf24_csma_ca_fct_ptr_rts_received fct_ptr_rts_received)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
	// CTS received (start of reception) callback function
	csma_ca_fct_ptr_rts_received = fct_ptr_rts_received;
 80025a0:	4a04      	ldr	r2, [pc, #16]	; (80025b4 <rf24_cmsa_ca_init+0x1c>)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6013      	str	r3, [r2, #0]

	// Reset routine
	rf24_csma_ca_reset();
 80025a6:	f000 f807 	bl	80025b8 <rf24_csma_ca_reset>
}
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	20000784 	.word	0x20000784

080025b8 <rf24_csma_ca_reset>:

void rf24_csma_ca_reset()
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
	// Reset csma_ca_flags
	memset(&csma_ca_flags, 0, sizeof(rf24_csma_ca_flags));
 80025bc:	2204      	movs	r2, #4
 80025be:	2100      	movs	r1, #0
 80025c0:	4806      	ldr	r0, [pc, #24]	; (80025dc <rf24_csma_ca_reset+0x24>)
 80025c2:	f003 fc41 	bl	8005e48 <memset>

	// Reset variables
	csma_ca_order.rts_transmits = 0;
 80025c6:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <rf24_csma_ca_reset+0x28>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	731a      	strb	r2, [r3, #12]
	csma_ca_order.t_random_backoff_us = 0;
 80025cc:	4b04      	ldr	r3, [pc, #16]	; (80025e0 <rf24_csma_ca_reset+0x28>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	605a      	str	r2, [r3, #4]

	// Reset task pipeline
	rf24_worker_reset_tasks();
 80025d2:	f001 fff5 	bl	80045c0 <rf24_worker_reset_tasks>
}
 80025d6:	bf00      	nop
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	200005b4 	.word	0x200005b4
 80025e0:	20000770 	.word	0x20000770

080025e4 <rf24_csma_ca_send_rts>:

void rf24_csma_ca_send_rts()
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b096      	sub	sp, #88	; 0x58
 80025e8:	af04      	add	r7, sp, #16
	rf24_mac_frame mac_frame;

	mac_frame.frame_control.type = CONTROL;
 80025ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80025ee:	2202      	movs	r2, #2
 80025f0:	f362 0385 	bfi	r3, r2, #2, #4
 80025f4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	mac_frame.frame_control.subtype = CONTROL_RTS;
 80025f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80025fa:	2203      	movs	r2, #3
 80025fc:	f362 1389 	bfi	r3, r2, #6, #4
 8002600:	853b      	strh	r3, [r7, #40]	; 0x28
	mac_frame.duration = T_NAV_RTS_MS;
 8002602:	231e      	movs	r3, #30
 8002604:	857b      	strh	r3, [r7, #42]	; 0x2a
	mac_frame.transmitter = *rf24_mac_get_address();
 8002606:	f000 fb3b 	bl	8002c80 <rf24_mac_get_address>
 800260a:	4602      	mov	r2, r0
 800260c:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8002610:	6811      	ldr	r1, [r2, #0]
 8002612:	6019      	str	r1, [r3, #0]
 8002614:	8892      	ldrh	r2, [r2, #4]
 8002616:	809a      	strh	r2, [r3, #4]
	mac_frame.receiver = csma_ca_order.transmission->receiver;
 8002618:	4b27      	ldr	r3, [pc, #156]	; (80026b8 <rf24_csma_ca_send_rts+0xd4>)
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002620:	3205      	adds	r2, #5
 8002622:	6810      	ldr	r0, [r2, #0]
 8002624:	6018      	str	r0, [r3, #0]
 8002626:	8892      	ldrh	r2, [r2, #4]
 8002628:	809a      	strh	r2, [r3, #4]
	mac_frame.rts.type = csma_ca_order.transmission->frame_type;
 800262a:	4b23      	ldr	r3, [pc, #140]	; (80026b8 <rf24_csma_ca_send_rts+0xd4>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	78db      	ldrb	r3, [r3, #3]
 8002630:	f003 030f 	and.w	r3, r3, #15
 8002634:	b2da      	uxtb	r2, r3
 8002636:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800263a:	f362 0303 	bfi	r3, r2, #0, #4
 800263e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	mac_frame.rts.subtype = csma_ca_order.transmission->frame_subtype;
 8002642:	4b1d      	ldr	r3, [pc, #116]	; (80026b8 <rf24_csma_ca_send_rts+0xd4>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	791b      	ldrb	r3, [r3, #4]
 8002648:	f003 030f 	and.w	r3, r3, #15
 800264c:	b2da      	uxtb	r2, r3
 800264e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002652:	f362 1307 	bfi	r3, r2, #4, #4
 8002656:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	mac_frame.rts.length = csma_ca_order.transmission->length;
 800265a:	4b17      	ldr	r3, [pc, #92]	; (80026b8 <rf24_csma_ca_send_rts+0xd4>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002662:	b29b      	uxth	r3, r3
 8002664:	877b      	strh	r3, [r7, #58]	; 0x3a

	rf24_module_tx_data tx_data;
	rf24_mac_frame_to_tx_data(&mac_frame, &tx_data);
 8002666:	1d3a      	adds	r2, r7, #4
 8002668:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800266c:	4611      	mov	r1, r2
 800266e:	4618      	mov	r0, r3
 8002670:	f000 fb1a 	bl	8002ca8 <rf24_mac_frame_to_tx_data>
	rf24_module_transmit(&tx_data);
 8002674:	1d3b      	adds	r3, r7, #4
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff fdb0 	bl	80021dc <rf24_module_transmit>

	// notice attempt
	csma_ca_order.rts_transmits++;
 800267c:	4b0e      	ldr	r3, [pc, #56]	; (80026b8 <rf24_csma_ca_send_rts+0xd4>)
 800267e:	7b1b      	ldrb	r3, [r3, #12]
 8002680:	3301      	adds	r3, #1
 8002682:	b2da      	uxtb	r2, r3
 8002684:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <rf24_csma_ca_send_rts+0xd4>)
 8002686:	731a      	strb	r2, [r3, #12]

	// start stop watch to measure time between RTS and CTS replies
	rf24_stm32f1xx_start_stopwatch();
 8002688:	f002 f92e 	bl	80048e8 <rf24_stm32f1xx_start_stopwatch>

	rf24_debug(CSMA_CA, TRANSMIT, CONTROL_RTS, rf24_mac_get_transmission()->frame_subtype, &mac_frame.receiver, "\n", "");
 800268c:	f000 faee 	bl	8002c6c <rf24_mac_get_transmission>
 8002690:	4603      	mov	r3, r0
 8002692:	791a      	ldrb	r2, [r3, #4]
 8002694:	4b09      	ldr	r3, [pc, #36]	; (80026bc <rf24_csma_ca_send_rts+0xd8>)
 8002696:	9302      	str	r3, [sp, #8]
 8002698:	4b09      	ldr	r3, [pc, #36]	; (80026c0 <rf24_csma_ca_send_rts+0xdc>)
 800269a:	9301      	str	r3, [sp, #4]
 800269c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026a0:	3304      	adds	r3, #4
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	4613      	mov	r3, r2
 80026a6:	2203      	movs	r2, #3
 80026a8:	2101      	movs	r1, #1
 80026aa:	2003      	movs	r0, #3
 80026ac:	f7fe fdce 	bl	800124c <rf24_debug>
}
 80026b0:	bf00      	nop
 80026b2:	3748      	adds	r7, #72	; 0x48
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	20000770 	.word	0x20000770
 80026bc:	080071c8 	.word	0x080071c8
 80026c0:	08007364 	.word	0x08007364

080026c4 <rf24_csma_ca_send_cts>:

void rf24_csma_ca_send_cts()
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b096      	sub	sp, #88	; 0x58
 80026c8:	af04      	add	r7, sp, #16
	rf24_mac_frame mac_frame;

	mac_frame.frame_control.type = CONTROL;
 80026ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80026ce:	2202      	movs	r2, #2
 80026d0:	f362 0385 	bfi	r3, r2, #2, #4
 80026d4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	mac_frame.frame_control.subtype = CONTROL_CTS;
 80026d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80026da:	2204      	movs	r2, #4
 80026dc:	f362 1389 	bfi	r3, r2, #6, #4
 80026e0:	853b      	strh	r3, [r7, #40]	; 0x28
	mac_frame.duration = T_NAV_CTS_MS;
 80026e2:	2314      	movs	r3, #20
 80026e4:	857b      	strh	r3, [r7, #42]	; 0x2a
	mac_frame.transmitter = *rf24_mac_get_address();
 80026e6:	f000 facb 	bl	8002c80 <rf24_mac_get_address>
 80026ea:	4602      	mov	r2, r0
 80026ec:	f107 0332 	add.w	r3, r7, #50	; 0x32
 80026f0:	6811      	ldr	r1, [r2, #0]
 80026f2:	6019      	str	r1, [r3, #0]
 80026f4:	8892      	ldrh	r2, [r2, #4]
 80026f6:	809a      	strh	r2, [r3, #4]
	mac_frame.rts.type = csma_ca_order.transmission->frame_type;
 80026f8:	4b24      	ldr	r3, [pc, #144]	; (800278c <rf24_csma_ca_send_cts+0xc8>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	78db      	ldrb	r3, [r3, #3]
 80026fe:	f003 030f 	and.w	r3, r3, #15
 8002702:	b2da      	uxtb	r2, r3
 8002704:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002708:	f362 0303 	bfi	r3, r2, #0, #4
 800270c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	mac_frame.rts.subtype = csma_ca_order.transmission->frame_subtype;
 8002710:	4b1e      	ldr	r3, [pc, #120]	; (800278c <rf24_csma_ca_send_cts+0xc8>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	791b      	ldrb	r3, [r3, #4]
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	b2da      	uxtb	r2, r3
 800271c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002720:	f362 1307 	bfi	r3, r2, #4, #4
 8002724:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	mac_frame.rts.length = csma_ca_order.transmission->length;
 8002728:	4b18      	ldr	r3, [pc, #96]	; (800278c <rf24_csma_ca_send_cts+0xc8>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002730:	b29b      	uxth	r3, r3
 8002732:	877b      	strh	r3, [r7, #58]	; 0x3a
	mac_frame.receiver = rf24_worker_current_task()->data.csma.receiver;
 8002734:	f001 ff26 	bl	8004584 <rf24_worker_current_task>
 8002738:	4602      	mov	r2, r0
 800273a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800273e:	320c      	adds	r2, #12
 8002740:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002744:	6018      	str	r0, [r3, #0]
 8002746:	3304      	adds	r3, #4
 8002748:	8019      	strh	r1, [r3, #0]

	rf24_module_tx_data tx_data;
	rf24_mac_frame_to_tx_data(&mac_frame, &tx_data);
 800274a:	1d3a      	adds	r2, r7, #4
 800274c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002750:	4611      	mov	r1, r2
 8002752:	4618      	mov	r0, r3
 8002754:	f000 faa8 	bl	8002ca8 <rf24_mac_frame_to_tx_data>
	rf24_module_transmit(&tx_data);
 8002758:	1d3b      	adds	r3, r7, #4
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff fd3e 	bl	80021dc <rf24_module_transmit>

	rf24_debug(CSMA_CA, TRANSMIT, CONTROL_CTS, rf24_mac_get_transmission()->frame_subtype, &mac_frame.receiver, "\n","");
 8002760:	f000 fa84 	bl	8002c6c <rf24_mac_get_transmission>
 8002764:	4603      	mov	r3, r0
 8002766:	791a      	ldrb	r2, [r3, #4]
 8002768:	4b09      	ldr	r3, [pc, #36]	; (8002790 <rf24_csma_ca_send_cts+0xcc>)
 800276a:	9302      	str	r3, [sp, #8]
 800276c:	4b09      	ldr	r3, [pc, #36]	; (8002794 <rf24_csma_ca_send_cts+0xd0>)
 800276e:	9301      	str	r3, [sp, #4]
 8002770:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002774:	3304      	adds	r3, #4
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	4613      	mov	r3, r2
 800277a:	2204      	movs	r2, #4
 800277c:	2101      	movs	r1, #1
 800277e:	2003      	movs	r0, #3
 8002780:	f7fe fd64 	bl	800124c <rf24_debug>
}
 8002784:	bf00      	nop
 8002786:	3748      	adds	r7, #72	; 0x48
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	20000770 	.word	0x20000770
 8002790:	080071c8 	.word	0x080071c8
 8002794:	08007364 	.word	0x08007364

08002798 <rf24_csma_ca_nav_expired>:

void rf24_csma_ca_nav_expired()
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af04      	add	r7, sp, #16
	rf24_debug(CSMA_CA, INFO, VOID, VOID, NULL, "NAV expired, wake up & proceed\n","");
 800279e:	4b07      	ldr	r3, [pc, #28]	; (80027bc <rf24_csma_ca_nav_expired+0x24>)
 80027a0:	9302      	str	r3, [sp, #8]
 80027a2:	4b07      	ldr	r3, [pc, #28]	; (80027c0 <rf24_csma_ca_nav_expired+0x28>)
 80027a4:	9301      	str	r3, [sp, #4]
 80027a6:	2300      	movs	r3, #0
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	2300      	movs	r3, #0
 80027ac:	2200      	movs	r2, #0
 80027ae:	2106      	movs	r1, #6
 80027b0:	2003      	movs	r0, #3
 80027b2:	f7fe fd4b 	bl	800124c <rf24_debug>
}
 80027b6:	bf00      	nop
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	080071c8 	.word	0x080071c8
 80027c0:	08007368 	.word	0x08007368

080027c4 <rf24_csma_ca_random_backoff_expired>:

void rf24_csma_ca_random_backoff_expired()
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
	// If access type is a broadcast, allow access to medium after a random back off
	switch(csma_ca_order.transmission->communication_type)
 80027c8:	4b07      	ldr	r3, [pc, #28]	; (80027e8 <rf24_csma_ca_random_backoff_expired+0x24>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	789b      	ldrb	r3, [r3, #2]
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d000      	beq.n	80027d4 <rf24_csma_ca_random_backoff_expired+0x10>
			// Random back off expired without disruption, call callback function
			if(csma_ca_order.fct_ptr_access_medium) csma_ca_order.fct_ptr_access_medium();

			break;
		}
		default: break;
 80027d2:	e007      	b.n	80027e4 <rf24_csma_ca_random_backoff_expired+0x20>
			if(csma_ca_order.fct_ptr_access_medium) csma_ca_order.fct_ptr_access_medium();
 80027d4:	4b04      	ldr	r3, [pc, #16]	; (80027e8 <rf24_csma_ca_random_backoff_expired+0x24>)
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d002      	beq.n	80027e2 <rf24_csma_ca_random_backoff_expired+0x1e>
 80027dc:	4b02      	ldr	r3, [pc, #8]	; (80027e8 <rf24_csma_ca_random_backoff_expired+0x24>)
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	4798      	blx	r3
			break;
 80027e2:	bf00      	nop
	}
}
 80027e4:	bf00      	nop
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	20000770 	.word	0x20000770

080027ec <rf24_csma_ca_cts_timeout>:

void rf24_csma_ca_cts_timeout()
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af04      	add	r7, sp, #16
	// Wait for CTS timeout

	// If CTS timeout reached & CTS not received
	if(!csma_ca_flags.cts_received)
 80027f2:	4b1d      	ldr	r3, [pc, #116]	; (8002868 <rf24_csma_ca_cts_timeout+0x7c>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	f003 0308 	and.w	r3, r3, #8
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d12f      	bne.n	8002860 <rf24_csma_ca_cts_timeout+0x74>
	{
		if(csma_ca_order.rts_transmits >= N_MAX_RTS_RETRANSMITS)
 8002800:	4b1a      	ldr	r3, [pc, #104]	; (800286c <rf24_csma_ca_cts_timeout+0x80>)
 8002802:	7b1b      	ldrb	r3, [r3, #12]
 8002804:	2b0e      	cmp	r3, #14
 8002806:	d90e      	bls.n	8002826 <rf24_csma_ca_cts_timeout+0x3a>
		{
			rf24_debug(CSMA_CA, TIMEOUT, VOID, VOID, NULL,"[CTS-Timeout] max retransmits reached -> transmission cancelled\n", "");
 8002808:	4b19      	ldr	r3, [pc, #100]	; (8002870 <rf24_csma_ca_cts_timeout+0x84>)
 800280a:	9302      	str	r3, [sp, #8]
 800280c:	4b19      	ldr	r3, [pc, #100]	; (8002874 <rf24_csma_ca_cts_timeout+0x88>)
 800280e:	9301      	str	r3, [sp, #4]
 8002810:	2300      	movs	r3, #0
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	2300      	movs	r3, #0
 8002816:	2200      	movs	r2, #0
 8002818:	2105      	movs	r1, #5
 800281a:	2003      	movs	r0, #3
 800281c:	f7fe fd16 	bl	800124c <rf24_debug>

			// Reset routine
			rf24_csma_ca_reset();
 8002820:	f7ff feca 	bl	80025b8 <rf24_csma_ca_reset>
					csma_ca_order.transmission,
					csma_ca_order.rts_transmits++,
					csma_ca_order.fct_ptr_access_medium);
		}
	}
}
 8002824:	e01c      	b.n	8002860 <rf24_csma_ca_cts_timeout+0x74>
					"[CTS-Timeout] %d/%d attempt(s) -> start again\n", csma_ca_order.rts_transmits, N_MAX_RTS_RETRANSMITS);
 8002826:	4b11      	ldr	r3, [pc, #68]	; (800286c <rf24_csma_ca_cts_timeout+0x80>)
 8002828:	7b1b      	ldrb	r3, [r3, #12]
			rf24_debug(CSMA_CA, TIMEOUT, VOID, VOID, NULL,
 800282a:	461a      	mov	r2, r3
 800282c:	230f      	movs	r3, #15
 800282e:	9303      	str	r3, [sp, #12]
 8002830:	9202      	str	r2, [sp, #8]
 8002832:	4b11      	ldr	r3, [pc, #68]	; (8002878 <rf24_csma_ca_cts_timeout+0x8c>)
 8002834:	9301      	str	r3, [sp, #4]
 8002836:	2300      	movs	r3, #0
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	2300      	movs	r3, #0
 800283c:	2200      	movs	r2, #0
 800283e:	2105      	movs	r1, #5
 8002840:	2003      	movs	r0, #3
 8002842:	f7fe fd03 	bl	800124c <rf24_debug>
			rf24_csma_ca_access_medium(
 8002846:	4b09      	ldr	r3, [pc, #36]	; (800286c <rf24_csma_ca_cts_timeout+0x80>)
 8002848:	6818      	ldr	r0, [r3, #0]
					csma_ca_order.rts_transmits++,
 800284a:	4b08      	ldr	r3, [pc, #32]	; (800286c <rf24_csma_ca_cts_timeout+0x80>)
 800284c:	7b1b      	ldrb	r3, [r3, #12]
			rf24_csma_ca_access_medium(
 800284e:	1c5a      	adds	r2, r3, #1
 8002850:	b2d1      	uxtb	r1, r2
 8002852:	4a06      	ldr	r2, [pc, #24]	; (800286c <rf24_csma_ca_cts_timeout+0x80>)
 8002854:	7311      	strb	r1, [r2, #12]
 8002856:	4a05      	ldr	r2, [pc, #20]	; (800286c <rf24_csma_ca_cts_timeout+0x80>)
 8002858:	6912      	ldr	r2, [r2, #16]
 800285a:	4619      	mov	r1, r3
 800285c:	f000 f82a 	bl	80028b4 <rf24_csma_ca_access_medium>
}
 8002860:	bf00      	nop
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	200005b4 	.word	0x200005b4
 800286c:	20000770 	.word	0x20000770
 8002870:	080071c8 	.word	0x080071c8
 8002874:	08007388 	.word	0x08007388
 8002878:	080073cc 	.word	0x080073cc

0800287c <rf24_csma_ca_compute_random_backoff>:

uint32_t rf24_csma_ca_compute_random_backoff(uint16_t contention_window)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	80fb      	strh	r3, [r7, #6]
	// Use timer count 3 to seed rand for a pseudo random number
	srand(rf24_stm32f1xx_get_tim3_count());
 8002886:	f002 f98f 	bl	8004ba8 <rf24_stm32f1xx_get_tim3_count>
 800288a:	4603      	mov	r3, r0
 800288c:	4618      	mov	r0, r3
 800288e:	f003 fb89 	bl	8005fa4 <srand>

	// Compute random back off with in given contention window
	return ( rand() % contention_window ) * T_SLOT_US;
 8002892:	f003 fbab 	bl	8005fec <rand>
 8002896:	4602      	mov	r2, r0
 8002898:	88fb      	ldrh	r3, [r7, #6]
 800289a:	fb92 f1f3 	sdiv	r1, r2, r3
 800289e:	fb03 f301 	mul.w	r3, r3, r1
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	f242 7210 	movw	r2, #10000	; 0x2710
 80028a8:	fb02 f303 	mul.w	r3, r2, r3
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <rf24_csma_ca_access_medium>:

void rf24_csma_ca_access_medium(
		rf24_mac_transmission*				transmission,
		uint8_t								rts_transmits,
		rf24_csma_ca_fct_ptr_access_medium 	fct_ptr_access_medium)
	{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b08c      	sub	sp, #48	; 0x30
 80028b8:	af04      	add	r7, sp, #16
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	460b      	mov	r3, r1
 80028be:	607a      	str	r2, [r7, #4]
 80028c0:	72fb      	strb	r3, [r7, #11]

	// Reset CSMA_CA routine
	rf24_csma_ca_reset();
 80028c2:	f7ff fe79 	bl	80025b8 <rf24_csma_ca_reset>

	csma_ca_order.transmission = transmission;
 80028c6:	4a30      	ldr	r2, [pc, #192]	; (8002988 <rf24_csma_ca_access_medium+0xd4>)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6013      	str	r3, [r2, #0]
	csma_ca_order.rts_transmits = rts_transmits;
 80028cc:	4a2e      	ldr	r2, [pc, #184]	; (8002988 <rf24_csma_ca_access_medium+0xd4>)
 80028ce:	7afb      	ldrb	r3, [r7, #11]
 80028d0:	7313      	strb	r3, [r2, #12]
	csma_ca_order.fct_ptr_access_medium = fct_ptr_access_medium;
 80028d2:	4a2d      	ldr	r2, [pc, #180]	; (8002988 <rf24_csma_ca_access_medium+0xd4>)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6113      	str	r3, [r2, #16]

	// 1)___________________________________________________________________________________________
	// Wait a DIFS

	rf24_worker_attach_wait(wait_difs, T_DIFS_US);
 80028d8:	f247 5130 	movw	r1, #30000	; 0x7530
 80028dc:	2001      	movs	r0, #1
 80028de:	f001 fd93 	bl	8004408 <rf24_worker_attach_wait>

	// 2)___________________________________________________________________________________________
	// Generate & wait random back-off

	uint32_t t_ramdom_backoff_us = rf24_csma_ca_compute_random_backoff(CONTENTION_WINDOW);
 80028e2:	2020      	movs	r0, #32
 80028e4:	f7ff ffca 	bl	800287c <rf24_csma_ca_compute_random_backoff>
 80028e8:	61f8      	str	r0, [r7, #28]
	csma_ca_order.t_random_backoff_us = t_ramdom_backoff_us;
 80028ea:	4a27      	ldr	r2, [pc, #156]	; (8002988 <rf24_csma_ca_access_medium+0xd4>)
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	6053      	str	r3, [r2, #4]

	struct rf24_task *task = rf24_worker_build_task(wait_random_backoff, 1, csma_ca_order.t_random_backoff_us, false);
 80028f0:	4b25      	ldr	r3, [pc, #148]	; (8002988 <rf24_csma_ca_access_medium+0xd4>)
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	2300      	movs	r3, #0
 80028f6:	2101      	movs	r1, #1
 80028f8:	2004      	movs	r0, #4
 80028fa:	f001 fdcb 	bl	8004494 <rf24_worker_build_task>
 80028fe:	61b8      	str	r0, [r7, #24]
	rf24_worker_attach(task, rf24_csma_ca_random_backoff_expired);
 8002900:	4922      	ldr	r1, [pc, #136]	; (800298c <rf24_csma_ca_access_medium+0xd8>)
 8002902:	69b8      	ldr	r0, [r7, #24]
 8002904:	f001 fda8 	bl	8004458 <rf24_worker_attach>

	// only send RTS in case of a directed (UNICAST or MULTICAST) CMSA/CA access (to a receiver node)
	switch(csma_ca_order.transmission->communication_type)
 8002908:	4b1f      	ldr	r3, [pc, #124]	; (8002988 <rf24_csma_ca_access_medium+0xd4>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	789b      	ldrb	r3, [r3, #2]
 800290e:	2b00      	cmp	r3, #0
 8002910:	db1d      	blt.n	800294e <rf24_csma_ca_access_medium+0x9a>
 8002912:	2b01      	cmp	r3, #1
 8002914:	dd02      	ble.n	800291c <rf24_csma_ca_access_medium+0x68>
 8002916:	2b02      	cmp	r3, #2
 8002918:	d01b      	beq.n	8002952 <rf24_csma_ca_access_medium+0x9e>
		}
		case BROADCAST:
		{
			break;
		};
		default: break;
 800291a:	e018      	b.n	800294e <rf24_csma_ca_access_medium+0x9a>
			struct rf24_task *task = rf24_worker_build_task(send_rts, 1, T_SIFS_US, false);
 800291c:	2300      	movs	r3, #0
 800291e:	f242 7210 	movw	r2, #10000	; 0x2710
 8002922:	2101      	movs	r1, #1
 8002924:	2005      	movs	r0, #5
 8002926:	f001 fdb5 	bl	8004494 <rf24_worker_build_task>
 800292a:	6178      	str	r0, [r7, #20]
			rf24_worker_attach(task, rf24_csma_ca_send_rts);
 800292c:	4918      	ldr	r1, [pc, #96]	; (8002990 <rf24_csma_ca_access_medium+0xdc>)
 800292e:	6978      	ldr	r0, [r7, #20]
 8002930:	f001 fd92 	bl	8004458 <rf24_worker_attach>
			task = rf24_worker_build_task(wait_for_cts, 1, T_CTS_TIMEOUT_US, false);
 8002934:	2300      	movs	r3, #0
 8002936:	f247 5230 	movw	r2, #30000	; 0x7530
 800293a:	2101      	movs	r1, #1
 800293c:	2008      	movs	r0, #8
 800293e:	f001 fda9 	bl	8004494 <rf24_worker_build_task>
 8002942:	6178      	str	r0, [r7, #20]
			rf24_worker_attach(task, rf24_csma_ca_cts_timeout);
 8002944:	4913      	ldr	r1, [pc, #76]	; (8002994 <rf24_csma_ca_access_medium+0xe0>)
 8002946:	6978      	ldr	r0, [r7, #20]
 8002948:	f001 fd86 	bl	8004458 <rf24_worker_attach>
			break;
 800294c:	e002      	b.n	8002954 <rf24_csma_ca_access_medium+0xa0>
		default: break;
 800294e:	bf00      	nop
 8002950:	e000      	b.n	8002954 <rf24_csma_ca_access_medium+0xa0>
			break;
 8002952:	bf00      	nop
	}

	rf24_debug(	CSMA_CA, INFO, csma_ca_order.transmission->frame_subtype, VOID, &csma_ca_order.transmission->receiver,
 8002954:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <rf24_csma_ca_access_medium+0xd4>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	7918      	ldrb	r0, [r3, #4]
 800295a:	4b0b      	ldr	r3, [pc, #44]	; (8002988 <rf24_csma_ca_access_medium+0xd4>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	3305      	adds	r3, #5
 8002960:	69fa      	ldr	r2, [r7, #28]
 8002962:	490d      	ldr	r1, [pc, #52]	; (8002998 <rf24_csma_ca_access_medium+0xe4>)
 8002964:	fba1 1202 	umull	r1, r2, r1, r2
 8002968:	0992      	lsrs	r2, r2, #6
 800296a:	9202      	str	r2, [sp, #8]
 800296c:	4a0b      	ldr	r2, [pc, #44]	; (800299c <rf24_csma_ca_access_medium+0xe8>)
 800296e:	9201      	str	r2, [sp, #4]
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	2300      	movs	r3, #0
 8002974:	4602      	mov	r2, r0
 8002976:	2106      	movs	r1, #6
 8002978:	2003      	movs	r0, #3
 800297a:	f7fe fc67 	bl	800124c <rf24_debug>
				"Access medium (Random-Backoff: %dms)\n", t_ramdom_backoff_us/1000);
}
 800297e:	bf00      	nop
 8002980:	3720      	adds	r7, #32
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	20000770 	.word	0x20000770
 800298c:	080027c5 	.word	0x080027c5
 8002990:	080025e5 	.word	0x080025e5
 8002994:	080027ed 	.word	0x080027ed
 8002998:	10624dd3 	.word	0x10624dd3
 800299c:	080073fc 	.word	0x080073fc

080029a0 <rf24_mac_frame_received_handler>:
//_________________________________________________________________________________________________________________________________________________________________________
// Function declarations
// Interrupt service routines / callback functions

void rf24_mac_frame_received_handler(rf24_mac_frame *mac_frame)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b088      	sub	sp, #32
 80029a4:	af04      	add	r7, sp, #16
 80029a6:	6078      	str	r0, [r7, #4]
	bool addressed_to_me = rf24_mac_addr_equal(&mac_frame->receiver, &mac_addr);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3304      	adds	r3, #4
 80029ac:	4929      	ldr	r1, [pc, #164]	; (8002a54 <rf24_mac_frame_received_handler+0xb4>)
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 f93c 	bl	8002c2c <rf24_mac_addr_equal>
 80029b4:	4603      	mov	r3, r0
 80029b6:	73fb      	strb	r3, [r7, #15]

	switch(mac_frame->frame_control.type)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	f3c3 0383 	ubfx	r3, r3, #2, #4
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d00d      	beq.n	80029e2 <rf24_mac_frame_received_handler+0x42>
 80029c6:	2b03      	cmp	r3, #3
 80029c8:	d000      	beq.n	80029cc <rf24_mac_frame_received_handler+0x2c>
					}
				}
			}
		}
	}
}
 80029ca:	e03f      	b.n	8002a4c <rf24_mac_frame_received_handler+0xac>
			if(addressed_to_me)
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d03b      	beq.n	8002a4a <rf24_mac_frame_received_handler+0xaa>
				_data_frame_to_payload(mac_frame, &mac_transmission);
 80029d2:	4921      	ldr	r1, [pc, #132]	; (8002a58 <rf24_mac_frame_received_handler+0xb8>)
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 fb43 	bl	8003060 <_data_frame_to_payload>
				rf24_mac_send_ack(mac_frame);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 fa1c 	bl	8002e18 <rf24_mac_send_ack>
			break;
 80029e0:	e033      	b.n	8002a4a <rf24_mac_frame_received_handler+0xaa>
			switch(mac_frame->frame_control.subtype)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	781a      	ldrb	r2, [r3, #0]
 80029e6:	0992      	lsrs	r2, r2, #6
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	785b      	ldrb	r3, [r3, #1]
 80029ec:	f003 0303 	and.w	r3, r3, #3
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4313      	orrs	r3, r2
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b05      	cmp	r3, #5
 80029f8:	d000      	beq.n	80029fc <rf24_mac_frame_received_handler+0x5c>
}
 80029fa:	e027      	b.n	8002a4c <rf24_mac_frame_received_handler+0xac>
					if(addressed_to_me)
 80029fc:	7bfb      	ldrb	r3, [r7, #15]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d024      	beq.n	8002a4c <rf24_mac_frame_received_handler+0xac>
						if(rf24_worker_current_task()->task == wait_for_ack) rf24_worker_pop_task();
 8002a02:	f001 fdbf 	bl	8004584 <rf24_worker_current_task>
 8002a06:	4603      	mov	r3, r0
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	2b0a      	cmp	r3, #10
 8002a0c:	d101      	bne.n	8002a12 <rf24_mac_frame_received_handler+0x72>
 8002a0e:	f001 fdc3 	bl	8004598 <rf24_worker_pop_task>
							MAC, RECEIVE, CONTROL_ACK, mac_frame->ack.subtype, &mac_frame->transmitter,
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	7c5b      	ldrb	r3, [r3, #17]
 8002a16:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002a1a:	b2db      	uxtb	r3, r3
						rf24_debug(
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	330a      	adds	r3, #10
							"frame %d\n", mac_transmission.frame_count);
 8002a22:	4a0d      	ldr	r2, [pc, #52]	; (8002a58 <rf24_mac_frame_received_handler+0xb8>)
 8002a24:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
						rf24_debug(
 8002a28:	9202      	str	r2, [sp, #8]
 8002a2a:	4a0c      	ldr	r2, [pc, #48]	; (8002a5c <rf24_mac_frame_received_handler+0xbc>)
 8002a2c:	9201      	str	r2, [sp, #4]
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	460b      	mov	r3, r1
 8002a32:	2205      	movs	r2, #5
 8002a34:	2102      	movs	r1, #2
 8002a36:	2002      	movs	r0, #2
 8002a38:	f7fe fc08 	bl	800124c <rf24_debug>
						if(mac_transmission.transmission_type == transmission) _process_transmission();
 8002a3c:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <rf24_mac_frame_received_handler+0xb8>)
 8002a3e:	785b      	ldrb	r3, [r3, #1]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d103      	bne.n	8002a4c <rf24_mac_frame_received_handler+0xac>
 8002a44:	f000 f944 	bl	8002cd0 <_process_transmission>
}
 8002a48:	e000      	b.n	8002a4c <rf24_mac_frame_received_handler+0xac>
			break;
 8002a4a:	bf00      	nop
}
 8002a4c:	bf00      	nop
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	20000788 	.word	0x20000788
 8002a58:	20000790 	.word	0x20000790
 8002a5c:	08007768 	.word	0x08007768

08002a60 <rf24_mac_reception_successfull>:

void rf24_mac_reception_successfull()
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
	// Slow down LED - show that I am back in IDLE
	rf24_stm32f1xx_set_led_cycle(T_LED_CYCLE_IDLE_MS);
 8002a64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a68:	f002 f908 	bl	8004c7c <rf24_stm32f1xx_set_led_cycle>

	switch(mac_transmission.frame_subtype)
 8002a6c:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <rf24_mac_reception_successfull+0x40>)
 8002a6e:	791b      	ldrb	r3, [r3, #4]
 8002a70:	2b06      	cmp	r3, #6
 8002a72:	d00e      	beq.n	8002a92 <rf24_mac_reception_successfull+0x32>
 8002a74:	2b07      	cmp	r3, #7
 8002a76:	d000      	beq.n	8002a7a <rf24_mac_reception_successfull+0x1a>
		{
			rf24_mac_print_payload(&mac_transmission);
			break;
		}

		default: break;
 8002a78:	e00f      	b.n	8002a9a <rf24_mac_reception_successfull+0x3a>
			rf24_network_rx_data_to_topology(mac_transmission.payload, mac_transmission.length);
 8002a7a:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <rf24_mac_reception_successfull+0x40>)
 8002a7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a7e:	4b08      	ldr	r3, [pc, #32]	; (8002aa0 <rf24_mac_reception_successfull+0x40>)
 8002a80:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a84:	4619      	mov	r1, r3
 8002a86:	4610      	mov	r0, r2
 8002a88:	f001 fa5e 	bl	8003f48 <rf24_network_rx_data_to_topology>
			rf24_network_topology_received();
 8002a8c:	f000 ff54 	bl	8003938 <rf24_network_topology_received>
			break;
 8002a90:	e003      	b.n	8002a9a <rf24_mac_reception_successfull+0x3a>
			rf24_mac_print_payload(&mac_transmission);
 8002a92:	4803      	ldr	r0, [pc, #12]	; (8002aa0 <rf24_mac_reception_successfull+0x40>)
 8002a94:	f000 fc7c 	bl	8003390 <rf24_mac_print_payload>
			break;
 8002a98:	bf00      	nop
	}
}
 8002a9a:	bf00      	nop
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	20000790 	.word	0x20000790

08002aa4 <rf24_mac_transmission_successfull>:

void rf24_mac_transmission_successfull()
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
	// Slow down LED - show that I am back in IDLE
	rf24_stm32f1xx_set_led_cycle(T_LED_CYCLE_IDLE_MS);
 8002aa8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002aac:	f002 f8e6 	bl	8004c7c <rf24_stm32f1xx_set_led_cycle>

	switch(mac_transmission.frame_type)
 8002ab0:	4b04      	ldr	r3, [pc, #16]	; (8002ac4 <rf24_mac_transmission_successfull+0x20>)
 8002ab2:	78db      	ldrb	r3, [r3, #3]
 8002ab4:	2b04      	cmp	r3, #4
 8002ab6:	d000      	beq.n	8002aba <rf24_mac_transmission_successfull+0x16>
	{
		case TOPOLOGY:
			rf24_network_transmission_successfull();
			break;
		default:
			break;
 8002ab8:	e002      	b.n	8002ac0 <rf24_mac_transmission_successfull+0x1c>
			rf24_network_transmission_successfull();
 8002aba:	f000 fed3 	bl	8003864 <rf24_network_transmission_successfull>
			break;
 8002abe:	bf00      	nop
	}
}
 8002ac0:	bf00      	nop
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	20000790 	.word	0x20000790

08002ac8 <rf24_mac_ack_timeout>:

void rf24_mac_ack_timeout()
{
 8002ac8:	b5b0      	push	{r4, r5, r7, lr}
 8002aca:	b088      	sub	sp, #32
 8002acc:	af06      	add	r7, sp, #24
	// Only retransmit frame again if attempts is lower than maximum retransmits
	if(mac_transmission.attemps < N_MAX_RETRANSMITS)
 8002ace:	4b2f      	ldr	r3, [pc, #188]	; (8002b8c <rf24_mac_ack_timeout+0xc4>)
 8002ad0:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002ad4:	2b0e      	cmp	r3, #14
 8002ad6:	d84a      	bhi.n	8002b6e <rf24_mac_ack_timeout+0xa6>
	{
		// Build a new "send_mac_frame" task
		struct rf24_task *task = rf24_worker_build_task(send_mac_frame, 1, T_SIFS_US, false);
 8002ad8:	2300      	movs	r3, #0
 8002ada:	f242 7210 	movw	r2, #10000	; 0x2710
 8002ade:	2101      	movs	r1, #1
 8002ae0:	2009      	movs	r0, #9
 8002ae2:	f001 fcd7 	bl	8004494 <rf24_worker_build_task>
 8002ae6:	6078      	str	r0, [r7, #4]

		// Attach mac_frame to task
		task->data.mac.mac_frame = mac_transmission.mac_frame;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a28      	ldr	r2, [pc, #160]	; (8002b8c <rf24_mac_ack_timeout+0xc4>)
 8002aec:	f103 040c 	add.w	r4, r3, #12
 8002af0:	f102 0511 	add.w	r5, r2, #17
 8002af4:	6828      	ldr	r0, [r5, #0]
 8002af6:	6869      	ldr	r1, [r5, #4]
 8002af8:	68aa      	ldr	r2, [r5, #8]
 8002afa:	68eb      	ldr	r3, [r5, #12]
 8002afc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002afe:	6928      	ldr	r0, [r5, #16]
 8002b00:	6969      	ldr	r1, [r5, #20]
 8002b02:	69aa      	ldr	r2, [r5, #24]
 8002b04:	c407      	stmia	r4!, {r0, r1, r2}
 8002b06:	8bab      	ldrh	r3, [r5, #28]
 8002b08:	7faa      	ldrb	r2, [r5, #30]
 8002b0a:	8023      	strh	r3, [r4, #0]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	70a3      	strb	r3, [r4, #2]

		// Attach function rf24_mac_send_frame to task
		rf24_worker_attach(task, _send_mac_frame);
 8002b10:	491f      	ldr	r1, [pc, #124]	; (8002b90 <rf24_mac_ack_timeout+0xc8>)
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f001 fca0 	bl	8004458 <rf24_worker_attach>

		// Create a "wait_for_ack" task
		task = rf24_worker_build_task(wait_for_ack, 1, T_ACK_TIMEOUT_US, false);
 8002b18:	2300      	movs	r3, #0
 8002b1a:	f247 5230 	movw	r2, #30000	; 0x7530
 8002b1e:	2101      	movs	r1, #1
 8002b20:	200a      	movs	r0, #10
 8002b22:	f001 fcb7 	bl	8004494 <rf24_worker_build_task>
 8002b26:	6078      	str	r0, [r7, #4]
		rf24_worker_attach(task, rf24_mac_ack_timeout);
 8002b28:	491a      	ldr	r1, [pc, #104]	; (8002b94 <rf24_mac_ack_timeout+0xcc>)
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f001 fc94 	bl	8004458 <rf24_worker_attach>

		// Notice one more attempt
		mac_transmission.attemps++;
 8002b30:	4b16      	ldr	r3, [pc, #88]	; (8002b8c <rf24_mac_ack_timeout+0xc4>)
 8002b32:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002b36:	3301      	adds	r3, #1
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	4b14      	ldr	r3, [pc, #80]	; (8002b8c <rf24_mac_ack_timeout+0xc4>)
 8002b3c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

		rf24_debug(
				MAC, TIMEOUT, VOID, VOID, NULL,
				"[ACK-Timeout] retransmit frame %d (%d/%d attempt/s)\n",
				mac_transmission.frame_count,
 8002b40:	4b12      	ldr	r3, [pc, #72]	; (8002b8c <rf24_mac_ack_timeout+0xc4>)
 8002b42:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
		rf24_debug(
 8002b46:	461a      	mov	r2, r3
				mac_transmission.attemps,
 8002b48:	4b10      	ldr	r3, [pc, #64]	; (8002b8c <rf24_mac_ack_timeout+0xc4>)
 8002b4a:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
		rf24_debug(
 8002b4e:	4619      	mov	r1, r3
 8002b50:	230f      	movs	r3, #15
 8002b52:	9304      	str	r3, [sp, #16]
 8002b54:	9103      	str	r1, [sp, #12]
 8002b56:	9202      	str	r2, [sp, #8]
 8002b58:	4b0f      	ldr	r3, [pc, #60]	; (8002b98 <rf24_mac_ack_timeout+0xd0>)
 8002b5a:	9301      	str	r3, [sp, #4]
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	9300      	str	r3, [sp, #0]
 8002b60:	2300      	movs	r3, #0
 8002b62:	2200      	movs	r2, #0
 8002b64:	2105      	movs	r1, #5
 8002b66:	2002      	movs	r0, #2
 8002b68:	f7fe fb70 	bl	800124c <rf24_debug>
	else
	{
		// If debug enabled print max retries reached
		rf24_debug(MAC, INFO, VOID, VOID, NULL, "[ACK-Timeout] max retries reached -> transmission cancelled\n");
	}
}
 8002b6c:	e009      	b.n	8002b82 <rf24_mac_ack_timeout+0xba>
		rf24_debug(MAC, INFO, VOID, VOID, NULL, "[ACK-Timeout] max retries reached -> transmission cancelled\n");
 8002b6e:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <rf24_mac_ack_timeout+0xd4>)
 8002b70:	9301      	str	r3, [sp, #4]
 8002b72:	2300      	movs	r3, #0
 8002b74:	9300      	str	r3, [sp, #0]
 8002b76:	2300      	movs	r3, #0
 8002b78:	2200      	movs	r2, #0
 8002b7a:	2106      	movs	r1, #6
 8002b7c:	2002      	movs	r0, #2
 8002b7e:	f7fe fb65 	bl	800124c <rf24_debug>
}
 8002b82:	bf00      	nop
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bdb0      	pop	{r4, r5, r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20000790 	.word	0x20000790
 8002b90:	08002de1 	.word	0x08002de1
 8002b94:	08002ac9 	.word	0x08002ac9
 8002b98:	08007774 	.word	0x08007774
 8002b9c:	080077ac 	.word	0x080077ac

08002ba0 <rf24_mac_init>:


// FUNCTIONS

void rf24_mac_init()
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af04      	add	r7, sp, #16
	// csma ca init
	rf24_cmsa_ca_init(rf24_mac_setup_reception);
 8002ba6:	480e      	ldr	r0, [pc, #56]	; (8002be0 <rf24_mac_init+0x40>)
 8002ba8:	f7ff fcf6 	bl	8002598 <rf24_cmsa_ca_init>

	// build mac adress from stm32 uuid
	rf24_mac_build_address();
 8002bac:	f000 f820 	bl	8002bf0 <rf24_mac_build_address>

	rf24_debug(MAC, INFO, VOID, VOID, NULL, "%-25s %s\n", "MAC_ADDRESS", decimal_to_string(mac_addr.bytes, 6, ':'));
 8002bb0:	223a      	movs	r2, #58	; 0x3a
 8002bb2:	2106      	movs	r1, #6
 8002bb4:	480b      	ldr	r0, [pc, #44]	; (8002be4 <rf24_mac_init+0x44>)
 8002bb6:	f7fe fcab 	bl	8001510 <decimal_to_string>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	9303      	str	r3, [sp, #12]
 8002bbe:	4b0a      	ldr	r3, [pc, #40]	; (8002be8 <rf24_mac_init+0x48>)
 8002bc0:	9302      	str	r3, [sp, #8]
 8002bc2:	4b0a      	ldr	r3, [pc, #40]	; (8002bec <rf24_mac_init+0x4c>)
 8002bc4:	9301      	str	r3, [sp, #4]
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	2200      	movs	r2, #0
 8002bce:	2106      	movs	r1, #6
 8002bd0:	2002      	movs	r0, #2
 8002bd2:	f7fe fb3b 	bl	800124c <rf24_debug>

	rf24_mac_print_timings();
 8002bd6:	f000 fc2b 	bl	8003430 <rf24_mac_print_timings>

	//struct rf24_csma_ca_slot_time slot_time;
	//slot_time.ms = 1000;
	//rf24_csma_ca_access_medium(&mac_addr_broadcast, &slot_time);*/

}
 8002bda:	bf00      	nop
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	080030d9 	.word	0x080030d9
 8002be4:	20000788 	.word	0x20000788
 8002be8:	080077ec 	.word	0x080077ec
 8002bec:	080077f8 	.word	0x080077f8

08002bf0 <rf24_mac_build_address>:

void rf24_mac_build_address()
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
	// Read md5 hashed UUID from stm32 UC
	uint8_t* uuid_md5hashed = rf24_stm32f1xx_get_uuid_md5hashed();
 8002bf6:	f001 fe8f 	bl	8004918 <rf24_stm32f1xx_get_uuid_md5hashed>
 8002bfa:	6038      	str	r0, [r7, #0]

	// Take first 6 byte of md5 hashed UUID as MAC address
	for(int i=0; i<6; i++) mac_addr.bytes[i] = uuid_md5hashed[i];
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	607b      	str	r3, [r7, #4]
 8002c00:	e00b      	b.n	8002c1a <rf24_mac_build_address+0x2a>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	4413      	add	r3, r2
 8002c08:	7819      	ldrb	r1, [r3, #0]
 8002c0a:	4a07      	ldr	r2, [pc, #28]	; (8002c28 <rf24_mac_build_address+0x38>)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4413      	add	r3, r2
 8002c10:	460a      	mov	r2, r1
 8002c12:	701a      	strb	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3301      	adds	r3, #1
 8002c18:	607b      	str	r3, [r7, #4]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b05      	cmp	r3, #5
 8002c1e:	ddf0      	ble.n	8002c02 <rf24_mac_build_address+0x12>
}
 8002c20:	bf00      	nop
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	20000788 	.word	0x20000788

08002c2c <rf24_mac_addr_equal>:

bool rf24_mac_addr_equal(rf24_mac_addr *mac_addr1, rf24_mac_addr *mac_addr2)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
	for(int i = 0; i <= 5; i++)
 8002c36:	2300      	movs	r3, #0
 8002c38:	60fb      	str	r3, [r7, #12]
 8002c3a:	e00e      	b.n	8002c5a <rf24_mac_addr_equal+0x2e>
	{
		if (mac_addr1->bytes[i] != mac_addr2->bytes[i]) return false;
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	4413      	add	r3, r2
 8002c42:	781a      	ldrb	r2, [r3, #0]
 8002c44:	6839      	ldr	r1, [r7, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	440b      	add	r3, r1
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d001      	beq.n	8002c54 <rf24_mac_addr_equal+0x28>
 8002c50:	2300      	movs	r3, #0
 8002c52:	e006      	b.n	8002c62 <rf24_mac_addr_equal+0x36>
	for(int i = 0; i <= 5; i++)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	3301      	adds	r3, #1
 8002c58:	60fb      	str	r3, [r7, #12]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2b05      	cmp	r3, #5
 8002c5e:	dded      	ble.n	8002c3c <rf24_mac_addr_equal+0x10>
	}

	return true;
 8002c60:	2301      	movs	r3, #1
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr

08002c6c <rf24_mac_get_transmission>:

rf24_mac_transmission* rf24_mac_get_transmission()
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
	return &mac_transmission;
 8002c70:	4b02      	ldr	r3, [pc, #8]	; (8002c7c <rf24_mac_get_transmission+0x10>)
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	20000790 	.word	0x20000790

08002c80 <rf24_mac_get_address>:

rf24_mac_addr* rf24_mac_get_address()
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
	return &mac_addr;
 8002c84:	4b02      	ldr	r3, [pc, #8]	; (8002c90 <rf24_mac_get_address+0x10>)
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bc80      	pop	{r7}
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	20000788 	.word	0x20000788

08002c94 <rf24_mac_get_broadcast_address>:

rf24_mac_addr* rf24_mac_get_broadcast_address()
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
	return &mac_addr_broadcast;
 8002c98:	4b02      	ldr	r3, [pc, #8]	; (8002ca4 <rf24_mac_get_broadcast_address+0x10>)
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bc80      	pop	{r7}
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	20000338 	.word	0x20000338

08002ca8 <rf24_mac_frame_to_tx_data>:

void rf24_mac_frame_to_tx_data(rf24_mac_frame *mac_frame, rf24_module_tx_data *tx_data)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
	// Copy MAC frame (struct) into PAYLOAD (byte array)
	memcpy(tx_data->payload, (uint8_t*) mac_frame , 32);
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f003 f8ba 	bl	8005e32 <memcpy>

	// PAYLOAD of nRF24L01 has a fixed 32 bit frame
	tx_data->length = 32;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	f883 2020 	strb.w	r2, [r3, #32]
}
 8002cc6:	bf00      	nop
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
	...

08002cd0 <_process_transmission>:
{
	mac_frame = (rf24_mac_frame*) rx_data->payload;
}

void _process_transmission()
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af04      	add	r7, sp, #16
	// Transmission has not transferred bytes left?
	if(mac_transmission.index < mac_transmission.length)
 8002cd6:	4b25      	ldr	r3, [pc, #148]	; (8002d6c <_process_transmission+0x9c>)
 8002cd8:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8002cdc:	4b23      	ldr	r3, [pc, #140]	; (8002d6c <_process_transmission+0x9c>)
 8002cde:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d222      	bcs.n	8002d2c <_process_transmission+0x5c>
	{
		// Reset attempts (each frame can be retransmitted 15 times)
		mac_transmission.attemps = 0;
 8002ce6:	4b21      	ldr	r3, [pc, #132]	; (8002d6c <_process_transmission+0x9c>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

		// Create a "send mac frame" task, wait a SIFS before transmission
		struct rf24_task *task = rf24_worker_build_task(send_mac_frame, 1, T_SIFS_US, false);
 8002cee:	2300      	movs	r3, #0
 8002cf0:	f242 7210 	movw	r2, #10000	; 0x2710
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	2009      	movs	r0, #9
 8002cf8:	f001 fbcc 	bl	8004494 <rf24_worker_build_task>
 8002cfc:	6078      	str	r0, [r7, #4]

		// Assemble next data frame
		_payload_to_data_frame(&mac_transmission, &task->data.mac.mac_frame);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	330c      	adds	r3, #12
 8002d02:	4619      	mov	r1, r3
 8002d04:	4819      	ldr	r0, [pc, #100]	; (8002d6c <_process_transmission+0x9c>)
 8002d06:	f000 f8f5 	bl	8002ef4 <_payload_to_data_frame>

		// Bind send mac frame function to task
		rf24_worker_attach(task, _send_mac_frame);
 8002d0a:	4919      	ldr	r1, [pc, #100]	; (8002d70 <_process_transmission+0xa0>)
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f001 fba3 	bl	8004458 <rf24_worker_attach>

		// Create a "wait for ack" task
		task = rf24_worker_build_task(wait_for_ack, 1, T_ACK_TIMEOUT_US, false);
 8002d12:	2300      	movs	r3, #0
 8002d14:	f247 5230 	movw	r2, #30000	; 0x7530
 8002d18:	2101      	movs	r1, #1
 8002d1a:	200a      	movs	r0, #10
 8002d1c:	f001 fbba 	bl	8004494 <rf24_worker_build_task>
 8002d20:	6078      	str	r0, [r7, #4]
		rf24_worker_attach(task, rf24_mac_ack_timeout);
 8002d22:	4914      	ldr	r1, [pc, #80]	; (8002d74 <_process_transmission+0xa4>)
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f001 fb97 	bl	8004458 <rf24_worker_attach>
		{
			mac_transmission.state = FINALIZED;
			rf24_mac_transmission_successfull();
		}
	}
}
 8002d2a:	e01a      	b.n	8002d62 <_process_transmission+0x92>
		mac_transmission.state = COMPLETED;
 8002d2c:	4b0f      	ldr	r3, [pc, #60]	; (8002d6c <_process_transmission+0x9c>)
 8002d2e:	2201      	movs	r2, #1
 8002d30:	701a      	strb	r2, [r3, #0]
		rf24_debug(	MAC, TRANSMISSION, mac_transmission.frame_subtype, VOID, &mac_transmission.receiver,
 8002d32:	4b0e      	ldr	r3, [pc, #56]	; (8002d6c <_process_transmission+0x9c>)
 8002d34:	791a      	ldrb	r2, [r3, #4]
					mac_transmission.frame_count);
 8002d36:	4b0d      	ldr	r3, [pc, #52]	; (8002d6c <_process_transmission+0x9c>)
 8002d38:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
		rf24_debug(	MAC, TRANSMISSION, mac_transmission.frame_subtype, VOID, &mac_transmission.receiver,
 8002d3c:	9302      	str	r3, [sp, #8]
 8002d3e:	4b0e      	ldr	r3, [pc, #56]	; (8002d78 <_process_transmission+0xa8>)
 8002d40:	9301      	str	r3, [sp, #4]
 8002d42:	4b0e      	ldr	r3, [pc, #56]	; (8002d7c <_process_transmission+0xac>)
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	2300      	movs	r3, #0
 8002d48:	2103      	movs	r1, #3
 8002d4a:	2002      	movs	r0, #2
 8002d4c:	f7fe fa7e 	bl	800124c <rf24_debug>
		if(mac_transmission.state != FINALIZED)
 8002d50:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <_process_transmission+0x9c>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d004      	beq.n	8002d62 <_process_transmission+0x92>
			mac_transmission.state = FINALIZED;
 8002d58:	4b04      	ldr	r3, [pc, #16]	; (8002d6c <_process_transmission+0x9c>)
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	701a      	strb	r2, [r3, #0]
			rf24_mac_transmission_successfull();
 8002d5e:	f7ff fea1 	bl	8002aa4 <rf24_mac_transmission_successfull>
}
 8002d62:	bf00      	nop
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	20000790 	.word	0x20000790
 8002d70:	08002de1 	.word	0x08002de1
 8002d74:	08002ac9 	.word	0x08002ac9
 8002d78:	08007804 	.word	0x08007804
 8002d7c:	20000795 	.word	0x20000795

08002d80 <_process_reception>:

void _process_reception()
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af04      	add	r7, sp, #16
	if(mac_transmission.index >= mac_transmission.length)
 8002d86:	4b13      	ldr	r3, [pc, #76]	; (8002dd4 <_process_reception+0x54>)
 8002d88:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8002d8c:	4b11      	ldr	r3, [pc, #68]	; (8002dd4 <_process_reception+0x54>)
 8002d8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d31a      	bcc.n	8002dcc <_process_reception+0x4c>
	{
		mac_transmission.state = COMPLETED;
 8002d96:	4b0f      	ldr	r3, [pc, #60]	; (8002dd4 <_process_reception+0x54>)
 8002d98:	2201      	movs	r2, #1
 8002d9a:	701a      	strb	r2, [r3, #0]

		rf24_debug(	MAC, RECEPTION, mac_transmission.frame_subtype, VOID, &mac_transmission.transmitter,
 8002d9c:	4b0d      	ldr	r3, [pc, #52]	; (8002dd4 <_process_reception+0x54>)
 8002d9e:	791a      	ldrb	r2, [r3, #4]
					"Reception completed (%d frames)\n\n",
					mac_transmission.frame_count);
 8002da0:	4b0c      	ldr	r3, [pc, #48]	; (8002dd4 <_process_reception+0x54>)
 8002da2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
		rf24_debug(	MAC, RECEPTION, mac_transmission.frame_subtype, VOID, &mac_transmission.transmitter,
 8002da6:	9302      	str	r3, [sp, #8]
 8002da8:	4b0b      	ldr	r3, [pc, #44]	; (8002dd8 <_process_reception+0x58>)
 8002daa:	9301      	str	r3, [sp, #4]
 8002dac:	4b0b      	ldr	r3, [pc, #44]	; (8002ddc <_process_reception+0x5c>)
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	2300      	movs	r3, #0
 8002db2:	2104      	movs	r1, #4
 8002db4:	2002      	movs	r0, #2
 8002db6:	f7fe fa49 	bl	800124c <rf24_debug>

		if(mac_transmission.state != FINALIZED)
 8002dba:	4b06      	ldr	r3, [pc, #24]	; (8002dd4 <_process_reception+0x54>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d004      	beq.n	8002dcc <_process_reception+0x4c>
		{
			mac_transmission.state = FINALIZED;
 8002dc2:	4b04      	ldr	r3, [pc, #16]	; (8002dd4 <_process_reception+0x54>)
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	701a      	strb	r2, [r3, #0]
			rf24_mac_reception_successfull();
 8002dc8:	f7ff fe4a 	bl	8002a60 <rf24_mac_reception_successfull>
		}
	}
}
 8002dcc:	bf00      	nop
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	20000790 	.word	0x20000790
 8002dd8:	0800782c 	.word	0x0800782c
 8002ddc:	2000079b 	.word	0x2000079b

08002de0 <_send_mac_frame>:

void _send_mac_frame()
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b08a      	sub	sp, #40	; 0x28
 8002de4:	af00      	add	r7, sp, #0
	// Create TX data container
	rf24_module_tx_data tx_data;

	// Covert MAC frame into TX data
	rf24_mac_frame_to_tx_data(&rf24_worker_current_task()->data.mac.mac_frame, &tx_data);
 8002de6:	f001 fbcd 	bl	8004584 <rf24_worker_current_task>
 8002dea:	4603      	mov	r3, r0
 8002dec:	330c      	adds	r3, #12
 8002dee:	1d3a      	adds	r2, r7, #4
 8002df0:	4611      	mov	r1, r2
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff ff58 	bl	8002ca8 <rf24_mac_frame_to_tx_data>

	// Transmit MAC frame TX data representation
	rf24_module_transmit(&tx_data);
 8002df8:	1d3b      	adds	r3, r7, #4
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7ff f9ee 	bl	80021dc <rf24_module_transmit>

	// Stop stop-watch in case it has been started
	//rf24_stm32f1xx_start_stopwatch();

	if(mac_transmission.transmission_type == reception) _process_reception();
 8002e00:	4b04      	ldr	r3, [pc, #16]	; (8002e14 <_send_mac_frame+0x34>)
 8002e02:	785b      	ldrb	r3, [r3, #1]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d101      	bne.n	8002e0c <_send_mac_frame+0x2c>
 8002e08:	f7ff ffba 	bl	8002d80 <_process_reception>
}
 8002e0c:	bf00      	nop
 8002e0e:	3728      	adds	r7, #40	; 0x28
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	20000790 	.word	0x20000790

08002e18 <rf24_mac_send_ack>:

void rf24_mac_send_ack(rf24_mac_frame *mac_frame)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b088      	sub	sp, #32
 8002e1c:	af04      	add	r7, sp, #16
 8002e1e:	6078      	str	r0, [r7, #4]
	// Create send ACK task
	struct rf24_task *task = rf24_worker_build_task(send_ack, 1, T_SIFS_US, false);
 8002e20:	2300      	movs	r3, #0
 8002e22:	f242 7210 	movw	r2, #10000	; 0x2710
 8002e26:	2101      	movs	r1, #1
 8002e28:	2007      	movs	r0, #7
 8002e2a:	f001 fb33 	bl	8004494 <rf24_worker_build_task>
 8002e2e:	60f8      	str	r0, [r7, #12]

	task->data.mac.mac_frame.frame_control.type = CONTROL;
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	7b13      	ldrb	r3, [r2, #12]
 8002e34:	2102      	movs	r1, #2
 8002e36:	f361 0385 	bfi	r3, r1, #2, #4
 8002e3a:	7313      	strb	r3, [r2, #12]
	task->data.mac.mac_frame.frame_control.subtype = CONTROL_ACK;
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	8993      	ldrh	r3, [r2, #12]
 8002e40:	2105      	movs	r1, #5
 8002e42:	f361 1389 	bfi	r3, r1, #6, #4
 8002e46:	8193      	strh	r3, [r2, #12]
	task->data.mac.mac_frame.transmitter = mac_addr;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	4a27      	ldr	r2, [pc, #156]	; (8002ee8 <rf24_mac_send_ack+0xd0>)
 8002e4c:	3316      	adds	r3, #22
 8002e4e:	6811      	ldr	r1, [r2, #0]
 8002e50:	6019      	str	r1, [r3, #0]
 8002e52:	8892      	ldrh	r2, [r2, #4]
 8002e54:	809a      	strh	r2, [r3, #4]
	task->data.mac.mac_frame.receiver = mac_frame->transmitter;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	3310      	adds	r3, #16
 8002e5c:	320a      	adds	r2, #10
 8002e5e:	6810      	ldr	r0, [r2, #0]
 8002e60:	6018      	str	r0, [r3, #0]
 8002e62:	8892      	ldrh	r2, [r2, #4]
 8002e64:	809a      	strh	r2, [r3, #4]
	task->data.mac.mac_frame.duration = T_NAV_ACK_MS;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2214      	movs	r2, #20
 8002e6a:	81da      	strh	r2, [r3, #14]

	task->data.mac.mac_frame.ack.type = mac_frame->frame_control.type;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8002e74:	b2d9      	uxtb	r1, r3
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	7f53      	ldrb	r3, [r2, #29]
 8002e7a:	f361 0303 	bfi	r3, r1, #0, #4
 8002e7e:	7753      	strb	r3, [r2, #29]
	task->data.mac.mac_frame.ack.subtype = mac_frame->frame_control.subtype;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	781a      	ldrb	r2, [r3, #0]
 8002e84:	0992      	lsrs	r2, r2, #6
 8002e86:	b2d2      	uxtb	r2, r2
 8002e88:	785b      	ldrb	r3, [r3, #1]
 8002e8a:	f003 0303 	and.w	r3, r3, #3
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4313      	orrs	r3, r2
 8002e92:	b2d9      	uxtb	r1, r3
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	7f53      	ldrb	r3, [r2, #29]
 8002e98:	f361 1307 	bfi	r3, r1, #4, #4
 8002e9c:	7753      	strb	r3, [r2, #29]
	task->data.mac.mac_frame.ack.id = mac_frame->id;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	7c1a      	ldrb	r2, [r3, #16]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	779a      	strb	r2, [r3, #30]

	// Bind send MAC frame function to task
	rf24_worker_push(task, _send_mac_frame);
 8002ea6:	4911      	ldr	r1, [pc, #68]	; (8002eec <rf24_mac_send_ack+0xd4>)
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f001 fae4 	bl	8004476 <rf24_worker_push>

	rf24_debug(	MAC, TRANSMIT, CONTROL_ACK, mac_frame->frame_control.subtype, &mac_frame->transmitter,
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	781a      	ldrb	r2, [r3, #0]
 8002eb2:	0992      	lsrs	r2, r2, #6
 8002eb4:	b2d2      	uxtb	r2, r2
 8002eb6:	785b      	ldrb	r3, [r3, #1]
 8002eb8:	f003 0303 	and.w	r3, r3, #3
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	330a      	adds	r3, #10
				"frame %d\n", mac_frame->id);
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	7c12      	ldrb	r2, [r2, #16]
	rf24_debug(	MAC, TRANSMIT, CONTROL_ACK, mac_frame->frame_control.subtype, &mac_frame->transmitter,
 8002ecc:	9202      	str	r2, [sp, #8]
 8002ece:	4a08      	ldr	r2, [pc, #32]	; (8002ef0 <rf24_mac_send_ack+0xd8>)
 8002ed0:	9201      	str	r2, [sp, #4]
 8002ed2:	9300      	str	r3, [sp, #0]
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	2205      	movs	r2, #5
 8002ed8:	2101      	movs	r1, #1
 8002eda:	2002      	movs	r0, #2
 8002edc:	f7fe f9b6 	bl	800124c <rf24_debug>
}
 8002ee0:	bf00      	nop
 8002ee2:	3710      	adds	r7, #16
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	20000788 	.word	0x20000788
 8002eec:	08002de1 	.word	0x08002de1
 8002ef0:	08007768 	.word	0x08007768

08002ef4 <_payload_to_data_frame>:
	//	return nav_rts_ms;
//}
//

void _payload_to_data_frame(rf24_mac_transmission* transmission, rf24_mac_frame* mac_frame)
{
 8002ef4:	b5b0      	push	{r4, r5, r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
	// Calculate remaining bytes to transfer
	uint8_t bytes_to_transfer = transmission->length - transmission->index;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	73fb      	strb	r3, [r7, #15]

	if( !(bytes_to_transfer > 0) ) return;
 8002f0e:	7bfb      	ldrb	r3, [r7, #15]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f000 809f 	beq.w	8003054 <_payload_to_data_frame+0x160>

	mac_frame->frame_control.type = transmission->frame_type;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	78db      	ldrb	r3, [r3, #3]
 8002f1a:	f003 030f 	and.w	r3, r3, #15
 8002f1e:	b2d9      	uxtb	r1, r3
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	7813      	ldrb	r3, [r2, #0]
 8002f24:	f361 0385 	bfi	r3, r1, #2, #4
 8002f28:	7013      	strb	r3, [r2, #0]
	mac_frame->frame_control.subtype = transmission->frame_subtype;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	791b      	ldrb	r3, [r3, #4]
 8002f2e:	f003 030f 	and.w	r3, r3, #15
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	f002 0103 	and.w	r1, r2, #3
 8002f3a:	018c      	lsls	r4, r1, #6
 8002f3c:	7819      	ldrb	r1, [r3, #0]
 8002f3e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002f42:	4608      	mov	r0, r1
 8002f44:	4621      	mov	r1, r4
 8002f46:	4301      	orrs	r1, r0
 8002f48:	7019      	strb	r1, [r3, #0]
 8002f4a:	0892      	lsrs	r2, r2, #2
 8002f4c:	b2d2      	uxtb	r2, r2
 8002f4e:	f002 0203 	and.w	r2, r2, #3
 8002f52:	f002 0003 	and.w	r0, r2, #3
 8002f56:	785a      	ldrb	r2, [r3, #1]
 8002f58:	f022 0203 	bic.w	r2, r2, #3
 8002f5c:	4611      	mov	r1, r2
 8002f5e:	4602      	mov	r2, r0
 8002f60:	430a      	orrs	r2, r1
 8002f62:	705a      	strb	r2, [r3, #1]
	mac_frame->transmitter = mac_addr;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	4a3d      	ldr	r2, [pc, #244]	; (800305c <_payload_to_data_frame+0x168>)
 8002f68:	330a      	adds	r3, #10
 8002f6a:	6811      	ldr	r1, [r2, #0]
 8002f6c:	6019      	str	r1, [r3, #0]
 8002f6e:	8892      	ldrh	r2, [r2, #4]
 8002f70:	809a      	strh	r2, [r3, #4]
	mac_frame->receiver = transmission->receiver;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	3304      	adds	r3, #4
 8002f78:	3205      	adds	r2, #5
 8002f7a:	6811      	ldr	r1, [r2, #0]
 8002f7c:	6019      	str	r1, [r3, #0]
 8002f7e:	8892      	ldrh	r2, [r2, #4]
 8002f80:	809a      	strh	r2, [r3, #4]
	mac_frame->duration = T_NAV_FRAG_MS;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f042 021e 	orr.w	r2, r2, #30
 8002f8a:	709a      	strb	r2, [r3, #2]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	70da      	strb	r2, [r3, #3]

	// increment frame counter
	transmission->frame_count++;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002f96:	3301      	adds	r3, #1
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	mac_frame->id = transmission->frame_count;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	741a      	strb	r2, [r3, #16]

	// More than 15 bytes to transfer?
	if(bytes_to_transfer >= MAC_FRAME_PAYLOAD_LENGTH)
 8002faa:	7bfb      	ldrb	r3, [r7, #15]
 8002fac:	2b0c      	cmp	r3, #12
 8002fae:	d91d      	bls.n	8002fec <_payload_to_data_frame+0xf8>
	{
		// Inform receiver more frames to come
		mac_frame->frame_control.more_data = true;
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	7853      	ldrb	r3, [r2, #1]
 8002fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fb8:	7053      	strb	r3, [r2, #1]
		// Add PAYLOAD length to data header
		mac_frame->data.header.length = MAC_FRAME_PAYLOAD_LENGTH;
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	220d      	movs	r2, #13
 8002fbe:	745a      	strb	r2, [r3, #17]

		// Copy PAYLOAD data into MAC frame
		memcpy(mac_frame->data.payload, &transmission->payload[transmission->index], MAC_FRAME_PAYLOAD_LENGTH);
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	f103 0012 	add.w	r0, r3, #18
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	f892 2035 	ldrb.w	r2, [r2, #53]	; 0x35
 8002fd0:	4413      	add	r3, r2
 8002fd2:	220d      	movs	r2, #13
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	f002 ff2c 	bl	8005e32 <memcpy>

		transmission->index += MAC_FRAME_PAYLOAD_LENGTH;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fe0:	330d      	adds	r3, #13
 8002fe2:	b2da      	uxtb	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002fea:	e01d      	b.n	8003028 <_payload_to_data_frame+0x134>
	}
	else
	{
		// Inform receiver last MAC frame
		mac_frame->frame_control.more_data = false;
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	7853      	ldrb	r3, [r2, #1]
 8002ff0:	f36f 13c7 	bfc	r3, #7, #1
 8002ff4:	7053      	strb	r3, [r2, #1]
		// Add remaining PAYLOAD length to data header
		mac_frame->data.header.length = bytes_to_transfer;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	7bfa      	ldrb	r2, [r7, #15]
 8002ffa:	745a      	strb	r2, [r3, #17]

		// Copy remaining bytes of PAYLOAD into MAC frame
		memcpy(mac_frame->data.payload, &transmission->payload[transmission->index], bytes_to_transfer);
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	f103 0012 	add.w	r0, r3, #18
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	f892 2035 	ldrb.w	r2, [r2, #53]	; 0x35
 800300c:	4413      	add	r3, r2
 800300e:	7bfa      	ldrb	r2, [r7, #15]
 8003010:	4619      	mov	r1, r3
 8003012:	f002 ff0e 	bl	8005e32 <memcpy>

		// -> index = length -> transmission completed
		transmission->index += bytes_to_transfer;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 800301c:	7bfb      	ldrb	r3, [r7, #15]
 800301e:	4413      	add	r3, r2
 8003020:	b2da      	uxtb	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	}

	// Store a local copy for retransmission (if not ACK received)
	transmission->mac_frame = *mac_frame;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	3311      	adds	r3, #17
 800302e:	6814      	ldr	r4, [r2, #0]
 8003030:	6850      	ldr	r0, [r2, #4]
 8003032:	6891      	ldr	r1, [r2, #8]
 8003034:	68d5      	ldr	r5, [r2, #12]
 8003036:	601c      	str	r4, [r3, #0]
 8003038:	6058      	str	r0, [r3, #4]
 800303a:	6099      	str	r1, [r3, #8]
 800303c:	60dd      	str	r5, [r3, #12]
 800303e:	6914      	ldr	r4, [r2, #16]
 8003040:	6950      	ldr	r0, [r2, #20]
 8003042:	6991      	ldr	r1, [r2, #24]
 8003044:	611c      	str	r4, [r3, #16]
 8003046:	6158      	str	r0, [r3, #20]
 8003048:	6199      	str	r1, [r3, #24]
 800304a:	8b91      	ldrh	r1, [r2, #28]
 800304c:	7f92      	ldrb	r2, [r2, #30]
 800304e:	8399      	strh	r1, [r3, #28]
 8003050:	779a      	strb	r2, [r3, #30]
 8003052:	e000      	b.n	8003056 <_payload_to_data_frame+0x162>
	if( !(bytes_to_transfer > 0) ) return;
 8003054:	bf00      	nop
}
 8003056:	3710      	adds	r7, #16
 8003058:	46bd      	mov	sp, r7
 800305a:	bdb0      	pop	{r4, r5, r7, pc}
 800305c:	20000788 	.word	0x20000788

08003060 <_data_frame_to_payload>:

void _data_frame_to_payload(rf24_mac_frame* mac_frame, rf24_mac_transmission* transmission)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
	// Packet is a new frame?
	if(mac_frame->id > transmission->frame_count)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	7c1a      	ldrb	r2, [r3, #16]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003074:	429a      	cmp	r2, r3
 8003076:	d92b      	bls.n	80030d0 <_data_frame_to_payload+0x70>
	{
		switch(mac_frame->frame_control.subtype)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	781a      	ldrb	r2, [r3, #0]
 800307c:	0992      	lsrs	r2, r2, #6
 800307e:	b2d2      	uxtb	r2, r2
 8003080:	785b      	ldrb	r3, [r3, #1]
 8003082:	f003 0303 	and.w	r3, r3, #3
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4313      	orrs	r3, r2
 800308a:	b2db      	uxtb	r3, r3
 800308c:	3b06      	subs	r3, #6
 800308e:	2b01      	cmp	r3, #1
 8003090:	d818      	bhi.n	80030c4 <_data_frame_to_payload+0x64>
		{
			case DATA_DATA: case DATA_TOPOLOGY:
			{
				memcpy(	&transmission->payload[transmission->index],
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	f892 2035 	ldrb.w	r2, [r2, #53]	; 0x35
 800309c:	1898      	adds	r0, r3, r2
						mac_frame->data.payload,
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f103 0112 	add.w	r1, r3, #18
						mac_frame->data.header.length);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	7c5b      	ldrb	r3, [r3, #17]
				memcpy(	&transmission->payload[transmission->index],
 80030a8:	461a      	mov	r2, r3
 80030aa:	f002 fec2 	bl	8005e32 <memcpy>

				transmission->index += mac_frame->data.header.length;
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	7c5b      	ldrb	r3, [r3, #17]
 80030b8:	4413      	add	r3, r2
 80030ba:	b2da      	uxtb	r2, r3
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

				break;
 80030c2:	e000      	b.n	80030c6 <_data_frame_to_payload+0x66>
			}
			default: break;
 80030c4:	bf00      	nop
		}

		transmission->frame_count = mac_frame->id;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	7c1a      	ldrb	r2, [r3, #16]
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	}
}
 80030d0:	bf00      	nop
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <rf24_mac_setup_reception>:

void rf24_mac_setup_reception(rf24_mac_frame *mac_frame)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
	// Speed up LED - show that I am receiving
	rf24_stm32f1xx_set_led_cycle(T_LED_CYCLE_TRANSMITTING_MS);
 80030e0:	2064      	movs	r0, #100	; 0x64
 80030e2:	f001 fdcb 	bl	8004c7c <rf24_stm32f1xx_set_led_cycle>

	// Check, if RTS frame contains any information of following data
	switch(mac_frame->rts.subtype)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	7c5b      	ldrb	r3, [r3, #17]
 80030ea:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	3b06      	subs	r3, #6
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d80a      	bhi.n	800310c <rf24_mac_setup_reception+0x34>
	{
		case DATA_DATA:
		case DATA_TOPOLOGY:
		{
			// Create an PAYLOAD array based on the given RTS frame meta information
			mac_transmission.payload = (uint8_t*) malloc(mac_frame->rts.length * sizeof(uint8_t));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	8a5b      	ldrh	r3, [r3, #18]
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	4618      	mov	r0, r3
 80030fe:	f002 fe79 	bl	8005df4 <malloc>
 8003102:	4603      	mov	r3, r0
 8003104:	461a      	mov	r2, r3
 8003106:	4b1a      	ldr	r3, [pc, #104]	; (8003170 <rf24_mac_setup_reception+0x98>)
 8003108:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 800310a:	e000      	b.n	800310e <rf24_mac_setup_reception+0x36>
		}
		default: break;
 800310c:	bf00      	nop
	}

	// Initialize mac_transmission for reception based on the given RTS meta information
	mac_transmission.transmission_type = reception;
 800310e:	4b18      	ldr	r3, [pc, #96]	; (8003170 <rf24_mac_setup_reception+0x98>)
 8003110:	2201      	movs	r2, #1
 8003112:	705a      	strb	r2, [r3, #1]
	mac_transmission.state = ACTIVE;
 8003114:	4b16      	ldr	r3, [pc, #88]	; (8003170 <rf24_mac_setup_reception+0x98>)
 8003116:	2200      	movs	r2, #0
 8003118:	701a      	strb	r2, [r3, #0]
	mac_transmission.frame_type = mac_frame->rts.type;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	7c5b      	ldrb	r3, [r3, #17]
 800311e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003122:	b2db      	uxtb	r3, r3
 8003124:	461a      	mov	r2, r3
 8003126:	4b12      	ldr	r3, [pc, #72]	; (8003170 <rf24_mac_setup_reception+0x98>)
 8003128:	70da      	strb	r2, [r3, #3]
	mac_transmission.frame_subtype = mac_frame->rts.subtype;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	7c5b      	ldrb	r3, [r3, #17]
 800312e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003132:	b2db      	uxtb	r3, r3
 8003134:	461a      	mov	r2, r3
 8003136:	4b0e      	ldr	r3, [pc, #56]	; (8003170 <rf24_mac_setup_reception+0x98>)
 8003138:	711a      	strb	r2, [r3, #4]
	mac_transmission.transmitter = mac_frame->transmitter;
 800313a:	4b0d      	ldr	r3, [pc, #52]	; (8003170 <rf24_mac_setup_reception+0x98>)
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	330b      	adds	r3, #11
 8003140:	320a      	adds	r2, #10
 8003142:	6811      	ldr	r1, [r2, #0]
 8003144:	6019      	str	r1, [r3, #0]
 8003146:	8892      	ldrh	r2, [r2, #4]
 8003148:	809a      	strh	r2, [r3, #4]
	mac_transmission.length = mac_frame->rts.length;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	8a5b      	ldrh	r3, [r3, #18]
 800314e:	b29b      	uxth	r3, r3
 8003150:	b2da      	uxtb	r2, r3
 8003152:	4b07      	ldr	r3, [pc, #28]	; (8003170 <rf24_mac_setup_reception+0x98>)
 8003154:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	mac_transmission.index = 0;
 8003158:	4b05      	ldr	r3, [pc, #20]	; (8003170 <rf24_mac_setup_reception+0x98>)
 800315a:	2200      	movs	r2, #0
 800315c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	mac_transmission.frame_count = 0;
 8003160:	4b03      	ldr	r3, [pc, #12]	; (8003170 <rf24_mac_setup_reception+0x98>)
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
}
 8003168:	bf00      	nop
 800316a:	3708      	adds	r7, #8
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	20000790 	.word	0x20000790

08003174 <rf24_mac_setup_transmission>:
	rf24_mac_communication_type communication_type,
	rf24_mac_frame_type frame_type,
	rf24_mac_frame_subtype frame_subtype,
	rf24_mac_addr *receiver,
	uint8_t *payload,
	uint8_t length){
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	603b      	str	r3, [r7, #0]
 800317c:	4603      	mov	r3, r0
 800317e:	71fb      	strb	r3, [r7, #7]
 8003180:	460b      	mov	r3, r1
 8003182:	71bb      	strb	r3, [r7, #6]
 8003184:	4613      	mov	r3, r2
 8003186:	717b      	strb	r3, [r7, #5]

	// Setup MAC transmission
	mac_transmission.state = ACTIVE;
 8003188:	4b20      	ldr	r3, [pc, #128]	; (800320c <rf24_mac_setup_transmission+0x98>)
 800318a:	2200      	movs	r2, #0
 800318c:	701a      	strb	r2, [r3, #0]
	mac_transmission.transmission_type = transmission;
 800318e:	4b1f      	ldr	r3, [pc, #124]	; (800320c <rf24_mac_setup_transmission+0x98>)
 8003190:	2200      	movs	r2, #0
 8003192:	705a      	strb	r2, [r3, #1]
	mac_transmission.communication_type = communication_type;
 8003194:	4a1d      	ldr	r2, [pc, #116]	; (800320c <rf24_mac_setup_transmission+0x98>)
 8003196:	79fb      	ldrb	r3, [r7, #7]
 8003198:	7093      	strb	r3, [r2, #2]
	mac_transmission.frame_type = frame_type;
 800319a:	4a1c      	ldr	r2, [pc, #112]	; (800320c <rf24_mac_setup_transmission+0x98>)
 800319c:	79bb      	ldrb	r3, [r7, #6]
 800319e:	70d3      	strb	r3, [r2, #3]
	mac_transmission.frame_subtype = frame_subtype;
 80031a0:	4a1a      	ldr	r2, [pc, #104]	; (800320c <rf24_mac_setup_transmission+0x98>)
 80031a2:	797b      	ldrb	r3, [r7, #5]
 80031a4:	7113      	strb	r3, [r2, #4]
	mac_transmission.receiver = *receiver;
 80031a6:	4b19      	ldr	r3, [pc, #100]	; (800320c <rf24_mac_setup_transmission+0x98>)
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	3305      	adds	r3, #5
 80031ac:	6811      	ldr	r1, [r2, #0]
 80031ae:	6019      	str	r1, [r3, #0]
 80031b0:	8892      	ldrh	r2, [r2, #4]
 80031b2:	809a      	strh	r2, [r3, #4]
	mac_transmission.length = length;
 80031b4:	4a15      	ldr	r2, [pc, #84]	; (800320c <rf24_mac_setup_transmission+0x98>)
 80031b6:	7d3b      	ldrb	r3, [r7, #20]
 80031b8:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
	mac_transmission.index = 0;
 80031bc:	4b13      	ldr	r3, [pc, #76]	; (800320c <rf24_mac_setup_transmission+0x98>)
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	mac_transmission.frame_count = 0;
 80031c4:	4b11      	ldr	r3, [pc, #68]	; (800320c <rf24_mac_setup_transmission+0x98>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	mac_transmission.attemps = 0;
 80031cc:	4b0f      	ldr	r3, [pc, #60]	; (800320c <rf24_mac_setup_transmission+0x98>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

	if(length > 0)
 80031d4:	7d3b      	ldrb	r3, [r7, #20]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d013      	beq.n	8003202 <rf24_mac_setup_transmission+0x8e>
	{
		// Free PAYLOAD (of former transmission)
		free(mac_transmission.payload);
 80031da:	4b0c      	ldr	r3, [pc, #48]	; (800320c <rf24_mac_setup_transmission+0x98>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	4618      	mov	r0, r3
 80031e0:	f002 fe10 	bl	8005e04 <free>

		// Allocate memory for PAYLOAD
		mac_transmission.payload = (uint8_t*) malloc(length * sizeof(uint8_t));
 80031e4:	7d3b      	ldrb	r3, [r7, #20]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f002 fe04 	bl	8005df4 <malloc>
 80031ec:	4603      	mov	r3, r0
 80031ee:	461a      	mov	r2, r3
 80031f0:	4b06      	ldr	r3, [pc, #24]	; (800320c <rf24_mac_setup_transmission+0x98>)
 80031f2:	631a      	str	r2, [r3, #48]	; 0x30

		// Copy PAYLOAD to MAC transmission
		memcpy(mac_transmission.payload, payload, length);
 80031f4:	4b05      	ldr	r3, [pc, #20]	; (800320c <rf24_mac_setup_transmission+0x98>)
 80031f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f8:	7d3a      	ldrb	r2, [r7, #20]
 80031fa:	6939      	ldr	r1, [r7, #16]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f002 fe18 	bl	8005e32 <memcpy>
	}

	return &mac_transmission;
 8003202:	4b02      	ldr	r3, [pc, #8]	; (800320c <rf24_mac_setup_transmission+0x98>)
}
 8003204:	4618      	mov	r0, r3
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	20000790 	.word	0x20000790

08003210 <_start_transmission>:

void _start_transmission()
{
 8003210:	b5b0      	push	{r4, r5, r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
	// Speed up LED - show that I am transmitting
	rf24_stm32f1xx_set_led_cycle(T_LED_CYCLE_TRANSMITTING_MS);
 8003216:	2064      	movs	r0, #100	; 0x64
 8003218:	f001 fd30 	bl	8004c7c <rf24_stm32f1xx_set_led_cycle>

	//1)_________________________________________________________
	// (Build &) Send MAC frame

	struct rf24_task *task = rf24_worker_build_task(send_mac_frame, 1, T_SIFS_US, false);
 800321c:	2300      	movs	r3, #0
 800321e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003222:	2101      	movs	r1, #1
 8003224:	2009      	movs	r0, #9
 8003226:	f001 f935 	bl	8004494 <rf24_worker_build_task>
 800322a:	6078      	str	r0, [r7, #4]

	switch(mac_transmission.frame_type)
 800322c:	4b1d      	ldr	r3, [pc, #116]	; (80032a4 <_start_transmission+0x94>)
 800322e:	78db      	ldrb	r3, [r3, #3]
 8003230:	2b03      	cmp	r3, #3
 8003232:	d106      	bne.n	8003242 <_start_transmission+0x32>
	{
		//If transmission is of type DATA, convert PAYLOAD into DATA_DATA frames
		case DATA:
			_payload_to_data_frame(&mac_transmission, &task->data.mac.mac_frame);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	330c      	adds	r3, #12
 8003238:	4619      	mov	r1, r3
 800323a:	481a      	ldr	r0, [pc, #104]	; (80032a4 <_start_transmission+0x94>)
 800323c:	f7ff fe5a 	bl	8002ef4 <_payload_to_data_frame>
			break;
 8003240:	e014      	b.n	800326c <_start_transmission+0x5c>

		// Otherwise take given MAC frame and proceed
		default:
			task->data.mac.mac_frame = mac_transmission.mac_frame;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a17      	ldr	r2, [pc, #92]	; (80032a4 <_start_transmission+0x94>)
 8003246:	f103 040c 	add.w	r4, r3, #12
 800324a:	f102 0511 	add.w	r5, r2, #17
 800324e:	6828      	ldr	r0, [r5, #0]
 8003250:	6869      	ldr	r1, [r5, #4]
 8003252:	68aa      	ldr	r2, [r5, #8]
 8003254:	68eb      	ldr	r3, [r5, #12]
 8003256:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003258:	6928      	ldr	r0, [r5, #16]
 800325a:	6969      	ldr	r1, [r5, #20]
 800325c:	69aa      	ldr	r2, [r5, #24]
 800325e:	c407      	stmia	r4!, {r0, r1, r2}
 8003260:	8bab      	ldrh	r3, [r5, #28]
 8003262:	7faa      	ldrb	r2, [r5, #30]
 8003264:	8023      	strh	r3, [r4, #0]
 8003266:	4613      	mov	r3, r2
 8003268:	70a3      	strb	r3, [r4, #2]
			break;
 800326a:	bf00      	nop
	}

	rf24_worker_attach(task, _send_mac_frame);
 800326c:	490e      	ldr	r1, [pc, #56]	; (80032a8 <_start_transmission+0x98>)
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f001 f8f2 	bl	8004458 <rf24_worker_attach>

	// Increase attempts to notice retries
	mac_transmission.attemps++;
 8003274:	4b0b      	ldr	r3, [pc, #44]	; (80032a4 <_start_transmission+0x94>)
 8003276:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800327a:	3301      	adds	r3, #1
 800327c:	b2da      	uxtb	r2, r3
 800327e:	4b09      	ldr	r3, [pc, #36]	; (80032a4 <_start_transmission+0x94>)
 8003280:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

	// 2)_________________________________________________________
	// Wait for ACK(s)

	task = rf24_worker_build_task(wait_for_ack, 1, T_ACK_TIMEOUT_US, false);
 8003284:	2300      	movs	r3, #0
 8003286:	f247 5230 	movw	r2, #30000	; 0x7530
 800328a:	2101      	movs	r1, #1
 800328c:	200a      	movs	r0, #10
 800328e:	f001 f901 	bl	8004494 <rf24_worker_build_task>
 8003292:	6078      	str	r0, [r7, #4]
	rf24_worker_attach(task, rf24_mac_ack_timeout);
 8003294:	4905      	ldr	r1, [pc, #20]	; (80032ac <_start_transmission+0x9c>)
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f001 f8de 	bl	8004458 <rf24_worker_attach>
		rf24_debug(
				"MAC: Transmit [%s] to %s",
				rf24_mac_frame_subtype_str[task->data.mac.mac_frame.frame_control.subtype],
				decimal_to_string(task->data.mac.mac_frame.receiver.bytes, 6, ':'));
	#endif*/
}
 800329c:	bf00      	nop
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bdb0      	pop	{r4, r5, r7, pc}
 80032a4:	20000790 	.word	0x20000790
 80032a8:	08002de1 	.word	0x08002de1
 80032ac:	08002ac9 	.word	0x08002ac9

080032b0 <rf24_mac_transfer_frame>:

void rf24_mac_transfer_frame(rf24_mac_communication_type communication_type, rf24_mac_frame *mac_frame)
{
 80032b0:	b5b0      	push	{r4, r5, r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af02      	add	r7, sp, #8
 80032b6:	4603      	mov	r3, r0
 80032b8:	6039      	str	r1, [r7, #0]
 80032ba:	71fb      	strb	r3, [r7, #7]
	// In case transmitter is not already set
	mac_frame->transmitter = mac_addr;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	4a21      	ldr	r2, [pc, #132]	; (8003344 <rf24_mac_transfer_frame+0x94>)
 80032c0:	330a      	adds	r3, #10
 80032c2:	6811      	ldr	r1, [r2, #0]
 80032c4:	6019      	str	r1, [r3, #0]
 80032c6:	8892      	ldrh	r2, [r2, #4]
 80032c8:	809a      	strh	r2, [r3, #4]
	mac_frame->id = 1;
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	2201      	movs	r2, #1
 80032ce:	741a      	strb	r2, [r3, #16]
	// 1)_________________________________________________________
	// Setup a MAC transmission

	rf24_mac_setup_transmission(
			communication_type,					/* uni-/multi-/broadcast*/
			mac_frame->frame_control.type,		/* NUM/NAM/DATA/..*/
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	f3c3 0383 	ubfx	r3, r3, #2, #4
 80032d8:	b2db      	uxtb	r3, r3
	rf24_mac_setup_transmission(
 80032da:	4619      	mov	r1, r3
			mac_frame->frame_control.subtype,	/* DATA/DATA_TOPOLOGY/..*/
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	781a      	ldrb	r2, [r3, #0]
 80032e0:	0992      	lsrs	r2, r2, #6
 80032e2:	b2d2      	uxtb	r2, r2
 80032e4:	785b      	ldrb	r3, [r3, #1]
 80032e6:	f003 0303 	and.w	r3, r3, #3
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4313      	orrs	r3, r2
 80032ee:	b2db      	uxtb	r3, r3
	rf24_mac_setup_transmission(
 80032f0:	461c      	mov	r4, r3
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	1d1a      	adds	r2, r3, #4
 80032f6:	79f8      	ldrb	r0, [r7, #7]
 80032f8:	2300      	movs	r3, #0
 80032fa:	9301      	str	r3, [sp, #4]
 80032fc:	2300      	movs	r3, #0
 80032fe:	9300      	str	r3, [sp, #0]
 8003300:	4613      	mov	r3, r2
 8003302:	4622      	mov	r2, r4
 8003304:	f7ff ff36 	bl	8003174 <rf24_mac_setup_transmission>
			NULL, 								/* no payload*/
			0 									/* no length*/);

	// 2)_________________________________________________________
	// Copy MAC frame
	mac_transmission.mac_frame = *mac_frame;
 8003308:	4b0f      	ldr	r3, [pc, #60]	; (8003348 <rf24_mac_transfer_frame+0x98>)
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	3311      	adds	r3, #17
 800330e:	6814      	ldr	r4, [r2, #0]
 8003310:	6850      	ldr	r0, [r2, #4]
 8003312:	6891      	ldr	r1, [r2, #8]
 8003314:	68d5      	ldr	r5, [r2, #12]
 8003316:	601c      	str	r4, [r3, #0]
 8003318:	6058      	str	r0, [r3, #4]
 800331a:	6099      	str	r1, [r3, #8]
 800331c:	60dd      	str	r5, [r3, #12]
 800331e:	6914      	ldr	r4, [r2, #16]
 8003320:	6950      	ldr	r0, [r2, #20]
 8003322:	6991      	ldr	r1, [r2, #24]
 8003324:	611c      	str	r4, [r3, #16]
 8003326:	6158      	str	r0, [r3, #20]
 8003328:	6199      	str	r1, [r3, #24]
 800332a:	8b91      	ldrh	r1, [r2, #28]
 800332c:	7f92      	ldrb	r2, [r2, #30]
 800332e:	8399      	strh	r1, [r3, #28]
 8003330:	779a      	strb	r2, [r3, #30]

	// 3)_________________________________________________________
	// Get access to medium (CSMA/CA)

	// Call CSMA/CA access medium function & attach start transmission function (callback function)
	rf24_csma_ca_access_medium(&mac_transmission, 0,_start_transmission);
 8003332:	4a06      	ldr	r2, [pc, #24]	; (800334c <rf24_mac_transfer_frame+0x9c>)
 8003334:	2100      	movs	r1, #0
 8003336:	4804      	ldr	r0, [pc, #16]	; (8003348 <rf24_mac_transfer_frame+0x98>)
 8003338:	f7ff fabc 	bl	80028b4 <rf24_csma_ca_access_medium>
}
 800333c:	bf00      	nop
 800333e:	3708      	adds	r7, #8
 8003340:	46bd      	mov	sp, r7
 8003342:	bdb0      	pop	{r4, r5, r7, pc}
 8003344:	20000788 	.word	0x20000788
 8003348:	20000790 	.word	0x20000790
 800334c:	08003211 	.word	0x08003211

08003350 <rf24_mac_transfer_data>:
void rf24_mac_transfer_data(
	rf24_mac_communication_type communication_type,
	rf24_mac_addr *receiver,
	rf24_mac_frame_subtype mac_frame_subtype,
	uint8_t *payload,
	uint8_t length){
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af02      	add	r7, sp, #8
 8003356:	60b9      	str	r1, [r7, #8]
 8003358:	607b      	str	r3, [r7, #4]
 800335a:	4603      	mov	r3, r0
 800335c:	73fb      	strb	r3, [r7, #15]
 800335e:	4613      	mov	r3, r2
 8003360:	73bb      	strb	r3, [r7, #14]

	// 1)_________________________________________________________
	// Setup a new MAC transmission

	rf24_mac_setup_transmission(
 8003362:	7bba      	ldrb	r2, [r7, #14]
 8003364:	7bf8      	ldrb	r0, [r7, #15]
 8003366:	7e3b      	ldrb	r3, [r7, #24]
 8003368:	9301      	str	r3, [sp, #4]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	2103      	movs	r1, #3
 8003372:	f7ff feff 	bl	8003174 <rf24_mac_setup_transmission>

	// 2)_________________________________________________________
	// Get access to medium (CSMA/CA)

	// Call CSMA/CA routines & start transmission after obtain access to medium (callback)
	rf24_csma_ca_access_medium(&mac_transmission, 0, _start_transmission);
 8003376:	4a04      	ldr	r2, [pc, #16]	; (8003388 <rf24_mac_transfer_data+0x38>)
 8003378:	2100      	movs	r1, #0
 800337a:	4804      	ldr	r0, [pc, #16]	; (800338c <rf24_mac_transfer_data+0x3c>)
 800337c:	f7ff fa9a 	bl	80028b4 <rf24_csma_ca_access_medium>
}
 8003380:	bf00      	nop
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	08003211 	.word	0x08003211
 800338c:	20000790 	.word	0x20000790

08003390 <rf24_mac_print_payload>:

void rf24_mac_print_payload(rf24_mac_transmission *transmission)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b0c4      	sub	sp, #272	; 0x110
 8003394:	af00      	add	r7, sp, #0
 8003396:	1d3b      	adds	r3, r7, #4
 8003398:	6018      	str	r0, [r3, #0]
	char str[256];
	uint8_t index_string = 0;
 800339a:	2300      	movs	r3, #0
 800339c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	uint8_t index_payload = 0;
 80033a0:	2300      	movs	r3, #0
 80033a2:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e

	for (int i=0; i < transmission->length; i++)
 80033a6:	2300      	movs	r3, #0
 80033a8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80033ac:	e02f      	b.n	800340e <rf24_mac_print_payload+0x7e>
	{
		index_string += sprintf(&str[index_string], "%d ", transmission->payload[i]);
 80033ae:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80033b2:	f107 0208 	add.w	r2, r7, #8
 80033b6:	18d0      	adds	r0, r2, r3
 80033b8:	1d3b      	adds	r3, r7, #4
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80033c2:	4413      	add	r3, r2
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	461a      	mov	r2, r3
 80033c8:	4918      	ldr	r1, [pc, #96]	; (800342c <rf24_mac_print_payload+0x9c>)
 80033ca:	f002 fe53 	bl	8006074 <siprintf>
 80033ce:	4603      	mov	r3, r0
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80033d6:	4413      	add	r3, r2
 80033d8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		index_payload++;
 80033dc:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 80033e0:	3301      	adds	r3, #1
 80033e2:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e

		if(index_payload >= 15)
 80033e6:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 80033ea:	2b0e      	cmp	r3, #14
 80033ec:	d90a      	bls.n	8003404 <rf24_mac_print_payload+0x74>
		{
			index_string = 0;
 80033ee:	2300      	movs	r3, #0
 80033f0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			index_payload = 0;
 80033f4:	2300      	movs	r3, #0
 80033f6:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
			rf24_stm32f1xx_usart_write_line(str);
 80033fa:	f107 0308 	add.w	r3, r7, #8
 80033fe:	4618      	mov	r0, r3
 8003400:	f001 fe53 	bl	80050aa <rf24_stm32f1xx_usart_write_line>
	for (int i=0; i < transmission->length; i++)
 8003404:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003408:	3301      	adds	r3, #1
 800340a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800340e:	1d3b      	adds	r3, r7, #4
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003416:	461a      	mov	r2, r3
 8003418:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800341c:	4293      	cmp	r3, r2
 800341e:	dbc6      	blt.n	80033ae <rf24_mac_print_payload+0x1e>
		}
	}
}
 8003420:	bf00      	nop
 8003422:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	08007850 	.word	0x08007850

08003430 <rf24_mac_print_timings>:

	rf24_printf("\n");
}

void rf24_mac_print_timings()
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af04      	add	r7, sp, #16
	rf24_debug(MAC, INFO, VOID, VOID, NULL, "%-25s %dus\n", "T_PROCESSING_US", T_PROCESSING_US);
 8003436:	2396      	movs	r3, #150	; 0x96
 8003438:	9303      	str	r3, [sp, #12]
 800343a:	4b59      	ldr	r3, [pc, #356]	; (80035a0 <rf24_mac_print_timings+0x170>)
 800343c:	9302      	str	r3, [sp, #8]
 800343e:	4b59      	ldr	r3, [pc, #356]	; (80035a4 <rf24_mac_print_timings+0x174>)
 8003440:	9301      	str	r3, [sp, #4]
 8003442:	2300      	movs	r3, #0
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	2300      	movs	r3, #0
 8003448:	2200      	movs	r2, #0
 800344a:	2106      	movs	r1, #6
 800344c:	2002      	movs	r0, #2
 800344e:	f7fd fefd 	bl	800124c <rf24_debug>
	rf24_debug(MAC, INFO, VOID, VOID, NULL, "%-25s %dus\n", "T_SLOT_US", T_SLOT_US);
 8003452:	f242 7310 	movw	r3, #10000	; 0x2710
 8003456:	9303      	str	r3, [sp, #12]
 8003458:	4b53      	ldr	r3, [pc, #332]	; (80035a8 <rf24_mac_print_timings+0x178>)
 800345a:	9302      	str	r3, [sp, #8]
 800345c:	4b51      	ldr	r3, [pc, #324]	; (80035a4 <rf24_mac_print_timings+0x174>)
 800345e:	9301      	str	r3, [sp, #4]
 8003460:	2300      	movs	r3, #0
 8003462:	9300      	str	r3, [sp, #0]
 8003464:	2300      	movs	r3, #0
 8003466:	2200      	movs	r2, #0
 8003468:	2106      	movs	r1, #6
 800346a:	2002      	movs	r0, #2
 800346c:	f7fd feee 	bl	800124c <rf24_debug>
	rf24_debug(MAC, INFO, VOID, VOID, NULL, "%-25s %dus\n", "T_SIFS_US", T_SIFS_US);
 8003470:	f242 7310 	movw	r3, #10000	; 0x2710
 8003474:	9303      	str	r3, [sp, #12]
 8003476:	4b4d      	ldr	r3, [pc, #308]	; (80035ac <rf24_mac_print_timings+0x17c>)
 8003478:	9302      	str	r3, [sp, #8]
 800347a:	4b4a      	ldr	r3, [pc, #296]	; (80035a4 <rf24_mac_print_timings+0x174>)
 800347c:	9301      	str	r3, [sp, #4]
 800347e:	2300      	movs	r3, #0
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	2300      	movs	r3, #0
 8003484:	2200      	movs	r2, #0
 8003486:	2106      	movs	r1, #6
 8003488:	2002      	movs	r0, #2
 800348a:	f7fd fedf 	bl	800124c <rf24_debug>
	rf24_debug(MAC, INFO, VOID, VOID, NULL, "%-25s %dus\n", "T_PIFS_US", T_PIFS_US);
 800348e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8003492:	9303      	str	r3, [sp, #12]
 8003494:	4b46      	ldr	r3, [pc, #280]	; (80035b0 <rf24_mac_print_timings+0x180>)
 8003496:	9302      	str	r3, [sp, #8]
 8003498:	4b42      	ldr	r3, [pc, #264]	; (80035a4 <rf24_mac_print_timings+0x174>)
 800349a:	9301      	str	r3, [sp, #4]
 800349c:	2300      	movs	r3, #0
 800349e:	9300      	str	r3, [sp, #0]
 80034a0:	2300      	movs	r3, #0
 80034a2:	2200      	movs	r2, #0
 80034a4:	2106      	movs	r1, #6
 80034a6:	2002      	movs	r0, #2
 80034a8:	f7fd fed0 	bl	800124c <rf24_debug>
	rf24_debug(MAC, INFO, VOID, VOID, NULL, "%-25s %dus\n", "T_DIFS_US", T_DIFS_US);
 80034ac:	f247 5330 	movw	r3, #30000	; 0x7530
 80034b0:	9303      	str	r3, [sp, #12]
 80034b2:	4b40      	ldr	r3, [pc, #256]	; (80035b4 <rf24_mac_print_timings+0x184>)
 80034b4:	9302      	str	r3, [sp, #8]
 80034b6:	4b3b      	ldr	r3, [pc, #236]	; (80035a4 <rf24_mac_print_timings+0x174>)
 80034b8:	9301      	str	r3, [sp, #4]
 80034ba:	2300      	movs	r3, #0
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	2300      	movs	r3, #0
 80034c0:	2200      	movs	r2, #0
 80034c2:	2106      	movs	r1, #6
 80034c4:	2002      	movs	r0, #2
 80034c6:	f7fd fec1 	bl	800124c <rf24_debug>
	rf24_debug(MAC, INFO, VOID, VOID, NULL, "%-25s %dus\n", "T_NAV_RTS_US", T_NAV_RTS_US);
 80034ca:	f247 63f2 	movw	r3, #30450	; 0x76f2
 80034ce:	9303      	str	r3, [sp, #12]
 80034d0:	4b39      	ldr	r3, [pc, #228]	; (80035b8 <rf24_mac_print_timings+0x188>)
 80034d2:	9302      	str	r3, [sp, #8]
 80034d4:	4b33      	ldr	r3, [pc, #204]	; (80035a4 <rf24_mac_print_timings+0x174>)
 80034d6:	9301      	str	r3, [sp, #4]
 80034d8:	2300      	movs	r3, #0
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	2300      	movs	r3, #0
 80034de:	2200      	movs	r2, #0
 80034e0:	2106      	movs	r1, #6
 80034e2:	2002      	movs	r0, #2
 80034e4:	f7fd feb2 	bl	800124c <rf24_debug>
	rf24_debug(MAC, INFO, VOID, VOID, NULL, "%-25s %dus\n", "T_NAV_CTS_US", T_NAV_CTS_US);
 80034e8:	f644 734c 	movw	r3, #20300	; 0x4f4c
 80034ec:	9303      	str	r3, [sp, #12]
 80034ee:	4b33      	ldr	r3, [pc, #204]	; (80035bc <rf24_mac_print_timings+0x18c>)
 80034f0:	9302      	str	r3, [sp, #8]
 80034f2:	4b2c      	ldr	r3, [pc, #176]	; (80035a4 <rf24_mac_print_timings+0x174>)
 80034f4:	9301      	str	r3, [sp, #4]
 80034f6:	2300      	movs	r3, #0
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	2300      	movs	r3, #0
 80034fc:	2200      	movs	r2, #0
 80034fe:	2106      	movs	r1, #6
 8003500:	2002      	movs	r0, #2
 8003502:	f7fd fea3 	bl	800124c <rf24_debug>
	rf24_debug(MAC, INFO, VOID, VOID, NULL, "%-25s %dus\n", "T_NAV_FRAG_US", T_NAV_FRAG_US);
 8003506:	f247 63f2 	movw	r3, #30450	; 0x76f2
 800350a:	9303      	str	r3, [sp, #12]
 800350c:	4b2c      	ldr	r3, [pc, #176]	; (80035c0 <rf24_mac_print_timings+0x190>)
 800350e:	9302      	str	r3, [sp, #8]
 8003510:	4b24      	ldr	r3, [pc, #144]	; (80035a4 <rf24_mac_print_timings+0x174>)
 8003512:	9301      	str	r3, [sp, #4]
 8003514:	2300      	movs	r3, #0
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	2300      	movs	r3, #0
 800351a:	2200      	movs	r2, #0
 800351c:	2106      	movs	r1, #6
 800351e:	2002      	movs	r0, #2
 8003520:	f7fd fe94 	bl	800124c <rf24_debug>
	rf24_debug(MAC, INFO, VOID, VOID, NULL, "%-25s %dus\n", "T_NAV_ACK_US", T_NAV_ACK_US);
 8003524:	f644 734c 	movw	r3, #20300	; 0x4f4c
 8003528:	9303      	str	r3, [sp, #12]
 800352a:	4b26      	ldr	r3, [pc, #152]	; (80035c4 <rf24_mac_print_timings+0x194>)
 800352c:	9302      	str	r3, [sp, #8]
 800352e:	4b1d      	ldr	r3, [pc, #116]	; (80035a4 <rf24_mac_print_timings+0x174>)
 8003530:	9301      	str	r3, [sp, #4]
 8003532:	2300      	movs	r3, #0
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	2300      	movs	r3, #0
 8003538:	2200      	movs	r2, #0
 800353a:	2106      	movs	r1, #6
 800353c:	2002      	movs	r0, #2
 800353e:	f7fd fe85 	bl	800124c <rf24_debug>
	rf24_debug(MAC, INFO, VOID, VOID, NULL, "%-25s %dus\n", "T_CTS_TIMEOUT_US", T_CTS_TIMEOUT_US);
 8003542:	f247 5330 	movw	r3, #30000	; 0x7530
 8003546:	9303      	str	r3, [sp, #12]
 8003548:	4b1f      	ldr	r3, [pc, #124]	; (80035c8 <rf24_mac_print_timings+0x198>)
 800354a:	9302      	str	r3, [sp, #8]
 800354c:	4b15      	ldr	r3, [pc, #84]	; (80035a4 <rf24_mac_print_timings+0x174>)
 800354e:	9301      	str	r3, [sp, #4]
 8003550:	2300      	movs	r3, #0
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	2300      	movs	r3, #0
 8003556:	2200      	movs	r2, #0
 8003558:	2106      	movs	r1, #6
 800355a:	2002      	movs	r0, #2
 800355c:	f7fd fe76 	bl	800124c <rf24_debug>
	rf24_debug(MAC, INFO, VOID, VOID, NULL, "%-25s %dus\n", "T_ACK_TIMEOUT_US", T_ACK_TIMEOUT_US);
 8003560:	f247 5330 	movw	r3, #30000	; 0x7530
 8003564:	9303      	str	r3, [sp, #12]
 8003566:	4b19      	ldr	r3, [pc, #100]	; (80035cc <rf24_mac_print_timings+0x19c>)
 8003568:	9302      	str	r3, [sp, #8]
 800356a:	4b0e      	ldr	r3, [pc, #56]	; (80035a4 <rf24_mac_print_timings+0x174>)
 800356c:	9301      	str	r3, [sp, #4]
 800356e:	2300      	movs	r3, #0
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	2300      	movs	r3, #0
 8003574:	2200      	movs	r2, #0
 8003576:	2106      	movs	r1, #6
 8003578:	2002      	movs	r0, #2
 800357a:	f7fd fe67 	bl	800124c <rf24_debug>
	rf24_debug(MAC, INFO, VOID, VOID, NULL, "%-25s %dus\n", "T_NUM_NAM_HANDSHAKE_US", T_NUM_NAM_HANDSHAKE_US);
 800357e:	4b14      	ldr	r3, [pc, #80]	; (80035d0 <rf24_mac_print_timings+0x1a0>)
 8003580:	9303      	str	r3, [sp, #12]
 8003582:	4b14      	ldr	r3, [pc, #80]	; (80035d4 <rf24_mac_print_timings+0x1a4>)
 8003584:	9302      	str	r3, [sp, #8]
 8003586:	4b07      	ldr	r3, [pc, #28]	; (80035a4 <rf24_mac_print_timings+0x174>)
 8003588:	9301      	str	r3, [sp, #4]
 800358a:	2300      	movs	r3, #0
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	2300      	movs	r3, #0
 8003590:	2200      	movs	r2, #0
 8003592:	2106      	movs	r1, #6
 8003594:	2002      	movs	r0, #2
 8003596:	f7fd fe59 	bl	800124c <rf24_debug>
}
 800359a:	bf00      	nop
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	08007888 	.word	0x08007888
 80035a4:	08007898 	.word	0x08007898
 80035a8:	080078a4 	.word	0x080078a4
 80035ac:	080078b0 	.word	0x080078b0
 80035b0:	080078bc 	.word	0x080078bc
 80035b4:	080078c8 	.word	0x080078c8
 80035b8:	080078d4 	.word	0x080078d4
 80035bc:	080078e4 	.word	0x080078e4
 80035c0:	080078f4 	.word	0x080078f4
 80035c4:	08007904 	.word	0x08007904
 80035c8:	08007914 	.word	0x08007914
 80035cc:	08007928 	.word	0x08007928
 80035d0:	000ab14e 	.word	0x000ab14e
 80035d4:	0800793c 	.word	0x0800793c

080035d8 <rf24_network_transfer_nam>:

rf24_network_predecessor_linkstate	predecessor_linkstate;


void rf24_network_transfer_nam(rf24_mac_addr receiver)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b08a      	sub	sp, #40	; 0x28
 80035dc:	af00      	add	r7, sp, #0
 80035de:	463b      	mov	r3, r7
 80035e0:	e883 0003 	stmia.w	r3, {r0, r1}
	// Build a NAM frame
	rf24_mac_frame mac_frame_reply;
	mac_frame_reply.frame_control.type = TOPOLOGY;
 80035e4:	7a3b      	ldrb	r3, [r7, #8]
 80035e6:	2204      	movs	r2, #4
 80035e8:	f362 0385 	bfi	r3, r2, #2, #4
 80035ec:	723b      	strb	r3, [r7, #8]
	mac_frame_reply.frame_control.subtype = TOPOLOGY_NEIGHBOR_ANSWER_MESSAGE;
 80035ee:	893b      	ldrh	r3, [r7, #8]
 80035f0:	2202      	movs	r2, #2
 80035f2:	f362 1389 	bfi	r3, r2, #6, #4
 80035f6:	813b      	strh	r3, [r7, #8]
	mac_frame_reply.transmitter = *rf24_mac_get_address();
 80035f8:	f7ff fb42 	bl	8002c80 <rf24_mac_get_address>
 80035fc:	4602      	mov	r2, r0
 80035fe:	f107 0312 	add.w	r3, r7, #18
 8003602:	6811      	ldr	r1, [r2, #0]
 8003604:	6019      	str	r1, [r3, #0]
 8003606:	8892      	ldrh	r2, [r2, #4]
 8003608:	809a      	strh	r2, [r3, #4]
	mac_frame_reply.receiver = receiver;
 800360a:	f107 030c 	add.w	r3, r7, #12
 800360e:	463a      	mov	r2, r7
 8003610:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003614:	6018      	str	r0, [r3, #0]
 8003616:	3304      	adds	r3, #4
 8003618:	8019      	strh	r1, [r3, #0]
	mac_frame_reply.duration = T_NAV_FRAG_MS;
 800361a:	231e      	movs	r3, #30
 800361c:	817b      	strh	r3, [r7, #10]
	mac_frame_reply.id = 1;
 800361e:	2301      	movs	r3, #1
 8003620:	763b      	strb	r3, [r7, #24]
	mac_frame_reply.topology.successor = false;
 8003622:	2300      	movs	r3, #0
 8003624:	76fb      	strb	r3, [r7, #27]

	if(rf24_mac_addr_equal(&topology_predecessor, &receiver)) mac_frame_reply.topology.successor = true;
 8003626:	463b      	mov	r3, r7
 8003628:	4619      	mov	r1, r3
 800362a:	4809      	ldr	r0, [pc, #36]	; (8003650 <rf24_network_transfer_nam+0x78>)
 800362c:	f7ff fafe 	bl	8002c2c <rf24_mac_addr_equal>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <rf24_network_transfer_nam+0x62>
 8003636:	2301      	movs	r3, #1
 8003638:	76fb      	strb	r3, [r7, #27]

	// Transfer NAM (CSMA/CA)
	rf24_mac_transfer_frame(UNICAST, &mac_frame_reply);
 800363a:	f107 0308 	add.w	r3, r7, #8
 800363e:	4619      	mov	r1, r3
 8003640:	2000      	movs	r0, #0
 8003642:	f7ff fe35 	bl	80032b0 <rf24_mac_transfer_frame>
}
 8003646:	bf00      	nop
 8003648:	3728      	adds	r7, #40	; 0x28
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	200007cc 	.word	0x200007cc

08003654 <rf24_network_frame_received_handler>:

void rf24_network_frame_received_handler(rf24_mac_frame *mac_frame)
{
 8003654:	b590      	push	{r4, r7, lr}
 8003656:	b089      	sub	sp, #36	; 0x24
 8003658:	af04      	add	r7, sp, #16
 800365a:	6078      	str	r0, [r7, #4]
	switch(mac_frame->frame_control.subtype)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	781a      	ldrb	r2, [r3, #0]
 8003660:	0992      	lsrs	r2, r2, #6
 8003662:	b2d2      	uxtb	r2, r2
 8003664:	785b      	ldrb	r3, [r3, #1]
 8003666:	f003 0303 	and.w	r3, r3, #3
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4313      	orrs	r3, r2
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b01      	cmp	r3, #1
 8003672:	d003      	beq.n	800367c <rf24_network_frame_received_handler+0x28>
 8003674:	2b02      	cmp	r3, #2
 8003676:	f000 8094 	beq.w	80037a2 <rf24_network_frame_received_handler+0x14e>
			}

			break;
		}
	}
}
 800367a:	e0dd      	b.n	8003838 <rf24_network_frame_received_handler+0x1e4>
			if(mac_frame->topology.id != rf24_network_get_broadcast_topology_id())
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	7c5c      	ldrb	r4, [r3, #17]
 8003680:	f000 fae4 	bl	8003c4c <rf24_network_get_broadcast_topology_id>
 8003684:	4603      	mov	r3, r0
 8003686:	429c      	cmp	r4, r3
 8003688:	d03b      	beq.n	8003702 <rf24_network_frame_received_handler+0xae>
				rf24_network_reset_topology();
 800368a:	f000 f9c5 	bl	8003a18 <rf24_network_reset_topology>
				controller = false;
 800368e:	4b6c      	ldr	r3, [pc, #432]	; (8003840 <rf24_network_frame_received_handler+0x1ec>)
 8003690:	2200      	movs	r2, #0
 8003692:	701a      	strb	r2, [r3, #0]
				broadcast_topology_id = mac_frame->topology.id;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	7c5a      	ldrb	r2, [r3, #17]
 8003698:	4b6a      	ldr	r3, [pc, #424]	; (8003844 <rf24_network_frame_received_handler+0x1f0>)
 800369a:	701a      	strb	r2, [r3, #0]
				hops_to_controller = mac_frame->topology.hop_count + 1;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	7c9b      	ldrb	r3, [r3, #18]
 80036a0:	3301      	adds	r3, #1
 80036a2:	b2da      	uxtb	r2, r3
 80036a4:	4b68      	ldr	r3, [pc, #416]	; (8003848 <rf24_network_frame_received_handler+0x1f4>)
 80036a6:	701a      	strb	r2, [r3, #0]
				predecessor_linkstate = EVALUATED;
 80036a8:	4b68      	ldr	r3, [pc, #416]	; (800384c <rf24_network_frame_received_handler+0x1f8>)
 80036aa:	2201      	movs	r2, #1
 80036ac:	701a      	strb	r2, [r3, #0]
				topology_predecessor = mac_frame->transmitter;
 80036ae:	4a68      	ldr	r2, [pc, #416]	; (8003850 <rf24_network_frame_received_handler+0x1fc>)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	330a      	adds	r3, #10
 80036b4:	6819      	ldr	r1, [r3, #0]
 80036b6:	6011      	str	r1, [r2, #0]
 80036b8:	889b      	ldrh	r3, [r3, #4]
 80036ba:	8093      	strh	r3, [r2, #4]
				rf24_network_add_neighbor(mac_frame->transmitter, 0, PREDECESSOR, AVAILABLE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	9200      	str	r2, [sp, #0]
 80036c2:	f8d3 200a 	ldr.w	r2, [r3, #10]
 80036c6:	2000      	movs	r0, #0
 80036c8:	4610      	mov	r0, r2
 80036ca:	7b9a      	ldrb	r2, [r3, #14]
 80036cc:	7bdb      	ldrb	r3, [r3, #15]
 80036ce:	021b      	lsls	r3, r3, #8
 80036d0:	4313      	orrs	r3, r2
 80036d2:	2100      	movs	r1, #0
 80036d4:	f363 010f 	bfi	r1, r3, #0, #16
 80036d8:	2301      	movs	r3, #1
 80036da:	2200      	movs	r2, #0
 80036dc:	f000 fac0 	bl	8003c60 <rf24_network_add_neighbor>
				rf24_network_transfer_nam(mac_frame->transmitter);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f8d3 200a 	ldr.w	r2, [r3, #10]
 80036e6:	2100      	movs	r1, #0
 80036e8:	4611      	mov	r1, r2
 80036ea:	7b9a      	ldrb	r2, [r3, #14]
 80036ec:	7bdb      	ldrb	r3, [r3, #15]
 80036ee:	021b      	lsls	r3, r3, #8
 80036f0:	431a      	orrs	r2, r3
 80036f2:	2300      	movs	r3, #0
 80036f4:	f362 030f 	bfi	r3, r2, #0, #16
 80036f8:	4608      	mov	r0, r1
 80036fa:	4619      	mov	r1, r3
 80036fc:	f7ff ff6c 	bl	80035d8 <rf24_network_transfer_nam>
			break;
 8003700:	e09a      	b.n	8003838 <rf24_network_frame_received_handler+0x1e4>
			else if(rf24_network_get_neighbor_state(&mac_frame->transmitter) != CONNECTED)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	330a      	adds	r3, #10
 8003706:	4618      	mov	r0, r3
 8003708:	f000 fb48 	bl	8003d9c <rf24_network_get_neighbor_state>
 800370c:	4603      	mov	r3, r0
 800370e:	2b01      	cmp	r3, #1
 8003710:	d034      	beq.n	800377c <rf24_network_frame_received_handler+0x128>
				rf24_network_add_neighbor(mac_frame->transmitter, 0, NEIGHBOR, AVAILABLE);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	9200      	str	r2, [sp, #0]
 8003718:	f8d3 200a 	ldr.w	r2, [r3, #10]
 800371c:	2000      	movs	r0, #0
 800371e:	4610      	mov	r0, r2
 8003720:	7b9a      	ldrb	r2, [r3, #14]
 8003722:	7bdb      	ldrb	r3, [r3, #15]
 8003724:	021b      	lsls	r3, r3, #8
 8003726:	4313      	orrs	r3, r2
 8003728:	2100      	movs	r1, #0
 800372a:	f363 010f 	bfi	r1, r3, #0, #16
 800372e:	2302      	movs	r3, #2
 8003730:	2200      	movs	r2, #0
 8003732:	f000 fa95 	bl	8003c60 <rf24_network_add_neighbor>
				rf24_network_transfer_nam(mac_frame->transmitter);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f8d3 200a 	ldr.w	r2, [r3, #10]
 800373c:	2100      	movs	r1, #0
 800373e:	4611      	mov	r1, r2
 8003740:	7b9a      	ldrb	r2, [r3, #14]
 8003742:	7bdb      	ldrb	r3, [r3, #15]
 8003744:	021b      	lsls	r3, r3, #8
 8003746:	431a      	orrs	r2, r3
 8003748:	2300      	movs	r3, #0
 800374a:	f362 030f 	bfi	r3, r2, #0, #16
 800374e:	4608      	mov	r0, r1
 8003750:	4619      	mov	r1, r3
 8003752:	f7ff ff41 	bl	80035d8 <rf24_network_transfer_nam>
				rf24_debug(	NETWORK, RECEIVE, TOPOLOGY_NEIGHBOR_UPDATE_MESSAGE, VOID, &mac_frame->transmitter,
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	330a      	adds	r3, #10
							mac_frame->topology.id,
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	7c52      	ldrb	r2, [r2, #17]
				rf24_debug(	NETWORK, RECEIVE, TOPOLOGY_NEIGHBOR_UPDATE_MESSAGE, VOID, &mac_frame->transmitter,
 800375e:	4611      	mov	r1, r2
							mac_frame->topology.hop_count);
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	7c92      	ldrb	r2, [r2, #18]
				rf24_debug(	NETWORK, RECEIVE, TOPOLOGY_NEIGHBOR_UPDATE_MESSAGE, VOID, &mac_frame->transmitter,
 8003764:	9203      	str	r2, [sp, #12]
 8003766:	9102      	str	r1, [sp, #8]
 8003768:	4a3a      	ldr	r2, [pc, #232]	; (8003854 <rf24_network_frame_received_handler+0x200>)
 800376a:	9201      	str	r2, [sp, #4]
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	2300      	movs	r3, #0
 8003770:	2201      	movs	r2, #1
 8003772:	2102      	movs	r1, #2
 8003774:	2004      	movs	r0, #4
 8003776:	f7fd fd69 	bl	800124c <rf24_debug>
			break;
 800377a:	e05d      	b.n	8003838 <rf24_network_frame_received_handler+0x1e4>
				rf24_debug( NETWORK, RECEIVE, TOPOLOGY_NEIGHBOR_UPDATE_MESSAGE, VOID, &mac_frame->transmitter,
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	330a      	adds	r3, #10
							mac_frame->topology.id,
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	7c52      	ldrb	r2, [r2, #17]
				rf24_debug( NETWORK, RECEIVE, TOPOLOGY_NEIGHBOR_UPDATE_MESSAGE, VOID, &mac_frame->transmitter,
 8003784:	4611      	mov	r1, r2
							mac_frame->topology.hop_count);
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	7c92      	ldrb	r2, [r2, #18]
				rf24_debug( NETWORK, RECEIVE, TOPOLOGY_NEIGHBOR_UPDATE_MESSAGE, VOID, &mac_frame->transmitter,
 800378a:	9203      	str	r2, [sp, #12]
 800378c:	9102      	str	r1, [sp, #8]
 800378e:	4a32      	ldr	r2, [pc, #200]	; (8003858 <rf24_network_frame_received_handler+0x204>)
 8003790:	9201      	str	r2, [sp, #4]
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	2300      	movs	r3, #0
 8003796:	2201      	movs	r2, #1
 8003798:	2102      	movs	r1, #2
 800379a:	2004      	movs	r0, #4
 800379c:	f7fd fd56 	bl	800124c <rf24_debug>
			break;
 80037a0:	e04a      	b.n	8003838 <rf24_network_frame_received_handler+0x1e4>
			bool addressed_to_me = rf24_mac_addr_equal(&mac_frame->receiver, rf24_mac_get_address());
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	1d1c      	adds	r4, r3, #4
 80037a6:	f7ff fa6b 	bl	8002c80 <rf24_mac_get_address>
 80037aa:	4603      	mov	r3, r0
 80037ac:	4619      	mov	r1, r3
 80037ae:	4620      	mov	r0, r4
 80037b0:	f7ff fa3c 	bl	8002c2c <rf24_mac_addr_equal>
 80037b4:	4603      	mov	r3, r0
 80037b6:	73fb      	strb	r3, [r7, #15]
			if(addressed_to_me)
 80037b8:	7bfb      	ldrb	r3, [r7, #15]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d03b      	beq.n	8003836 <rf24_network_frame_received_handler+0x1e2>
				uint32_t t_response_us = rf24_stm32f1xx_stop_stopwatch();
 80037be:	f001 f8a1 	bl	8004904 <rf24_stm32f1xx_stop_stopwatch>
 80037c2:	60b8      	str	r0, [r7, #8]
				if(mac_frame->topology.successor)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	7cdb      	ldrb	r3, [r3, #19]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d012      	beq.n	80037f2 <rf24_network_frame_received_handler+0x19e>
					rf24_network_add_neighbor(mac_frame->transmitter, t_response_us, SUCCESSOR, CONNECTED);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	9200      	str	r2, [sp, #0]
 80037d2:	f8d3 200a 	ldr.w	r2, [r3, #10]
 80037d6:	2000      	movs	r0, #0
 80037d8:	4610      	mov	r0, r2
 80037da:	7b9a      	ldrb	r2, [r3, #14]
 80037dc:	7bdb      	ldrb	r3, [r3, #15]
 80037de:	021b      	lsls	r3, r3, #8
 80037e0:	4313      	orrs	r3, r2
 80037e2:	2100      	movs	r1, #0
 80037e4:	f363 010f 	bfi	r1, r3, #0, #16
 80037e8:	2300      	movs	r3, #0
 80037ea:	68ba      	ldr	r2, [r7, #8]
 80037ec:	f000 fa38 	bl	8003c60 <rf24_network_add_neighbor>
 80037f0:	e011      	b.n	8003816 <rf24_network_frame_received_handler+0x1c2>
					rf24_network_add_neighbor(mac_frame->transmitter, t_response_us, NEIGHBOR, CONNECTED);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	9200      	str	r2, [sp, #0]
 80037f8:	f8d3 200a 	ldr.w	r2, [r3, #10]
 80037fc:	2000      	movs	r0, #0
 80037fe:	4610      	mov	r0, r2
 8003800:	7b9a      	ldrb	r2, [r3, #14]
 8003802:	7bdb      	ldrb	r3, [r3, #15]
 8003804:	021b      	lsls	r3, r3, #8
 8003806:	4313      	orrs	r3, r2
 8003808:	2100      	movs	r1, #0
 800380a:	f363 010f 	bfi	r1, r3, #0, #16
 800380e:	2302      	movs	r3, #2
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	f000 fa25 	bl	8003c60 <rf24_network_add_neighbor>
				rf24_debug(NETWORK, RECEIVE, TOPOLOGY_NEIGHBOR_ANSWER_MESSAGE, TOPOLOGY_NEIGHBOR_UPDATE_MESSAGE, &mac_frame->transmitter, "\n", "");
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	330a      	adds	r3, #10
 800381a:	4a10      	ldr	r2, [pc, #64]	; (800385c <rf24_network_frame_received_handler+0x208>)
 800381c:	9202      	str	r2, [sp, #8]
 800381e:	4a10      	ldr	r2, [pc, #64]	; (8003860 <rf24_network_frame_received_handler+0x20c>)
 8003820:	9201      	str	r2, [sp, #4]
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	2301      	movs	r3, #1
 8003826:	2202      	movs	r2, #2
 8003828:	2102      	movs	r1, #2
 800382a:	2004      	movs	r0, #4
 800382c:	f7fd fd0e 	bl	800124c <rf24_debug>
				rf24_mac_send_ack(mac_frame);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f7ff faf1 	bl	8002e18 <rf24_mac_send_ack>
			break;
 8003836:	bf00      	nop
}
 8003838:	bf00      	nop
 800383a:	3714      	adds	r7, #20
 800383c:	46bd      	mov	sp, r7
 800383e:	bd90      	pop	{r4, r7, pc}
 8003840:	200005b8 	.word	0x200005b8
 8003844:	200005b9 	.word	0x200005b9
 8003848:	200005c7 	.word	0x200005c7
 800384c:	200007c8 	.word	0x200007c8
 8003850:	200007cc 	.word	0x200007cc
 8003854:	08007c98 	.word	0x08007c98
 8003858:	08007cbc 	.word	0x08007cbc
 800385c:	08007adc 	.word	0x08007adc
 8003860:	08007cdc 	.word	0x08007cdc

08003864 <rf24_network_transmission_successfull>:

void rf24_network_transmission_successfull()
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af02      	add	r7, sp, #8
	switch(rf24_mac_get_transmission()->frame_subtype)
 800386a:	f7ff f9ff 	bl	8002c6c <rf24_mac_get_transmission>
 800386e:	4603      	mov	r3, r0
 8003870:	791b      	ldrb	r3, [r3, #4]
 8003872:	2b02      	cmp	r3, #2
 8003874:	d000      	beq.n	8003878 <rf24_network_transmission_successfull+0x14>
					// Broadcast update topology (NUM)
					rf24_network_forward_broadcast_topology();
				}
			}*/
		}
		default: break;
 8003876:	e055      	b.n	8003924 <rf24_network_transmission_successfull+0xc0>
			if(rf24_mac_addr_equal(&rf24_mac_get_transmission()->receiver, &topology_predecessor))
 8003878:	f7ff f9f8 	bl	8002c6c <rf24_mac_get_transmission>
 800387c:	4603      	mov	r3, r0
 800387e:	3305      	adds	r3, #5
 8003880:	492a      	ldr	r1, [pc, #168]	; (800392c <rf24_network_transmission_successfull+0xc8>)
 8003882:	4618      	mov	r0, r3
 8003884:	f7ff f9d2 	bl	8002c2c <rf24_mac_addr_equal>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d019      	beq.n	80038c2 <rf24_network_transmission_successfull+0x5e>
				rf24_network_add_neighbor(rf24_mac_get_transmission()->receiver, 0, PREDECESSOR, CONNECTED);
 800388e:	f7ff f9ed 	bl	8002c6c <rf24_mac_get_transmission>
 8003892:	4603      	mov	r3, r0
 8003894:	2201      	movs	r2, #1
 8003896:	9200      	str	r2, [sp, #0]
 8003898:	f8d3 2005 	ldr.w	r2, [r3, #5]
 800389c:	2000      	movs	r0, #0
 800389e:	4610      	mov	r0, r2
 80038a0:	7a5a      	ldrb	r2, [r3, #9]
 80038a2:	7a9b      	ldrb	r3, [r3, #10]
 80038a4:	021b      	lsls	r3, r3, #8
 80038a6:	4313      	orrs	r3, r2
 80038a8:	2100      	movs	r1, #0
 80038aa:	f363 010f 	bfi	r1, r3, #0, #16
 80038ae:	2301      	movs	r3, #1
 80038b0:	2200      	movs	r2, #0
 80038b2:	f000 f9d5 	bl	8003c60 <rf24_network_add_neighbor>
				predecessor_linkstate = ESTABLISHED;
 80038b6:	4b1e      	ldr	r3, [pc, #120]	; (8003930 <rf24_network_transmission_successfull+0xcc>)
 80038b8:	2202      	movs	r2, #2
 80038ba:	701a      	strb	r2, [r3, #0]
				rf24_network_forward_broadcast_topology();
 80038bc:	f000 f8e8 	bl	8003a90 <rf24_network_forward_broadcast_topology>
		default: break;
 80038c0:	e030      	b.n	8003924 <rf24_network_transmission_successfull+0xc0>
				rf24_network_add_neighbor(rf24_mac_get_transmission()->receiver, 0, NEIGHBOR, CONNECTED);
 80038c2:	f7ff f9d3 	bl	8002c6c <rf24_mac_get_transmission>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2201      	movs	r2, #1
 80038ca:	9200      	str	r2, [sp, #0]
 80038cc:	f8d3 2005 	ldr.w	r2, [r3, #5]
 80038d0:	2000      	movs	r0, #0
 80038d2:	4610      	mov	r0, r2
 80038d4:	7a5a      	ldrb	r2, [r3, #9]
 80038d6:	7a9b      	ldrb	r3, [r3, #10]
 80038d8:	021b      	lsls	r3, r3, #8
 80038da:	4313      	orrs	r3, r2
 80038dc:	2100      	movs	r1, #0
 80038de:	f363 010f 	bfi	r1, r3, #0, #16
 80038e2:	2302      	movs	r3, #2
 80038e4:	2200      	movs	r2, #0
 80038e6:	f000 f9bb 	bl	8003c60 <rf24_network_add_neighbor>
				if(predecessor_linkstate == EVALUATED)
 80038ea:	4b11      	ldr	r3, [pc, #68]	; (8003930 <rf24_network_transmission_successfull+0xcc>)
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d10f      	bne.n	8003912 <rf24_network_transmission_successfull+0xae>
					rf24_network_transfer_nam(topology_predecessor);
 80038f2:	4b0e      	ldr	r3, [pc, #56]	; (800392c <rf24_network_transmission_successfull+0xc8>)
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	2100      	movs	r1, #0
 80038f8:	4611      	mov	r1, r2
 80038fa:	791a      	ldrb	r2, [r3, #4]
 80038fc:	795b      	ldrb	r3, [r3, #5]
 80038fe:	021b      	lsls	r3, r3, #8
 8003900:	431a      	orrs	r2, r3
 8003902:	2300      	movs	r3, #0
 8003904:	f362 030f 	bfi	r3, r2, #0, #16
 8003908:	4608      	mov	r0, r1
 800390a:	4619      	mov	r1, r3
 800390c:	f7ff fe64 	bl	80035d8 <rf24_network_transfer_nam>
		default: break;
 8003910:	e008      	b.n	8003924 <rf24_network_transmission_successfull+0xc0>
				else if(!network_flags.num_transmitted)
 8003912:	4b08      	ldr	r3, [pc, #32]	; (8003934 <rf24_network_transmission_successfull+0xd0>)
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <rf24_network_transmission_successfull+0xc0>
					rf24_network_forward_broadcast_topology();
 8003920:	f000 f8b6 	bl	8003a90 <rf24_network_forward_broadcast_topology>
		default: break;
 8003924:	bf00      	nop
	}
}
 8003926:	bf00      	nop
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	200007cc 	.word	0x200007cc
 8003930:	200007c8 	.word	0x200007c8
 8003934:	200005c8 	.word	0x200005c8

08003938 <rf24_network_topology_received>:

void rf24_network_topology_received()
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af04      	add	r7, sp, #16
	// Check if all successors transferred valid topologies
	bool successor_integrity = rf24_network_check_successor_integrity();
 800393e:	f000 fab3 	bl	8003ea8 <rf24_network_check_successor_integrity>
 8003942:	4603      	mov	r3, r0
 8003944:	71fb      	strb	r3, [r7, #7]

	if(successor_integrity)
 8003946:	79fb      	ldrb	r3, [r7, #7]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d043      	beq.n	80039d4 <rf24_network_topology_received+0x9c>
	{
		// Stop timer
		struct rf24_timespan timespan = rf24_worker_stop_timer();
 800394c:	463b      	mov	r3, r7
 800394e:	4618      	mov	r0, r3
 8003950:	f000 fe80 	bl	8004654 <rf24_worker_stop_timer>

		if(!controller)
 8003954:	4b21      	ldr	r3, [pc, #132]	; (80039dc <rf24_network_topology_received+0xa4>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	f083 0301 	eor.w	r3, r3, #1
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d020      	beq.n	80039a4 <rf24_network_topology_received+0x6c>
		{
			rf24_debug(NETWORK, INFO, VOID, VOID, NULL,
 8003962:	223a      	movs	r2, #58	; 0x3a
 8003964:	2106      	movs	r1, #6
 8003966:	481e      	ldr	r0, [pc, #120]	; (80039e0 <rf24_network_topology_received+0xa8>)
 8003968:	f7fd fdd2 	bl	8001510 <decimal_to_string>
 800396c:	4603      	mov	r3, r0
 800396e:	9302      	str	r3, [sp, #8]
 8003970:	4b1c      	ldr	r3, [pc, #112]	; (80039e4 <rf24_network_topology_received+0xac>)
 8003972:	9301      	str	r3, [sp, #4]
 8003974:	2300      	movs	r3, #0
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	2300      	movs	r3, #0
 800397a:	2200      	movs	r2, #0
 800397c:	2106      	movs	r1, #6
 800397e:	2004      	movs	r0, #4
 8003980:	f7fd fc64 	bl	800124c <rf24_debug>
				"Sub-topologies complete, transfer topology to %s\n",
				decimal_to_string(topology_predecessor.bytes, 6, ':'));

			// Transfer topology to predecessor
			rf24_network_transfer_topology(topology_predecessor);
 8003984:	4b16      	ldr	r3, [pc, #88]	; (80039e0 <rf24_network_topology_received+0xa8>)
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	2100      	movs	r1, #0
 800398a:	4611      	mov	r1, r2
 800398c:	791a      	ldrb	r2, [r3, #4]
 800398e:	795b      	ldrb	r3, [r3, #5]
 8003990:	021b      	lsls	r3, r3, #8
 8003992:	431a      	orrs	r2, r3
 8003994:	2300      	movs	r3, #0
 8003996:	f362 030f 	bfi	r3, r2, #0, #16
 800399a:	4608      	mov	r0, r1
 800399c:	4619      	mov	r1, r3
 800399e:	f000 fbf3 	bl	8004188 <rf24_network_transfer_topology>
			rf24_network_print_neighbors();
			rf24_printf("%-10s %s", "", "---------------------------------------------------------\n");
			rf24_network_print_topology();
		}
	}
}
 80039a2:	e017      	b.n	80039d4 <rf24_network_topology_received+0x9c>
			rf24_printf("%-10s Topology update cycle %d terminated after %ds %dms %dus\n\n", "controller",
 80039a4:	4b10      	ldr	r3, [pc, #64]	; (80039e8 <rf24_network_topology_received+0xb0>)
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	4619      	mov	r1, r3
						broadcast_topology_id,timespan.s, timespan.ms, timespan.us);
 80039aa:	783b      	ldrb	r3, [r7, #0]
			rf24_printf("%-10s Topology update cycle %d terminated after %ds %dms %dus\n\n", "controller",
 80039ac:	4618      	mov	r0, r3
						broadcast_topology_id,timespan.s, timespan.ms, timespan.us);
 80039ae:	887b      	ldrh	r3, [r7, #2]
 80039b0:	88ba      	ldrh	r2, [r7, #4]
			rf24_printf("%-10s Topology update cycle %d terminated after %ds %dms %dus\n\n", "controller",
 80039b2:	9201      	str	r2, [sp, #4]
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	4603      	mov	r3, r0
 80039b8:	460a      	mov	r2, r1
 80039ba:	490c      	ldr	r1, [pc, #48]	; (80039ec <rf24_network_topology_received+0xb4>)
 80039bc:	480c      	ldr	r0, [pc, #48]	; (80039f0 <rf24_network_topology_received+0xb8>)
 80039be:	f7fd fcc9 	bl	8001354 <rf24_printf>
			rf24_network_print_neighbors();
 80039c2:	f000 fa23 	bl	8003e0c <rf24_network_print_neighbors>
			rf24_printf("%-10s %s", "", "---------------------------------------------------------\n");
 80039c6:	4a0b      	ldr	r2, [pc, #44]	; (80039f4 <rf24_network_topology_received+0xbc>)
 80039c8:	490b      	ldr	r1, [pc, #44]	; (80039f8 <rf24_network_topology_received+0xc0>)
 80039ca:	480c      	ldr	r0, [pc, #48]	; (80039fc <rf24_network_topology_received+0xc4>)
 80039cc:	f7fd fcc2 	bl	8001354 <rf24_printf>
			rf24_network_print_topology();
 80039d0:	f000 fb74 	bl	80040bc <rf24_network_print_topology>
}
 80039d4:	bf00      	nop
 80039d6:	3708      	adds	r7, #8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	200005b8 	.word	0x200005b8
 80039e0:	200007cc 	.word	0x200007cc
 80039e4:	08007ce0 	.word	0x08007ce0
 80039e8:	200005b9 	.word	0x200005b9
 80039ec:	08007d14 	.word	0x08007d14
 80039f0:	08007d20 	.word	0x08007d20
 80039f4:	08007d60 	.word	0x08007d60
 80039f8:	08007adc 	.word	0x08007adc
 80039fc:	08007d9c 	.word	0x08007d9c

08003a00 <rf24_network_init>:

void rf24_network_init()
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
	rf24_module_init(115200);
 8003a04:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8003a08:	f7fe fb66 	bl	80020d8 <rf24_module_init>
	rf24_worker_init();
 8003a0c:	f000 fc4e 	bl	80042ac <rf24_worker_init>
	rf24_mac_init();
 8003a10:	f7ff f8c6 	bl	8002ba0 <rf24_mac_init>
	rf24_mac_addr addr3 = { .bytes = { 0x3, 0x3, 0x3, 0x3, 0x3, 0x3 } };

	rf24_network_add_neighbor(addr1, 0 , CONNECTED);
	rf24_network_add_neighbor(addr1, 0 , CONNECTED);
	rf24_network_add_neighbor(addr3, 0 , CONNECTED);*/
}
 8003a14:	bf00      	nop
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <rf24_network_reset_topology>:
{
	return &network_flags;
}

void rf24_network_reset_topology()
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
	// Reset flags
	memset(&network_flags, 0, sizeof(rf24_network_flags));
 8003a1c:	2204      	movs	r2, #4
 8003a1e:	2100      	movs	r1, #0
 8003a20:	480a      	ldr	r0, [pc, #40]	; (8003a4c <rf24_network_reset_topology+0x34>)
 8003a22:	f002 fa11 	bl	8005e48 <memset>

	// Reset neighbor list
	rf24_network_reset_neighbors();
 8003a26:	f000 f9dd 	bl	8003de4 <rf24_network_reset_neighbors>

	// Reset topology list
	free(topology);
 8003a2a:	4b09      	ldr	r3, [pc, #36]	; (8003a50 <rf24_network_reset_topology+0x38>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f002 f9e8 	bl	8005e04 <free>
	topology = NULL;
 8003a34:	4b06      	ldr	r3, [pc, #24]	; (8003a50 <rf24_network_reset_topology+0x38>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	601a      	str	r2, [r3, #0]

	topology_length = 0;
 8003a3a:	4b06      	ldr	r3, [pc, #24]	; (8003a54 <rf24_network_reset_topology+0x3c>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	701a      	strb	r2, [r3, #0]
	topology_neighbors_length = 0;
 8003a40:	4b05      	ldr	r3, [pc, #20]	; (8003a58 <rf24_network_reset_topology+0x40>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	701a      	strb	r2, [r3, #0]
}
 8003a46:	bf00      	nop
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	200005c8 	.word	0x200005c8
 8003a50:	200005c0 	.word	0x200005c0
 8003a54:	200005c5 	.word	0x200005c5
 8003a58:	200005c6 	.word	0x200005c6

08003a5c <rf24_network_start_broadcast_topology>:

void rf24_network_start_broadcast_topology()
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
	// Reset topology
	rf24_network_reset_topology();
 8003a60:	f7ff ffda 	bl	8003a18 <rf24_network_reset_topology>

	// Update broadcast topology id
	broadcast_topology_id++;
 8003a64:	4b07      	ldr	r3, [pc, #28]	; (8003a84 <rf24_network_start_broadcast_topology+0x28>)
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	b2da      	uxtb	r2, r3
 8003a6c:	4b05      	ldr	r3, [pc, #20]	; (8003a84 <rf24_network_start_broadcast_topology+0x28>)
 8003a6e:	701a      	strb	r2, [r3, #0]
	hops_to_controller = 0;
 8003a70:	4b05      	ldr	r3, [pc, #20]	; (8003a88 <rf24_network_start_broadcast_topology+0x2c>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	701a      	strb	r2, [r3, #0]
	controller = true;
 8003a76:	4b05      	ldr	r3, [pc, #20]	; (8003a8c <rf24_network_start_broadcast_topology+0x30>)
 8003a78:	2201      	movs	r2, #1
 8003a7a:	701a      	strb	r2, [r3, #0]

	// Broadcast NUM
	rf24_network_forward_broadcast_topology();
 8003a7c:	f000 f808 	bl	8003a90 <rf24_network_forward_broadcast_topology>
}
 8003a80:	bf00      	nop
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	200005b9 	.word	0x200005b9
 8003a88:	200005c7 	.word	0x200005c7
 8003a8c:	200005b8 	.word	0x200005b8

08003a90 <rf24_network_forward_broadcast_topology>:

void rf24_network_forward_broadcast_topology()
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af02      	add	r7, sp, #8
	rf24_mac_transmission *transmission = rf24_mac_setup_transmission(
 8003a96:	f7ff f8fd 	bl	8002c94 <rf24_mac_get_broadcast_address>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	9301      	str	r3, [sp, #4]
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	9300      	str	r3, [sp, #0]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	2104      	movs	r1, #4
 8003aaa:	2002      	movs	r0, #2
 8003aac:	f7ff fb62 	bl	8003174 <rf24_mac_setup_transmission>
 8003ab0:	6078      	str	r0, [r7, #4]
			rf24_mac_get_broadcast_address(),
			NULL,
			0);

	// Get access to medium
	rf24_csma_ca_access_medium(
 8003ab2:	4a04      	ldr	r2, [pc, #16]	; (8003ac4 <rf24_network_forward_broadcast_topology+0x34>)
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7fe fefc 	bl	80028b4 <rf24_csma_ca_access_medium>
			transmission,
			0,
			rf24_network_send_broadcast_topology);
}
 8003abc:	bf00      	nop
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	08003af9 	.word	0x08003af9

08003ac8 <rf24_network_calculate_topology_timeout>:

uint32_t rf24_network_calculate_topology_timeout()
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
	// t=(2^x -1) * st + DIFS + fd(SIZE_NeighborUpdateMessage) + fd(SIZE_NeighborAckMessage)

	uint32_t topology_timeout_us = T_NUM_NAM_HANDSHAKE_US;
 8003ace:	4b08      	ldr	r3, [pc, #32]	; (8003af0 <rf24_network_calculate_topology_timeout+0x28>)
 8003ad0:	607b      	str	r3, [r7, #4]

	topology_timeout_us = topology_timeout_us * PWRTWO(N_NODES - hops_to_controller);
 8003ad2:	4b08      	ldr	r3, [pc, #32]	; (8003af4 <rf24_network_calculate_topology_timeout+0x2c>)
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	f1c3 0305 	rsb	r3, r3, #5
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae0:	607b      	str	r3, [r7, #4]
	//topology_timeout_us = topology_timeout_us * (N_NODES - hops_to_controller);

	return topology_timeout_us;
 8003ae2:	687b      	ldr	r3, [r7, #4]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bc80      	pop	{r7}
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	000ab14e 	.word	0x000ab14e
 8003af4:	200005c7 	.word	0x200005c7

08003af8 <rf24_network_send_broadcast_topology>:

// CALLBACK
void rf24_network_send_broadcast_topology()
{
 8003af8:	b5b0      	push	{r4, r5, r7, lr}
 8003afa:	b09c      	sub	sp, #112	; 0x70
 8003afc:	af08      	add	r7, sp, #32
	rf24_module_tx_data tx_data;
	rf24_mac_frame mac_frame;

	// Construct MAC frame
	mac_frame.frame_control.type = TOPOLOGY;
 8003afe:	7a3b      	ldrb	r3, [r7, #8]
 8003b00:	2204      	movs	r2, #4
 8003b02:	f362 0385 	bfi	r3, r2, #2, #4
 8003b06:	723b      	strb	r3, [r7, #8]
	mac_frame.frame_control.subtype = TOPOLOGY_NEIGHBOR_UPDATE_MESSAGE;
 8003b08:	893b      	ldrh	r3, [r7, #8]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f362 1389 	bfi	r3, r2, #6, #4
 8003b10:	813b      	strh	r3, [r7, #8]
	mac_frame.frame_control.from_distribution = true;
 8003b12:	7a7b      	ldrb	r3, [r7, #9]
 8003b14:	f043 0308 	orr.w	r3, r3, #8
 8003b18:	727b      	strb	r3, [r7, #9]
	mac_frame.transmitter = *rf24_mac_get_address();
 8003b1a:	f7ff f8b1 	bl	8002c80 <rf24_mac_get_address>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	f107 0312 	add.w	r3, r7, #18
 8003b24:	6811      	ldr	r1, [r2, #0]
 8003b26:	6019      	str	r1, [r3, #0]
 8003b28:	8892      	ldrh	r2, [r2, #4]
 8003b2a:	809a      	strh	r2, [r3, #4]
	mac_frame.receiver = *rf24_mac_get_broadcast_address();
 8003b2c:	f7ff f8b2 	bl	8002c94 <rf24_mac_get_broadcast_address>
 8003b30:	4602      	mov	r2, r0
 8003b32:	f107 030c 	add.w	r3, r7, #12
 8003b36:	6810      	ldr	r0, [r2, #0]
 8003b38:	6018      	str	r0, [r3, #0]
 8003b3a:	8892      	ldrh	r2, [r2, #4]
 8003b3c:	809a      	strh	r2, [r3, #4]
	mac_frame.duration = 0;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	817b      	strh	r3, [r7, #10]
	mac_frame.topology.id = broadcast_topology_id;
 8003b42:	4b21      	ldr	r3, [pc, #132]	; (8003bc8 <rf24_network_send_broadcast_topology+0xd0>)
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	767b      	strb	r3, [r7, #25]
	mac_frame.topology.hop_count = hops_to_controller;
 8003b48:	4b20      	ldr	r3, [pc, #128]	; (8003bcc <rf24_network_send_broadcast_topology+0xd4>)
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	76bb      	strb	r3, [r7, #26]

	// Convert frame into byte stream & transmit
	rf24_mac_frame_to_tx_data(&mac_frame, &tx_data);
 8003b4e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003b52:	f107 0308 	add.w	r3, r7, #8
 8003b56:	4611      	mov	r1, r2
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7ff f8a5 	bl	8002ca8 <rf24_mac_frame_to_tx_data>
	rf24_module_transmit(&tx_data);
 8003b5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fe fb3a 	bl	80021dc <rf24_module_transmit>

	network_flags.num_transmitted = true;
 8003b68:	4a19      	ldr	r2, [pc, #100]	; (8003bd0 <rf24_network_send_broadcast_topology+0xd8>)
 8003b6a:	7813      	ldrb	r3, [r2, #0]
 8003b6c:	f043 0301 	orr.w	r3, r3, #1
 8003b70:	7013      	strb	r3, [r2, #0]

	// Calculate topology timeout
	uint32_t topology_timeout_us = rf24_network_calculate_topology_timeout();
 8003b72:	f7ff ffa9 	bl	8003ac8 <rf24_network_calculate_topology_timeout>
 8003b76:	64f8      	str	r0, [r7, #76]	; 0x4c

	rf24_worker_start_timer(
 8003b78:	4b16      	ldr	r3, [pc, #88]	; (8003bd4 <rf24_network_send_broadcast_topology+0xdc>)
 8003b7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b7c:	2102      	movs	r1, #2
 8003b7e:	2000      	movs	r0, #0
 8003b80:	f000 fd2c 	bl	80045dc <rf24_worker_start_timer>
			num_timeout,
			us,
			topology_timeout_us,
			rf24_network_topology_timeout);

	struct rf24_timespan timespan = rf24_worker_us_to_timespan(topology_timeout_us);
 8003b84:	463b      	mov	r3, r7
 8003b86:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 fd87 	bl	800469c <rf24_worker_us_to_timespan>

	rf24_debug(	NETWORK, TRANSMIT, TOPOLOGY_NEIGHBOR_UPDATE_MESSAGE, VOID, rf24_mac_get_broadcast_address(),
 8003b8e:	f7ff f881 	bl	8002c94 <rf24_mac_get_broadcast_address>
 8003b92:	4602      	mov	r2, r0
 8003b94:	4b0c      	ldr	r3, [pc, #48]	; (8003bc8 <rf24_network_send_broadcast_topology+0xd0>)
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4b0c      	ldr	r3, [pc, #48]	; (8003bcc <rf24_network_send_broadcast_topology+0xd4>)
 8003b9c:	781b      	ldrb	r3, [r3, #0]
				"ID: %d, hop-count: %d (NUM-Timeout: %ds %dms %dus)\n",
				broadcast_topology_id, hops_to_controller,timespan.s, timespan.ms, timespan.us);
 8003b9e:	7838      	ldrb	r0, [r7, #0]
 8003ba0:	887c      	ldrh	r4, [r7, #2]
 8003ba2:	88bd      	ldrh	r5, [r7, #4]
	rf24_debug(	NETWORK, TRANSMIT, TOPOLOGY_NEIGHBOR_UPDATE_MESSAGE, VOID, rf24_mac_get_broadcast_address(),
 8003ba4:	9506      	str	r5, [sp, #24]
 8003ba6:	9405      	str	r4, [sp, #20]
 8003ba8:	9004      	str	r0, [sp, #16]
 8003baa:	9303      	str	r3, [sp, #12]
 8003bac:	9102      	str	r1, [sp, #8]
 8003bae:	4b0a      	ldr	r3, [pc, #40]	; (8003bd8 <rf24_network_send_broadcast_topology+0xe0>)
 8003bb0:	9301      	str	r3, [sp, #4]
 8003bb2:	9200      	str	r2, [sp, #0]
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	2101      	movs	r1, #1
 8003bba:	2004      	movs	r0, #4
 8003bbc:	f7fd fb46 	bl	800124c <rf24_debug>
}
 8003bc0:	bf00      	nop
 8003bc2:	3750      	adds	r7, #80	; 0x50
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bdb0      	pop	{r4, r5, r7, pc}
 8003bc8:	200005b9 	.word	0x200005b9
 8003bcc:	200005c7 	.word	0x200005c7
 8003bd0:	200005c8 	.word	0x200005c8
 8003bd4:	08003bdd 	.word	0x08003bdd
 8003bd8:	08007da8 	.word	0x08007da8

08003bdc <rf24_network_topology_timeout>:


void rf24_network_topology_timeout()
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af04      	add	r7, sp, #16
	if(!controller)
 8003be2:	4b15      	ldr	r3, [pc, #84]	; (8003c38 <rf24_network_topology_timeout+0x5c>)
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	f083 0301 	eor.w	r3, r3, #1
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d013      	beq.n	8003c18 <rf24_network_topology_timeout+0x3c>
	{
		rf24_debug(	NETWORK, TIMEOUT, VOID, VOID, NULL,
 8003bf0:	223a      	movs	r2, #58	; 0x3a
 8003bf2:	2106      	movs	r1, #6
 8003bf4:	4811      	ldr	r0, [pc, #68]	; (8003c3c <rf24_network_topology_timeout+0x60>)
 8003bf6:	f7fd fc8b 	bl	8001510 <decimal_to_string>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	9302      	str	r3, [sp, #8]
 8003bfe:	4b10      	ldr	r3, [pc, #64]	; (8003c40 <rf24_network_topology_timeout+0x64>)
 8003c00:	9301      	str	r3, [sp, #4]
 8003c02:	2300      	movs	r3, #0
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	2300      	movs	r3, #0
 8003c08:	2200      	movs	r2, #0
 8003c0a:	2105      	movs	r1, #5
 8003c0c:	2004      	movs	r0, #4
 8003c0e:	f7fd fb1d 	bl	800124c <rf24_debug>
					"NUM-Timeout, transmit topology to predecessor %s\n",
					decimal_to_string(topology_predecessor.bytes, 6, ':'));

		rf24_network_transfer_topology();
 8003c12:	f000 fab9 	bl	8004188 <rf24_network_transfer_topology>
	{
		rf24_debug(	CONTROLLER, TIMEOUT, VOID, VOID, NULL,
					"NUM-Timeout, cycle %d\n",
					broadcast_topology_id);
	}
}
 8003c16:	e00c      	b.n	8003c32 <rf24_network_topology_timeout+0x56>
		rf24_debug(	CONTROLLER, TIMEOUT, VOID, VOID, NULL,
 8003c18:	4b0a      	ldr	r3, [pc, #40]	; (8003c44 <rf24_network_topology_timeout+0x68>)
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	9302      	str	r3, [sp, #8]
 8003c1e:	4b0a      	ldr	r3, [pc, #40]	; (8003c48 <rf24_network_topology_timeout+0x6c>)
 8003c20:	9301      	str	r3, [sp, #4]
 8003c22:	2300      	movs	r3, #0
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	2300      	movs	r3, #0
 8003c28:	2200      	movs	r2, #0
 8003c2a:	2105      	movs	r1, #5
 8003c2c:	2005      	movs	r0, #5
 8003c2e:	f7fd fb0d 	bl	800124c <rf24_debug>
}
 8003c32:	bf00      	nop
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	200005b8 	.word	0x200005b8
 8003c3c:	200007cc 	.word	0x200007cc
 8003c40:	08007ddc 	.word	0x08007ddc
 8003c44:	200005b9 	.word	0x200005b9
 8003c48:	08007e10 	.word	0x08007e10

08003c4c <rf24_network_get_broadcast_topology_id>:

uint8_t	rf24_network_get_broadcast_topology_id()
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
	return broadcast_topology_id;
 8003c50:	4b02      	ldr	r3, [pc, #8]	; (8003c5c <rf24_network_get_broadcast_topology_id+0x10>)
 8003c52:	781b      	ldrb	r3, [r3, #0]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bc80      	pop	{r7}
 8003c5a:	4770      	bx	lr
 8003c5c:	200005b9 	.word	0x200005b9

08003c60 <rf24_network_add_neighbor>:

	return &topology_predecessor;
}

void rf24_network_add_neighbor(rf24_mac_addr mac_addr_neighbor, uint32_t t_response_us, rf24_neighbor_relation relation, rf24_neighbor_state state)
{
 8003c60:	b590      	push	{r4, r7, lr}
 8003c62:	b089      	sub	sp, #36	; 0x24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	f107 0408 	add.w	r4, r7, #8
 8003c6a:	e884 0003 	stmia.w	r4, {r0, r1}
 8003c6e:	607a      	str	r2, [r7, #4]
 8003c70:	70fb      	strb	r3, [r7, #3]
	// Create a new node
	struct rf24_neighbor *new_node = (struct rf24_neighbor*) malloc(sizeof(struct rf24_neighbor));
 8003c72:	2014      	movs	r0, #20
 8003c74:	f002 f8be 	bl	8005df4 <malloc>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	61bb      	str	r3, [r7, #24]

	memcpy (new_node->mac_addr.bytes, mac_addr_neighbor.bytes, 6);
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	461a      	mov	r2, r3
 8003c80:	f107 0308 	add.w	r3, r7, #8
 8003c84:	6818      	ldr	r0, [r3, #0]
 8003c86:	6010      	str	r0, [r2, #0]
 8003c88:	889b      	ldrh	r3, [r3, #4]
 8003c8a:	8093      	strh	r3, [r2, #4]
  	new_node->t_response_us = t_response_us;
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	609a      	str	r2, [r3, #8]
  	new_node->t_last_updated_ms = 0;
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	2200      	movs	r2, #0
 8003c96:	819a      	strh	r2, [r3, #12]
  	new_node->state = state;
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8003c9e:	719a      	strb	r2, [r3, #6]
  	new_node->relation = relation;
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	78fa      	ldrb	r2, [r7, #3]
 8003ca4:	71da      	strb	r2, [r3, #7]
  	new_node->next = NULL;
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	611a      	str	r2, [r3, #16]

  	// List is empty, new node becomes head node
  	if(neighbors == NULL){
 8003cac:	4b39      	ldr	r3, [pc, #228]	; (8003d94 <rf24_network_add_neighbor+0x134>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d109      	bne.n	8003cc8 <rf24_network_add_neighbor+0x68>
  		neighbors = new_node;
 8003cb4:	4a37      	ldr	r2, [pc, #220]	; (8003d94 <rf24_network_add_neighbor+0x134>)
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	6013      	str	r3, [r2, #0]
  		neighbors_length++;
 8003cba:	4b37      	ldr	r3, [pc, #220]	; (8003d98 <rf24_network_add_neighbor+0x138>)
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	b2da      	uxtb	r2, r3
 8003cc2:	4b35      	ldr	r3, [pc, #212]	; (8003d98 <rf24_network_add_neighbor+0x138>)
 8003cc4:	701a      	strb	r2, [r3, #0]
  		return;
 8003cc6:	e062      	b.n	8003d8e <rf24_network_add_neighbor+0x12e>
  	}

  	// Start from the first node
  	struct rf24_neighbor *current_node = neighbors;
 8003cc8:	4b32      	ldr	r3, [pc, #200]	; (8003d94 <rf24_network_add_neighbor+0x134>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	61fb      	str	r3, [r7, #28]

  	// Iterate over linked list
  	while(current_node != NULL)
 8003cce:	e05b      	b.n	8003d88 <rf24_network_add_neighbor+0x128>
  	{
  		// [1] Check if new node value (mac_addr) is lower than current node
  		int cmp_current = memcmp(new_node->mac_addr.bytes, current_node->mac_addr.bytes, 6);
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	69f9      	ldr	r1, [r7, #28]
 8003cd4:	2206      	movs	r2, #6
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f002 f89c 	bl	8005e14 <memcmp>
 8003cdc:	6178      	str	r0, [r7, #20]

  		if(cmp_current < 0){
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	da0c      	bge.n	8003cfe <rf24_network_add_neighbor+0x9e>
  			// New node becomes head node
  			new_node->next = current_node;
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	69fa      	ldr	r2, [r7, #28]
 8003ce8:	611a      	str	r2, [r3, #16]
  			neighbors = new_node;
 8003cea:	4a2a      	ldr	r2, [pc, #168]	; (8003d94 <rf24_network_add_neighbor+0x134>)
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	6013      	str	r3, [r2, #0]
  			neighbors_length++;
 8003cf0:	4b29      	ldr	r3, [pc, #164]	; (8003d98 <rf24_network_add_neighbor+0x138>)
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	4b27      	ldr	r3, [pc, #156]	; (8003d98 <rf24_network_add_neighbor+0x138>)
 8003cfa:	701a      	strb	r2, [r3, #0]
  			return;
 8003cfc:	e047      	b.n	8003d8e <rf24_network_add_neighbor+0x12e>
  		}

  		// [2] Check if new node value (mac_addr) is equal
  		if(cmp_current == 0)
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d111      	bne.n	8003d28 <rf24_network_add_neighbor+0xc8>
  		{
  			// Node is already in list, therefore update metric
  			current_node->t_response_us = new_node->t_response_us;
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	689a      	ldr	r2, [r3, #8]
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	609a      	str	r2, [r3, #8]
  			current_node->state = state;
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8003d12:	719a      	strb	r2, [r3, #6]
  			current_node->relation = relation;
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	78fa      	ldrb	r2, [r7, #3]
 8003d18:	71da      	strb	r2, [r3, #7]
  			current_node->t_last_updated_ms = 0;
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	819a      	strh	r2, [r3, #12]
  			free(new_node);
 8003d20:	69b8      	ldr	r0, [r7, #24]
 8003d22:	f002 f86f 	bl	8005e04 <free>
  			return;
 8003d26:	e032      	b.n	8003d8e <rf24_network_add_neighbor+0x12e>
  		}

  		// [3] check if current node is last node
  		if(cmp_current > 0 && current_node->next == NULL){
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	dd0d      	ble.n	8003d4a <rf24_network_add_neighbor+0xea>
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d109      	bne.n	8003d4a <rf24_network_add_neighbor+0xea>
  			// append new node at end of list
  			current_node->next = new_node;
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	611a      	str	r2, [r3, #16]
  			neighbors_length++;
 8003d3c:	4b16      	ldr	r3, [pc, #88]	; (8003d98 <rf24_network_add_neighbor+0x138>)
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	3301      	adds	r3, #1
 8003d42:	b2da      	uxtb	r2, r3
 8003d44:	4b14      	ldr	r3, [pc, #80]	; (8003d98 <rf24_network_add_neighbor+0x138>)
 8003d46:	701a      	strb	r2, [r3, #0]
  			return;
 8003d48:	e021      	b.n	8003d8e <rf24_network_add_neighbor+0x12e>
  		}

  		// [4] check if node value (mac_addr) is between two nodes
  		int cmp_next = memcmp(new_node->mac_addr.bytes, current_node->next->mac_addr.bytes, 6);
 8003d4a:	69b8      	ldr	r0, [r7, #24]
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	2206      	movs	r2, #6
 8003d52:	4619      	mov	r1, r3
 8003d54:	f002 f85e 	bl	8005e14 <memcmp>
 8003d58:	6138      	str	r0, [r7, #16]

  		if(cmp_current > 0 && cmp_next < 0){
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	dd10      	ble.n	8003d82 <rf24_network_add_neighbor+0x122>
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	da0d      	bge.n	8003d82 <rf24_network_add_neighbor+0x122>
  			// append new node between current and next
  			new_node->next = current_node->next;
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	691a      	ldr	r2, [r3, #16]
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	611a      	str	r2, [r3, #16]
  			current_node->next = new_node;
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	611a      	str	r2, [r3, #16]
  			neighbors_length++;
 8003d74:	4b08      	ldr	r3, [pc, #32]	; (8003d98 <rf24_network_add_neighbor+0x138>)
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	b2da      	uxtb	r2, r3
 8003d7c:	4b06      	ldr	r3, [pc, #24]	; (8003d98 <rf24_network_add_neighbor+0x138>)
 8003d7e:	701a      	strb	r2, [r3, #0]
  			return;
 8003d80:	e005      	b.n	8003d8e <rf24_network_add_neighbor+0x12e>
  		}

  		// goto next node
  		current_node = current_node->next;
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	61fb      	str	r3, [r7, #28]
  	while(current_node != NULL)
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1a0      	bne.n	8003cd0 <rf24_network_add_neighbor+0x70>
   }
}
 8003d8e:	3724      	adds	r7, #36	; 0x24
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd90      	pop	{r4, r7, pc}
 8003d94:	200005bc 	.word	0x200005bc
 8003d98:	200005c4 	.word	0x200005c4

08003d9c <rf24_network_get_neighbor_state>:

	return NULL;
}

rf24_neighbor_state rf24_network_get_neighbor_state(rf24_mac_addr *mac_addr)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
	// Reference to head node of linked neighbor list
	struct rf24_neighbor *current_node = neighbors;
 8003da4:	4b0e      	ldr	r3, [pc, #56]	; (8003de0 <rf24_network_get_neighbor_state+0x44>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	60fb      	str	r3, [r7, #12]

	// Iterate over linked neighbor list
	while(current_node != NULL)
 8003daa:	e010      	b.n	8003dce <rf24_network_get_neighbor_state+0x32>
	{
		// Compare MAC addresses
		uint8_t cmp_current = memcmp(current_node->mac_addr.bytes, mac_addr->bytes, 6);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6879      	ldr	r1, [r7, #4]
 8003db0:	2206      	movs	r2, #6
 8003db2:	4618      	mov	r0, r3
 8003db4:	f002 f82e 	bl	8005e14 <memcmp>
 8003db8:	4603      	mov	r3, r0
 8003dba:	72fb      	strb	r3, [r7, #11]

		// If MAC address equal, return state of neighbor
		if(cmp_current == 0) return current_node->state;
 8003dbc:	7afb      	ldrb	r3, [r7, #11]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d102      	bne.n	8003dc8 <rf24_network_get_neighbor_state+0x2c>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	799b      	ldrb	r3, [r3, #6]
 8003dc6:	e006      	b.n	8003dd6 <rf24_network_get_neighbor_state+0x3a>

		// Goto next node
		current_node = current_node->next;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	60fb      	str	r3, [r7, #12]
	while(current_node != NULL)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1eb      	bne.n	8003dac <rf24_network_get_neighbor_state+0x10>
	}

	// No match found, return no link state
	return NO_LINK;
 8003dd4:	2303      	movs	r3, #3
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	200005bc 	.word	0x200005bc

08003de4 <rf24_network_reset_neighbors>:

void rf24_network_reset_neighbors()
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
	free(neighbors);
 8003de8:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <rf24_network_reset_neighbors+0x20>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f002 f809 	bl	8005e04 <free>
	neighbors = NULL;
 8003df2:	4b04      	ldr	r3, [pc, #16]	; (8003e04 <rf24_network_reset_neighbors+0x20>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]
	neighbors_length = 0;
 8003df8:	4b03      	ldr	r3, [pc, #12]	; (8003e08 <rf24_network_reset_neighbors+0x24>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	701a      	strb	r2, [r3, #0]
}
 8003dfe:	bf00      	nop
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	200005bc 	.word	0x200005bc
 8003e08:	200005c4 	.word	0x200005c4

08003e0c <rf24_network_print_neighbors>:
		current_node = current_node->next;
	}
}

void rf24_network_print_neighbors()
{
 8003e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e10:	b08a      	sub	sp, #40	; 0x28
 8003e12:	af08      	add	r7, sp, #32
	// Start from the first node
	struct rf24_neighbor *current_node = neighbors;
 8003e14:	4b1f      	ldr	r3, [pc, #124]	; (8003e94 <rf24_network_print_neighbors+0x88>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	607b      	str	r3, [r7, #4]
	uint8_t index = 1;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	70fb      	strb	r3, [r7, #3]

	// Iterate over list
	while(current_node != NULL){
 8003e1e:	e031      	b.n	8003e84 <rf24_network_print_neighbors+0x78>
		rf24_printf("%-10s %d: %d:%d:%d:%d:%d:%d (%s, %s)\n", "neighbor",
			index++,
 8003e20:	78fb      	ldrb	r3, [r7, #3]
 8003e22:	1c5a      	adds	r2, r3, #1
 8003e24:	70fa      	strb	r2, [r7, #3]
		rf24_printf("%-10s %d: %d:%d:%d:%d:%d:%d (%s, %s)\n", "neighbor",
 8003e26:	469e      	mov	lr, r3
			current_node->mac_addr.bytes[0],
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	781b      	ldrb	r3, [r3, #0]
		rf24_printf("%-10s %d: %d:%d:%d:%d:%d:%d (%s, %s)\n", "neighbor",
 8003e2c:	4698      	mov	r8, r3
			current_node->mac_addr.bytes[1],
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	785b      	ldrb	r3, [r3, #1]
		rf24_printf("%-10s %d: %d:%d:%d:%d:%d:%d (%s, %s)\n", "neighbor",
 8003e32:	4619      	mov	r1, r3
			current_node->mac_addr.bytes[2],
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	789b      	ldrb	r3, [r3, #2]
		rf24_printf("%-10s %d: %d:%d:%d:%d:%d:%d (%s, %s)\n", "neighbor",
 8003e38:	4618      	mov	r0, r3
			current_node->mac_addr.bytes[3],
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	78db      	ldrb	r3, [r3, #3]
		rf24_printf("%-10s %d: %d:%d:%d:%d:%d:%d (%s, %s)\n", "neighbor",
 8003e3e:	461c      	mov	r4, r3
			current_node->mac_addr.bytes[4],
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	791b      	ldrb	r3, [r3, #4]
		rf24_printf("%-10s %d: %d:%d:%d:%d:%d:%d (%s, %s)\n", "neighbor",
 8003e44:	461d      	mov	r5, r3
			current_node->mac_addr.bytes[5],
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	795b      	ldrb	r3, [r3, #5]
		rf24_printf("%-10s %d: %d:%d:%d:%d:%d:%d (%s, %s)\n", "neighbor",
 8003e4a:	461e      	mov	r6, r3
			rf24_neighbor_states_string[current_node->state],
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	799b      	ldrb	r3, [r3, #6]
 8003e50:	461a      	mov	r2, r3
		rf24_printf("%-10s %d: %d:%d:%d:%d:%d:%d (%s, %s)\n", "neighbor",
 8003e52:	4b11      	ldr	r3, [pc, #68]	; (8003e98 <rf24_network_print_neighbors+0x8c>)
 8003e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
			rf24_neighbor_relation_string[current_node->relation]);
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	79d2      	ldrb	r2, [r2, #7]
 8003e5c:	4694      	mov	ip, r2
		rf24_printf("%-10s %d: %d:%d:%d:%d:%d:%d (%s, %s)\n", "neighbor",
 8003e5e:	4a0f      	ldr	r2, [pc, #60]	; (8003e9c <rf24_network_print_neighbors+0x90>)
 8003e60:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8003e64:	9206      	str	r2, [sp, #24]
 8003e66:	9305      	str	r3, [sp, #20]
 8003e68:	9604      	str	r6, [sp, #16]
 8003e6a:	9503      	str	r5, [sp, #12]
 8003e6c:	9402      	str	r4, [sp, #8]
 8003e6e:	9001      	str	r0, [sp, #4]
 8003e70:	9100      	str	r1, [sp, #0]
 8003e72:	4643      	mov	r3, r8
 8003e74:	4672      	mov	r2, lr
 8003e76:	490a      	ldr	r1, [pc, #40]	; (8003ea0 <rf24_network_print_neighbors+0x94>)
 8003e78:	480a      	ldr	r0, [pc, #40]	; (8003ea4 <rf24_network_print_neighbors+0x98>)
 8003e7a:	f7fd fa6b 	bl	8001354 <rf24_printf>

		current_node = current_node->next;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	607b      	str	r3, [r7, #4]
	while(current_node != NULL){
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1ca      	bne.n	8003e20 <rf24_network_print_neighbors+0x14>
	}
}
 8003e8a:	bf00      	nop
 8003e8c:	3708      	adds	r7, #8
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e94:	200005bc 	.word	0x200005bc
 8003e98:	20000340 	.word	0x20000340
 8003e9c:	20000350 	.word	0x20000350
 8003ea0:	08007e28 	.word	0x08007e28
 8003ea4:	08007e34 	.word	0x08007e34

08003ea8 <rf24_network_check_successor_integrity>:

bool rf24_network_check_successor_integrity()
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
	bool topology_received;
	struct rf24_neighbor *current_neighbor = neighbors;
 8003eae:	4b19      	ldr	r3, [pc, #100]	; (8003f14 <rf24_network_check_successor_integrity+0x6c>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	60bb      	str	r3, [r7, #8]

	// Iterate over neighbors
	while(current_neighbor != NULL)
 8003eb4:	e026      	b.n	8003f04 <rf24_network_check_successor_integrity+0x5c>
	{
		struct rf24_topology *current_topology = topology;
 8003eb6:	4b18      	ldr	r3, [pc, #96]	; (8003f18 <rf24_network_check_successor_integrity+0x70>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	607b      	str	r3, [r7, #4]
		topology_received = false;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	73fb      	strb	r3, [r7, #15]

		// Is neighbor's state CONNECTED? (CONNECTED means node replied with a NAM to a NUM)
		//if(current_neighbor->state == CONNECTED)
		if(current_neighbor->relation == SUCCESSOR)
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	79db      	ldrb	r3, [r3, #7]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d11a      	bne.n	8003efe <rf24_network_check_successor_integrity+0x56>
		{
			// Iterate over topologies
			while(current_topology != NULL)
 8003ec8:	e00e      	b.n	8003ee8 <rf24_network_check_successor_integrity+0x40>
			{
				if(memcmp(current_neighbor->mac_addr.bytes, &current_topology->neighbor->mac_addr, 6) == 0)
 8003eca:	68b8      	ldr	r0, [r7, #8]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2206      	movs	r2, #6
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	f001 ff9e 	bl	8005e14 <memcmp>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <rf24_network_check_successor_integrity+0x3a>
				{
					topology_received = true;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	73fb      	strb	r3, [r7, #15]
				}

				current_topology = current_topology->next;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	607b      	str	r3, [r7, #4]
			while(current_topology != NULL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1ed      	bne.n	8003eca <rf24_network_check_successor_integrity+0x22>
			}

			if(!topology_received) return false;
 8003eee:	7bfb      	ldrb	r3, [r7, #15]
 8003ef0:	f083 0301 	eor.w	r3, r3, #1
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <rf24_network_check_successor_integrity+0x56>
 8003efa:	2300      	movs	r3, #0
 8003efc:	e006      	b.n	8003f0c <rf24_network_check_successor_integrity+0x64>
		}

		current_neighbor = current_neighbor->next;
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	60bb      	str	r3, [r7, #8]
	while(current_neighbor != NULL)
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1d5      	bne.n	8003eb6 <rf24_network_check_successor_integrity+0xe>
	}

	return true;
 8003f0a:	2301      	movs	r3, #1
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3710      	adds	r7, #16
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	200005bc 	.word	0x200005bc
 8003f18:	200005c0 	.word	0x200005c0

08003f1c <rf24_network_topology_get_last>:

struct rf24_topology* rf24_network_topology_get_last()
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
	struct rf24_topology *current_topology = topology;
 8003f22:	4b08      	ldr	r3, [pc, #32]	; (8003f44 <rf24_network_topology_get_last+0x28>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	607b      	str	r3, [r7, #4]

	while(current_topology->next != NULL) current_topology = current_topology->next;
 8003f28:	e002      	b.n	8003f30 <rf24_network_topology_get_last+0x14>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	607b      	str	r3, [r7, #4]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1f8      	bne.n	8003f2a <rf24_network_topology_get_last+0xe>

	return current_topology;
 8003f38:	687b      	ldr	r3, [r7, #4]
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bc80      	pop	{r7}
 8003f42:	4770      	bx	lr
 8003f44:	200005c0 	.word	0x200005c0

08003f48 <rf24_network_rx_data_to_topology>:

void rf24_network_rx_data_to_topology(uint8_t *rx_data, uint8_t length)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b088      	sub	sp, #32
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	460b      	mov	r3, r1
 8003f52:	70fb      	strb	r3, [r7, #3]
	// Initialize a topology to hold sub topology
	struct rf24_topology *sub_topology = (struct rf24_topology*) malloc(sizeof(struct rf24_topology));
 8003f54:	2008      	movs	r0, #8
 8003f56:	f001 ff4d 	bl	8005df4 <malloc>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	613b      	str	r3, [r7, #16]
	sub_topology->neighbor = NULL;
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	2200      	movs	r2, #0
 8003f62:	601a      	str	r2, [r3, #0]
	sub_topology->next = NULL;
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	2200      	movs	r2, #0
 8003f68:	605a      	str	r2, [r3, #4]

	uint8_t index = 0;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	77fb      	strb	r3, [r7, #31]
	struct rf24_topology *current_topology = sub_topology;
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	61bb      	str	r3, [r7, #24]

	while(index < length)
 8003f72:	e04b      	b.n	800400c <rf24_network_rx_data_to_topology+0xc4>
	{
		if(rx_data[index] == 0x1C)
 8003f74:	7ffb      	ldrb	r3, [r7, #31]
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	4413      	add	r3, r2
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	2b1c      	cmp	r3, #28
 8003f7e:	d116      	bne.n	8003fae <rf24_network_rx_data_to_topology+0x66>
		{
			// Create a new topology
			struct rf24_topology *new_topology = (struct rf24_topology*) malloc(sizeof(struct rf24_topology));
 8003f80:	2008      	movs	r0, #8
 8003f82:	f001 ff37 	bl	8005df4 <malloc>
 8003f86:	4603      	mov	r3, r0
 8003f88:	60bb      	str	r3, [r7, #8]
			new_topology->neighbor = NULL;
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]

			// Attach new topology
			current_topology->next = new_topology;
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	68ba      	ldr	r2, [r7, #8]
 8003f94:	605a      	str	r2, [r3, #4]
			current_topology = new_topology;
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	61bb      	str	r3, [r7, #24]

			topology_length++;
 8003f9a:	4b28      	ldr	r3, [pc, #160]	; (800403c <rf24_network_rx_data_to_topology+0xf4>)
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	4b26      	ldr	r3, [pc, #152]	; (800403c <rf24_network_rx_data_to_topology+0xf4>)
 8003fa4:	701a      	strb	r2, [r3, #0]
			index++;
 8003fa6:	7ffb      	ldrb	r3, [r7, #31]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	77fb      	strb	r3, [r7, #31]
 8003fac:	e02e      	b.n	800400c <rf24_network_rx_data_to_topology+0xc4>
		}
		else
		{
			// Create a new neighbor
			struct rf24_neighbor *new_neighbor = (struct rf24_neighbor*) malloc(sizeof(struct rf24_neighbor));
 8003fae:	2014      	movs	r0, #20
 8003fb0:	f001 ff20 	bl	8005df4 <malloc>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	60fb      	str	r3, [r7, #12]
			new_neighbor->next = NULL;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	611a      	str	r2, [r3, #16]

			// Copy MAC address
			memcpy(&new_neighbor->mac_addr, &rx_data[index], 6);
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	7ffb      	ldrb	r3, [r7, #31]
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	2206      	movs	r2, #6
 8003fc8:	4619      	mov	r1, r3
 8003fca:	f001 ff32 	bl	8005e32 <memcpy>

			// If current topology is empty, insert new new neighbor at head
			if(current_topology->neighbor == NULL) current_topology->neighbor = new_neighbor;
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d103      	bne.n	8003fde <rf24_network_rx_data_to_topology+0x96>
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	e00d      	b.n	8003ffa <rf24_network_rx_data_to_topology+0xb2>
			else
			{
				struct rf24_neighbor *current_neighbor = current_topology->neighbor;
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	617b      	str	r3, [r7, #20]

				// Goto end of neighbor list
				while(current_neighbor->next != NULL) current_neighbor = current_neighbor->next;
 8003fe4:	e002      	b.n	8003fec <rf24_network_rx_data_to_topology+0xa4>
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	617b      	str	r3, [r7, #20]
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1f8      	bne.n	8003fe6 <rf24_network_rx_data_to_topology+0x9e>

				// Attach new neighbor to and of neighbor list
				current_neighbor->next = new_neighbor;
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	611a      	str	r2, [r3, #16]
			}

			topology_neighbors_length++;
 8003ffa:	4b11      	ldr	r3, [pc, #68]	; (8004040 <rf24_network_rx_data_to_topology+0xf8>)
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	3301      	adds	r3, #1
 8004000:	b2da      	uxtb	r2, r3
 8004002:	4b0f      	ldr	r3, [pc, #60]	; (8004040 <rf24_network_rx_data_to_topology+0xf8>)
 8004004:	701a      	strb	r2, [r3, #0]
			index += 6;
 8004006:	7ffb      	ldrb	r3, [r7, #31]
 8004008:	3306      	adds	r3, #6
 800400a:	77fb      	strb	r3, [r7, #31]
	while(index < length)
 800400c:	7ffa      	ldrb	r2, [r7, #31]
 800400e:	78fb      	ldrb	r3, [r7, #3]
 8004010:	429a      	cmp	r2, r3
 8004012:	d3af      	bcc.n	8003f74 <rf24_network_rx_data_to_topology+0x2c>
		}
	}

	// Close sub topology
	current_topology->next = NULL;
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	2200      	movs	r2, #0
 8004018:	605a      	str	r2, [r3, #4]

	// Attach sub topology to overall topology
	if(topology == NULL) topology = sub_topology;
 800401a:	4b0a      	ldr	r3, [pc, #40]	; (8004044 <rf24_network_rx_data_to_topology+0xfc>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d103      	bne.n	800402a <rf24_network_rx_data_to_topology+0xe2>
 8004022:	4a08      	ldr	r2, [pc, #32]	; (8004044 <rf24_network_rx_data_to_topology+0xfc>)
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	6013      	str	r3, [r2, #0]
	else rf24_network_topology_get_last()->next = sub_topology;
}
 8004028:	e004      	b.n	8004034 <rf24_network_rx_data_to_topology+0xec>
	else rf24_network_topology_get_last()->next = sub_topology;
 800402a:	f7ff ff77 	bl	8003f1c <rf24_network_topology_get_last>
 800402e:	4602      	mov	r2, r0
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	6053      	str	r3, [r2, #4]
}
 8004034:	bf00      	nop
 8004036:	3720      	adds	r7, #32
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	200005c5 	.word	0x200005c5
 8004040:	200005c6 	.word	0x200005c6
 8004044:	200005c0 	.word	0x200005c0

08004048 <rf24_network_topology_to_tx_data>:

void rf24_network_topology_to_tx_data(uint8_t *tx_data, uint8_t length)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	460b      	mov	r3, r1
 8004052:	70fb      	strb	r3, [r7, #3]
	uint8_t index = 0;
 8004054:	2300      	movs	r3, #0
 8004056:	75fb      	strb	r3, [r7, #23]

	struct rf24_topology *current_topology = topology ;
 8004058:	4b17      	ldr	r3, [pc, #92]	; (80040b8 <rf24_network_topology_to_tx_data+0x70>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	613b      	str	r3, [r7, #16]

	while(current_topology != NULL)
 800405e:	e023      	b.n	80040a8 <rf24_network_topology_to_tx_data+0x60>
	{
		struct rf24_neighbor *current_neighbor = current_topology->neighbor;
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	60fb      	str	r3, [r7, #12]

		while(current_neighbor != NULL)
 8004066:	e00d      	b.n	8004084 <rf24_network_topology_to_tx_data+0x3c>
		{
			// Copy MAC address of current node into rx_data array
			memcpy(&tx_data[index], &current_neighbor->mac_addr, 6);
 8004068:	7dfb      	ldrb	r3, [r7, #23]
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	4413      	add	r3, r2
 800406e:	68f9      	ldr	r1, [r7, #12]
 8004070:	2206      	movs	r2, #6
 8004072:	4618      	mov	r0, r3
 8004074:	f001 fedd 	bl	8005e32 <memcpy>
			// Increment index
			index += 6;
 8004078:	7dfb      	ldrb	r3, [r7, #23]
 800407a:	3306      	adds	r3, #6
 800407c:	75fb      	strb	r3, [r7, #23]
			// Next neighbor
			current_neighbor = current_neighbor->next;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	60fb      	str	r3, [r7, #12]
		while(current_neighbor != NULL)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1ee      	bne.n	8004068 <rf24_network_topology_to_tx_data+0x20>
		}

		// Insert ASCII file separator(s) between topologies
		if(index < length) tx_data[index++] = 0x1C;
 800408a:	7dfa      	ldrb	r2, [r7, #23]
 800408c:	78fb      	ldrb	r3, [r7, #3]
 800408e:	429a      	cmp	r2, r3
 8004090:	d207      	bcs.n	80040a2 <rf24_network_topology_to_tx_data+0x5a>
 8004092:	7dfb      	ldrb	r3, [r7, #23]
 8004094:	1c5a      	adds	r2, r3, #1
 8004096:	75fa      	strb	r2, [r7, #23]
 8004098:	461a      	mov	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4413      	add	r3, r2
 800409e:	221c      	movs	r2, #28
 80040a0:	701a      	strb	r2, [r3, #0]
		// Next topology
		current_topology = current_topology->next;
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	613b      	str	r3, [r7, #16]
	while(current_topology != NULL)
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1d8      	bne.n	8004060 <rf24_network_topology_to_tx_data+0x18>
	}
}
 80040ae:	bf00      	nop
 80040b0:	3718      	adds	r7, #24
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	200005c0 	.word	0x200005c0

080040bc <rf24_network_print_topology>:

void rf24_network_print_topology()
{
 80040bc:	b5b0      	push	{r4, r5, r7, lr}
 80040be:	b088      	sub	sp, #32
 80040c0:	af04      	add	r7, sp, #16
	bool head = true;
 80040c2:	2301      	movs	r3, #1
 80040c4:	73fb      	strb	r3, [r7, #15]
	uint8_t topology_count = 1;
 80040c6:	2301      	movs	r3, #1
 80040c8:	73bb      	strb	r3, [r7, #14]
	uint8_t neighbor_count = 0;
 80040ca:	2300      	movs	r3, #0
 80040cc:	737b      	strb	r3, [r7, #13]

	struct rf24_topology *current_topology = topology;
 80040ce:	4b28      	ldr	r3, [pc, #160]	; (8004170 <rf24_network_print_topology+0xb4>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	60bb      	str	r3, [r7, #8]

	while(current_topology != NULL)
 80040d4:	e045      	b.n	8004162 <rf24_network_print_topology+0xa6>
	{
		struct rf24_neighbor *current_neighbor = current_topology->neighbor;
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	607b      	str	r3, [r7, #4]
		neighbor_count = 0;
 80040dc:	2300      	movs	r3, #0
 80040de:	737b      	strb	r3, [r7, #13]

		while(current_neighbor != NULL)
 80040e0:	e034      	b.n	800414c <rf24_network_print_topology+0x90>
		{
			if(!head) rf24_printf("%-13s %d: ", "", neighbor_count);
 80040e2:	7bfb      	ldrb	r3, [r7, #15]
 80040e4:	f083 0301 	eor.w	r3, r3, #1
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d006      	beq.n	80040fc <rf24_network_print_topology+0x40>
 80040ee:	7b7b      	ldrb	r3, [r7, #13]
 80040f0:	461a      	mov	r2, r3
 80040f2:	4920      	ldr	r1, [pc, #128]	; (8004174 <rf24_network_print_topology+0xb8>)
 80040f4:	4820      	ldr	r0, [pc, #128]	; (8004178 <rf24_network_print_topology+0xbc>)
 80040f6:	f7fd f92d 	bl	8001354 <rf24_printf>
 80040fa:	e005      	b.n	8004108 <rf24_network_print_topology+0x4c>
			else rf24_printf("%-10s %d: ", "topology", topology_count);
 80040fc:	7bbb      	ldrb	r3, [r7, #14]
 80040fe:	461a      	mov	r2, r3
 8004100:	491e      	ldr	r1, [pc, #120]	; (800417c <rf24_network_print_topology+0xc0>)
 8004102:	481f      	ldr	r0, [pc, #124]	; (8004180 <rf24_network_print_topology+0xc4>)
 8004104:	f7fd f926 	bl	8001354 <rf24_printf>

			head = false;
 8004108:	2300      	movs	r3, #0
 800410a:	73fb      	strb	r3, [r7, #15]

			rf24_printf("%d:%d:%d:%d:%d:%d\n",
				current_neighbor->mac_addr.bytes[0],
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	781b      	ldrb	r3, [r3, #0]
			rf24_printf("%d:%d:%d:%d:%d:%d\n",
 8004110:	4618      	mov	r0, r3
				current_neighbor->mac_addr.bytes[1],
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	785b      	ldrb	r3, [r3, #1]
			rf24_printf("%d:%d:%d:%d:%d:%d\n",
 8004116:	461c      	mov	r4, r3
				current_neighbor->mac_addr.bytes[2],
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	789b      	ldrb	r3, [r3, #2]
			rf24_printf("%d:%d:%d:%d:%d:%d\n",
 800411c:	461d      	mov	r5, r3
				current_neighbor->mac_addr.bytes[3],
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	78db      	ldrb	r3, [r3, #3]
			rf24_printf("%d:%d:%d:%d:%d:%d\n",
 8004122:	461a      	mov	r2, r3
				current_neighbor->mac_addr.bytes[4],
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	791b      	ldrb	r3, [r3, #4]
			rf24_printf("%d:%d:%d:%d:%d:%d\n",
 8004128:	4619      	mov	r1, r3
				current_neighbor->mac_addr.bytes[5]);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	795b      	ldrb	r3, [r3, #5]
			rf24_printf("%d:%d:%d:%d:%d:%d\n",
 800412e:	9302      	str	r3, [sp, #8]
 8004130:	9101      	str	r1, [sp, #4]
 8004132:	9200      	str	r2, [sp, #0]
 8004134:	462b      	mov	r3, r5
 8004136:	4622      	mov	r2, r4
 8004138:	4601      	mov	r1, r0
 800413a:	4812      	ldr	r0, [pc, #72]	; (8004184 <rf24_network_print_topology+0xc8>)
 800413c:	f7fd f90a 	bl	8001354 <rf24_printf>

			current_neighbor = current_neighbor->next;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	607b      	str	r3, [r7, #4]
			neighbor_count++;
 8004146:	7b7b      	ldrb	r3, [r7, #13]
 8004148:	3301      	adds	r3, #1
 800414a:	737b      	strb	r3, [r7, #13]
		while(current_neighbor != NULL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1c7      	bne.n	80040e2 <rf24_network_print_topology+0x26>
		}

		current_topology = current_topology->next;
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	60bb      	str	r3, [r7, #8]
		topology_count++;
 8004158:	7bbb      	ldrb	r3, [r7, #14]
 800415a:	3301      	adds	r3, #1
 800415c:	73bb      	strb	r3, [r7, #14]
		head = true;
 800415e:	2301      	movs	r3, #1
 8004160:	73fb      	strb	r3, [r7, #15]
	while(current_topology != NULL)
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1b6      	bne.n	80040d6 <rf24_network_print_topology+0x1a>
	}
}
 8004168:	bf00      	nop
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bdb0      	pop	{r4, r5, r7, pc}
 8004170:	200005c0 	.word	0x200005c0
 8004174:	08007adc 	.word	0x08007adc
 8004178:	08007e5c 	.word	0x08007e5c
 800417c:	08007e68 	.word	0x08007e68
 8004180:	08007e74 	.word	0x08007e74
 8004184:	08007e80 	.word	0x08007e80

08004188 <rf24_network_transfer_topology>:

void rf24_network_transfer_topology()
{
 8004188:	b5b0      	push	{r4, r5, r7, lr}
 800418a:	b08a      	sub	sp, #40	; 0x28
 800418c:	af02      	add	r7, sp, #8
 800418e:	466b      	mov	r3, sp
 8004190:	461d      	mov	r5, r3
	rf24_worker_stop_timer();
 8004192:	463b      	mov	r3, r7
 8004194:	4618      	mov	r0, r3
 8004196:	f000 fa5d 	bl	8004654 <rf24_worker_stop_timer>

	// (1) 	Insert myself (as a neighbor node) at head position of neighbors list

	struct rf24_neighbor *new_neighbor = (struct rf24_neighbor*) malloc(sizeof(struct rf24_neighbor));
 800419a:	2014      	movs	r0, #20
 800419c:	f001 fe2a 	bl	8005df4 <malloc>
 80041a0:	4603      	mov	r3, r0
 80041a2:	61fb      	str	r3, [r7, #28]

	new_neighbor->mac_addr = *rf24_mac_get_address();
 80041a4:	f7fe fd6c 	bl	8002c80 <rf24_mac_get_address>
 80041a8:	4602      	mov	r2, r0
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	6810      	ldr	r0, [r2, #0]
 80041ae:	6018      	str	r0, [r3, #0]
 80041b0:	8892      	ldrh	r2, [r2, #4]
 80041b2:	809a      	strh	r2, [r3, #4]

	new_neighbor->next = neighbors;
 80041b4:	4b37      	ldr	r3, [pc, #220]	; (8004294 <rf24_network_transfer_topology+0x10c>)
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	611a      	str	r2, [r3, #16]
	neighbors = new_neighbor;
 80041bc:	4a35      	ldr	r2, [pc, #212]	; (8004294 <rf24_network_transfer_topology+0x10c>)
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	6013      	str	r3, [r2, #0]

	neighbors_length++;
 80041c2:	4b35      	ldr	r3, [pc, #212]	; (8004298 <rf24_network_transfer_topology+0x110>)
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	3301      	adds	r3, #1
 80041c8:	b2da      	uxtb	r2, r3
 80041ca:	4b33      	ldr	r3, [pc, #204]	; (8004298 <rf24_network_transfer_topology+0x110>)
 80041cc:	701a      	strb	r2, [r3, #0]

	// (2) Insert my neighbors into topology at head position (before topologies of successors)

	struct rf24_topology *new_topology = (struct rf24_topology*) malloc(sizeof(struct rf24_topology));
 80041ce:	2008      	movs	r0, #8
 80041d0:	f001 fe10 	bl	8005df4 <malloc>
 80041d4:	4603      	mov	r3, r0
 80041d6:	61bb      	str	r3, [r7, #24]

	new_topology->neighbor = neighbors;
 80041d8:	4b2e      	ldr	r3, [pc, #184]	; (8004294 <rf24_network_transfer_topology+0x10c>)
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	601a      	str	r2, [r3, #0]
	new_topology->next = topology;
 80041e0:	4b2e      	ldr	r3, [pc, #184]	; (800429c <rf24_network_transfer_topology+0x114>)
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	605a      	str	r2, [r3, #4]
	topology = new_topology;
 80041e8:	4a2c      	ldr	r2, [pc, #176]	; (800429c <rf24_network_transfer_topology+0x114>)
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	6013      	str	r3, [r2, #0]

	topology_length++;
 80041ee:	4b2c      	ldr	r3, [pc, #176]	; (80042a0 <rf24_network_transfer_topology+0x118>)
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	3301      	adds	r3, #1
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	4b2a      	ldr	r3, [pc, #168]	; (80042a0 <rf24_network_transfer_topology+0x118>)
 80041f8:	701a      	strb	r2, [r3, #0]
	topology_neighbors_length += neighbors_length;
 80041fa:	4b2a      	ldr	r3, [pc, #168]	; (80042a4 <rf24_network_transfer_topology+0x11c>)
 80041fc:	781a      	ldrb	r2, [r3, #0]
 80041fe:	4b26      	ldr	r3, [pc, #152]	; (8004298 <rf24_network_transfer_topology+0x110>)
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	4413      	add	r3, r2
 8004204:	b2da      	uxtb	r2, r3
 8004206:	4b27      	ldr	r3, [pc, #156]	; (80042a4 <rf24_network_transfer_topology+0x11c>)
 8004208:	701a      	strb	r2, [r3, #0]

	// (3) Covert topology into byte stream

	//  number of bytes required to hold topology
	uint8_t tx_data_length =
			topology_neighbors_length * 6 + // number of neighbors in topology * 6 Bytes for MAC address */
 800420a:	4b26      	ldr	r3, [pc, #152]	; (80042a4 <rf24_network_transfer_topology+0x11c>)
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	461a      	mov	r2, r3
 8004210:	0052      	lsls	r2, r2, #1
 8004212:	4413      	add	r3, r2
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	b2da      	uxtb	r2, r3
 8004218:	4b21      	ldr	r3, [pc, #132]	; (80042a0 <rf24_network_transfer_topology+0x118>)
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	4413      	add	r3, r2
 800421e:	b2db      	uxtb	r3, r3
	uint8_t tx_data_length =
 8004220:	3b01      	subs	r3, #1
 8004222:	75fb      	strb	r3, [r7, #23]
			topology_length - 1; 			// (number of topologies - 1) Bytes for separator symbols*/

	uint8_t tx_data[tx_data_length];
 8004224:	7df8      	ldrb	r0, [r7, #23]
 8004226:	4603      	mov	r3, r0
 8004228:	3b01      	subs	r3, #1
 800422a:	613b      	str	r3, [r7, #16]
 800422c:	b2c1      	uxtb	r1, r0
 800422e:	f04f 0200 	mov.w	r2, #0
 8004232:	f04f 0300 	mov.w	r3, #0
 8004236:	f04f 0400 	mov.w	r4, #0
 800423a:	00d4      	lsls	r4, r2, #3
 800423c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8004240:	00cb      	lsls	r3, r1, #3
 8004242:	b2c1      	uxtb	r1, r0
 8004244:	f04f 0200 	mov.w	r2, #0
 8004248:	f04f 0300 	mov.w	r3, #0
 800424c:	f04f 0400 	mov.w	r4, #0
 8004250:	00d4      	lsls	r4, r2, #3
 8004252:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8004256:	00cb      	lsls	r3, r1, #3
 8004258:	4603      	mov	r3, r0
 800425a:	3307      	adds	r3, #7
 800425c:	08db      	lsrs	r3, r3, #3
 800425e:	00db      	lsls	r3, r3, #3
 8004260:	ebad 0d03 	sub.w	sp, sp, r3
 8004264:	ab02      	add	r3, sp, #8
 8004266:	3300      	adds	r3, #0
 8004268:	60fb      	str	r3, [r7, #12]
	rf24_network_topology_to_tx_data(tx_data, tx_data_length);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	7dfa      	ldrb	r2, [r7, #23]
 800426e:	4611      	mov	r1, r2
 8004270:	4618      	mov	r0, r3
 8004272:	f7ff fee9 	bl	8004048 <rf24_network_topology_to_tx_data>

	// (4) Transfer topology to topology predecessor

	rf24_mac_transfer_data(UNICAST, &topology_predecessor, DATA_TOPOLOGY, tx_data, tx_data_length);
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	7dfb      	ldrb	r3, [r7, #23]
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	4613      	mov	r3, r2
 800427e:	2207      	movs	r2, #7
 8004280:	4909      	ldr	r1, [pc, #36]	; (80042a8 <rf24_network_transfer_topology+0x120>)
 8004282:	2000      	movs	r0, #0
 8004284:	f7ff f864 	bl	8003350 <rf24_mac_transfer_data>
 8004288:	46ad      	mov	sp, r5
}
 800428a:	bf00      	nop
 800428c:	3720      	adds	r7, #32
 800428e:	46bd      	mov	sp, r7
 8004290:	bdb0      	pop	{r4, r5, r7, pc}
 8004292:	bf00      	nop
 8004294:	200005bc 	.word	0x200005bc
 8004298:	200005c4 	.word	0x200005c4
 800429c:	200005c0 	.word	0x200005c0
 80042a0:	200005c5 	.word	0x200005c5
 80042a4:	200005c6 	.word	0x200005c6
 80042a8:	200007cc 	.word	0x200007cc

080042ac <rf24_worker_init>:
struct rf24_timer		*timer1 = NULL;
struct rf24_task 		*rf24_tasks = NULL;
struct rf24_cyclic_task *rf24_cyclic_tasks = NULL;

void rf24_worker_init()
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
	// attach callback function to rf24 module to notify tx transmitted event

	rf24_module_attach_notify_data_transmitted(rf24_worker_data_transmitted_handler);
 80042b0:	4809      	ldr	r0, [pc, #36]	; (80042d8 <rf24_worker_init+0x2c>)
 80042b2:	f7fd ffdb 	bl	800226c <rf24_module_attach_notify_data_transmitted>

	// attach callback function to rf24 module to notify rx received event

	rf24_module_attach_notify_data_received(rf24_worker_data_received_handler);
 80042b6:	4809      	ldr	r0, [pc, #36]	; (80042dc <rf24_worker_init+0x30>)
 80042b8:	f7fd ffca 	bl	8002250 <rf24_module_attach_notify_data_received>

	rf24_stm32f1xx_set_timer_interrupt_us(2, TASK_CYCLE_US, rf24_worker_process_tasks);
 80042bc:	4a08      	ldr	r2, [pc, #32]	; (80042e0 <rf24_worker_init+0x34>)
 80042be:	2164      	movs	r1, #100	; 0x64
 80042c0:	2002      	movs	r0, #2
 80042c2:	f000 fc27 	bl	8004b14 <rf24_stm32f1xx_set_timer_interrupt_us>

	rf24_stm32f1xx_set_timer_interrupt_us(3, TIMER_CYCLE_US, rf24_worker_process_timers);
 80042c6:	4a07      	ldr	r2, [pc, #28]	; (80042e4 <rf24_worker_init+0x38>)
 80042c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80042cc:	2003      	movs	r0, #3
 80042ce:	f000 fc21 	bl	8004b14 <rf24_stm32f1xx_set_timer_interrupt_us>

	//rf24_stm32f1xx_set_timer_interrupt_ms(3, 20*CYCLIC_TASK_CYCLE_MS, rf24_worker_process_cyclic_tasks);
}
 80042d2:	bf00      	nop
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	080042e9 	.word	0x080042e9
 80042dc:	080042f5 	.word	0x080042f5
 80042e0:	08004399 	.word	0x08004399
 80042e4:	0800432d 	.word	0x0800432d

080042e8 <rf24_worker_data_transmitted_handler>:

void rf24_worker_data_transmitted_handler()
{
 80042e8:	b480      	push	{r7}
 80042ea:	af00      	add	r7, sp, #0

}
 80042ec:	bf00      	nop
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bc80      	pop	{r7}
 80042f2:	4770      	bx	lr

080042f4 <rf24_worker_data_received_handler>:

void rf24_worker_data_received_handler(rf24_module_rx_data *rx_data)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
	// cast rx_data (byte array) to mac frame (struct)
	rf24_mac_frame *mac_frame = (rf24_mac_frame*) rx_data->payload;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	60fb      	str	r3, [r7, #12]

	//rf24_mac_print_frame(mac_frame);
	//return;

	// if frame is csma ca control message call csma ca frame handler
	switch(mac_frame->frame_control.type)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b04      	cmp	r3, #4
 800430c:	d103      	bne.n	8004316 <rf24_worker_data_received_handler+0x22>
	{
		case TOPOLOGY:
			rf24_network_frame_received_handler(mac_frame);
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f7ff f9a0 	bl	8003654 <rf24_network_frame_received_handler>
			break;
 8004314:	bf00      	nop
	}

	// Call CSMA/CA frame received handler
	rf24_csma_ca_frame_received_handler(mac_frame);
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f7fd fffa 	bl	8002310 <rf24_csma_ca_frame_received_handler>

	// Call MAC frame received handler
	rf24_mac_frame_received_handler(mac_frame);
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f7fe fb3f 	bl	80029a0 <rf24_mac_frame_received_handler>
}
 8004322:	bf00      	nop
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
	...

0800432c <rf24_worker_process_timers>:
		current_task = current_task->next_task;
	}
}

void rf24_worker_process_timers()
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
	if(timer1 == NULL) return;
 8004330:	4b18      	ldr	r3, [pc, #96]	; (8004394 <rf24_worker_process_timers+0x68>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d02a      	beq.n	800438e <rf24_worker_process_timers+0x62>

	if(timer1->t_count_us < timer1->t_us)
 8004338:	4b16      	ldr	r3, [pc, #88]	; (8004394 <rf24_worker_process_timers+0x68>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	689a      	ldr	r2, [r3, #8]
 800433e:	4b15      	ldr	r3, [pc, #84]	; (8004394 <rf24_worker_process_timers+0x68>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	429a      	cmp	r2, r3
 8004346:	d219      	bcs.n	800437c <rf24_worker_process_timers+0x50>
	{
		timer1->t_count_us += TIMER_CYCLE_US;
 8004348:	4b12      	ldr	r3, [pc, #72]	; (8004394 <rf24_worker_process_timers+0x68>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689a      	ldr	r2, [r3, #8]
 800434e:	4b11      	ldr	r3, [pc, #68]	; (8004394 <rf24_worker_process_timers+0x68>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 8004356:	609a      	str	r2, [r3, #8]

		if(timer1->t_count_us >= timer1->t_us)
 8004358:	4b0e      	ldr	r3, [pc, #56]	; (8004394 <rf24_worker_process_timers+0x68>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	689a      	ldr	r2, [r3, #8]
 800435e:	4b0d      	ldr	r3, [pc, #52]	; (8004394 <rf24_worker_process_timers+0x68>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	429a      	cmp	r2, r3
 8004366:	d313      	bcc.n	8004390 <rf24_worker_process_timers+0x64>
		{
			if(timer1->fct_ptr_timeout)
 8004368:	4b0a      	ldr	r3, [pc, #40]	; (8004394 <rf24_worker_process_timers+0x68>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00e      	beq.n	8004390 <rf24_worker_process_timers+0x64>
			{
				timer1->fct_ptr_timeout();
 8004372:	4b08      	ldr	r3, [pc, #32]	; (8004394 <rf24_worker_process_timers+0x68>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	4798      	blx	r3
 800437a:	e009      	b.n	8004390 <rf24_worker_process_timers+0x64>
			}
		}
	}
	else
	{
		free(timer1);
 800437c:	4b05      	ldr	r3, [pc, #20]	; (8004394 <rf24_worker_process_timers+0x68>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4618      	mov	r0, r3
 8004382:	f001 fd3f 	bl	8005e04 <free>
		timer1 = NULL;
 8004386:	4b03      	ldr	r3, [pc, #12]	; (8004394 <rf24_worker_process_timers+0x68>)
 8004388:	2200      	movs	r2, #0
 800438a:	601a      	str	r2, [r3, #0]
 800438c:	e000      	b.n	8004390 <rf24_worker_process_timers+0x64>
	if(timer1 == NULL) return;
 800438e:	bf00      	nop
	}
}
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	200005cc 	.word	0x200005cc

08004398 <rf24_worker_process_tasks>:

void rf24_worker_process_tasks()
{
 8004398:	b580      	push	{r7, lr}
 800439a:	af00      	add	r7, sp, #0
	// tasks available?
	if(rf24_tasks == NULL) return;
 800439c:	4b19      	ldr	r3, [pc, #100]	; (8004404 <rf24_worker_process_tasks+0x6c>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d02d      	beq.n	8004400 <rf24_worker_process_tasks+0x68>
		}
		else return;
	}*/

	// as long as counter is less than repeat - process current task
	if(rf24_tasks->cycle_count < rf24_tasks->cycles)
 80043a4:	4b17      	ldr	r3, [pc, #92]	; (8004404 <rf24_worker_process_tasks+0x6c>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	789a      	ldrb	r2, [r3, #2]
 80043aa:	4b16      	ldr	r3, [pc, #88]	; (8004404 <rf24_worker_process_tasks+0x6c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	785b      	ldrb	r3, [r3, #1]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d222      	bcs.n	80043fa <rf24_worker_process_tasks+0x62>
	{
		// add us
		rf24_tasks->t_cycle_count_us += TASK_CYCLE_US;
 80043b4:	4b13      	ldr	r3, [pc, #76]	; (8004404 <rf24_worker_process_tasks+0x6c>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	689a      	ldr	r2, [r3, #8]
 80043ba:	4b12      	ldr	r3, [pc, #72]	; (8004404 <rf24_worker_process_tasks+0x6c>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	3264      	adds	r2, #100	; 0x64
 80043c0:	609a      	str	r2, [r3, #8]

		// one cycle past?
		if(rf24_tasks->t_cycle_count_us >= rf24_tasks->t_cycle_us)
 80043c2:	4b10      	ldr	r3, [pc, #64]	; (8004404 <rf24_worker_process_tasks+0x6c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	689a      	ldr	r2, [r3, #8]
 80043c8:	4b0e      	ldr	r3, [pc, #56]	; (8004404 <rf24_worker_process_tasks+0x6c>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d317      	bcc.n	8004402 <rf24_worker_process_tasks+0x6a>
		{
			// one cycle past - reset t_wait_count
			rf24_tasks->t_cycle_count_us = 0;
 80043d2:	4b0c      	ldr	r3, [pc, #48]	; (8004404 <rf24_worker_process_tasks+0x6c>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2200      	movs	r2, #0
 80043d8:	609a      	str	r2, [r3, #8]

			// increment counter
			rf24_tasks->cycle_count++;
 80043da:	4b0a      	ldr	r3, [pc, #40]	; (8004404 <rf24_worker_process_tasks+0x6c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	789a      	ldrb	r2, [r3, #2]
 80043e0:	3201      	adds	r2, #1
 80043e2:	b2d2      	uxtb	r2, r2
 80043e4:	709a      	strb	r2, [r3, #2]

			//call task function
			if(rf24_tasks->fct_ptr_execution) rf24_tasks->fct_ptr_execution();
 80043e6:	4b07      	ldr	r3, [pc, #28]	; (8004404 <rf24_worker_process_tasks+0x6c>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d008      	beq.n	8004402 <rf24_worker_process_tasks+0x6a>
 80043f0:	4b04      	ldr	r3, [pc, #16]	; (8004404 <rf24_worker_process_tasks+0x6c>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f6:	4798      	blx	r3
 80043f8:	e003      	b.n	8004402 <rf24_worker_process_tasks+0x6a>
				rf24_tasks->t_cycle_us/1000);*/

		//rf24_worker_print_tasks();
		//rf24_debug("---------------");

		rf24_worker_pop_task();
 80043fa:	f000 f8cd 	bl	8004598 <rf24_worker_pop_task>
 80043fe:	e000      	b.n	8004402 <rf24_worker_process_tasks+0x6a>
	if(rf24_tasks == NULL) return;
 8004400:	bf00      	nop
	}
}
 8004402:	bd80      	pop	{r7, pc}
 8004404:	200005d0 	.word	0x200005d0

08004408 <rf24_worker_attach_wait>:
	task->precondition = false;
	task->fct_ptr_precondition = fct_ptr_precondition;
}

void rf24_worker_attach_wait(rf24_task_names task, uint32_t t_cycle_us)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	4603      	mov	r3, r0
 8004410:	6039      	str	r1, [r7, #0]
 8004412:	71fb      	strb	r3, [r7, #7]
	rf24_worker_attach_task(rf24_worker_build_task(task, 1, t_cycle_us, false));
 8004414:	79f8      	ldrb	r0, [r7, #7]
 8004416:	2300      	movs	r3, #0
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	2101      	movs	r1, #1
 800441c:	f000 f83a 	bl	8004494 <rf24_worker_build_task>
 8004420:	4603      	mov	r3, r0
 8004422:	4618      	mov	r0, r3
 8004424:	f000 f874 	bl	8004510 <rf24_worker_attach_task>
}
 8004428:	bf00      	nop
 800442a:	3708      	adds	r7, #8
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <rf24_worker_push_wait>:

void rf24_worker_push_wait(rf24_task_names task, uint32_t t_cycle_us)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	4603      	mov	r3, r0
 8004438:	6039      	str	r1, [r7, #0]
 800443a:	71fb      	strb	r3, [r7, #7]
	rf24_worker_push_task(rf24_worker_build_task(task, 1, t_cycle_us, false));
 800443c:	79f8      	ldrb	r0, [r7, #7]
 800443e:	2300      	movs	r3, #0
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	2101      	movs	r1, #1
 8004444:	f000 f826 	bl	8004494 <rf24_worker_build_task>
 8004448:	4603      	mov	r3, r0
 800444a:	4618      	mov	r0, r3
 800444c:	f000 f880 	bl	8004550 <rf24_worker_push_task>
}
 8004450:	bf00      	nop
 8004452:	3708      	adds	r7, #8
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <rf24_worker_attach>:

void rf24_worker_attach(struct rf24_task* task, rf24_worker_fct_ptr fct_ptr_execution)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
	task->fct_ptr_execution = fct_ptr_execution;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	683a      	ldr	r2, [r7, #0]
 8004466:	631a      	str	r2, [r3, #48]	; 0x30
	rf24_worker_attach_task(task);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 f851 	bl	8004510 <rf24_worker_attach_task>
}
 800446e:	bf00      	nop
 8004470:	3708      	adds	r7, #8
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <rf24_worker_push>:

void rf24_worker_push(struct rf24_task* task, rf24_worker_fct_ptr fct_ptr_execution)
{
 8004476:	b580      	push	{r7, lr}
 8004478:	b082      	sub	sp, #8
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
 800447e:	6039      	str	r1, [r7, #0]
	task->fct_ptr_execution = fct_ptr_execution;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	631a      	str	r2, [r3, #48]	; 0x30
	rf24_worker_push_task(task);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f862 	bl	8004550 <rf24_worker_push_task>
}
 800448c:	bf00      	nop
 800448e:	3708      	adds	r7, #8
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <rf24_worker_build_task>:
	// insert new node at the end
	current_task->next_task = new_cyclic_task;
}

struct rf24_task* rf24_worker_build_task(rf24_task_names task, uint8_t cycles, uint32_t t_cycle_us, bool immediate)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	603a      	str	r2, [r7, #0]
 800449c:	461a      	mov	r2, r3
 800449e:	4603      	mov	r3, r0
 80044a0:	71fb      	strb	r3, [r7, #7]
 80044a2:	460b      	mov	r3, r1
 80044a4:	71bb      	strb	r3, [r7, #6]
 80044a6:	4613      	mov	r3, r2
 80044a8:	717b      	strb	r3, [r7, #5]
	struct rf24_task *new_task = (struct rf24_task*) malloc(sizeof(struct rf24_task));
 80044aa:	2038      	movs	r0, #56	; 0x38
 80044ac:	f001 fca2 	bl	8005df4 <malloc>
 80044b0:	4603      	mov	r3, r0
 80044b2:	60fb      	str	r3, [r7, #12]

	if(new_task == NULL)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <rf24_worker_build_task+0x2a>
	{
		return NULL;
 80044ba:	2300      	movs	r3, #0
 80044bc:	e024      	b.n	8004508 <rf24_worker_build_task+0x74>
	}

	new_task->task = task;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	79fa      	ldrb	r2, [r7, #7]
 80044c2:	701a      	strb	r2, [r3, #0]
	new_task->cycle_count = 0;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	709a      	strb	r2, [r3, #2]
	new_task->cycles = cycles;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	79ba      	ldrb	r2, [r7, #6]
 80044ce:	705a      	strb	r2, [r3, #1]
	new_task->t_cycle_us = t_cycle_us;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	605a      	str	r2, [r3, #4]
	new_task->precondition = true;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	new_task->fct_ptr_precondition = NULL;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	62da      	str	r2, [r3, #44]	; 0x2c
	new_task->fct_ptr_execution = NULL;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	631a      	str	r2, [r3, #48]	; 0x30

	new_task->next_task = NULL;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	635a      	str	r2, [r3, #52]	; 0x34

	// if task has to be executed immediate, set cycle counter to cycle time
	if(immediate)
 80044f0:	797b      	ldrb	r3, [r7, #5]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d004      	beq.n	8004500 <rf24_worker_build_task+0x6c>
		new_task->t_cycle_count_us = new_task->t_cycle_us;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	685a      	ldr	r2, [r3, #4]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	609a      	str	r2, [r3, #8]
 80044fe:	e002      	b.n	8004506 <rf24_worker_build_task+0x72>
	else
		new_task->t_cycle_count_us = 0;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	609a      	str	r2, [r3, #8]

	return new_task;
 8004506:	68fb      	ldr	r3, [r7, #12]
}
 8004508:	4618      	mov	r0, r3
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <rf24_worker_attach_task>:

void rf24_worker_attach_task(struct rf24_task *new_task)
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
	// if list is empty, new task becomes head node
	if(rf24_tasks == NULL)
 8004518:	4b0c      	ldr	r3, [pc, #48]	; (800454c <rf24_worker_attach_task+0x3c>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d103      	bne.n	8004528 <rf24_worker_attach_task+0x18>
	{
		rf24_tasks = new_task;
 8004520:	4a0a      	ldr	r2, [pc, #40]	; (800454c <rf24_worker_attach_task+0x3c>)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6013      	str	r3, [r2, #0]
		return;
 8004526:	e00d      	b.n	8004544 <rf24_worker_attach_task+0x34>
	}

	// start from beginning
	struct rf24_task *current_task = rf24_tasks;
 8004528:	4b08      	ldr	r3, [pc, #32]	; (800454c <rf24_worker_attach_task+0x3c>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	60fb      	str	r3, [r7, #12]

	// iterate to end of list
	while(current_task->next_task != NULL) current_task = current_task->next_task;
 800452e:	e002      	b.n	8004536 <rf24_worker_attach_task+0x26>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004534:	60fb      	str	r3, [r7, #12]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1f8      	bne.n	8004530 <rf24_worker_attach_task+0x20>

	// insert new node at the end
	current_task->next_task = new_task;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004544:	3714      	adds	r7, #20
 8004546:	46bd      	mov	sp, r7
 8004548:	bc80      	pop	{r7}
 800454a:	4770      	bx	lr
 800454c:	200005d0 	.word	0x200005d0

08004550 <rf24_worker_push_task>:

void rf24_worker_push_task(struct rf24_task *new_task)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
	// If list is empty, new task becomes head node
	if(rf24_tasks == NULL)
 8004558:	4b09      	ldr	r3, [pc, #36]	; (8004580 <rf24_worker_push_task+0x30>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d103      	bne.n	8004568 <rf24_worker_push_task+0x18>
	{
		rf24_tasks = new_task;
 8004560:	4a07      	ldr	r2, [pc, #28]	; (8004580 <rf24_worker_push_task+0x30>)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6013      	str	r3, [r2, #0]
		return;
 8004566:	e006      	b.n	8004576 <rf24_worker_push_task+0x26>
	}

	// Otherwise insert new task at beginning of list

	// (1) Former head node becomes next node of new task
	new_task->next_task = rf24_tasks;
 8004568:	4b05      	ldr	r3, [pc, #20]	; (8004580 <rf24_worker_push_task+0x30>)
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	635a      	str	r2, [r3, #52]	; 0x34

	// (2) New task becomes new head node
	rf24_tasks = new_task;
 8004570:	4a03      	ldr	r2, [pc, #12]	; (8004580 <rf24_worker_push_task+0x30>)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6013      	str	r3, [r2, #0]

}
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	bc80      	pop	{r7}
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	200005d0 	.word	0x200005d0

08004584 <rf24_worker_current_task>:

struct rf24_task* rf24_worker_current_task()
{
 8004584:	b480      	push	{r7}
 8004586:	af00      	add	r7, sp, #0
	return rf24_tasks;
 8004588:	4b02      	ldr	r3, [pc, #8]	; (8004594 <rf24_worker_current_task+0x10>)
 800458a:	681b      	ldr	r3, [r3, #0]
}
 800458c:	4618      	mov	r0, r3
 800458e:	46bd      	mov	sp, r7
 8004590:	bc80      	pop	{r7}
 8004592:	4770      	bx	lr
 8004594:	200005d0 	.word	0x200005d0

08004598 <rf24_worker_pop_task>:
{
	return rf24_tasks == NULL;
}

void rf24_worker_pop_task()
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
	// save a reference to current task
	struct rf24_task *current_task = rf24_tasks;
 800459e:	4b07      	ldr	r3, [pc, #28]	; (80045bc <rf24_worker_pop_task+0x24>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	607b      	str	r3, [r7, #4]

	// remove first (current) task -> 2nd task becomes new head node
	rf24_tasks = rf24_tasks->next_task;
 80045a4:	4b05      	ldr	r3, [pc, #20]	; (80045bc <rf24_worker_pop_task+0x24>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045aa:	4a04      	ldr	r2, [pc, #16]	; (80045bc <rf24_worker_pop_task+0x24>)
 80045ac:	6013      	str	r3, [r2, #0]

	//free current task
	free(current_task);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f001 fc28 	bl	8005e04 <free>
}
 80045b4:	bf00      	nop
 80045b6:	3708      	adds	r7, #8
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	200005d0 	.word	0x200005d0

080045c0 <rf24_worker_reset_tasks>:

void rf24_worker_reset_tasks()
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	af00      	add	r7, sp, #0
	free(rf24_tasks);
 80045c4:	4b04      	ldr	r3, [pc, #16]	; (80045d8 <rf24_worker_reset_tasks+0x18>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f001 fc1b 	bl	8005e04 <free>
	rf24_tasks = NULL;
 80045ce:	4b02      	ldr	r3, [pc, #8]	; (80045d8 <rf24_worker_reset_tasks+0x18>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	601a      	str	r2, [r3, #0]
}
 80045d4:	bf00      	nop
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	200005d0 	.word	0x200005d0

080045dc <rf24_worker_start_timer>:
		current_task = current_task->next_task;
	}
}

void rf24_worker_start_timer(rf24_timer_names name, rf24_timer_units unit, uint32_t duration, rf24_worker_fct_ptr fct_ptr_timeout)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b086      	sub	sp, #24
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60ba      	str	r2, [r7, #8]
 80045e4:	607b      	str	r3, [r7, #4]
 80045e6:	4603      	mov	r3, r0
 80045e8:	73fb      	strb	r3, [r7, #15]
 80045ea:	460b      	mov	r3, r1
 80045ec:	73bb      	strb	r3, [r7, #14]
	struct rf24_timer *timer = (struct rf24_timer*) malloc(sizeof(struct rf24_timer));
 80045ee:	2010      	movs	r0, #16
 80045f0:	f001 fc00 	bl	8005df4 <malloc>
 80045f4:	4603      	mov	r3, r0
 80045f6:	617b      	str	r3, [r7, #20]

	timer->name = name;
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	7bfa      	ldrb	r2, [r7, #15]
 80045fc:	701a      	strb	r2, [r3, #0]
	timer->t_count_us = 0;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	2200      	movs	r2, #0
 8004602:	609a      	str	r2, [r3, #8]
	timer->fct_ptr_timeout = fct_ptr_timeout;
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	60da      	str	r2, [r3, #12]

	switch(unit)
 800460a:	7bbb      	ldrb	r3, [r7, #14]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d00a      	beq.n	8004626 <rf24_worker_start_timer+0x4a>
 8004610:	2b02      	cmp	r3, #2
 8004612:	d010      	beq.n	8004636 <rf24_worker_start_timer+0x5a>
 8004614:	2b00      	cmp	r3, #0
 8004616:	d112      	bne.n	800463e <rf24_worker_start_timer+0x62>
	{
		case s: timer->t_us = duration * 1000000; break;
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	4a0c      	ldr	r2, [pc, #48]	; (800464c <rf24_worker_start_timer+0x70>)
 800461c:	fb02 f203 	mul.w	r2, r2, r3
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	605a      	str	r2, [r3, #4]
 8004624:	e00b      	b.n	800463e <rf24_worker_start_timer+0x62>
		case ms: timer->t_us = duration * 1000; break;
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800462c:	fb02 f203 	mul.w	r2, r2, r3
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	605a      	str	r2, [r3, #4]
 8004634:	e003      	b.n	800463e <rf24_worker_start_timer+0x62>
		case us: timer->t_us = duration; break;
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	605a      	str	r2, [r3, #4]
 800463c:	bf00      	nop
	}

	timer1 = timer;
 800463e:	4a04      	ldr	r2, [pc, #16]	; (8004650 <rf24_worker_start_timer+0x74>)
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	6013      	str	r3, [r2, #0]
}
 8004644:	bf00      	nop
 8004646:	3718      	adds	r7, #24
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	000f4240 	.word	0x000f4240
 8004650:	200005cc 	.word	0x200005cc

08004654 <rf24_worker_stop_timer>:

struct rf24_timespan rf24_worker_stop_timer()
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
	struct rf24_timespan timespan = rf24_worker_us_to_timespan(timer1->t_count_us);
 800465c:	4b0e      	ldr	r3, [pc, #56]	; (8004698 <rf24_worker_stop_timer+0x44>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689a      	ldr	r2, [r3, #8]
 8004662:	f107 0308 	add.w	r3, r7, #8
 8004666:	4611      	mov	r1, r2
 8004668:	4618      	mov	r0, r3
 800466a:	f000 f817 	bl	800469c <rf24_worker_us_to_timespan>

	free(timer1);
 800466e:	4b0a      	ldr	r3, [pc, #40]	; (8004698 <rf24_worker_stop_timer+0x44>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4618      	mov	r0, r3
 8004674:	f001 fbc6 	bl	8005e04 <free>
	timer1 = NULL;
 8004678:	4b07      	ldr	r3, [pc, #28]	; (8004698 <rf24_worker_stop_timer+0x44>)
 800467a:	2200      	movs	r2, #0
 800467c:	601a      	str	r2, [r3, #0]

	return timespan;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	461a      	mov	r2, r3
 8004682:	f107 0308 	add.w	r3, r7, #8
 8004686:	6818      	ldr	r0, [r3, #0]
 8004688:	6010      	str	r0, [r2, #0]
 800468a:	889b      	ldrh	r3, [r3, #4]
 800468c:	8093      	strh	r3, [r2, #4]
}
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	200005cc 	.word	0x200005cc

0800469c <rf24_worker_us_to_timespan>:

struct rf24_timespan rf24_worker_us_to_timespan(uint32_t us)
{
 800469c:	b480      	push	{r7}
 800469e:	b087      	sub	sp, #28
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
	struct rf24_timespan timespan;

	uint32_t remaining_us = us;
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	617b      	str	r3, [r7, #20]

	timespan.s = remaining_us / 1000000;
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	4a18      	ldr	r2, [pc, #96]	; (8004710 <rf24_worker_us_to_timespan+0x74>)
 80046ae:	fba2 2303 	umull	r2, r3, r2, r3
 80046b2:	0c9b      	lsrs	r3, r3, #18
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	733b      	strb	r3, [r7, #12]
	remaining_us = remaining_us % 1000000;
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	4a15      	ldr	r2, [pc, #84]	; (8004710 <rf24_worker_us_to_timespan+0x74>)
 80046bc:	fba2 1203 	umull	r1, r2, r2, r3
 80046c0:	0c92      	lsrs	r2, r2, #18
 80046c2:	4914      	ldr	r1, [pc, #80]	; (8004714 <rf24_worker_us_to_timespan+0x78>)
 80046c4:	fb01 f202 	mul.w	r2, r1, r2
 80046c8:	1a9b      	subs	r3, r3, r2
 80046ca:	617b      	str	r3, [r7, #20]
	timespan.ms = remaining_us / 1000;
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	4a12      	ldr	r2, [pc, #72]	; (8004718 <rf24_worker_us_to_timespan+0x7c>)
 80046d0:	fba2 2303 	umull	r2, r3, r2, r3
 80046d4:	099b      	lsrs	r3, r3, #6
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	81fb      	strh	r3, [r7, #14]
	remaining_us = remaining_us % 1000;
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	4a0e      	ldr	r2, [pc, #56]	; (8004718 <rf24_worker_us_to_timespan+0x7c>)
 80046de:	fba2 1203 	umull	r1, r2, r2, r3
 80046e2:	0992      	lsrs	r2, r2, #6
 80046e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80046e8:	fb01 f202 	mul.w	r2, r1, r2
 80046ec:	1a9b      	subs	r3, r3, r2
 80046ee:	617b      	str	r3, [r7, #20]
	timespan.us = remaining_us;
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	823b      	strh	r3, [r7, #16]

	return timespan;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	461a      	mov	r2, r3
 80046fa:	f107 030c 	add.w	r3, r7, #12
 80046fe:	6818      	ldr	r0, [r3, #0]
 8004700:	6010      	str	r0, [r2, #0]
 8004702:	889b      	ldrh	r3, [r3, #4]
 8004704:	8093      	strh	r3, [r2, #4]
}
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	371c      	adds	r7, #28
 800470a:	46bd      	mov	sp, r7
 800470c:	bc80      	pop	{r7}
 800470e:	4770      	bx	lr
 8004710:	431bde83 	.word	0x431bde83
 8004714:	000f4240 	.word	0x000f4240
 8004718:	10624dd3 	.word	0x10624dd3

0800471c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	4603      	mov	r3, r0
 8004724:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800472a:	2b00      	cmp	r3, #0
 800472c:	db0b      	blt.n	8004746 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800472e:	79fb      	ldrb	r3, [r7, #7]
 8004730:	f003 021f 	and.w	r2, r3, #31
 8004734:	4906      	ldr	r1, [pc, #24]	; (8004750 <__NVIC_EnableIRQ+0x34>)
 8004736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800473a:	095b      	lsrs	r3, r3, #5
 800473c:	2001      	movs	r0, #1
 800473e:	fa00 f202 	lsl.w	r2, r0, r2
 8004742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004746:	bf00      	nop
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	bc80      	pop	{r7}
 800474e:	4770      	bx	lr
 8004750:	e000e100 	.word	0xe000e100

08004754 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	4603      	mov	r3, r0
 800475c:	6039      	str	r1, [r7, #0]
 800475e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004764:	2b00      	cmp	r3, #0
 8004766:	db0a      	blt.n	800477e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	b2da      	uxtb	r2, r3
 800476c:	490c      	ldr	r1, [pc, #48]	; (80047a0 <__NVIC_SetPriority+0x4c>)
 800476e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004772:	0112      	lsls	r2, r2, #4
 8004774:	b2d2      	uxtb	r2, r2
 8004776:	440b      	add	r3, r1
 8004778:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800477c:	e00a      	b.n	8004794 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	b2da      	uxtb	r2, r3
 8004782:	4908      	ldr	r1, [pc, #32]	; (80047a4 <__NVIC_SetPriority+0x50>)
 8004784:	79fb      	ldrb	r3, [r7, #7]
 8004786:	f003 030f 	and.w	r3, r3, #15
 800478a:	3b04      	subs	r3, #4
 800478c:	0112      	lsls	r2, r2, #4
 800478e:	b2d2      	uxtb	r2, r2
 8004790:	440b      	add	r3, r1
 8004792:	761a      	strb	r2, [r3, #24]
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	bc80      	pop	{r7}
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	e000e100 	.word	0xe000e100
 80047a4:	e000ed00 	.word	0xe000ed00

080047a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	3b01      	subs	r3, #1
 80047b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047b8:	d301      	bcc.n	80047be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047ba:	2301      	movs	r3, #1
 80047bc:	e00f      	b.n	80047de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047be:	4a0a      	ldr	r2, [pc, #40]	; (80047e8 <SysTick_Config+0x40>)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	3b01      	subs	r3, #1
 80047c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047c6:	210f      	movs	r1, #15
 80047c8:	f04f 30ff 	mov.w	r0, #4294967295
 80047cc:	f7ff ffc2 	bl	8004754 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047d0:	4b05      	ldr	r3, [pc, #20]	; (80047e8 <SysTick_Config+0x40>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047d6:	4b04      	ldr	r3, [pc, #16]	; (80047e8 <SysTick_Config+0x40>)
 80047d8:	2207      	movs	r2, #7
 80047da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3708      	adds	r7, #8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	e000e010 	.word	0xe000e010

080047ec <SysTick_Handler>:

volatile rf24_stm32f1xx_pin_state led_pin_state = low;
volatile rf24_stm32f1xx_event_cycle event_cycles[5];


void SysTick_Handler(void){}
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	bf00      	nop
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bc80      	pop	{r7}
 80047f6:	4770      	bx	lr

080047f8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR2)
 80047fc:	4b06      	ldr	r3, [pc, #24]	; (8004818 <EXTI2_IRQHandler+0x20>)
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	f003 0304 	and.w	r3, r3, #4
 8004804:	2b00      	cmp	r3, #0
 8004806:	d004      	beq.n	8004812 <EXTI2_IRQHandler+0x1a>
	{
		// clear pending bit
		EXTI->PR = EXTI_PR_PR2;
 8004808:	4b03      	ldr	r3, [pc, #12]	; (8004818 <EXTI2_IRQHandler+0x20>)
 800480a:	2204      	movs	r2, #4
 800480c:	615a      	str	r2, [r3, #20]

		rf24_module_irq_handler();
 800480e:	f7fd fd3b 	bl	8002288 <rf24_module_irq_handler>
	}
}
 8004812:	bf00      	nop
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	40010400 	.word	0x40010400

0800481c <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
	if(TIM2->SR & TIM_SR_UIF)
 8004822:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	2b00      	cmp	r3, #0
 800482e:	d043      	beq.n	80048b8 <TIM2_IRQHandler+0x9c>
	{
		// clear pending bit
		TIM2->SR &= ~(TIM_SR_UIF);
 8004830:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800483a:	f023 0301 	bic.w	r3, r3, #1
 800483e:	6113      	str	r3, [r2, #16]

		for(uint8_t i=0; i<5; i++)
 8004840:	2300      	movs	r3, #0
 8004842:	71fb      	strb	r3, [r7, #7]
 8004844:	e035      	b.n	80048b2 <TIM2_IRQHandler+0x96>
		{
			if(event_cycles[i].enable){
 8004846:	79fb      	ldrb	r3, [r7, #7]
 8004848:	4a1d      	ldr	r2, [pc, #116]	; (80048c0 <TIM2_IRQHandler+0xa4>)
 800484a:	011b      	lsls	r3, r3, #4
 800484c:	4413      	add	r3, r2
 800484e:	330c      	adds	r3, #12
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b00      	cmp	r3, #0
 8004856:	d029      	beq.n	80048ac <TIM2_IRQHandler+0x90>

				event_cycles[i].tick+= RF24_STM32F1XX_TIMER2_TICK_US;
 8004858:	79fb      	ldrb	r3, [r7, #7]
 800485a:	4a19      	ldr	r2, [pc, #100]	; (80048c0 <TIM2_IRQHandler+0xa4>)
 800485c:	011b      	lsls	r3, r3, #4
 800485e:	4413      	add	r3, r2
 8004860:	3308      	adds	r3, #8
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	2332      	movs	r3, #50	; 0x32
 8004866:	4619      	mov	r1, r3
 8004868:	79fb      	ldrb	r3, [r7, #7]
 800486a:	440a      	add	r2, r1
 800486c:	4914      	ldr	r1, [pc, #80]	; (80048c0 <TIM2_IRQHandler+0xa4>)
 800486e:	011b      	lsls	r3, r3, #4
 8004870:	440b      	add	r3, r1
 8004872:	3308      	adds	r3, #8
 8004874:	601a      	str	r2, [r3, #0]

				if(event_cycles[i].tick >= event_cycles[i].us){
 8004876:	79fb      	ldrb	r3, [r7, #7]
 8004878:	4a11      	ldr	r2, [pc, #68]	; (80048c0 <TIM2_IRQHandler+0xa4>)
 800487a:	011b      	lsls	r3, r3, #4
 800487c:	4413      	add	r3, r2
 800487e:	3308      	adds	r3, #8
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	79fb      	ldrb	r3, [r7, #7]
 8004884:	490e      	ldr	r1, [pc, #56]	; (80048c0 <TIM2_IRQHandler+0xa4>)
 8004886:	011b      	lsls	r3, r3, #4
 8004888:	440b      	add	r3, r1
 800488a:	3304      	adds	r3, #4
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	429a      	cmp	r2, r3
 8004890:	d30c      	bcc.n	80048ac <TIM2_IRQHandler+0x90>
					event_cycles[i].tick = 0;
 8004892:	79fb      	ldrb	r3, [r7, #7]
 8004894:	4a0a      	ldr	r2, [pc, #40]	; (80048c0 <TIM2_IRQHandler+0xa4>)
 8004896:	011b      	lsls	r3, r3, #4
 8004898:	4413      	add	r3, r2
 800489a:	3308      	adds	r3, #8
 800489c:	2200      	movs	r2, #0
 800489e:	601a      	str	r2, [r3, #0]
					event_cycles[i].fct_ptr();
 80048a0:	79fb      	ldrb	r3, [r7, #7]
 80048a2:	4a07      	ldr	r2, [pc, #28]	; (80048c0 <TIM2_IRQHandler+0xa4>)
 80048a4:	011b      	lsls	r3, r3, #4
 80048a6:	4413      	add	r3, r2
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4798      	blx	r3
		for(uint8_t i=0; i<5; i++)
 80048ac:	79fb      	ldrb	r3, [r7, #7]
 80048ae:	3301      	adds	r3, #1
 80048b0:	71fb      	strb	r3, [r7, #7]
 80048b2:	79fb      	ldrb	r3, [r7, #7]
 80048b4:	2b04      	cmp	r3, #4
 80048b6:	d9c6      	bls.n	8004846 <TIM2_IRQHandler+0x2a>
				}
			}
		}
	}
}
 80048b8:	bf00      	nop
 80048ba:	3708      	adds	r7, #8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	200007d4 	.word	0x200007d4

080048c4 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80048c4:	b480      	push	{r7}
 80048c6:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR13)
 80048c8:	4b06      	ldr	r3, [pc, #24]	; (80048e4 <EXTI15_10_IRQHandler+0x20>)
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d003      	beq.n	80048dc <EXTI15_10_IRQHandler+0x18>
	{
		// clear pending bit
		EXTI->PR = EXTI_PR_PR13;
 80048d4:	4b03      	ldr	r3, [pc, #12]	; (80048e4 <EXTI15_10_IRQHandler+0x20>)
 80048d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80048da:	615a      	str	r2, [r3, #20]
	}
}
 80048dc:	bf00      	nop
 80048de:	46bd      	mov	sp, r7
 80048e0:	bc80      	pop	{r7}
 80048e2:	4770      	bx	lr
 80048e4:	40010400 	.word	0x40010400

080048e8 <rf24_stm32f1xx_start_stopwatch>:

// FUNCTIONS

void rf24_stm32f1xx_start_stopwatch() { TIM3->EGR |= 0x0001; }
 80048e8:	b480      	push	{r7}
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	4b04      	ldr	r3, [pc, #16]	; (8004900 <rf24_stm32f1xx_start_stopwatch+0x18>)
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	4a03      	ldr	r2, [pc, #12]	; (8004900 <rf24_stm32f1xx_start_stopwatch+0x18>)
 80048f2:	f043 0301 	orr.w	r3, r3, #1
 80048f6:	6153      	str	r3, [r2, #20]
 80048f8:	bf00      	nop
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bc80      	pop	{r7}
 80048fe:	4770      	bx	lr
 8004900:	40000400 	.word	0x40000400

08004904 <rf24_stm32f1xx_stop_stopwatch>:

uint32_t rf24_stm32f1xx_stop_stopwatch() { return TIM3->CNT; }
 8004904:	b480      	push	{r7}
 8004906:	af00      	add	r7, sp, #0
 8004908:	4b02      	ldr	r3, [pc, #8]	; (8004914 <rf24_stm32f1xx_stop_stopwatch+0x10>)
 800490a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490c:	4618      	mov	r0, r3
 800490e:	46bd      	mov	sp, r7
 8004910:	bc80      	pop	{r7}
 8004912:	4770      	bx	lr
 8004914:	40000400 	.word	0x40000400

08004918 <rf24_stm32f1xx_get_uuid_md5hashed>:

uint8_t* rf24_stm32f1xx_get_uuid_md5hashed()
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b098      	sub	sp, #96	; 0x60
 800491c:	af00      	add	r7, sp, #0
	// Read UUID from stm32f1xx memory, stored under address 0x1FFFF7E8
	uint8_t* uuid = (uint8_t*) 0x1FFFF7E8;
 800491e:	4b12      	ldr	r3, [pc, #72]	; (8004968 <rf24_stm32f1xx_get_uuid_md5hashed+0x50>)
 8004920:	65fb      	str	r3, [r7, #92]	; 0x5c

	// Generate md5 hash of unique device id
	MD5_CTX context;
	MD5Init(&context);
 8004922:	1d3b      	adds	r3, r7, #4
 8004924:	4618      	mov	r0, r3
 8004926:	f7fc fb85 	bl	8001034 <MD5Init>
	MD5Update(&context, uuid, 12);
 800492a:	1d3b      	adds	r3, r7, #4
 800492c:	220c      	movs	r2, #12
 800492e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004930:	4618      	mov	r0, r3
 8004932:	f7fc fba3 	bl	800107c <MD5Update>
	MD5Final(rf24_stm32f1xx_uuid_md5hashed, &context);
 8004936:	1d3b      	adds	r3, r7, #4
 8004938:	4619      	mov	r1, r3
 800493a:	480c      	ldr	r0, [pc, #48]	; (800496c <rf24_stm32f1xx_get_uuid_md5hashed+0x54>)
 800493c:	f7fc fc06 	bl	800114c <MD5Final>

	// Specify as LOCALY ADMINISTRATED address
	rf24_stm32f1xx_uuid_md5hashed[0] |= 0x2;
 8004940:	4b0a      	ldr	r3, [pc, #40]	; (800496c <rf24_stm32f1xx_get_uuid_md5hashed+0x54>)
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	f043 0302 	orr.w	r3, r3, #2
 8004948:	b2da      	uxtb	r2, r3
 800494a:	4b08      	ldr	r3, [pc, #32]	; (800496c <rf24_stm32f1xx_get_uuid_md5hashed+0x54>)
 800494c:	701a      	strb	r2, [r3, #0]

	// Specify as UNICAST address
	rf24_stm32f1xx_uuid_md5hashed[0] &= ~0x1;
 800494e:	4b07      	ldr	r3, [pc, #28]	; (800496c <rf24_stm32f1xx_get_uuid_md5hashed+0x54>)
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	f023 0301 	bic.w	r3, r3, #1
 8004956:	b2da      	uxtb	r2, r3
 8004958:	4b04      	ldr	r3, [pc, #16]	; (800496c <rf24_stm32f1xx_get_uuid_md5hashed+0x54>)
 800495a:	701a      	strb	r2, [r3, #0]

	return rf24_stm32f1xx_uuid_md5hashed;
 800495c:	4b03      	ldr	r3, [pc, #12]	; (800496c <rf24_stm32f1xx_get_uuid_md5hashed+0x54>)
}
 800495e:	4618      	mov	r0, r3
 8004960:	3760      	adds	r7, #96	; 0x60
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	1ffff7e8 	.word	0x1ffff7e8
 800496c:	20000634 	.word	0x20000634

08004970 <rf24_stm32f1xx_set_system_clock_72Mhz>:

    return rf24_stm32f1xx_uuid;
}

void rf24_stm32f1xx_set_system_clock_72Mhz(void)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	af00      	add	r7, sp, #0
    // conf system clock : 72MHz using HSE 8MHz crystal w/ PLL X 9 (8MHz x 9 = 72MHz)
    FLASH->ACR      |= FLASH_ACR_LATENCY_2; 	// Two wait states, per datasheet
 8004974:	4b25      	ldr	r3, [pc, #148]	; (8004a0c <rf24_stm32f1xx_set_system_clock_72Mhz+0x9c>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a24      	ldr	r2, [pc, #144]	; (8004a0c <rf24_stm32f1xx_set_system_clock_72Mhz+0x9c>)
 800497a:	f043 0304 	orr.w	r3, r3, #4
 800497e:	6013      	str	r3, [r2, #0]
    RCC->CFGR       |= RCC_CFGR_PPRE1_2;    	// prescale AHB1 = HCLK/2
 8004980:	4b23      	ldr	r3, [pc, #140]	; (8004a10 <rf24_stm32f1xx_set_system_clock_72Mhz+0xa0>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	4a22      	ldr	r2, [pc, #136]	; (8004a10 <rf24_stm32f1xx_set_system_clock_72Mhz+0xa0>)
 8004986:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800498a:	6053      	str	r3, [r2, #4]
    RCC->CR         |= RCC_CR_HSEON;        	// enable HSE clock
 800498c:	4b20      	ldr	r3, [pc, #128]	; (8004a10 <rf24_stm32f1xx_set_system_clock_72Mhz+0xa0>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a1f      	ldr	r2, [pc, #124]	; (8004a10 <rf24_stm32f1xx_set_system_clock_72Mhz+0xa0>)
 8004992:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004996:	6013      	str	r3, [r2, #0]
    while( !(RCC->CR & RCC_CR_HSERDY) );    	// wait for the HSEREADY flag
 8004998:	bf00      	nop
 800499a:	4b1d      	ldr	r3, [pc, #116]	; (8004a10 <rf24_stm32f1xx_set_system_clock_72Mhz+0xa0>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0f9      	beq.n	800499a <rf24_stm32f1xx_set_system_clock_72Mhz+0x2a>

    RCC->CFGR       |= RCC_CFGR_PLLSRC;     	// set PLL source to HSE
 80049a6:	4b1a      	ldr	r3, [pc, #104]	; (8004a10 <rf24_stm32f1xx_set_system_clock_72Mhz+0xa0>)
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	4a19      	ldr	r2, [pc, #100]	; (8004a10 <rf24_stm32f1xx_set_system_clock_72Mhz+0xa0>)
 80049ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049b0:	6053      	str	r3, [r2, #4]
    RCC->CFGR       |= RCC_CFGR_PLLMULL9;   	// multiply by 9
 80049b2:	4b17      	ldr	r3, [pc, #92]	; (8004a10 <rf24_stm32f1xx_set_system_clock_72Mhz+0xa0>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	4a16      	ldr	r2, [pc, #88]	; (8004a10 <rf24_stm32f1xx_set_system_clock_72Mhz+0xa0>)
 80049b8:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 80049bc:	6053      	str	r3, [r2, #4]
    RCC->CR         |= RCC_CR_PLLON;        	// enable the PLL
 80049be:	4b14      	ldr	r3, [pc, #80]	; (8004a10 <rf24_stm32f1xx_set_system_clock_72Mhz+0xa0>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a13      	ldr	r2, [pc, #76]	; (8004a10 <rf24_stm32f1xx_set_system_clock_72Mhz+0xa0>)
 80049c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049c8:	6013      	str	r3, [r2, #0]
    while( !(RCC->CR & RCC_CR_PLLRDY) );    	// wait for the PLLRDY flag
 80049ca:	bf00      	nop
 80049cc:	4b10      	ldr	r3, [pc, #64]	; (8004a10 <rf24_stm32f1xx_set_system_clock_72Mhz+0xa0>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d0f9      	beq.n	80049cc <rf24_stm32f1xx_set_system_clock_72Mhz+0x5c>

    RCC->CFGR       |= RCC_CFGR_SW_PLL;     	// set clock source to pll
 80049d8:	4b0d      	ldr	r3, [pc, #52]	; (8004a10 <rf24_stm32f1xx_set_system_clock_72Mhz+0xa0>)
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	4a0c      	ldr	r2, [pc, #48]	; (8004a10 <rf24_stm32f1xx_set_system_clock_72Mhz+0xa0>)
 80049de:	f043 0302 	orr.w	r3, r3, #2
 80049e2:	6053      	str	r3, [r2, #4]

    while( !(RCC->CFGR & RCC_CFGR_SWS_PLL) );    // wait for PLL to be CLK
 80049e4:	bf00      	nop
 80049e6:	4b0a      	ldr	r3, [pc, #40]	; (8004a10 <rf24_stm32f1xx_set_system_clock_72Mhz+0xa0>)
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f003 0308 	and.w	r3, r3, #8
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d0f9      	beq.n	80049e6 <rf24_stm32f1xx_set_system_clock_72Mhz+0x76>

    SystemCoreClockUpdate();                	// calculate the SYSCLOCK value
 80049f2:	f7fb fbf7 	bl	80001e4 <SystemCoreClockUpdate>
    SysTick_Config(SystemCoreClock/1000);		// Generate interrupt each 1 ms
 80049f6:	4b07      	ldr	r3, [pc, #28]	; (8004a14 <rf24_stm32f1xx_set_system_clock_72Mhz+0xa4>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a07      	ldr	r2, [pc, #28]	; (8004a18 <rf24_stm32f1xx_set_system_clock_72Mhz+0xa8>)
 80049fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004a00:	099b      	lsrs	r3, r3, #6
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7ff fed0 	bl	80047a8 <SysTick_Config>
}
 8004a08:	bf00      	nop
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	40022000 	.word	0x40022000
 8004a10:	40021000 	.word	0x40021000
 8004a14:	20000000 	.word	0x20000000
 8004a18:	10624dd3 	.word	0x10624dd3

08004a1c <rf24_stm32f1xx_init_tim2>:

void rf24_stm32f1xx_init_tim2(uint32_t interrupt_cycle_us){
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]

	// Enable the TIM2 clock
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8004a24:	4b22      	ldr	r3, [pc, #136]	; (8004ab0 <rf24_stm32f1xx_init_tim2+0x94>)
 8004a26:	69db      	ldr	r3, [r3, #28]
 8004a28:	4a21      	ldr	r2, [pc, #132]	; (8004ab0 <rf24_stm32f1xx_init_tim2+0x94>)
 8004a2a:	f043 0301 	orr.w	r3, r3, #1
 8004a2e:	61d3      	str	r3, [r2, #28]

	// Start by making sure the timer's counter is off
	TIM2->CR1 &= ~(TIM_CR1_CEN);
 8004a30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004a3a:	f023 0301 	bic.w	r3, r3, #1
 8004a3e:	6013      	str	r3, [r2, #0]

	// Next, reset the peripheral. (This is where a HAL can help)
	RCC->APB1RSTR |=  (RCC_APB1RSTR_TIM2RST);
 8004a40:	4b1b      	ldr	r3, [pc, #108]	; (8004ab0 <rf24_stm32f1xx_init_tim2+0x94>)
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	4a1a      	ldr	r2, [pc, #104]	; (8004ab0 <rf24_stm32f1xx_init_tim2+0x94>)
 8004a46:	f043 0301 	orr.w	r3, r3, #1
 8004a4a:	6113      	str	r3, [r2, #16]
	RCC->APB1RSTR &= ~(RCC_APB1RSTR_TIM2RST);
 8004a4c:	4b18      	ldr	r3, [pc, #96]	; (8004ab0 <rf24_stm32f1xx_init_tim2+0x94>)
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	4a17      	ldr	r2, [pc, #92]	; (8004ab0 <rf24_stm32f1xx_init_tim2+0x94>)
 8004a52:	f023 0301 	bic.w	r3, r3, #1
 8004a56:	6113      	str	r3, [r2, #16]

	// Set the timer to PRESCALER/AUTOREALOD timing registers
	TIM2->PSC = 71; // 71+1 = 72/72 = 1Mhz
 8004a58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004a5c:	2247      	movs	r2, #71	; 0x47
 8004a5e:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = interrupt_cycle_us;
 8004a60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	62d3      	str	r3, [r2, #44]	; 0x2c

	// Send an update event to reset the timer and apply settings
	TIM2->EGR  |= TIM_EGR_UG;
 8004a68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004a72:	f043 0301 	orr.w	r3, r3, #1
 8004a76:	6153      	str	r3, [r2, #20]

	// Enable the hardware interrupt
	TIM2->DIER |= TIM_DIER_UIE;
 8004a78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004a82:	f043 0301 	orr.w	r3, r3, #1
 8004a86:	60d3      	str	r3, [r2, #12]

	// Enable the NVIC interrupt for TIM2
	NVIC_SetPriority(TIM2_IRQn, 0x00);
 8004a88:	2100      	movs	r1, #0
 8004a8a:	201c      	movs	r0, #28
 8004a8c:	f7ff fe62 	bl	8004754 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn);
 8004a90:	201c      	movs	r0, #28
 8004a92:	f7ff fe43 	bl	800471c <__NVIC_EnableIRQ>

	// Enable the timer
	TIM2->CR1  |= TIM_CR1_CEN;
 8004a96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004aa0:	f043 0301 	orr.w	r3, r3, #1
 8004aa4:	6013      	str	r3, [r2, #0]
}
 8004aa6:	bf00      	nop
 8004aa8:	3708      	adds	r7, #8
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	40021000 	.word	0x40021000

08004ab4 <rf24_stm32f1xx_set_timer_interrupt_ms>:

void rf24_stm32f1xx_set_timer_interrupt_ms(uint8_t index, uint16_t ms, fct_ptr fct_ptr)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	4603      	mov	r3, r0
 8004abc:	603a      	str	r2, [r7, #0]
 8004abe:	71fb      	strb	r3, [r7, #7]
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	80bb      	strh	r3, [r7, #4]
	event_cycles[index].fct_ptr = fct_ptr;
 8004ac4:	79fb      	ldrb	r3, [r7, #7]
 8004ac6:	4a12      	ldr	r2, [pc, #72]	; (8004b10 <rf24_stm32f1xx_set_timer_interrupt_ms+0x5c>)
 8004ac8:	011b      	lsls	r3, r3, #4
 8004aca:	4413      	add	r3, r2
 8004acc:	683a      	ldr	r2, [r7, #0]
 8004ace:	601a      	str	r2, [r3, #0]
	event_cycles[index].us = ms * 1000;
 8004ad0:	88bb      	ldrh	r3, [r7, #4]
 8004ad2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ad6:	fb02 f203 	mul.w	r2, r2, r3
 8004ada:	79fb      	ldrb	r3, [r7, #7]
 8004adc:	4611      	mov	r1, r2
 8004ade:	4a0c      	ldr	r2, [pc, #48]	; (8004b10 <rf24_stm32f1xx_set_timer_interrupt_ms+0x5c>)
 8004ae0:	011b      	lsls	r3, r3, #4
 8004ae2:	4413      	add	r3, r2
 8004ae4:	3304      	adds	r3, #4
 8004ae6:	6019      	str	r1, [r3, #0]
	event_cycles[index].tick = 0;
 8004ae8:	79fb      	ldrb	r3, [r7, #7]
 8004aea:	4a09      	ldr	r2, [pc, #36]	; (8004b10 <rf24_stm32f1xx_set_timer_interrupt_ms+0x5c>)
 8004aec:	011b      	lsls	r3, r3, #4
 8004aee:	4413      	add	r3, r2
 8004af0:	3308      	adds	r3, #8
 8004af2:	2200      	movs	r2, #0
 8004af4:	601a      	str	r2, [r3, #0]
	event_cycles[index].enable = true;
 8004af6:	79fb      	ldrb	r3, [r7, #7]
 8004af8:	4a05      	ldr	r2, [pc, #20]	; (8004b10 <rf24_stm32f1xx_set_timer_interrupt_ms+0x5c>)
 8004afa:	011b      	lsls	r3, r3, #4
 8004afc:	4413      	add	r3, r2
 8004afe:	330c      	adds	r3, #12
 8004b00:	2201      	movs	r2, #1
 8004b02:	701a      	strb	r2, [r3, #0]
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bc80      	pop	{r7}
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	200007d4 	.word	0x200007d4

08004b14 <rf24_stm32f1xx_set_timer_interrupt_us>:

void rf24_stm32f1xx_set_timer_interrupt_us(uint8_t index, uint16_t us, fct_ptr fct_ptr)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	603a      	str	r2, [r7, #0]
 8004b1e:	71fb      	strb	r3, [r7, #7]
 8004b20:	460b      	mov	r3, r1
 8004b22:	80bb      	strh	r3, [r7, #4]
	event_cycles[index].fct_ptr = fct_ptr;
 8004b24:	79fb      	ldrb	r3, [r7, #7]
 8004b26:	4a0f      	ldr	r2, [pc, #60]	; (8004b64 <rf24_stm32f1xx_set_timer_interrupt_us+0x50>)
 8004b28:	011b      	lsls	r3, r3, #4
 8004b2a:	4413      	add	r3, r2
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	601a      	str	r2, [r3, #0]
	event_cycles[index].us = us;
 8004b30:	79fb      	ldrb	r3, [r7, #7]
 8004b32:	88ba      	ldrh	r2, [r7, #4]
 8004b34:	490b      	ldr	r1, [pc, #44]	; (8004b64 <rf24_stm32f1xx_set_timer_interrupt_us+0x50>)
 8004b36:	011b      	lsls	r3, r3, #4
 8004b38:	440b      	add	r3, r1
 8004b3a:	3304      	adds	r3, #4
 8004b3c:	601a      	str	r2, [r3, #0]
	event_cycles[index].tick = 0;
 8004b3e:	79fb      	ldrb	r3, [r7, #7]
 8004b40:	4a08      	ldr	r2, [pc, #32]	; (8004b64 <rf24_stm32f1xx_set_timer_interrupt_us+0x50>)
 8004b42:	011b      	lsls	r3, r3, #4
 8004b44:	4413      	add	r3, r2
 8004b46:	3308      	adds	r3, #8
 8004b48:	2200      	movs	r2, #0
 8004b4a:	601a      	str	r2, [r3, #0]
	event_cycles[index].enable = true;
 8004b4c:	79fb      	ldrb	r3, [r7, #7]
 8004b4e:	4a05      	ldr	r2, [pc, #20]	; (8004b64 <rf24_stm32f1xx_set_timer_interrupt_us+0x50>)
 8004b50:	011b      	lsls	r3, r3, #4
 8004b52:	4413      	add	r3, r2
 8004b54:	330c      	adds	r3, #12
 8004b56:	2201      	movs	r2, #1
 8004b58:	701a      	strb	r2, [r3, #0]
}
 8004b5a:	bf00      	nop
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bc80      	pop	{r7}
 8004b62:	4770      	bx	lr
 8004b64:	200007d4 	.word	0x200007d4

08004b68 <rf24_stm32f1xx_init_tim3>:


void rf24_stm32f1xx_init_tim3()
{
 8004b68:	b480      	push	{r7}
 8004b6a:	af00      	add	r7, sp, #0

	RCC->APB1ENR |= (1 << 1);	// enable clock for that module for TIM3. Bit1 in RCC APB1ENR register
 8004b6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ba0 <rf24_stm32f1xx_init_tim3+0x38>)
 8004b6e:	69db      	ldr	r3, [r3, #28]
 8004b70:	4a0b      	ldr	r2, [pc, #44]	; (8004ba0 <rf24_stm32f1xx_init_tim3+0x38>)
 8004b72:	f043 0302 	orr.w	r3, r3, #2
 8004b76:	61d3      	str	r3, [r2, #28]

	TIM3->CR1 = 0x0000;			// reset CR1 just in case
 8004b78:	4b0a      	ldr	r3, [pc, #40]	; (8004ba4 <rf24_stm32f1xx_init_tim3+0x3c>)
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	601a      	str	r2, [r3, #0]

	// fCK_PSC / (PSC[15:0] + 1)
	TIM3->PSC = 71;				// 72 Mhz / 71 + 1 = 1 Mhz timer clock speed
 8004b7e:	4b09      	ldr	r3, [pc, #36]	; (8004ba4 <rf24_stm32f1xx_init_tim3+0x3c>)
 8004b80:	2247      	movs	r2, #71	; 0x47
 8004b82:	629a      	str	r2, [r3, #40]	; 0x28

	// This is set to max value (0xFFFF) since we manually check if the value reach to 1000 in the delay_ms function
	TIM3->ARR = 0xFFFF;
 8004b84:	4b07      	ldr	r3, [pc, #28]	; (8004ba4 <rf24_stm32f1xx_init_tim3+0x3c>)
 8004b86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b8a:	62da      	str	r2, [r3, #44]	; 0x2c

	// Finally enable TIM3 module
	TIM3->CR1 |= (1 << 0);
 8004b8c:	4b05      	ldr	r3, [pc, #20]	; (8004ba4 <rf24_stm32f1xx_init_tim3+0x3c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a04      	ldr	r2, [pc, #16]	; (8004ba4 <rf24_stm32f1xx_init_tim3+0x3c>)
 8004b92:	f043 0301 	orr.w	r3, r3, #1
 8004b96:	6013      	str	r3, [r2, #0]
}
 8004b98:	bf00      	nop
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bc80      	pop	{r7}
 8004b9e:	4770      	bx	lr
 8004ba0:	40021000 	.word	0x40021000
 8004ba4:	40000400 	.word	0x40000400

08004ba8 <rf24_stm32f1xx_get_tim3_count>:

uint32_t rf24_stm32f1xx_get_tim3_count(){
 8004ba8:	b480      	push	{r7}
 8004baa:	af00      	add	r7, sp, #0
	return TIM3->CNT;
 8004bac:	4b02      	ldr	r3, [pc, #8]	; (8004bb8 <rf24_stm32f1xx_get_tim3_count+0x10>)
 8004bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bc80      	pop	{r7}
 8004bb6:	4770      	bx	lr
 8004bb8:	40000400 	.word	0x40000400

08004bbc <delay_ms>:

void delay_ms(volatile uint32_t ms)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
	for(ms; ms>0; ms--)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	e00e      	b.n	8004be6 <delay_ms+0x2a>
	{
		TIM3->EGR |= 0x0001;
 8004bc8:	4b0b      	ldr	r3, [pc, #44]	; (8004bf8 <delay_ms+0x3c>)
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	4a0a      	ldr	r2, [pc, #40]	; (8004bf8 <delay_ms+0x3c>)
 8004bce:	f043 0301 	orr.w	r3, r3, #1
 8004bd2:	6153      	str	r3, [r2, #20]
 		while(TIM3->CNT < 1000);
 8004bd4:	bf00      	nop
 8004bd6:	4b08      	ldr	r3, [pc, #32]	; (8004bf8 <delay_ms+0x3c>)
 8004bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bde:	d3fa      	bcc.n	8004bd6 <delay_ms+0x1a>
	for(ms; ms>0; ms--)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	3b01      	subs	r3, #1
 8004be4:	607b      	str	r3, [r7, #4]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1ed      	bne.n	8004bc8 <delay_ms+0xc>
	}
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bc80      	pop	{r7}
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	40000400 	.word	0x40000400

08004bfc <delay_us>:

void delay_us(volatile uint32_t us)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
	TIM3->EGR |= 0x0001;
 8004c04:	4b08      	ldr	r3, [pc, #32]	; (8004c28 <delay_us+0x2c>)
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	4a07      	ldr	r2, [pc, #28]	; (8004c28 <delay_us+0x2c>)
 8004c0a:	f043 0301 	orr.w	r3, r3, #1
 8004c0e:	6153      	str	r3, [r2, #20]
 	while(TIM3->CNT < us);
 8004c10:	bf00      	nop
 8004c12:	4b05      	ldr	r3, [pc, #20]	; (8004c28 <delay_us+0x2c>)
 8004c14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d3fa      	bcc.n	8004c12 <delay_us+0x16>
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bc80      	pop	{r7}
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	40000400 	.word	0x40000400

08004c2c <rf24_stm32f1xx_init_led>:

void rf24_stm32f1xx_init_led(uint16_t update_cycle_ms)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	4603      	mov	r3, r0
 8004c34:	80fb      	strh	r3, [r7, #6]
    RCC->APB2ENR    |= RCC_APB2ENR_IOPCEN;                      // enable clock
 8004c36:	4b0e      	ldr	r3, [pc, #56]	; (8004c70 <rf24_stm32f1xx_init_led+0x44>)
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	4a0d      	ldr	r2, [pc, #52]	; (8004c70 <rf24_stm32f1xx_init_led+0x44>)
 8004c3c:	f043 0310 	orr.w	r3, r3, #16
 8004c40:	6193      	str	r3, [r2, #24]
    GPIOC->CRH      &=  ~(GPIO_CRH_MODE13 | GPIO_CRH_CNF13);    // reset PC13
 8004c42:	4b0c      	ldr	r3, [pc, #48]	; (8004c74 <rf24_stm32f1xx_init_led+0x48>)
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	4a0b      	ldr	r2, [pc, #44]	; (8004c74 <rf24_stm32f1xx_init_led+0x48>)
 8004c48:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004c4c:	6053      	str	r3, [r2, #4]
    GPIOC->CRH      |= (GPIO_CRH_MODE13_1 | GPIO_CRH_MODE13_0); // config PC13
 8004c4e:	4b09      	ldr	r3, [pc, #36]	; (8004c74 <rf24_stm32f1xx_init_led+0x48>)
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	4a08      	ldr	r2, [pc, #32]	; (8004c74 <rf24_stm32f1xx_init_led+0x48>)
 8004c54:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004c58:	6053      	str	r3, [r2, #4]

    rf24_stm32f1xx_set_timer_interrupt_ms(0, update_cycle_ms, rf24_stm32f1xx_led_toggle);
 8004c5a:	88fb      	ldrh	r3, [r7, #6]
 8004c5c:	4a06      	ldr	r2, [pc, #24]	; (8004c78 <rf24_stm32f1xx_init_led+0x4c>)
 8004c5e:	4619      	mov	r1, r3
 8004c60:	2000      	movs	r0, #0
 8004c62:	f7ff ff27 	bl	8004ab4 <rf24_stm32f1xx_set_timer_interrupt_ms>
}
 8004c66:	bf00      	nop
 8004c68:	3708      	adds	r7, #8
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	40021000 	.word	0x40021000
 8004c74:	40011000 	.word	0x40011000
 8004c78:	08004cd5 	.word	0x08004cd5

08004c7c <rf24_stm32f1xx_set_led_cycle>:

void rf24_stm32f1xx_set_led_cycle(uint16_t update_cycle_ms)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	4603      	mov	r3, r0
 8004c84:	80fb      	strh	r3, [r7, #6]
	event_cycles[0].us = update_cycle_ms * 1000;
 8004c86:	88fb      	ldrh	r3, [r7, #6]
 8004c88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c8c:	fb02 f303 	mul.w	r3, r2, r3
 8004c90:	461a      	mov	r2, r3
 8004c92:	4b03      	ldr	r3, [pc, #12]	; (8004ca0 <rf24_stm32f1xx_set_led_cycle+0x24>)
 8004c94:	605a      	str	r2, [r3, #4]
}
 8004c96:	bf00      	nop
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bc80      	pop	{r7}
 8004c9e:	4770      	bx	lr
 8004ca0:	200007d4 	.word	0x200007d4

08004ca4 <rf24_stm32f1xx_led_on>:

void rf24_stm32f1xx_led_on()
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	af00      	add	r7, sp, #0
	GPIOC->BSRR = GPIO_BSRR_BS13;
 8004ca8:	4b03      	ldr	r3, [pc, #12]	; (8004cb8 <rf24_stm32f1xx_led_on+0x14>)
 8004caa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004cae:	611a      	str	r2, [r3, #16]
}
 8004cb0:	bf00      	nop
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bc80      	pop	{r7}
 8004cb6:	4770      	bx	lr
 8004cb8:	40011000 	.word	0x40011000

08004cbc <rf24_stm32f1xx_led_off>:

void rf24_stm32f1xx_led_off()
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	af00      	add	r7, sp, #0
	GPIOC->BSRR = GPIO_BSRR_BR13;
 8004cc0:	4b03      	ldr	r3, [pc, #12]	; (8004cd0 <rf24_stm32f1xx_led_off+0x14>)
 8004cc2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004cc6:	611a      	str	r2, [r3, #16]
}
 8004cc8:	bf00      	nop
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bc80      	pop	{r7}
 8004cce:	4770      	bx	lr
 8004cd0:	40011000 	.word	0x40011000

08004cd4 <rf24_stm32f1xx_led_toggle>:

void rf24_stm32f1xx_led_toggle()
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	af00      	add	r7, sp, #0
	if(led_pin_state){
 8004cd8:	4b08      	ldr	r3, [pc, #32]	; (8004cfc <rf24_stm32f1xx_led_toggle+0x28>)
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d005      	beq.n	8004cee <rf24_stm32f1xx_led_toggle+0x1a>
		rf24_stm32f1xx_led_off();
 8004ce2:	f7ff ffeb 	bl	8004cbc <rf24_stm32f1xx_led_off>
		led_pin_state = low;
 8004ce6:	4b05      	ldr	r3, [pc, #20]	; (8004cfc <rf24_stm32f1xx_led_toggle+0x28>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	701a      	strb	r2, [r3, #0]
	{
		rf24_stm32f1xx_led_on();
		led_pin_state = high;
	}

}
 8004cec:	e004      	b.n	8004cf8 <rf24_stm32f1xx_led_toggle+0x24>
		rf24_stm32f1xx_led_on();
 8004cee:	f7ff ffd9 	bl	8004ca4 <rf24_stm32f1xx_led_on>
		led_pin_state = high;
 8004cf2:	4b02      	ldr	r3, [pc, #8]	; (8004cfc <rf24_stm32f1xx_led_toggle+0x28>)
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	701a      	strb	r2, [r3, #0]
}
 8004cf8:	bf00      	nop
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	200005d4 	.word	0x200005d4

08004d00 <rf24_stm32f1xx_init_ce>:

void rf24_stm32f1xx_init_ce(void)
{
 8004d00:	b480      	push	{r7}
 8004d02:	af00      	add	r7, sp, #0
    RCC->APB2ENR    |= RCC_APB2ENR_IOPAEN;
 8004d04:	4b0a      	ldr	r3, [pc, #40]	; (8004d30 <rf24_stm32f1xx_init_ce+0x30>)
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	4a09      	ldr	r2, [pc, #36]	; (8004d30 <rf24_stm32f1xx_init_ce+0x30>)
 8004d0a:	f043 0304 	orr.w	r3, r3, #4
 8004d0e:	6193      	str	r3, [r2, #24]
    GPIOA->CRL      &=  ~(GPIO_CRL_MODE3 | GPIO_CRL_CNF3);
 8004d10:	4b08      	ldr	r3, [pc, #32]	; (8004d34 <rf24_stm32f1xx_init_ce+0x34>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a07      	ldr	r2, [pc, #28]	; (8004d34 <rf24_stm32f1xx_init_ce+0x34>)
 8004d16:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d1a:	6013      	str	r3, [r2, #0]
    GPIOA->CRL      |= (GPIO_CRL_MODE3_1 | GPIO_CRL_MODE3_0);
 8004d1c:	4b05      	ldr	r3, [pc, #20]	; (8004d34 <rf24_stm32f1xx_init_ce+0x34>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a04      	ldr	r2, [pc, #16]	; (8004d34 <rf24_stm32f1xx_init_ce+0x34>)
 8004d22:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8004d26:	6013      	str	r3, [r2, #0]
}
 8004d28:	bf00      	nop
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bc80      	pop	{r7}
 8004d2e:	4770      	bx	lr
 8004d30:	40021000 	.word	0x40021000
 8004d34:	40010800 	.word	0x40010800

08004d38 <rf24_stm32f1xx_ce_high>:

void rf24_stm32f1xx_ce_high()
{
 8004d38:	b480      	push	{r7}
 8004d3a:	af00      	add	r7, sp, #0
	// Set PA3 high
	GPIOA->BSRR = GPIO_BSRR_BS3;
 8004d3c:	4b03      	ldr	r3, [pc, #12]	; (8004d4c <rf24_stm32f1xx_ce_high+0x14>)
 8004d3e:	2208      	movs	r2, #8
 8004d40:	611a      	str	r2, [r3, #16]
}
 8004d42:	bf00      	nop
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bc80      	pop	{r7}
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	40010800 	.word	0x40010800

08004d50 <rf24_stm32f1xx_ce_low>:

void rf24_stm32f1xx_ce_low()
{
 8004d50:	b480      	push	{r7}
 8004d52:	af00      	add	r7, sp, #0
	// Set PA3 low
	GPIOA->BSRR = GPIO_BSRR_BR3;
 8004d54:	4b03      	ldr	r3, [pc, #12]	; (8004d64 <rf24_stm32f1xx_ce_low+0x14>)
 8004d56:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004d5a:	611a      	str	r2, [r3, #16]
}
 8004d5c:	bf00      	nop
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bc80      	pop	{r7}
 8004d62:	4770      	bx	lr
 8004d64:	40010800 	.word	0x40010800

08004d68 <rf24_stm32f1xx_irq_init>:
	// Enable EXTI15_10_IRQn from NVIC
	NVIC_EnableIRQ(EXTI15_10_IRQn);
}

void rf24_stm32f1xx_irq_init()
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	af00      	add	r7, sp, #0
	// Reset PA2
	GPIOA->CRL &= ~(GPIO_CRL_MODE2 | GPIO_CRL_CNF2);
 8004d6c:	4b24      	ldr	r3, [pc, #144]	; (8004e00 <rf24_stm32f1xx_irq_init+0x98>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a23      	ldr	r2, [pc, #140]	; (8004e00 <rf24_stm32f1xx_irq_init+0x98>)
 8004d72:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004d76:	6013      	str	r3, [r2, #0]

	// Set PA2 input pull up (CNF13_1=1, CNF13_0=0, MODE13_1=0, MODE13_0=0, ODR13=1)
	GPIOA->CRL |= GPIO_CRL_CNF2_1;
 8004d78:	4b21      	ldr	r3, [pc, #132]	; (8004e00 <rf24_stm32f1xx_irq_init+0x98>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a20      	ldr	r2, [pc, #128]	; (8004e00 <rf24_stm32f1xx_irq_init+0x98>)
 8004d7e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004d82:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(GPIO_CRL_CNF2_0);
 8004d84:	4b1e      	ldr	r3, [pc, #120]	; (8004e00 <rf24_stm32f1xx_irq_init+0x98>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a1d      	ldr	r2, [pc, #116]	; (8004e00 <rf24_stm32f1xx_irq_init+0x98>)
 8004d8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d8e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(GPIO_CRL_MODE2_1 | GPIO_CRL_MODE2_0);
 8004d90:	4b1b      	ldr	r3, [pc, #108]	; (8004e00 <rf24_stm32f1xx_irq_init+0x98>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a1a      	ldr	r2, [pc, #104]	; (8004e00 <rf24_stm32f1xx_irq_init+0x98>)
 8004d96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d9a:	6013      	str	r3, [r2, #0]
	GPIOA->ODR |= GPIO_ODR_ODR2;
 8004d9c:	4b18      	ldr	r3, [pc, #96]	; (8004e00 <rf24_stm32f1xx_irq_init+0x98>)
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	4a17      	ldr	r2, [pc, #92]	; (8004e00 <rf24_stm32f1xx_irq_init+0x98>)
 8004da2:	f043 0304 	orr.w	r3, r3, #4
 8004da6:	60d3      	str	r3, [r2, #12]

	// Enable clock port a
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8004da8:	4b16      	ldr	r3, [pc, #88]	; (8004e04 <rf24_stm32f1xx_irq_init+0x9c>)
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	4a15      	ldr	r2, [pc, #84]	; (8004e04 <rf24_stm32f1xx_irq_init+0x9c>)
 8004dae:	f043 0304 	orr.w	r3, r3, #4
 8004db2:	6193      	str	r3, [r2, #24]

	// Enable clock alternate function
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 8004db4:	4b13      	ldr	r3, [pc, #76]	; (8004e04 <rf24_stm32f1xx_irq_init+0x9c>)
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	4a12      	ldr	r2, [pc, #72]	; (8004e04 <rf24_stm32f1xx_irq_init+0x9c>)
 8004dba:	f043 0301 	orr.w	r3, r3, #1
 8004dbe:	6193      	str	r3, [r2, #24]

	// Map PA2 to EXTI0
	AFIO->EXTICR[0] |= AFIO_EXTICR1_EXTI2_PA;
 8004dc0:	4b11      	ldr	r3, [pc, #68]	; (8004e08 <rf24_stm32f1xx_irq_init+0xa0>)
 8004dc2:	4a11      	ldr	r2, [pc, #68]	; (8004e08 <rf24_stm32f1xx_irq_init+0xa0>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	6093      	str	r3, [r2, #8]

	// Interrupt request from line 2 is not masked => enabled
	EXTI->IMR |= EXTI_IMR_MR2; //(1 << 2);
 8004dc8:	4b10      	ldr	r3, [pc, #64]	; (8004e0c <rf24_stm32f1xx_irq_init+0xa4>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a0f      	ldr	r2, [pc, #60]	; (8004e0c <rf24_stm32f1xx_irq_init+0xa4>)
 8004dce:	f043 0304 	orr.w	r3, r3, #4
 8004dd2:	6013      	str	r3, [r2, #0]

	// Enable falling edge trigger
	EXTI->FTSR |= EXTI_FTSR_TR2; //(1 << 2);
 8004dd4:	4b0d      	ldr	r3, [pc, #52]	; (8004e0c <rf24_stm32f1xx_irq_init+0xa4>)
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	4a0c      	ldr	r2, [pc, #48]	; (8004e0c <rf24_stm32f1xx_irq_init+0xa4>)
 8004dda:	f043 0304 	orr.w	r3, r3, #4
 8004dde:	60d3      	str	r3, [r2, #12]
	// Disable rising edge trigger
	EXTI->RTSR &= ~(EXTI_RTSR_TR2); //(1 << 2);
 8004de0:	4b0a      	ldr	r3, [pc, #40]	; (8004e0c <rf24_stm32f1xx_irq_init+0xa4>)
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	4a09      	ldr	r2, [pc, #36]	; (8004e0c <rf24_stm32f1xx_irq_init+0xa4>)
 8004de6:	f023 0304 	bic.w	r3, r3, #4
 8004dea:	6093      	str	r3, [r2, #8]

	// Set EXTI2 to priority level 1
	NVIC_SetPriority(EXTI2_IRQn, 0x10);
 8004dec:	2110      	movs	r1, #16
 8004dee:	2008      	movs	r0, #8
 8004df0:	f7ff fcb0 	bl	8004754 <__NVIC_SetPriority>

	// Enable EXT2 IRQ from NVIC
	NVIC_EnableIRQ(EXTI2_IRQn);
 8004df4:	2008      	movs	r0, #8
 8004df6:	f7ff fc91 	bl	800471c <__NVIC_EnableIRQ>
}
 8004dfa:	bf00      	nop
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	40010800 	.word	0x40010800
 8004e04:	40021000 	.word	0x40021000
 8004e08:	40010000 	.word	0x40010000
 8004e0c:	40010400 	.word	0x40010400

08004e10 <rf24_stm32f1xx_init>:

void rf24_stm32f1xx_init()
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	af00      	add	r7, sp, #0
	rf24_stm32f1xx_set_system_clock_72Mhz();
 8004e14:	f7ff fdac 	bl	8004970 <rf24_stm32f1xx_set_system_clock_72Mhz>
	rf24_stm32f1xx_init_tim2(RF24_STM32F1XX_TIMER2_TICK_US);
 8004e18:	2332      	movs	r3, #50	; 0x32
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7ff fdfe 	bl	8004a1c <rf24_stm32f1xx_init_tim2>
	rf24_stm32f1xx_init_tim3();
 8004e20:	f7ff fea2 	bl	8004b68 <rf24_stm32f1xx_init_tim3>
	rf24_stm32f1xx_init_led(1000);
 8004e24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e28:	f7ff ff00 	bl	8004c2c <rf24_stm32f1xx_init_led>
	rf24_stm32f1xx_init_ce();
 8004e2c:	f7ff ff68 	bl	8004d00 <rf24_stm32f1xx_init_ce>
	rf24_stm32f1xx_ce_low();
 8004e30:	f7ff ff8e 	bl	8004d50 <rf24_stm32f1xx_ce_low>
	rf24_stm32f1xx_irq_init();
 8004e34:	f7ff ff98 	bl	8004d68 <rf24_stm32f1xx_irq_init>
}
 8004e38:	bf00      	nop
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <rf24_stm32f1xx_spi_init>:
#include "rf24_stm32f1xx_spi.h"

void rf24_stm32f1xx_spi_init(void)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
    RCC->APB2ENR    |= RCC_APB2ENR_IOPAEN;  // Enable GPIOA clock
 8004e42:	4b2e      	ldr	r3, [pc, #184]	; (8004efc <rf24_stm32f1xx_spi_init+0xc0>)
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	4a2d      	ldr	r2, [pc, #180]	; (8004efc <rf24_stm32f1xx_spi_init+0xc0>)
 8004e48:	f043 0304 	orr.w	r3, r3, #4
 8004e4c:	6193      	str	r3, [r2, #24]
    RCC->APB2ENR    |= RCC_APB2ENR_SPI1EN;  // Enable SPI1 clock
 8004e4e:	4b2b      	ldr	r3, [pc, #172]	; (8004efc <rf24_stm32f1xx_spi_init+0xc0>)
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	4a2a      	ldr	r2, [pc, #168]	; (8004efc <rf24_stm32f1xx_spi_init+0xc0>)
 8004e54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004e58:	6193      	str	r3, [r2, #24]

    // Reset PA4, PA5, PA, PA7 MODE and CNF to 0b00
    GPIOA->CRL &=	~(	(GPIO_CRL_MODE4 | GPIO_CRL_CNF4) |
 8004e5a:	4b29      	ldr	r3, [pc, #164]	; (8004f00 <rf24_stm32f1xx_spi_init+0xc4>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a28      	ldr	r2, [pc, #160]	; (8004f00 <rf24_stm32f1xx_spi_init+0xc4>)
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	6013      	str	r3, [r2, #0]
    					(GPIO_CRL_MODE5 | GPIO_CRL_CNF5) |
						(GPIO_CRL_MODE6 | GPIO_CRL_CNF6) |
						(GPIO_CRL_MODE7 | GPIO_CRL_CNF7)	);

    // Init Pin PA4 NSS  - Mode = 11 (50Mhz) - CNF = 0b00
    GPIOA->CRL |= GPIO_CRL_MODE4_1 | GPIO_CRL_MODE4_0;
 8004e64:	4b26      	ldr	r3, [pc, #152]	; (8004f00 <rf24_stm32f1xx_spi_init+0xc4>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a25      	ldr	r2, [pc, #148]	; (8004f00 <rf24_stm32f1xx_spi_init+0xc4>)
 8004e6a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8004e6e:	6013      	str	r3, [r2, #0]

    // Init Pin PA5 SCK  - Mode = 11 (50Mhz) - CNF = 0b10 (Alt Function PP)
    GPIOA->CRL |= GPIO_CRL_MODE5_1 | GPIO_CRL_MODE5_0 | GPIO_CRL_CNF5_1;
 8004e70:	4b23      	ldr	r3, [pc, #140]	; (8004f00 <rf24_stm32f1xx_spi_init+0xc4>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a22      	ldr	r2, [pc, #136]	; (8004f00 <rf24_stm32f1xx_spi_init+0xc4>)
 8004e76:	f443 0330 	orr.w	r3, r3, #11534336	; 0xb00000
 8004e7a:	6013      	str	r3, [r2, #0]

    // Init Pin PA6 MISO - Mode = 11 (50Mhz) - CNF = 0b10 (Alt Function PP)
    GPIOA->CRL |= GPIO_CRL_MODE6_1 | GPIO_CRL_MODE6_0 | GPIO_CRL_CNF6_1;
 8004e7c:	4b20      	ldr	r3, [pc, #128]	; (8004f00 <rf24_stm32f1xx_spi_init+0xc4>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a1f      	ldr	r2, [pc, #124]	; (8004f00 <rf24_stm32f1xx_spi_init+0xc4>)
 8004e82:	f043 6330 	orr.w	r3, r3, #184549376	; 0xb000000
 8004e86:	6013      	str	r3, [r2, #0]

    // Init Pin PA7 MOSI - Mode = 11 (50Mhz) - CNF = 0b10 (Alt Function PP)
    GPIOA->CRL |= GPIO_CRL_MODE7_1 | GPIO_CRL_MODE7_0 | GPIO_CRL_CNF7_1;
 8004e88:	4b1d      	ldr	r3, [pc, #116]	; (8004f00 <rf24_stm32f1xx_spi_init+0xc4>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a1c      	ldr	r2, [pc, #112]	; (8004f00 <rf24_stm32f1xx_spi_init+0xc4>)
 8004e8e:	f043 4330 	orr.w	r3, r3, #2952790016	; 0xb0000000
 8004e92:	6013      	str	r3, [r2, #0]

    // Set the SS (CSN) pin high
    GPIOA->BSRR = GPIO_BSRR_BS4;
 8004e94:	4b1a      	ldr	r3, [pc, #104]	; (8004f00 <rf24_stm32f1xx_spi_init+0xc4>)
 8004e96:	2210      	movs	r2, #16
 8004e98:	611a      	str	r2, [r3, #16]

    // 1. __________________________________________________________________________
    // Configuring the SPI in master mode (Source: ST RM0008 Reference manual)

    uint32_t spi_config = 0;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	607b      	str	r3, [r7, #4]

    spi_config |= SPI_CR1_SPE;				// Enable SPI Interface
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ea4:	607b      	str	r3, [r7, #4]

    // 1.1 Select the BR[2:0] bits to define the serial clock baud rate (see SPI_CR1 register).
    spi_config |= SPI_CR1_BR_2;				// SPI-Baudrate = F_PCLK/32
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f043 0320 	orr.w	r3, r3, #32
 8004eac:	607b      	str	r3, [r7, #4]

    // 1.2 Select the CPOL and CPHA bits to define one of the four relationships between the data transfer and the serial clock (see Figure 240).
    spi_config &= ~(SPI_CR1_CPHA);			// SPI clock to 0 when idle
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f023 0301 	bic.w	r3, r3, #1
 8004eb4:	607b      	str	r3, [r7, #4]
    //spi_config |= SPI_CR1_CPHA;			// SPI clock to 1 when idle
    spi_config &= ~(SPI_CR1_CPOL);			// First clock transition is the first data capture edge
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f023 0302 	bic.w	r3, r3, #2
 8004ebc:	607b      	str	r3, [r7, #4]
    //spi_config |= SPI_CR1_CPOL;			// Second clock transition is the first data capture edge

    // 1.3 Set the DFF bit to define 8- or 16-bit data frame format
    //spi_config |= SPI_CR1_DFF; 			// 16-bit data frame
    spi_config &= ~(SPI_CR1_DFF);			// 8-bit data frame
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ec4:	607b      	str	r3, [r7, #4]

    // 1.4 Configure the LSBFIRST bit in the SPI_CR1 register to define the frame format.
    //spi_config |= SPI_CR1_LSBFIRST; 		// LSB transmitted first
    spi_config &= ~(SPI_CR1_LSBFIRST);		// MSB transmitted first
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ecc:	607b      	str	r3, [r7, #4]

    // 1.5 If the NSS pin is required in input mode, in hardware mode, connect the NSS pin to a high-level signal during the complete byte transmit sequence. In NSS software mode,
	//		set the SSM and SSI bits in the SPI_CR1 register. If the NSS pin is required in output mode, the SSOE bit only should be set.
    spi_config |= SPI_CR1_SSM;				// Software slave management enabled
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ed4:	607b      	str	r3, [r7, #4]
    spi_config |= SPI_CR1_SSI;				// Internal slave select
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004edc:	607b      	str	r3, [r7, #4]

    // 1.6 The MSTR and SPE bits must be set (they remain set only if the NSS pin is connected to a high-level signal)
    spi_config |= SPI_CR1_MSTR;				// Configure as Master
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f043 0304 	orr.w	r3, r3, #4
 8004ee4:	607b      	str	r3, [r7, #4]

    SPI1->CR1  |= spi_config;
 8004ee6:	4b07      	ldr	r3, [pc, #28]	; (8004f04 <rf24_stm32f1xx_spi_init+0xc8>)
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	4906      	ldr	r1, [pc, #24]	; (8004f04 <rf24_stm32f1xx_spi_init+0xc8>)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	600b      	str	r3, [r1, #0]
}
 8004ef2:	bf00      	nop
 8004ef4:	370c      	adds	r7, #12
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bc80      	pop	{r7}
 8004efa:	4770      	bx	lr
 8004efc:	40021000 	.word	0x40021000
 8004f00:	40010800 	.word	0x40010800
 8004f04:	40013000 	.word	0x40013000

08004f08 <rf24_stm32f1xx_spi_csn_low>:

void rf24_stm32f1xx_spi_csn_low(){
 8004f08:	b480      	push	{r7}
 8004f0a:	af00      	add	r7, sp, #0
	GPIOA->BSRR = GPIO_BSRR_BR4;
 8004f0c:	4b03      	ldr	r3, [pc, #12]	; (8004f1c <rf24_stm32f1xx_spi_csn_low+0x14>)
 8004f0e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004f12:	611a      	str	r2, [r3, #16]
}
 8004f14:	bf00      	nop
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bc80      	pop	{r7}
 8004f1a:	4770      	bx	lr
 8004f1c:	40010800 	.word	0x40010800

08004f20 <rf24_stm32f1xx_spi_csn_high>:

void rf24_stm32f1xx_spi_csn_high(){
 8004f20:	b480      	push	{r7}
 8004f22:	af00      	add	r7, sp, #0
	GPIOA->BSRR = GPIO_BSRR_BS4;
 8004f24:	4b03      	ldr	r3, [pc, #12]	; (8004f34 <rf24_stm32f1xx_spi_csn_high+0x14>)
 8004f26:	2210      	movs	r2, #16
 8004f28:	611a      	str	r2, [r3, #16]
}
 8004f2a:	bf00      	nop
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bc80      	pop	{r7}
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	40010800 	.word	0x40010800

08004f38 <rf24_stm32f1xx_spi_shift_byte>:

uint8_t rf24_stm32f1xx_spi_shift_byte(uint8_t data){
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	4603      	mov	r3, r0
 8004f40:	71fb      	strb	r3, [r7, #7]
	//while (!(SPI1->SR & SPI_SR_TXE)){};
	*(uint8_t*)&(SPI1->DR) = data;
 8004f42:	4a09      	ldr	r2, [pc, #36]	; (8004f68 <rf24_stm32f1xx_spi_shift_byte+0x30>)
 8004f44:	79fb      	ldrb	r3, [r7, #7]
 8004f46:	7013      	strb	r3, [r2, #0]
	while(!(SPI1->SR & SPI_SR_RXNE)){};
 8004f48:	bf00      	nop
 8004f4a:	4b08      	ldr	r3, [pc, #32]	; (8004f6c <rf24_stm32f1xx_spi_shift_byte+0x34>)
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d0f9      	beq.n	8004f4a <rf24_stm32f1xx_spi_shift_byte+0x12>
	return SPI1->DR;
 8004f56:	4b05      	ldr	r3, [pc, #20]	; (8004f6c <rf24_stm32f1xx_spi_shift_byte+0x34>)
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	b2db      	uxtb	r3, r3
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bc80      	pop	{r7}
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	4001300c 	.word	0x4001300c
 8004f6c:	40013000 	.word	0x40013000

08004f70 <__NVIC_EnableIRQ>:
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	4603      	mov	r3, r0
 8004f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	db0b      	blt.n	8004f9a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f82:	79fb      	ldrb	r3, [r7, #7]
 8004f84:	f003 021f 	and.w	r2, r3, #31
 8004f88:	4906      	ldr	r1, [pc, #24]	; (8004fa4 <__NVIC_EnableIRQ+0x34>)
 8004f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f8e:	095b      	lsrs	r3, r3, #5
 8004f90:	2001      	movs	r0, #1
 8004f92:	fa00 f202 	lsl.w	r2, r0, r2
 8004f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004f9a:	bf00      	nop
 8004f9c:	370c      	adds	r7, #12
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bc80      	pop	{r7}
 8004fa2:	4770      	bx	lr
 8004fa4:	e000e100 	.word	0xe000e100

08004fa8 <rf24_stm32f1xx_usart_init>:

volatile rf24_stm32f1xx_usart_state_t  usart_state = usart_idle;
volatile rf24_stm32f1xx_usart_rx_buffer_t uart_buffer = { {0}, 0, 0 };

void rf24_stm32f1xx_usart_init(uint32_t baudrate)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
	// enable GPIOA clock
    RCC->APB2ENR    |= RCC_APB2ENR_IOPAEN;
 8004fb0:	4b1e      	ldr	r3, [pc, #120]	; (800502c <rf24_stm32f1xx_usart_init+0x84>)
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	4a1d      	ldr	r2, [pc, #116]	; (800502c <rf24_stm32f1xx_usart_init+0x84>)
 8004fb6:	f043 0304 	orr.w	r3, r3, #4
 8004fba:	6193      	str	r3, [r2, #24]
    // enable USART1 clock
    RCC->APB2ENR    |= RCC_APB2ENR_USART1EN;
 8004fbc:	4b1b      	ldr	r3, [pc, #108]	; (800502c <rf24_stm32f1xx_usart_init+0x84>)
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	4a1a      	ldr	r2, [pc, #104]	; (800502c <rf24_stm32f1xx_usart_init+0x84>)
 8004fc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fc6:	6193      	str	r3, [r2, #24]

    // reset PA9
    GPIOA->CRH &= ~(GPIO_CRH_CNF9  | GPIO_CRH_MODE9);
 8004fc8:	4b19      	ldr	r3, [pc, #100]	; (8005030 <rf24_stm32f1xx_usart_init+0x88>)
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	4a18      	ldr	r2, [pc, #96]	; (8005030 <rf24_stm32f1xx_usart_init+0x88>)
 8004fce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fd2:	6053      	str	r3, [r2, #4]
    // reset PA10
    GPIOA->CRH &= ~(GPIO_CRH_CNF10 | GPIO_CRH_MODE10);
 8004fd4:	4b16      	ldr	r3, [pc, #88]	; (8005030 <rf24_stm32f1xx_usart_init+0x88>)
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	4a15      	ldr	r2, [pc, #84]	; (8005030 <rf24_stm32f1xx_usart_init+0x88>)
 8004fda:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004fde:	6053      	str	r3, [r2, #4]

    // 0b11 50MHz output
    GPIOA->CRH |= GPIO_CRH_MODE9_1 | GPIO_CRH_MODE9_0;
 8004fe0:	4b13      	ldr	r3, [pc, #76]	; (8005030 <rf24_stm32f1xx_usart_init+0x88>)
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	4a12      	ldr	r2, [pc, #72]	; (8005030 <rf24_stm32f1xx_usart_init+0x88>)
 8004fe6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8004fea:	6053      	str	r3, [r2, #4]
    // PA9: output @ 50MHz - alt-function push-pull
    GPIOA->CRH |= GPIO_CRH_CNF9_1;
 8004fec:	4b10      	ldr	r3, [pc, #64]	; (8005030 <rf24_stm32f1xx_usart_init+0x88>)
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	4a0f      	ldr	r2, [pc, #60]	; (8005030 <rf24_stm32f1xx_usart_init+0x88>)
 8004ff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ff6:	6053      	str	r3, [r2, #4]
    // PA10 rx - mode = 0b00 (input) - CNF = 0b01 (input floating)
    GPIOA->CRH |= GPIO_CRH_CNF10_0;
 8004ff8:	4b0d      	ldr	r3, [pc, #52]	; (8005030 <rf24_stm32f1xx_usart_init+0x88>)
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	4a0c      	ldr	r2, [pc, #48]	; (8005030 <rf24_stm32f1xx_usart_init+0x88>)
 8004ffe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005002:	6053      	str	r3, [r2, #4]

    // configure USART1 registers
    uint32_t baud = (uint32_t)(SystemCoreClock/baudrate);
 8005004:	4b0b      	ldr	r3, [pc, #44]	; (8005034 <rf24_stm32f1xx_usart_init+0x8c>)
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	fbb2 f3f3 	udiv	r3, r2, r3
 800500e:	60fb      	str	r3, [r7, #12]
    USART1->BRR  = baud;
 8005010:	4a09      	ldr	r2, [pc, #36]	; (8005038 <rf24_stm32f1xx_usart_init+0x90>)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6093      	str	r3, [r2, #8]
    USART1->CR1 = USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE | USART_CR1_UE;
 8005016:	4b08      	ldr	r3, [pc, #32]	; (8005038 <rf24_stm32f1xx_usart_init+0x90>)
 8005018:	f242 022c 	movw	r2, #8236	; 0x202c
 800501c:	60da      	str	r2, [r3, #12]

    // configure NVIC
    NVIC_EnableIRQ(USART1_IRQn);
 800501e:	2025      	movs	r0, #37	; 0x25
 8005020:	f7ff ffa6 	bl	8004f70 <__NVIC_EnableIRQ>
}
 8005024:	bf00      	nop
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	40021000 	.word	0x40021000
 8005030:	40010800 	.word	0x40010800
 8005034:	20000000 	.word	0x20000000
 8005038:	40013800 	.word	0x40013800

0800503c <rf24_stm32f1xx_usart_write_byte>:

void rf24_stm32f1xx_usart_write_byte(uint8_t byte)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	4603      	mov	r3, r0
 8005044:	71fb      	strb	r3, [r7, #7]
	if(byte == '\n') rf24_stm32f1xx_usart_write_byte('\r');
 8005046:	79fb      	ldrb	r3, [r7, #7]
 8005048:	2b0a      	cmp	r3, #10
 800504a:	d102      	bne.n	8005052 <rf24_stm32f1xx_usart_write_byte+0x16>
 800504c:	200d      	movs	r0, #13
 800504e:	f7ff fff5 	bl	800503c <rf24_stm32f1xx_usart_write_byte>

    USART1->DR = (int)(byte);
 8005052:	4a07      	ldr	r2, [pc, #28]	; (8005070 <rf24_stm32f1xx_usart_write_byte+0x34>)
 8005054:	79fb      	ldrb	r3, [r7, #7]
 8005056:	6053      	str	r3, [r2, #4]
    while (!(USART1->SR & USART_SR_TXE));
 8005058:	bf00      	nop
 800505a:	4b05      	ldr	r3, [pc, #20]	; (8005070 <rf24_stm32f1xx_usart_write_byte+0x34>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005062:	2b00      	cmp	r3, #0
 8005064:	d0f9      	beq.n	800505a <rf24_stm32f1xx_usart_write_byte+0x1e>
}
 8005066:	bf00      	nop
 8005068:	3708      	adds	r7, #8
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	40013800 	.word	0x40013800

08005074 <rf24_stm32f1xx_usart_write_str>:

int rf24_stm32f1xx_usart_write_str(char *str)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
    int count = 0;
 800507c:	2300      	movs	r3, #0
 800507e:	60fb      	str	r3, [r7, #12]

    while(*str){
 8005080:	e00a      	b.n	8005098 <rf24_stm32f1xx_usart_write_str+0x24>
    	rf24_stm32f1xx_usart_write_byte(*str);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	4618      	mov	r0, r3
 8005088:	f7ff ffd8 	bl	800503c <rf24_stm32f1xx_usart_write_byte>
        str++;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	3301      	adds	r3, #1
 8005090:	607b      	str	r3, [r7, #4]
        count++;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	3301      	adds	r3, #1
 8005096:	60fb      	str	r3, [r7, #12]
    while(*str){
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1f0      	bne.n	8005082 <rf24_stm32f1xx_usart_write_str+0xe>
    }

    return count;
 80050a0:	68fb      	ldr	r3, [r7, #12]
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <rf24_stm32f1xx_usart_write_line>:

int rf24_stm32f1xx_usart_write_line(char *str)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b084      	sub	sp, #16
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
    int count = 0;
 80050b2:	2300      	movs	r3, #0
 80050b4:	60fb      	str	r3, [r7, #12]
    count = rf24_stm32f1xx_usart_write_str(str);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f7ff ffdc 	bl	8005074 <rf24_stm32f1xx_usart_write_str>
 80050bc:	60f8      	str	r0, [r7, #12]
    rf24_stm32f1xx_usart_write_byte('\n');
 80050be:	200a      	movs	r0, #10
 80050c0:	f7ff ffbc 	bl	800503c <rf24_stm32f1xx_usart_write_byte>
    return(count);
 80050c4:	68fb      	ldr	r3, [r7, #12]
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
	...

080050d0 <rf24_stm32f1xx_usart_buffer_char>:

void rf24_stm32f1xx_usart_buffer_char(uint8_t c)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	4603      	mov	r3, r0
 80050d8:	71fb      	strb	r3, [r7, #7]
    int i = (uart_buffer.head_pos + 1) % USART_BUFFER_SIZE;
 80050da:	4b11      	ldr	r3, [pc, #68]	; (8005120 <rf24_stm32f1xx_usart_buffer_char+0x50>)
 80050dc:	7c1b      	ldrb	r3, [r3, #16]
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	3301      	adds	r3, #1
 80050e2:	425a      	negs	r2, r3
 80050e4:	f003 030f 	and.w	r3, r3, #15
 80050e8:	f002 020f 	and.w	r2, r2, #15
 80050ec:	bf58      	it	pl
 80050ee:	4253      	negpl	r3, r2
 80050f0:	60fb      	str	r3, [r7, #12]

    if (i != uart_buffer.tail_pos)
 80050f2:	4b0b      	ldr	r3, [pc, #44]	; (8005120 <rf24_stm32f1xx_usart_buffer_char+0x50>)
 80050f4:	7c5b      	ldrb	r3, [r3, #17]
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	461a      	mov	r2, r3
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d00a      	beq.n	8005116 <rf24_stm32f1xx_usart_buffer_char+0x46>
    {
        uart_buffer.buffer[uart_buffer.head_pos] = c;
 8005100:	4b07      	ldr	r3, [pc, #28]	; (8005120 <rf24_stm32f1xx_usart_buffer_char+0x50>)
 8005102:	7c1b      	ldrb	r3, [r3, #16]
 8005104:	b2db      	uxtb	r3, r3
 8005106:	4619      	mov	r1, r3
 8005108:	4a05      	ldr	r2, [pc, #20]	; (8005120 <rf24_stm32f1xx_usart_buffer_char+0x50>)
 800510a:	79fb      	ldrb	r3, [r7, #7]
 800510c:	5453      	strb	r3, [r2, r1]
        uart_buffer.head_pos = i;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	b2da      	uxtb	r2, r3
 8005112:	4b03      	ldr	r3, [pc, #12]	; (8005120 <rf24_stm32f1xx_usart_buffer_char+0x50>)
 8005114:	741a      	strb	r2, [r3, #16]
    }
}
 8005116:	bf00      	nop
 8005118:	3714      	adds	r7, #20
 800511a:	46bd      	mov	sp, r7
 800511c:	bc80      	pop	{r7}
 800511e:	4770      	bx	lr
 8005120:	200005d8 	.word	0x200005d8

08005124 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
    if(USART1->SR & USART_SR_ORE)
 800512a:	4b0d      	ldr	r3, [pc, #52]	; (8005160 <USART1_IRQHandler+0x3c>)
 800512c:	681b      	ldr	r3, [r3, #0]
    {
        // process overrun error if needed
    }

    uint8_t in_char = (USART1->DR & 0xFF);
 800512e:	4b0c      	ldr	r3, [pc, #48]	; (8005160 <USART1_IRQHandler+0x3c>)
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	71fb      	strb	r3, [r7, #7]

    // if input is escape, send clear screen command
    if(in_char == '\x1B')
 8005134:	79fb      	ldrb	r3, [r7, #7]
 8005136:	2b1b      	cmp	r3, #27
 8005138:	d106      	bne.n	8005148 <USART1_IRQHandler+0x24>
    {
    	rf24_stm32f1xx_usart_write_str("---------------------------------------------------------");
 800513a:	480a      	ldr	r0, [pc, #40]	; (8005164 <USART1_IRQHandler+0x40>)
 800513c:	f7ff ff9a 	bl	8005074 <rf24_stm32f1xx_usart_write_str>
    	rf24_stm32f1xx_usart_write_str("\033c");
 8005140:	4809      	ldr	r0, [pc, #36]	; (8005168 <USART1_IRQHandler+0x44>)
 8005142:	f7ff ff97 	bl	8005074 <rf24_stm32f1xx_usart_write_str>
    	return;
 8005146:	e007      	b.n	8005158 <USART1_IRQHandler+0x34>
    }

    rf24_stm32f1xx_usart_buffer_char(in_char);
 8005148:	79fb      	ldrb	r3, [r7, #7]
 800514a:	4618      	mov	r0, r3
 800514c:	f7ff ffc0 	bl	80050d0 <rf24_stm32f1xx_usart_buffer_char>
    rf24_urci_putc(in_char);
 8005150:	79fb      	ldrb	r3, [r7, #7]
 8005152:	4618      	mov	r0, r3
 8005154:	f000 fcda 	bl	8005b0c <rf24_urci_putc>
}
 8005158:	3708      	adds	r7, #8
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	40013800 	.word	0x40013800
 8005164:	0800801c 	.word	0x0800801c
 8005168:	08008058 	.word	0x08008058

0800516c <rf24_urci_ping>:
		.fct_ptr_string = rf24_set_autoack_pipes_string,
		.fct_ptr_ret_string = rf24_get_autoack_pipes_string},*/
};

void rf24_urci_ping(char* str)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
	mac_frame.frame_control.sub_type = MANAGEMENT_NEIGHBOR_ANSWER_MESSAGE;

	rf24_mac_transfer_frame(&mac_frame, BROADCAST);*/


}
 8005174:	bf00      	nop
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	bc80      	pop	{r7}
 800517c:	4770      	bx	lr
	...

08005180 <rf24_urci_print_mac_address>:

void rf24_urci_print_mac_address()
{
 8005180:	b580      	push	{r7, lr}
 8005182:	af00      	add	r7, sp, #0
	rf24_printf("%-10s mac-address: %s\n", "mac", decimal_to_string(rf24_mac_get_address()->bytes, 6, ':'));
 8005184:	f7fd fd7c 	bl	8002c80 <rf24_mac_get_address>
 8005188:	4603      	mov	r3, r0
 800518a:	223a      	movs	r2, #58	; 0x3a
 800518c:	2106      	movs	r1, #6
 800518e:	4618      	mov	r0, r3
 8005190:	f7fc f9be 	bl	8001510 <decimal_to_string>
 8005194:	4603      	mov	r3, r0
 8005196:	461a      	mov	r2, r3
 8005198:	4902      	ldr	r1, [pc, #8]	; (80051a4 <rf24_urci_print_mac_address+0x24>)
 800519a:	4803      	ldr	r0, [pc, #12]	; (80051a8 <rf24_urci_print_mac_address+0x28>)
 800519c:	f7fc f8da 	bl	8001354 <rf24_printf>
}
 80051a0:	bf00      	nop
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	08008778 	.word	0x08008778
 80051a8:	0800877c 	.word	0x0800877c

080051ac <rf24_urci_print_register>:

void rf24_urci_print_register(char* str){
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]

	for(int i=0; i<sizeof(rf24_module_register_names); i++)
 80051b4:	2300      	movs	r3, #0
 80051b6:	60fb      	str	r3, [r7, #12]
 80051b8:	e01b      	b.n	80051f2 <rf24_urci_print_register+0x46>
	{
		if(strcmp(rf24_module_register_names[i], str) == 0)
 80051ba:	4a11      	ldr	r2, [pc, #68]	; (8005200 <rf24_urci_print_register+0x54>)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051c2:	6879      	ldr	r1, [r7, #4]
 80051c4:	4618      	mov	r0, r3
 80051c6:	f7fa ffc1 	bl	800014c <strcmp>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d10d      	bne.n	80051ec <rf24_urci_print_register+0x40>
		{
			// get register_address vom register mnemonic enumeration
			uint8_t register_address = (rf24_module_register_mnemonics) i;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	72fb      	strb	r3, [r7, #11]

			// read register value and write it to usart
			rf24_stm32f1xx_usart_write_line(decimal_to_binary(rf24_module_read_register(register_address)));
 80051d4:	7afb      	ldrb	r3, [r7, #11]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7fc fa0e 	bl	80015f8 <rf24_module_read_register>
 80051dc:	4603      	mov	r3, r0
 80051de:	4618      	mov	r0, r3
 80051e0:	f7fc f9d4 	bl	800158c <decimal_to_binary>
 80051e4:	4603      	mov	r3, r0
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7ff ff5f 	bl	80050aa <rf24_stm32f1xx_usart_write_line>
	for(int i=0; i<sizeof(rf24_module_register_names); i++)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	3301      	adds	r3, #1
 80051f0:	60fb      	str	r3, [r7, #12]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2b67      	cmp	r3, #103	; 0x67
 80051f6:	d9e0      	bls.n	80051ba <rf24_urci_print_register+0xe>
		}
	}
}
 80051f8:	bf00      	nop
 80051fa:	3710      	adds	r7, #16
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	2000035c 	.word	0x2000035c

08005204 <rf24_urci_transfer_nam>:

void rf24_urci_transfer_nam(char* str)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b08c      	sub	sp, #48	; 0x30
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
	rf24_mac_addr mac_addr;
	string_to_bytes(str, ".,:;", mac_addr.bytes, 6);
 800520c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005210:	2306      	movs	r3, #6
 8005212:	4915      	ldr	r1, [pc, #84]	; (8005268 <rf24_urci_transfer_nam+0x64>)
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 fd19 	bl	8005c4c <string_to_bytes>

	rf24_mac_frame mac_frame;
	mac_frame.transmitter = *rf24_mac_get_address();
 800521a:	f7fd fd31 	bl	8002c80 <rf24_mac_get_address>
 800521e:	4602      	mov	r2, r0
 8005220:	f107 0312 	add.w	r3, r7, #18
 8005224:	6811      	ldr	r1, [r2, #0]
 8005226:	6019      	str	r1, [r3, #0]
 8005228:	8892      	ldrh	r2, [r2, #4]
 800522a:	809a      	strh	r2, [r3, #4]
	mac_frame.receiver = mac_addr;
 800522c:	f107 030c 	add.w	r3, r7, #12
 8005230:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005234:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005238:	6018      	str	r0, [r3, #0]
 800523a:	3304      	adds	r3, #4
 800523c:	8019      	strh	r1, [r3, #0]
	mac_frame.frame_control.type = TOPOLOGY;
 800523e:	7a3b      	ldrb	r3, [r7, #8]
 8005240:	2204      	movs	r2, #4
 8005242:	f362 0385 	bfi	r3, r2, #2, #4
 8005246:	723b      	strb	r3, [r7, #8]
	mac_frame.frame_control.subtype = TOPOLOGY_NEIGHBOR_ANSWER_MESSAGE;
 8005248:	893b      	ldrh	r3, [r7, #8]
 800524a:	2202      	movs	r2, #2
 800524c:	f362 1389 	bfi	r3, r2, #6, #4
 8005250:	813b      	strh	r3, [r7, #8]

	rf24_mac_transfer_frame(UNICAST, &mac_frame);
 8005252:	f107 0308 	add.w	r3, r7, #8
 8005256:	4619      	mov	r1, r3
 8005258:	2000      	movs	r0, #0
 800525a:	f7fe f829 	bl	80032b0 <rf24_mac_transfer_frame>
}
 800525e:	bf00      	nop
 8005260:	3730      	adds	r7, #48	; 0x30
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	08008794 	.word	0x08008794

0800526c <rf24_urci_transmit_mac_frame>:
	rf24_mac_frame_to_tx_data(&mac_frame, &tx_data);
	rf24_module_transmit(&tx_data);
}

void rf24_urci_transmit_mac_frame(char* str)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b08a      	sub	sp, #40	; 0x28
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
	rf24_mac_frame mac_frame;

	string_to_bytes(str, ".,:;", mac_frame.receiver.bytes, 6);
 8005274:	f107 0308 	add.w	r3, r7, #8
 8005278:	1d1a      	adds	r2, r3, #4
 800527a:	2306      	movs	r3, #6
 800527c:	4909      	ldr	r1, [pc, #36]	; (80052a4 <rf24_urci_transmit_mac_frame+0x38>)
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 fce4 	bl	8005c4c <string_to_bytes>
	mac_frame.frame_control.type = MANAGEMENT;
 8005284:	7a3b      	ldrb	r3, [r7, #8]
 8005286:	2201      	movs	r2, #1
 8005288:	f362 0385 	bfi	r3, r2, #2, #4
 800528c:	723b      	strb	r3, [r7, #8]
	//mac_frame.frame_control.subtype = MANAGEMENT_TEST;

	rf24_mac_transfer_frame(UNICAST, &mac_frame);
 800528e:	f107 0308 	add.w	r3, r7, #8
 8005292:	4619      	mov	r1, r3
 8005294:	2000      	movs	r0, #0
 8005296:	f7fe f80b 	bl	80032b0 <rf24_mac_transfer_frame>
}
 800529a:	bf00      	nop
 800529c:	3728      	adds	r7, #40	; 0x28
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	08008794 	.word	0x08008794

080052a8 <rf24_urci_transfer_topology>:

void rf24_urci_transfer_topology(char* str)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
	rf24_mac_addr mac_addr;
	string_to_bytes(str, ".,:;", mac_addr.bytes, 6);
 80052b0:	f107 0208 	add.w	r2, r7, #8
 80052b4:	2306      	movs	r3, #6
 80052b6:	4907      	ldr	r1, [pc, #28]	; (80052d4 <rf24_urci_transfer_topology+0x2c>)
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 fcc7 	bl	8005c4c <string_to_bytes>

	rf24_network_transfer_topology(mac_addr);
 80052be:	f107 0308 	add.w	r3, r7, #8
 80052c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80052c6:	f7fe ff5f 	bl	8004188 <rf24_network_transfer_topology>
}
 80052ca:	bf00      	nop
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	08008794 	.word	0x08008794

080052d8 <rf24_urci_transmit>:

void rf24_urci_transmit(char* str)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b0c8      	sub	sp, #288	; 0x120
 80052dc:	af02      	add	r7, sp, #8
 80052de:	1d3b      	adds	r3, r7, #4
 80052e0:	6018      	str	r0, [r3, #0]
	rf24_mac_addr mac_addr;
	string_to_bytes(str, ".,:;", mac_addr.bytes, 6);
 80052e2:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80052e6:	1d38      	adds	r0, r7, #4
 80052e8:	2306      	movs	r3, #6
 80052ea:	4915      	ldr	r1, [pc, #84]	; (8005340 <rf24_urci_transmit+0x68>)
 80052ec:	6800      	ldr	r0, [r0, #0]
 80052ee:	f000 fcad 	bl	8005c4c <string_to_bytes>

	uint8_t payload[255];
	for(int i=0; i < 255; i++) payload[i] = i;
 80052f2:	2300      	movs	r3, #0
 80052f4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80052f8:	e00e      	b.n	8005318 <rf24_urci_transmit+0x40>
 80052fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052fe:	b2d9      	uxtb	r1, r3
 8005300:	f107 020c 	add.w	r2, r7, #12
 8005304:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005308:	4413      	add	r3, r2
 800530a:	460a      	mov	r2, r1
 800530c:	701a      	strb	r2, [r3, #0]
 800530e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005312:	3301      	adds	r3, #1
 8005314:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005318:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800531c:	2bfe      	cmp	r3, #254	; 0xfe
 800531e:	ddec      	ble.n	80052fa <rf24_urci_transmit+0x22>
	rf24_mac_transfer_data(UNICAST, &mac_addr, DATA_DATA, payload, 255);
 8005320:	f107 020c 	add.w	r2, r7, #12
 8005324:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8005328:	23ff      	movs	r3, #255	; 0xff
 800532a:	9300      	str	r3, [sp, #0]
 800532c:	4613      	mov	r3, r2
 800532e:	2206      	movs	r2, #6
 8005330:	2000      	movs	r0, #0
 8005332:	f7fe f80d 	bl	8003350 <rf24_mac_transfer_data>
}
 8005336:	bf00      	nop
 8005338:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	08008794 	.word	0x08008794

08005344 <rf24_urci_set_datarate>:

void rf24_urci_set_datarate(char* str){
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
	if(strcmp(str, "250KBPS") == 0) rf24_module_set_datarate(rf24_module_datarate_250kbps);
 800534c:	4910      	ldr	r1, [pc, #64]	; (8005390 <rf24_urci_set_datarate+0x4c>)
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7fa fefc 	bl	800014c <strcmp>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d102      	bne.n	8005360 <rf24_urci_set_datarate+0x1c>
 800535a:	2002      	movs	r0, #2
 800535c:	f7fc fc94 	bl	8001c88 <rf24_module_set_datarate>
	if(strcmp(str, "1MBPS") == 0) rf24_module_set_datarate(rf24_module_datarate_1Mbps);
 8005360:	490c      	ldr	r1, [pc, #48]	; (8005394 <rf24_urci_set_datarate+0x50>)
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f7fa fef2 	bl	800014c <strcmp>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d102      	bne.n	8005374 <rf24_urci_set_datarate+0x30>
 800536e:	2000      	movs	r0, #0
 8005370:	f7fc fc8a 	bl	8001c88 <rf24_module_set_datarate>
	if(strcmp(str, "2MBPS") == 0) rf24_module_set_datarate(rf24_module_datarate_2Mbps);
 8005374:	4908      	ldr	r1, [pc, #32]	; (8005398 <rf24_urci_set_datarate+0x54>)
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7fa fee8 	bl	800014c <strcmp>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d102      	bne.n	8005388 <rf24_urci_set_datarate+0x44>
 8005382:	2001      	movs	r0, #1
 8005384:	f7fc fc80 	bl	8001c88 <rf24_module_set_datarate>
}
 8005388:	bf00      	nop
 800538a:	3708      	adds	r7, #8
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	0800879c 	.word	0x0800879c
 8005394:	080087a4 	.word	0x080087a4
 8005398:	080087ac 	.word	0x080087ac

0800539c <rf24_urci_get_datarate>:

char* rf24_urci_get_datarate(){
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0

	rf24_module_datarate datarate = rf24_module_get_datarate();
 80053a2:	f7fc fcab 	bl	8001cfc <rf24_module_get_datarate>
 80053a6:	4603      	mov	r3, r0
 80053a8:	71fb      	strb	r3, [r7, #7]
	char* str = "";
 80053aa:	4b0d      	ldr	r3, [pc, #52]	; (80053e0 <rf24_urci_get_datarate+0x44>)
 80053ac:	603b      	str	r3, [r7, #0]

	switch(datarate)
 80053ae:	79fb      	ldrb	r3, [r7, #7]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d00c      	beq.n	80053ce <rf24_urci_get_datarate+0x32>
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d002      	beq.n	80053be <rf24_urci_get_datarate+0x22>
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d004      	beq.n	80053c6 <rf24_urci_get_datarate+0x2a>
 80053bc:	e00b      	b.n	80053d6 <rf24_urci_get_datarate+0x3a>
	{
		case rf24_module_datarate_250kbps:
			str = "250KBPS";
 80053be:	4b09      	ldr	r3, [pc, #36]	; (80053e4 <rf24_urci_get_datarate+0x48>)
 80053c0:	603b      	str	r3, [r7, #0]
			return str;
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	e008      	b.n	80053d8 <rf24_urci_get_datarate+0x3c>
		case rf24_module_datarate_1Mbps:
			str = "1MBPS";
 80053c6:	4b08      	ldr	r3, [pc, #32]	; (80053e8 <rf24_urci_get_datarate+0x4c>)
 80053c8:	603b      	str	r3, [r7, #0]
			return str;
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	e004      	b.n	80053d8 <rf24_urci_get_datarate+0x3c>
		case rf24_module_datarate_2Mbps:
			str = "2MBPS";
 80053ce:	4b07      	ldr	r3, [pc, #28]	; (80053ec <rf24_urci_get_datarate+0x50>)
 80053d0:	603b      	str	r3, [r7, #0]
			return str;
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	e000      	b.n	80053d8 <rf24_urci_get_datarate+0x3c>
	}

	return str;
 80053d6:	683b      	ldr	r3, [r7, #0]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3708      	adds	r7, #8
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	080081e4 	.word	0x080081e4
 80053e4:	0800879c 	.word	0x0800879c
 80053e8:	080087a4 	.word	0x080087a4
 80053ec:	080087ac 	.word	0x080087ac

080053f0 <rf24_urci_print_help>:
	rf24_set_autoretransmit_delay(rf24_autoretransmit_delay_750us);
	rf24_set_autoretransmit_count(rf24_autoretransmit_count_15);*/
}

void rf24_urci_print_help(void)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
	for(int i=0; i < sizeof(urci_cmds)/sizeof(urci_cmds[0]); i++)
 80053f6:	2300      	movs	r3, #0
 80053f8:	607b      	str	r3, [r7, #4]
 80053fa:	e048      	b.n	800548e <rf24_urci_print_help+0x9e>
	{
		if(urci_cmds[i].description){
 80053fc:	4927      	ldr	r1, [pc, #156]	; (800549c <rf24_urci_print_help+0xac>)
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	4613      	mov	r3, r2
 8005402:	00db      	lsls	r3, r3, #3
 8005404:	4413      	add	r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	440b      	add	r3, r1
 800540a:	3304      	adds	r3, #4
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d018      	beq.n	8005444 <rf24_urci_print_help+0x54>
			sprintf(urci_buffer_128, "%-25s %s",  urci_cmds[i].name, urci_cmds[i].description);
 8005412:	4922      	ldr	r1, [pc, #136]	; (800549c <rf24_urci_print_help+0xac>)
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	4613      	mov	r3, r2
 8005418:	00db      	lsls	r3, r3, #3
 800541a:	4413      	add	r3, r2
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	440b      	add	r3, r1
 8005420:	6818      	ldr	r0, [r3, #0]
 8005422:	491e      	ldr	r1, [pc, #120]	; (800549c <rf24_urci_print_help+0xac>)
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	4613      	mov	r3, r2
 8005428:	00db      	lsls	r3, r3, #3
 800542a:	4413      	add	r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	440b      	add	r3, r1
 8005430:	3304      	adds	r3, #4
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4602      	mov	r2, r0
 8005436:	491a      	ldr	r1, [pc, #104]	; (80054a0 <rf24_urci_print_help+0xb0>)
 8005438:	481a      	ldr	r0, [pc, #104]	; (80054a4 <rf24_urci_print_help+0xb4>)
 800543a:	f000 fe1b 	bl	8006074 <siprintf>
			rf24_stm32f1xx_usart_write_line(urci_buffer_128);
 800543e:	4819      	ldr	r0, [pc, #100]	; (80054a4 <rf24_urci_print_help+0xb4>)
 8005440:	f7ff fe33 	bl	80050aa <rf24_stm32f1xx_usart_write_line>
		}

		if(urci_cmds[i].details){
 8005444:	4915      	ldr	r1, [pc, #84]	; (800549c <rf24_urci_print_help+0xac>)
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	4613      	mov	r3, r2
 800544a:	00db      	lsls	r3, r3, #3
 800544c:	4413      	add	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	440b      	add	r3, r1
 8005452:	3308      	adds	r3, #8
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d013      	beq.n	8005482 <rf24_urci_print_help+0x92>
			urci_buffer_128[0] = '\0';
 800545a:	4b12      	ldr	r3, [pc, #72]	; (80054a4 <rf24_urci_print_help+0xb4>)
 800545c:	2200      	movs	r2, #0
 800545e:	701a      	strb	r2, [r3, #0]
			sprintf(urci_buffer_128, "%-25s %s", "", urci_cmds[i].details);
 8005460:	490e      	ldr	r1, [pc, #56]	; (800549c <rf24_urci_print_help+0xac>)
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	4613      	mov	r3, r2
 8005466:	00db      	lsls	r3, r3, #3
 8005468:	4413      	add	r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	440b      	add	r3, r1
 800546e:	3308      	adds	r3, #8
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a0d      	ldr	r2, [pc, #52]	; (80054a8 <rf24_urci_print_help+0xb8>)
 8005474:	490a      	ldr	r1, [pc, #40]	; (80054a0 <rf24_urci_print_help+0xb0>)
 8005476:	480b      	ldr	r0, [pc, #44]	; (80054a4 <rf24_urci_print_help+0xb4>)
 8005478:	f000 fdfc 	bl	8006074 <siprintf>
			rf24_stm32f1xx_usart_write_line(urci_buffer_128);
 800547c:	4809      	ldr	r0, [pc, #36]	; (80054a4 <rf24_urci_print_help+0xb4>)
 800547e:	f7ff fe14 	bl	80050aa <rf24_stm32f1xx_usart_write_line>
		}

		rf24_stm32f1xx_usart_write_line("");
 8005482:	4809      	ldr	r0, [pc, #36]	; (80054a8 <rf24_urci_print_help+0xb8>)
 8005484:	f7ff fe11 	bl	80050aa <rf24_stm32f1xx_usart_write_line>
	for(int i=0; i < sizeof(urci_cmds)/sizeof(urci_cmds[0]); i++)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	3301      	adds	r3, #1
 800548c:	607b      	str	r3, [r7, #4]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2b1b      	cmp	r3, #27
 8005492:	d9b3      	bls.n	80053fc <rf24_urci_print_help+0xc>
	}
}
 8005494:	bf00      	nop
 8005496:	3708      	adds	r7, #8
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	08008820 	.word	0x08008820
 80054a0:	080087b4 	.word	0x080087b4
 80054a4:	20000844 	.word	0x20000844
 80054a8:	080081e4 	.word	0x080081e4

080054ac <rf24_urci_help>:

void rf24_urci_help(char *str)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
	for(int i=0; i < sizeof(urci_cmds)/sizeof(urci_cmds[0]); i++)
 80054b4:	2300      	movs	r3, #0
 80054b6:	60fb      	str	r3, [r7, #12]
 80054b8:	e02a      	b.n	8005510 <rf24_urci_help+0x64>
	{
		if(strcmp(urci_cmds[i].name, str) == 0)
 80054ba:	4919      	ldr	r1, [pc, #100]	; (8005520 <rf24_urci_help+0x74>)
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	4613      	mov	r3, r2
 80054c0:	00db      	lsls	r3, r3, #3
 80054c2:	4413      	add	r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	440b      	add	r3, r1
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	6879      	ldr	r1, [r7, #4]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7fa fe3d 	bl	800014c <strcmp>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d118      	bne.n	800550a <rf24_urci_help+0x5e>
		{
			sprintf(urci_buffer_128, "%-25s %s",  urci_cmds[i].name, urci_cmds[i].description);
 80054d8:	4911      	ldr	r1, [pc, #68]	; (8005520 <rf24_urci_help+0x74>)
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	4613      	mov	r3, r2
 80054de:	00db      	lsls	r3, r3, #3
 80054e0:	4413      	add	r3, r2
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	440b      	add	r3, r1
 80054e6:	6818      	ldr	r0, [r3, #0]
 80054e8:	490d      	ldr	r1, [pc, #52]	; (8005520 <rf24_urci_help+0x74>)
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	4613      	mov	r3, r2
 80054ee:	00db      	lsls	r3, r3, #3
 80054f0:	4413      	add	r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	440b      	add	r3, r1
 80054f6:	3304      	adds	r3, #4
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4602      	mov	r2, r0
 80054fc:	4909      	ldr	r1, [pc, #36]	; (8005524 <rf24_urci_help+0x78>)
 80054fe:	480a      	ldr	r0, [pc, #40]	; (8005528 <rf24_urci_help+0x7c>)
 8005500:	f000 fdb8 	bl	8006074 <siprintf>
			rf24_stm32f1xx_usart_write_line(urci_buffer_128);
 8005504:	4808      	ldr	r0, [pc, #32]	; (8005528 <rf24_urci_help+0x7c>)
 8005506:	f7ff fdd0 	bl	80050aa <rf24_stm32f1xx_usart_write_line>
	for(int i=0; i < sizeof(urci_cmds)/sizeof(urci_cmds[0]); i++)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	3301      	adds	r3, #1
 800550e:	60fb      	str	r3, [r7, #12]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2b1b      	cmp	r3, #27
 8005514:	d9d1      	bls.n	80054ba <rf24_urci_help+0xe>
		}
	}
}
 8005516:	bf00      	nop
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	08008820 	.word	0x08008820
 8005524:	080087b4 	.word	0x080087b4
 8005528:	20000844 	.word	0x20000844

0800552c <rf24_urci_set_crc_length>:
	uint8_t config = rf24_module_read_register(CONFIG);
	rf24_stm32f1xx_usart_write_line(decimal_to_binary(config));
}

void rf24_urci_set_crc_length(uint8_t crc_length)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	4603      	mov	r3, r0
 8005534:	71fb      	strb	r3, [r7, #7]
	switch(crc_length){
 8005536:	79fb      	ldrb	r3, [r7, #7]
 8005538:	2b08      	cmp	r3, #8
 800553a:	d007      	beq.n	800554c <rf24_urci_set_crc_length+0x20>
 800553c:	2b10      	cmp	r3, #16
 800553e:	d009      	beq.n	8005554 <rf24_urci_set_crc_length+0x28>
 8005540:	2b00      	cmp	r3, #0
 8005542:	d000      	beq.n	8005546 <rf24_urci_set_crc_length+0x1a>
		case 0: rf24_module_disable_crc(); break;
		case 8: rf24_module_set_crc_length(rf24_module_crc_length_1byte); break;
		case 16: rf24_module_set_crc_length(rf24_module_crc_length_2bytes); break;
		default:break;
 8005544:	e00a      	b.n	800555c <rf24_urci_set_crc_length+0x30>
		case 0: rf24_module_disable_crc(); break;
 8005546:	f7fc fa47 	bl	80019d8 <rf24_module_disable_crc>
 800554a:	e007      	b.n	800555c <rf24_urci_set_crc_length+0x30>
		case 8: rf24_module_set_crc_length(rf24_module_crc_length_1byte); break;
 800554c:	2000      	movs	r0, #0
 800554e:	f7fc fa63 	bl	8001a18 <rf24_module_set_crc_length>
 8005552:	e003      	b.n	800555c <rf24_urci_set_crc_length+0x30>
		case 16: rf24_module_set_crc_length(rf24_module_crc_length_2bytes); break;
 8005554:	2001      	movs	r0, #1
 8005556:	f7fc fa5f 	bl	8001a18 <rf24_module_set_crc_length>
 800555a:	bf00      	nop
	}
}
 800555c:	bf00      	nop
 800555e:	3708      	adds	r7, #8
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <rf24_urci_get_crc_length>:

uint8_t rf24_urci_get_crc_length()
{
 8005564:	b580      	push	{r7, lr}
 8005566:	af00      	add	r7, sp, #0
	if(rf24_module_crc_enabled())
 8005568:	f7fc fa46 	bl	80019f8 <rf24_module_crc_enabled>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d007      	beq.n	8005582 <rf24_urci_get_crc_length+0x1e>
	{
		return ( rf24_module_get_crc_length() + 1) * 8;
 8005572:	f7fc fa6d 	bl	8001a50 <rf24_module_get_crc_length>
 8005576:	4603      	mov	r3, r0
 8005578:	3301      	adds	r3, #1
 800557a:	b2db      	uxtb	r3, r3
 800557c:	00db      	lsls	r3, r3, #3
 800557e:	b2db      	uxtb	r3, r3
 8005580:	e000      	b.n	8005584 <rf24_urci_get_crc_length+0x20>
	}
	else return 0;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	bd80      	pop	{r7, pc}

08005588 <rf24_urci_set_tx_address>:

void rf24_urci_set_tx_address(char *str)
{
 8005588:	b5b0      	push	{r4, r5, r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	466b      	mov	r3, sp
 8005592:	461d      	mov	r5, r3
	// read configured address width from chip
	uint8_t address_width = rf24_module_get_address_width();
 8005594:	f7fc face 	bl	8001b34 <rf24_module_get_address_width>
 8005598:	4603      	mov	r3, r0
 800559a:	75fb      	strb	r3, [r7, #23]

	// array to hold converted string address into byte array
	uint8_t address[address_width];
 800559c:	7df8      	ldrb	r0, [r7, #23]
 800559e:	4603      	mov	r3, r0
 80055a0:	3b01      	subs	r3, #1
 80055a2:	613b      	str	r3, [r7, #16]
 80055a4:	b2c1      	uxtb	r1, r0
 80055a6:	f04f 0200 	mov.w	r2, #0
 80055aa:	f04f 0300 	mov.w	r3, #0
 80055ae:	f04f 0400 	mov.w	r4, #0
 80055b2:	00d4      	lsls	r4, r2, #3
 80055b4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80055b8:	00cb      	lsls	r3, r1, #3
 80055ba:	b2c1      	uxtb	r1, r0
 80055bc:	f04f 0200 	mov.w	r2, #0
 80055c0:	f04f 0300 	mov.w	r3, #0
 80055c4:	f04f 0400 	mov.w	r4, #0
 80055c8:	00d4      	lsls	r4, r2, #3
 80055ca:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80055ce:	00cb      	lsls	r3, r1, #3
 80055d0:	4603      	mov	r3, r0
 80055d2:	3307      	adds	r3, #7
 80055d4:	08db      	lsrs	r3, r3, #3
 80055d6:	00db      	lsls	r3, r3, #3
 80055d8:	ebad 0d03 	sub.w	sp, sp, r3
 80055dc:	466b      	mov	r3, sp
 80055de:	3300      	adds	r3, #0
 80055e0:	60fb      	str	r3, [r7, #12]

	// convert string address into byte address
	string_to_bytes(str, ".,:;", address, address_width);
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	7dfb      	ldrb	r3, [r7, #23]
 80055e6:	4907      	ldr	r1, [pc, #28]	; (8005604 <rf24_urci_set_tx_address+0x7c>)
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 fb2f 	bl	8005c4c <string_to_bytes>

	// set tx address
	rf24_module_set_tx_address(address, address_width);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	7dfa      	ldrb	r2, [r7, #23]
 80055f2:	4611      	mov	r1, r2
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7fc fc15 	bl	8001e24 <rf24_module_set_tx_address>
 80055fa:	46ad      	mov	sp, r5
}
 80055fc:	bf00      	nop
 80055fe:	3718      	adds	r7, #24
 8005600:	46bd      	mov	sp, r7
 8005602:	bdb0      	pop	{r4, r5, r7, pc}
 8005604:	08008794 	.word	0x08008794

08005608 <rf24_urci_get_tx_address>:

char* rf24_urci_get_tx_address(void)
{
 8005608:	b5b0      	push	{r4, r5, r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	466b      	mov	r3, sp
 8005610:	461d      	mov	r5, r3
	// read configured address width from chip
	uint8_t address_width = rf24_module_get_address_width();
 8005612:	f7fc fa8f 	bl	8001b34 <rf24_module_get_address_width>
 8005616:	4603      	mov	r3, r0
 8005618:	73fb      	strb	r3, [r7, #15]

	// array to hold converted string address into byte array
	uint8_t address[address_width];
 800561a:	7bf8      	ldrb	r0, [r7, #15]
 800561c:	4603      	mov	r3, r0
 800561e:	3b01      	subs	r3, #1
 8005620:	60bb      	str	r3, [r7, #8]
 8005622:	b2c1      	uxtb	r1, r0
 8005624:	f04f 0200 	mov.w	r2, #0
 8005628:	f04f 0300 	mov.w	r3, #0
 800562c:	f04f 0400 	mov.w	r4, #0
 8005630:	00d4      	lsls	r4, r2, #3
 8005632:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8005636:	00cb      	lsls	r3, r1, #3
 8005638:	b2c1      	uxtb	r1, r0
 800563a:	f04f 0200 	mov.w	r2, #0
 800563e:	f04f 0300 	mov.w	r3, #0
 8005642:	f04f 0400 	mov.w	r4, #0
 8005646:	00d4      	lsls	r4, r2, #3
 8005648:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800564c:	00cb      	lsls	r3, r1, #3
 800564e:	4603      	mov	r3, r0
 8005650:	3307      	adds	r3, #7
 8005652:	08db      	lsrs	r3, r3, #3
 8005654:	00db      	lsls	r3, r3, #3
 8005656:	ebad 0d03 	sub.w	sp, sp, r3
 800565a:	466b      	mov	r3, sp
 800565c:	3300      	adds	r3, #0
 800565e:	607b      	str	r3, [r7, #4]

	// read tx address from chip
	rf24_module_get_tx_address(address);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4618      	mov	r0, r3
 8005664:	f7fc fbf8 	bl	8001e58 <rf24_module_get_tx_address>

	// convert byte array into string and store it in urci_buffer_32
	bytes_to_string(address, address_width, ':', urci_buffer_32);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	7bf9      	ldrb	r1, [r7, #15]
 800566c:	4b04      	ldr	r3, [pc, #16]	; (8005680 <rf24_urci_get_tx_address+0x78>)
 800566e:	223a      	movs	r2, #58	; 0x3a
 8005670:	f000 fb14 	bl	8005c9c <bytes_to_string>

	// return pointer to urci_buffer_32
	return urci_buffer_32;
 8005674:	4b02      	ldr	r3, [pc, #8]	; (8005680 <rf24_urci_get_tx_address+0x78>)
 8005676:	46ad      	mov	sp, r5
}
 8005678:	4618      	mov	r0, r3
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bdb0      	pop	{r4, r5, r7, pc}
 8005680:	20000824 	.word	0x20000824

08005684 <rf24_urci_get_attribute_value>:

void rf24_urci_get_attribute_value(char* attribute_identifier, char* attribute_value){
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]

	int i = 0, k = 0;
 800568e:	2300      	movs	r3, #0
 8005690:	60fb      	str	r3, [r7, #12]
 8005692:	2300      	movs	r3, #0
 8005694:	60bb      	str	r3, [r7, #8]

	while(urci_buffer_32[attribute_pos + i] != '\0' && ((attribute_pos+i) < sizeof(urci_buffer_32)))
 8005696:	e021      	b.n	80056dc <rf24_urci_get_attribute_value+0x58>
	{
		//usart_write_byte(urci_buffer_32[attribute_pos+i]);

		if(i <= sizeof(attribute_identifier))
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2b04      	cmp	r3, #4
 800569c:	d80d      	bhi.n	80056ba <rf24_urci_get_attribute_value+0x36>
		{
			if(urci_buffer_32[attribute_pos + i] != attribute_identifier[i])
 800569e:	4b1c      	ldr	r3, [pc, #112]	; (8005710 <rf24_urci_get_attribute_value+0x8c>)
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	461a      	mov	r2, r3
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	4413      	add	r3, r2
 80056a8:	4a1a      	ldr	r2, [pc, #104]	; (8005714 <rf24_urci_get_attribute_value+0x90>)
 80056aa:	5cd2      	ldrb	r2, [r2, r3]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6879      	ldr	r1, [r7, #4]
 80056b0:	440b      	add	r3, r1
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d00e      	beq.n	80056d6 <rf24_urci_get_attribute_value+0x52>
			{
				//fuck: no attribute_identifier in input string found
				return;
 80056b8:	e025      	b.n	8005706 <rf24_urci_get_attribute_value+0x82>
			}
		}
		else
		{
			attribute_value[k++] = urci_buffer_32[attribute_pos + i];
 80056ba:	4b15      	ldr	r3, [pc, #84]	; (8005710 <rf24_urci_get_attribute_value+0x8c>)
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	461a      	mov	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	441a      	add	r2, r3
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	1c59      	adds	r1, r3, #1
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	4619      	mov	r1, r3
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	440b      	add	r3, r1
 80056d0:	4910      	ldr	r1, [pc, #64]	; (8005714 <rf24_urci_get_attribute_value+0x90>)
 80056d2:	5c8a      	ldrb	r2, [r1, r2]
 80056d4:	701a      	strb	r2, [r3, #0]
		}

		i++;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	3301      	adds	r3, #1
 80056da:	60fb      	str	r3, [r7, #12]
	while(urci_buffer_32[attribute_pos + i] != '\0' && ((attribute_pos+i) < sizeof(urci_buffer_32)))
 80056dc:	4b0c      	ldr	r3, [pc, #48]	; (8005710 <rf24_urci_get_attribute_value+0x8c>)
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	461a      	mov	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	4413      	add	r3, r2
 80056e6:	4a0b      	ldr	r2, [pc, #44]	; (8005714 <rf24_urci_get_attribute_value+0x90>)
 80056e8:	5cd3      	ldrb	r3, [r2, r3]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d006      	beq.n	80056fc <rf24_urci_get_attribute_value+0x78>
 80056ee:	4b08      	ldr	r3, [pc, #32]	; (8005710 <rf24_urci_get_attribute_value+0x8c>)
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	461a      	mov	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	4413      	add	r3, r2
 80056f8:	2b1f      	cmp	r3, #31
 80056fa:	d9cd      	bls.n	8005698 <rf24_urci_get_attribute_value+0x14>
	}

	attribute_value[k] = '\0';
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	683a      	ldr	r2, [r7, #0]
 8005700:	4413      	add	r3, r2
 8005702:	2200      	movs	r2, #0
 8005704:	701a      	strb	r2, [r3, #0]
}
 8005706:	3714      	adds	r7, #20
 8005708:	46bd      	mov	sp, r7
 800570a:	bc80      	pop	{r7}
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	200005ee 	.word	0x200005ee
 8005714:	20000824 	.word	0x20000824

08005718 <rf24_urci_set_rx_address>:


void rf24_urci_set_rx_address(char *str)
{
 8005718:	b5b0      	push	{r4, r5, r7, lr}
 800571a:	b088      	sub	sp, #32
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
	// read pipe number from input string
	char attribute_value[5];
	rf24_urci_get_attribute_value(".pipe", attribute_value);
 8005720:	f107 030c 	add.w	r3, r7, #12
 8005724:	4619      	mov	r1, r3
 8005726:	4834      	ldr	r0, [pc, #208]	; (80057f8 <rf24_urci_set_rx_address+0xe0>)
 8005728:	f7ff ffac 	bl	8005684 <rf24_urci_get_attribute_value>
	uint8_t rx_pipe = atoi(attribute_value);
 800572c:	f107 030c 	add.w	r3, r7, #12
 8005730:	4618      	mov	r0, r3
 8005732:	f000 fb1c 	bl	8005d6e <atoi>
 8005736:	4603      	mov	r3, r0
 8005738:	77fb      	strb	r3, [r7, #31]

	switch(rx_pipe)
 800573a:	7ffb      	ldrb	r3, [r7, #31]
 800573c:	2b05      	cmp	r3, #5
 800573e:	d857      	bhi.n	80057f0 <rf24_urci_set_rx_address+0xd8>
 8005740:	a201      	add	r2, pc, #4	; (adr r2, 8005748 <rf24_urci_set_rx_address+0x30>)
 8005742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005746:	bf00      	nop
 8005748:	08005761 	.word	0x08005761
 800574c:	08005761 	.word	0x08005761
 8005750:	080057d5 	.word	0x080057d5
 8005754:	080057d5 	.word	0x080057d5
 8005758:	080057d5 	.word	0x080057d5
 800575c:	080057d5 	.word	0x080057d5
	{
		// rx address pipe 0 and pipe 1 are 5 byte registers
		case 0: case 1:
		{
 8005760:	466b      	mov	r3, sp
 8005762:	461d      	mov	r5, r3
			// read configured address width from chip
			uint8_t address_width = rf24_module_get_address_width();
 8005764:	f7fc f9e6 	bl	8001b34 <rf24_module_get_address_width>
 8005768:	4603      	mov	r3, r0
 800576a:	777b      	strb	r3, [r7, #29]

			// array to hold converted string address into byte array
			uint8_t address[address_width];
 800576c:	7f78      	ldrb	r0, [r7, #29]
 800576e:	4603      	mov	r3, r0
 8005770:	3b01      	subs	r3, #1
 8005772:	61bb      	str	r3, [r7, #24]
 8005774:	b2c1      	uxtb	r1, r0
 8005776:	f04f 0200 	mov.w	r2, #0
 800577a:	f04f 0300 	mov.w	r3, #0
 800577e:	f04f 0400 	mov.w	r4, #0
 8005782:	00d4      	lsls	r4, r2, #3
 8005784:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8005788:	00cb      	lsls	r3, r1, #3
 800578a:	b2c1      	uxtb	r1, r0
 800578c:	f04f 0200 	mov.w	r2, #0
 8005790:	f04f 0300 	mov.w	r3, #0
 8005794:	f04f 0400 	mov.w	r4, #0
 8005798:	00d4      	lsls	r4, r2, #3
 800579a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800579e:	00cb      	lsls	r3, r1, #3
 80057a0:	4603      	mov	r3, r0
 80057a2:	3307      	adds	r3, #7
 80057a4:	08db      	lsrs	r3, r3, #3
 80057a6:	00db      	lsls	r3, r3, #3
 80057a8:	ebad 0d03 	sub.w	sp, sp, r3
 80057ac:	466b      	mov	r3, sp
 80057ae:	3300      	adds	r3, #0
 80057b0:	617b      	str	r3, [r7, #20]

			// convert string address into byte address
			string_to_bytes(str, ".,:;", address, address_width);
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	7f7b      	ldrb	r3, [r7, #29]
 80057b6:	4911      	ldr	r1, [pc, #68]	; (80057fc <rf24_urci_set_rx_address+0xe4>)
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 fa47 	bl	8005c4c <string_to_bytes>

			// write address
			rf24_module_readwrite_register(write, RX_ADDR_P0 + rx_pipe, address, address_width);
 80057be:	7ffb      	ldrb	r3, [r7, #31]
 80057c0:	330a      	adds	r3, #10
 80057c2:	b2d9      	uxtb	r1, r3
 80057c4:	697a      	ldr	r2, [r7, #20]
 80057c6:	7f7b      	ldrb	r3, [r7, #29]
 80057c8:	2001      	movs	r0, #1
 80057ca:	f7fb ff50 	bl	800166e <rf24_module_readwrite_register>
			return;
 80057ce:	bf00      	nop
 80057d0:	46ad      	mov	sp, r5
 80057d2:	e00d      	b.n	80057f0 <rf24_urci_set_rx_address+0xd8>
		}

		// rx address pipe 2 - 5 are 8 bit registers
		case 2: case 3: case 4: case 5:
		{
			uint8_t address = atoi(str);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 faca 	bl	8005d6e <atoi>
 80057da:	4603      	mov	r3, r0
 80057dc:	77bb      	strb	r3, [r7, #30]
			rf24_module_write_register(RX_ADDR_P0 + rx_pipe, address);
 80057de:	7ffb      	ldrb	r3, [r7, #31]
 80057e0:	330a      	adds	r3, #10
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	7fba      	ldrb	r2, [r7, #30]
 80057e6:	4611      	mov	r1, r2
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7fb ff1f 	bl	800162c <rf24_module_write_register>
			return;
 80057ee:	bf00      	nop
		}
	}
}
 80057f0:	3720      	adds	r7, #32
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bdb0      	pop	{r4, r5, r7, pc}
 80057f6:	bf00      	nop
 80057f8:	080087c0 	.word	0x080087c0
 80057fc:	08008794 	.word	0x08008794

08005800 <rf24_urci_get_rx_address>:

char* rf24_urci_get_rx_address()
{
 8005800:	b5b0      	push	{r4, r5, r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af00      	add	r7, sp, #0
 8005806:	466b      	mov	r3, sp
 8005808:	461d      	mov	r5, r3
	// read pipe number from input string
	char attribute_value[5];
	rf24_urci_get_attribute_value(".pipe", attribute_value);
 800580a:	1d3b      	adds	r3, r7, #4
 800580c:	4619      	mov	r1, r3
 800580e:	4836      	ldr	r0, [pc, #216]	; (80058e8 <rf24_urci_get_rx_address+0xe8>)
 8005810:	f7ff ff38 	bl	8005684 <rf24_urci_get_attribute_value>
	uint8_t rx_pipe = atoi(attribute_value);
 8005814:	1d3b      	adds	r3, r7, #4
 8005816:	4618      	mov	r0, r3
 8005818:	f000 faa9 	bl	8005d6e <atoi>
 800581c:	4603      	mov	r3, r0
 800581e:	75fb      	strb	r3, [r7, #23]

	// get current address width from chip
	uint8_t address_width = rf24_module_get_address_width();
 8005820:	f7fc f988 	bl	8001b34 <rf24_module_get_address_width>
 8005824:	4603      	mov	r3, r0
 8005826:	75bb      	strb	r3, [r7, #22]

	// create an array to hold rx address
	uint8_t address[address_width];
 8005828:	7db8      	ldrb	r0, [r7, #22]
 800582a:	4603      	mov	r3, r0
 800582c:	3b01      	subs	r3, #1
 800582e:	613b      	str	r3, [r7, #16]
 8005830:	b2c1      	uxtb	r1, r0
 8005832:	f04f 0200 	mov.w	r2, #0
 8005836:	f04f 0300 	mov.w	r3, #0
 800583a:	f04f 0400 	mov.w	r4, #0
 800583e:	00d4      	lsls	r4, r2, #3
 8005840:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8005844:	00cb      	lsls	r3, r1, #3
 8005846:	b2c1      	uxtb	r1, r0
 8005848:	f04f 0200 	mov.w	r2, #0
 800584c:	f04f 0300 	mov.w	r3, #0
 8005850:	f04f 0400 	mov.w	r4, #0
 8005854:	00d4      	lsls	r4, r2, #3
 8005856:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800585a:	00cb      	lsls	r3, r1, #3
 800585c:	4603      	mov	r3, r0
 800585e:	3307      	adds	r3, #7
 8005860:	08db      	lsrs	r3, r3, #3
 8005862:	00db      	lsls	r3, r3, #3
 8005864:	ebad 0d03 	sub.w	sp, sp, r3
 8005868:	466b      	mov	r3, sp
 800586a:	3300      	adds	r3, #0
 800586c:	60fb      	str	r3, [r7, #12]

	switch(rx_pipe)
 800586e:	7dfb      	ldrb	r3, [r7, #23]
 8005870:	2b05      	cmp	r3, #5
 8005872:	d82b      	bhi.n	80058cc <rf24_urci_get_rx_address+0xcc>
 8005874:	a201      	add	r2, pc, #4	; (adr r2, 800587c <rf24_urci_get_rx_address+0x7c>)
 8005876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800587a:	bf00      	nop
 800587c:	08005895 	.word	0x08005895
 8005880:	08005895 	.word	0x08005895
 8005884:	080058a7 	.word	0x080058a7
 8005888:	080058a7 	.word	0x080058a7
 800588c:	080058a7 	.word	0x080058a7
 8005890:	080058a7 	.word	0x080058a7
	{
		case 0: case 1:
		{
			rf24_module_readwrite_register(read, RX_ADDR_P0 + rx_pipe, address, address_width);
 8005894:	7dfb      	ldrb	r3, [r7, #23]
 8005896:	330a      	adds	r3, #10
 8005898:	b2d9      	uxtb	r1, r3
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	7dbb      	ldrb	r3, [r7, #22]
 800589e:	2000      	movs	r0, #0
 80058a0:	f7fb fee5 	bl	800166e <rf24_module_readwrite_register>
			break;
 80058a4:	e012      	b.n	80058cc <rf24_urci_get_rx_address+0xcc>
		}
		case 2: case 3: case 4: case 5:
		{
			rf24_module_readwrite_register(read, RX_ADDR_P1, address, address_width);
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	7dbb      	ldrb	r3, [r7, #22]
 80058aa:	210b      	movs	r1, #11
 80058ac:	2000      	movs	r0, #0
 80058ae:	f7fb fede 	bl	800166e <rf24_module_readwrite_register>
			address[address_width-1] = rf24_module_read_register(RX_ADDR_P0 + rx_pipe);
 80058b2:	7dfb      	ldrb	r3, [r7, #23]
 80058b4:	330a      	adds	r3, #10
 80058b6:	b2da      	uxtb	r2, r3
 80058b8:	7dbb      	ldrb	r3, [r7, #22]
 80058ba:	1e5c      	subs	r4, r3, #1
 80058bc:	4610      	mov	r0, r2
 80058be:	f7fb fe9b 	bl	80015f8 <rf24_module_read_register>
 80058c2:	4603      	mov	r3, r0
 80058c4:	461a      	mov	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	551a      	strb	r2, [r3, r4]
			break;
 80058ca:	bf00      	nop
		}
	}

	// convert address into string and store in urci_buffer_128
	bytes_to_string(address, address_width, ":", urci_buffer_128);
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	4b07      	ldr	r3, [pc, #28]	; (80058ec <rf24_urci_get_rx_address+0xec>)
 80058d0:	b2da      	uxtb	r2, r3
 80058d2:	7db9      	ldrb	r1, [r7, #22]
 80058d4:	4b06      	ldr	r3, [pc, #24]	; (80058f0 <rf24_urci_get_rx_address+0xf0>)
 80058d6:	f000 f9e1 	bl	8005c9c <bytes_to_string>

	// return pointer of urci_buffer_128
	return urci_buffer_128;
 80058da:	4b05      	ldr	r3, [pc, #20]	; (80058f0 <rf24_urci_get_rx_address+0xf0>)
 80058dc:	46ad      	mov	sp, r5
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3718      	adds	r7, #24
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bdb0      	pop	{r4, r5, r7, pc}
 80058e6:	bf00      	nop
 80058e8:	080087c0 	.word	0x080087c0
 80058ec:	080087c8 	.word	0x080087c8
 80058f0:	20000844 	.word	0x20000844

080058f4 <rf24_urci_set_payload_width>:

void rf24_urci_set_payload_width(uint8_t payload_size)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	4603      	mov	r3, r0
 80058fc:	71fb      	strb	r3, [r7, #7]
	char attribute_value[5];

	// read pipe number from input string
	rf24_urci_get_attribute_value(".pipe", attribute_value);
 80058fe:	f107 0308 	add.w	r3, r7, #8
 8005902:	4619      	mov	r1, r3
 8005904:	480a      	ldr	r0, [pc, #40]	; (8005930 <rf24_urci_set_payload_width+0x3c>)
 8005906:	f7ff febd 	bl	8005684 <rf24_urci_get_attribute_value>
	uint8_t rx_pipe = atoi(attribute_value);
 800590a:	f107 0308 	add.w	r3, r7, #8
 800590e:	4618      	mov	r0, r3
 8005910:	f000 fa2d 	bl	8005d6e <atoi>
 8005914:	4603      	mov	r3, r0
 8005916:	73fb      	strb	r3, [r7, #15]

	rf24_module_write_register(RX_PW_P0 + rx_pipe, payload_size);
 8005918:	7bfb      	ldrb	r3, [r7, #15]
 800591a:	3311      	adds	r3, #17
 800591c:	b2db      	uxtb	r3, r3
 800591e:	79fa      	ldrb	r2, [r7, #7]
 8005920:	4611      	mov	r1, r2
 8005922:	4618      	mov	r0, r3
 8005924:	f7fb fe82 	bl	800162c <rf24_module_write_register>
}
 8005928:	bf00      	nop
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	080087c0 	.word	0x080087c0

08005934 <rf24_urci_get_payload_width>:

uint8_t rf24_urci_get_payload_width()
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
	char attribute_value[5];

	// read pipe number from input string
	rf24_urci_get_attribute_value(".pipe", attribute_value);
 800593a:	463b      	mov	r3, r7
 800593c:	4619      	mov	r1, r3
 800593e:	480a      	ldr	r0, [pc, #40]	; (8005968 <rf24_urci_get_payload_width+0x34>)
 8005940:	f7ff fea0 	bl	8005684 <rf24_urci_get_attribute_value>
	uint8_t rx_pipe = atoi(attribute_value);
 8005944:	463b      	mov	r3, r7
 8005946:	4618      	mov	r0, r3
 8005948:	f000 fa11 	bl	8005d6e <atoi>
 800594c:	4603      	mov	r3, r0
 800594e:	71fb      	strb	r3, [r7, #7]

	return rf24_module_read_register(RX_PW_P0 + rx_pipe);
 8005950:	79fb      	ldrb	r3, [r7, #7]
 8005952:	3311      	adds	r3, #17
 8005954:	b2db      	uxtb	r3, r3
 8005956:	4618      	mov	r0, r3
 8005958:	f7fb fe4e 	bl	80015f8 <rf24_module_read_register>
 800595c:	4603      	mov	r3, r0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3708      	adds	r7, #8
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	080087c0 	.word	0x080087c0

0800596c <rf24_urci_call>:
	flags.cmd_get = false;
	flags.cmd_set = false;
}

// assigns given command and values through uart to rf24 get and set functions
void rf24_urci_call(urci_cmd cmd){
 800596c:	b084      	sub	sp, #16
 800596e:	b580      	push	{r7, lr}
 8005970:	b08e      	sub	sp, #56	; 0x38
 8005972:	af00      	add	r7, sp, #0
 8005974:	f107 0c40 	add.w	ip, r7, #64	; 0x40
 8005978:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	uint8_t value;
	char str[50];

	// convert value array as defined type in command struct
	if(flags.cmd_set)
 800597c:	4b44      	ldr	r3, [pc, #272]	; (8005a90 <rf24_urci_call+0x124>)
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	f003 0320 	and.w	r3, r3, #32
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d01b      	beq.n	80059c2 <rf24_urci_call+0x56>
	{
		switch(cmd.set_type)
 800598a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800598e:	2b00      	cmp	r3, #0
 8005990:	d002      	beq.n	8005998 <rf24_urci_call+0x2c>
 8005992:	2b01      	cmp	r3, #1
 8005994:	d00c      	beq.n	80059b0 <rf24_urci_call+0x44>
			case rf24_urci_string:
			{
				cmd.fct_ptr_set_string(urci_buffer_128);
				break;
			}
			default: break;
 8005996:	e00f      	b.n	80059b8 <rf24_urci_call+0x4c>
				value = atoi(urci_buffer_128);
 8005998:	483e      	ldr	r0, [pc, #248]	; (8005a94 <rf24_urci_call+0x128>)
 800599a:	f000 f9e8 	bl	8005d6e <atoi>
 800599e:	4603      	mov	r3, r0
 80059a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				cmd.fct_ptr_set_uint8(value);
 80059a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059a6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80059aa:	4610      	mov	r0, r2
 80059ac:	4798      	blx	r3
				break;
 80059ae:	e003      	b.n	80059b8 <rf24_urci_call+0x4c>
				cmd.fct_ptr_set_string(urci_buffer_128);
 80059b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059b2:	4838      	ldr	r0, [pc, #224]	; (8005a94 <rf24_urci_call+0x128>)
 80059b4:	4798      	blx	r3
				break;
 80059b6:	bf00      	nop
		}
		flags.cmd_set = false;
 80059b8:	4a35      	ldr	r2, [pc, #212]	; (8005a90 <rf24_urci_call+0x124>)
 80059ba:	7813      	ldrb	r3, [r2, #0]
 80059bc:	f36f 1345 	bfc	r3, #5, #1
 80059c0:	7013      	strb	r3, [r2, #0]
	}

	if(flags.cmd_get)
 80059c2:	4b33      	ldr	r3, [pc, #204]	; (8005a90 <rf24_urci_call+0x124>)
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d058      	beq.n	8005a82 <rf24_urci_call+0x116>
	{
		switch(cmd.get_type)
 80059d0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d02b      	beq.n	8005a30 <rf24_urci_call+0xc4>
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d047      	beq.n	8005a6c <rf24_urci_call+0x100>
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d14b      	bne.n	8005a78 <rf24_urci_call+0x10c>
		{
			case rf24_urci_uint8:
			{
				rf24_stm32f1xx_usart_write_str(cmd.name);
 80059e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7ff fb46 	bl	8005074 <rf24_stm32f1xx_usart_write_str>
				if(flags.attribute){
 80059e8:	4b29      	ldr	r3, [pc, #164]	; (8005a90 <rf24_urci_call+0x124>)
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	f003 0310 	and.w	r3, r3, #16
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d008      	beq.n	8005a08 <rf24_urci_call+0x9c>
					rf24_urci_get_attribute_value(".pipe", str);
 80059f6:	1d3b      	adds	r3, r7, #4
 80059f8:	4619      	mov	r1, r3
 80059fa:	4827      	ldr	r0, [pc, #156]	; (8005a98 <rf24_urci_call+0x12c>)
 80059fc:	f7ff fe42 	bl	8005684 <rf24_urci_get_attribute_value>
					rf24_stm32f1xx_usart_write_str(str);
 8005a00:	1d3b      	adds	r3, r7, #4
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7ff fb36 	bl	8005074 <rf24_stm32f1xx_usart_write_str>
				}
				rf24_stm32f1xx_usart_write_byte(rf24_urci_separator_symbol);
 8005a08:	203d      	movs	r0, #61	; 0x3d
 8005a0a:	f7ff fb17 	bl	800503c <rf24_stm32f1xx_usart_write_byte>
				value = cmd.fct_ptr_get_uint8();
 8005a0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a10:	4798      	blx	r3
 8005a12:	4603      	mov	r3, r0
 8005a14:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				itoa(value, str, 10);
 8005a18:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a1c:	1d39      	adds	r1, r7, #4
 8005a1e:	220a      	movs	r2, #10
 8005a20:	4618      	mov	r0, r3
 8005a22:	f000 f9e5 	bl	8005df0 <itoa>
				rf24_stm32f1xx_usart_write_line(str);
 8005a26:	1d3b      	adds	r3, r7, #4
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7ff fb3e 	bl	80050aa <rf24_stm32f1xx_usart_write_line>
				break;
 8005a2e:	e023      	b.n	8005a78 <rf24_urci_call+0x10c>
			}
			case rf24_urci_string:
			{
				rf24_stm32f1xx_usart_write_str(cmd.name);
 8005a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7ff fb1e 	bl	8005074 <rf24_stm32f1xx_usart_write_str>
				if(flags.attribute){
 8005a38:	4b15      	ldr	r3, [pc, #84]	; (8005a90 <rf24_urci_call+0x124>)
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	f003 0310 	and.w	r3, r3, #16
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d008      	beq.n	8005a58 <rf24_urci_call+0xec>
					rf24_urci_get_attribute_value(".pipe", str);
 8005a46:	1d3b      	adds	r3, r7, #4
 8005a48:	4619      	mov	r1, r3
 8005a4a:	4813      	ldr	r0, [pc, #76]	; (8005a98 <rf24_urci_call+0x12c>)
 8005a4c:	f7ff fe1a 	bl	8005684 <rf24_urci_get_attribute_value>
					rf24_stm32f1xx_usart_write_str(str);
 8005a50:	1d3b      	adds	r3, r7, #4
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7ff fb0e 	bl	8005074 <rf24_stm32f1xx_usart_write_str>
				}
				rf24_stm32f1xx_usart_write_byte(rf24_urci_separator_symbol);
 8005a58:	203d      	movs	r0, #61	; 0x3d
 8005a5a:	f7ff faef 	bl	800503c <rf24_stm32f1xx_usart_write_byte>
				rf24_stm32f1xx_usart_write_line(cmd.fct_ptr_get_string());
 8005a5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a60:	4798      	blx	r3
 8005a62:	4603      	mov	r3, r0
 8005a64:	4618      	mov	r0, r3
 8005a66:	f7ff fb20 	bl	80050aa <rf24_stm32f1xx_usart_write_line>
				break;
 8005a6a:	e005      	b.n	8005a78 <rf24_urci_call+0x10c>
			}
			case rf24_urci_void:
			{
				cmd.fct_ptr();
 8005a6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a6e:	4798      	blx	r3
				rf24_stm32f1xx_usart_write_line("OK");
 8005a70:	480a      	ldr	r0, [pc, #40]	; (8005a9c <rf24_urci_call+0x130>)
 8005a72:	f7ff fb1a 	bl	80050aa <rf24_stm32f1xx_usart_write_line>
				break;
 8005a76:	bf00      	nop
			}
		}
		flags.cmd_get = false;
 8005a78:	4a05      	ldr	r2, [pc, #20]	; (8005a90 <rf24_urci_call+0x124>)
 8005a7a:	7813      	ldrb	r3, [r2, #0]
 8005a7c:	f36f 1386 	bfc	r3, #6, #1
 8005a80:	7013      	strb	r3, [r2, #0]
	}
}
 8005a82:	bf00      	nop
 8005a84:	3738      	adds	r7, #56	; 0x38
 8005a86:	46bd      	mov	sp, r7
 8005a88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a8c:	b004      	add	sp, #16
 8005a8e:	4770      	bx	lr
 8005a90:	200005ec 	.word	0x200005ec
 8005a94:	20000844 	.word	0x20000844
 8005a98:	080087c0 	.word	0x080087c0
 8005a9c:	080087cc 	.word	0x080087cc

08005aa0 <rf24_urci_match>:

void rf24_urci_match(){
 8005aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005aa2:	b089      	sub	sp, #36	; 0x24
 8005aa4:	af06      	add	r7, sp, #24
		usart_write_line(urci_buffer_32);
		usart_write_str("urci_buffer_128: ");
		usart_write_line(urci_buffer_128);*/
	#endif

	for(int i=0; i < sizeof(urci_cmds) / sizeof(urci_cmds[0]); i++)
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	607b      	str	r3, [r7, #4]
 8005aaa:	e023      	b.n	8005af4 <rf24_urci_match+0x54>
	{
		if(strcmp(urci_buffer_32, urci_cmds[i].name) == 0)
 8005aac:	4915      	ldr	r1, [pc, #84]	; (8005b04 <rf24_urci_match+0x64>)
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	00db      	lsls	r3, r3, #3
 8005ab4:	4413      	add	r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	440b      	add	r3, r1
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4619      	mov	r1, r3
 8005abe:	4812      	ldr	r0, [pc, #72]	; (8005b08 <rf24_urci_match+0x68>)
 8005ac0:	f7fa fb44 	bl	800014c <strcmp>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d111      	bne.n	8005aee <rf24_urci_match+0x4e>
			#ifdef DEBUG
				//usart_write_str("URCI_MATCH: ");
				//usart_write_line(URCI_CMDS[i].name);
			#endif

			rf24_urci_call(urci_cmds[i]);
 8005aca:	490e      	ldr	r1, [pc, #56]	; (8005b04 <rf24_urci_match+0x64>)
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	4613      	mov	r3, r2
 8005ad0:	00db      	lsls	r3, r3, #3
 8005ad2:	4413      	add	r3, r2
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	18ce      	adds	r6, r1, r3
 8005ad8:	466d      	mov	r5, sp
 8005ada:	f106 0410 	add.w	r4, r6, #16
 8005ade:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ae0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ae2:	6823      	ldr	r3, [r4, #0]
 8005ae4:	602b      	str	r3, [r5, #0]
 8005ae6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005aea:	f7ff ff3f 	bl	800596c <rf24_urci_call>
	for(int i=0; i < sizeof(urci_cmds) / sizeof(urci_cmds[0]); i++)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	3301      	adds	r3, #1
 8005af2:	607b      	str	r3, [r7, #4]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2b1b      	cmp	r3, #27
 8005af8:	d9d8      	bls.n	8005aac <rf24_urci_match+0xc>
		}
	}
}
 8005afa:	bf00      	nop
 8005afc:	370c      	adds	r7, #12
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b02:	bf00      	nop
 8005b04:	08008820 	.word	0x08008820
 8005b08:	20000824 	.word	0x20000824

08005b0c <rf24_urci_putc>:

- Takes single chars from uart buffer and writes them into the arrays RF24_URCI_COMMAND and RF24_URCI_VALUE.
- Converts uart inputs of the form "<rfchannel=1>" into RF24_URCI_COMMAND = "rfchannel", RF24_URCI_VALUE = "1".
- Command name is stored in buffer RF24_URCI_COMMAND, command value is stored in RF24_URCI_VALUE
*/
void rf24_urci_putc(char data){
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	4603      	mov	r3, r0
 8005b14:	71fb      	strb	r3, [r7, #7]

	switch(data){
 8005b16:	79fb      	ldrb	r3, [r7, #7]
 8005b18:	2b3d      	cmp	r3, #61	; 0x3d
 8005b1a:	d009      	beq.n	8005b30 <rf24_urci_putc+0x24>
 8005b1c:	2b3e      	cmp	r3, #62	; 0x3e
 8005b1e:	d01b      	beq.n	8005b58 <rf24_urci_putc+0x4c>
 8005b20:	2b3c      	cmp	r3, #60	; 0x3c
 8005b22:	d158      	bne.n	8005bd6 <rf24_urci_putc+0xca>
		// data is start symbol: '<'
		case rf24_urci_start_symbol:
			flags.start = true;												// remember start symbol detected to fill command array
 8005b24:	4a44      	ldr	r2, [pc, #272]	; (8005c38 <rf24_urci_putc+0x12c>)
 8005b26:	7813      	ldrb	r3, [r2, #0]
 8005b28:	f043 0302 	orr.w	r3, r3, #2
 8005b2c:	7013      	strb	r3, [r2, #0]
			break;
 8005b2e:	e07f      	b.n	8005c30 <rf24_urci_putc+0x124>

		// data is separator symbol: '='
		case rf24_urci_separator_symbol:
			flags.start = false;											// remember end of command array, beginning of value array
 8005b30:	4a41      	ldr	r2, [pc, #260]	; (8005c38 <rf24_urci_putc+0x12c>)
 8005b32:	7813      	ldrb	r3, [r2, #0]
 8005b34:	f36f 0341 	bfc	r3, #1, #1
 8005b38:	7013      	strb	r3, [r2, #0]
			flags.separator = true;											// remember separator found
 8005b3a:	4a3f      	ldr	r2, [pc, #252]	; (8005c38 <rf24_urci_putc+0x12c>)
 8005b3c:	7813      	ldrb	r3, [r2, #0]
 8005b3e:	f043 0308 	orr.w	r3, r3, #8
 8005b42:	7013      	strb	r3, [r2, #0]
			urci_buffer_32[counter] = '\0';									// null terminate command array
 8005b44:	4b3d      	ldr	r3, [pc, #244]	; (8005c3c <rf24_urci_putc+0x130>)
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	461a      	mov	r2, r3
 8005b4a:	4b3d      	ldr	r3, [pc, #244]	; (8005c40 <rf24_urci_putc+0x134>)
 8005b4c:	2100      	movs	r1, #0
 8005b4e:	5499      	strb	r1, [r3, r2]
			counter = 0;													// reset counter
 8005b50:	4b3a      	ldr	r3, [pc, #232]	; (8005c3c <rf24_urci_putc+0x130>)
 8005b52:	2200      	movs	r2, #0
 8005b54:	701a      	strb	r2, [r3, #0]
			break;
 8005b56:	e06b      	b.n	8005c30 <rf24_urci_putc+0x124>

		// data is termination symbol, reset flags and process command+value to a generic function: '>'
		case rf24_urci_end_symbol:
			if(flags.separator) flags.cmd_set = true;						// if a separator symbol is found, command is a SET type (write into rf-module register)
 8005b58:	4b37      	ldr	r3, [pc, #220]	; (8005c38 <rf24_urci_putc+0x12c>)
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	f003 0308 	and.w	r3, r3, #8
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d005      	beq.n	8005b72 <rf24_urci_putc+0x66>
 8005b66:	4a34      	ldr	r2, [pc, #208]	; (8005c38 <rf24_urci_putc+0x12c>)
 8005b68:	7813      	ldrb	r3, [r2, #0]
 8005b6a:	f043 0320 	orr.w	r3, r3, #32
 8005b6e:	7013      	strb	r3, [r2, #0]
 8005b70:	e004      	b.n	8005b7c <rf24_urci_putc+0x70>
			else flags.cmd_get = true;										// if no separator detected, command is a GET type (read from rf-module register)
 8005b72:	4a31      	ldr	r2, [pc, #196]	; (8005c38 <rf24_urci_putc+0x12c>)
 8005b74:	7813      	ldrb	r3, [r2, #0]
 8005b76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b7a:	7013      	strb	r3, [r2, #0]

			if(!flags.separator) urci_buffer_32[counter] = '\0';			// null terminate command array in case no separator was found
 8005b7c:	4b2e      	ldr	r3, [pc, #184]	; (8005c38 <rf24_urci_putc+0x12c>)
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	f003 0308 	and.w	r3, r3, #8
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d105      	bne.n	8005b96 <rf24_urci_putc+0x8a>
 8005b8a:	4b2c      	ldr	r3, [pc, #176]	; (8005c3c <rf24_urci_putc+0x130>)
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	461a      	mov	r2, r3
 8005b90:	4b2b      	ldr	r3, [pc, #172]	; (8005c40 <rf24_urci_putc+0x134>)
 8005b92:	2100      	movs	r1, #0
 8005b94:	5499      	strb	r1, [r3, r2]
			urci_buffer_128[counter] = '\0';								// null terminate value array
 8005b96:	4b29      	ldr	r3, [pc, #164]	; (8005c3c <rf24_urci_putc+0x130>)
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	4b29      	ldr	r3, [pc, #164]	; (8005c44 <rf24_urci_putc+0x138>)
 8005b9e:	2100      	movs	r1, #0
 8005ba0:	5499      	strb	r1, [r3, r2]

			flags.enable = false;											// stop reading chars into uart remote control routine (prevents calling rf24_urci_putc)
 8005ba2:	4a25      	ldr	r2, [pc, #148]	; (8005c38 <rf24_urci_putc+0x12c>)
 8005ba4:	7813      	ldrb	r3, [r2, #0]
 8005ba6:	f36f 0300 	bfc	r3, #0, #1
 8005baa:	7013      	strb	r3, [r2, #0]
			flags.start = false;											// reset start flag
 8005bac:	4a22      	ldr	r2, [pc, #136]	; (8005c38 <rf24_urci_putc+0x12c>)
 8005bae:	7813      	ldrb	r3, [r2, #0]
 8005bb0:	f36f 0341 	bfc	r3, #1, #1
 8005bb4:	7013      	strb	r3, [r2, #0]
			flags.separator = false;										// reset end flag
 8005bb6:	4a20      	ldr	r2, [pc, #128]	; (8005c38 <rf24_urci_putc+0x12c>)
 8005bb8:	7813      	ldrb	r3, [r2, #0]
 8005bba:	f36f 03c3 	bfc	r3, #3, #1
 8005bbe:	7013      	strb	r3, [r2, #0]
			flags.attribute = false;
 8005bc0:	4a1d      	ldr	r2, [pc, #116]	; (8005c38 <rf24_urci_putc+0x12c>)
 8005bc2:	7813      	ldrb	r3, [r2, #0]
 8005bc4:	f36f 1304 	bfc	r3, #4, #1
 8005bc8:	7013      	strb	r3, [r2, #0]
			counter = 0;													// reset counter
 8005bca:	4b1c      	ldr	r3, [pc, #112]	; (8005c3c <rf24_urci_putc+0x130>)
 8005bcc:	2200      	movs	r2, #0
 8005bce:	701a      	strb	r2, [r3, #0]

			rf24_urci_match();												// call rf24_urci_match which fetches the assigned rf24 function to the input command
 8005bd0:	f7ff ff66 	bl	8005aa0 <rf24_urci_match>
			break;
 8005bd4:	e02c      	b.n	8005c30 <rf24_urci_putc+0x124>

		// data is either part of command name or its value, proceed filling arrays
		default:
			if(flags.start) urci_buffer_32[counter] = data;					// fill command buffer
 8005bd6:	4b18      	ldr	r3, [pc, #96]	; (8005c38 <rf24_urci_putc+0x12c>)
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	f003 0302 	and.w	r3, r3, #2
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d005      	beq.n	8005bf0 <rf24_urci_putc+0xe4>
 8005be4:	4b15      	ldr	r3, [pc, #84]	; (8005c3c <rf24_urci_putc+0x130>)
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	4619      	mov	r1, r3
 8005bea:	4a15      	ldr	r2, [pc, #84]	; (8005c40 <rf24_urci_putc+0x134>)
 8005bec:	79fb      	ldrb	r3, [r7, #7]
 8005bee:	5453      	strb	r3, [r2, r1]
			if(flags.separator) urci_buffer_128[counter] = data;			// fill value buffer
 8005bf0:	4b11      	ldr	r3, [pc, #68]	; (8005c38 <rf24_urci_putc+0x12c>)
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	f003 0308 	and.w	r3, r3, #8
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d005      	beq.n	8005c0a <rf24_urci_putc+0xfe>
 8005bfe:	4b0f      	ldr	r3, [pc, #60]	; (8005c3c <rf24_urci_putc+0x130>)
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	4619      	mov	r1, r3
 8005c04:	4a0f      	ldr	r2, [pc, #60]	; (8005c44 <rf24_urci_putc+0x138>)
 8005c06:	79fb      	ldrb	r3, [r7, #7]
 8005c08:	5453      	strb	r3, [r2, r1]
			if(data == rf24_urci_attribute_symbol){
 8005c0a:	79fb      	ldrb	r3, [r7, #7]
 8005c0c:	2b2e      	cmp	r3, #46	; 0x2e
 8005c0e:	d108      	bne.n	8005c22 <rf24_urci_putc+0x116>
				flags.attribute = true;
 8005c10:	4a09      	ldr	r2, [pc, #36]	; (8005c38 <rf24_urci_putc+0x12c>)
 8005c12:	7813      	ldrb	r3, [r2, #0]
 8005c14:	f043 0310 	orr.w	r3, r3, #16
 8005c18:	7013      	strb	r3, [r2, #0]
				attribute_pos = counter;
 8005c1a:	4b08      	ldr	r3, [pc, #32]	; (8005c3c <rf24_urci_putc+0x130>)
 8005c1c:	781a      	ldrb	r2, [r3, #0]
 8005c1e:	4b0a      	ldr	r3, [pc, #40]	; (8005c48 <rf24_urci_putc+0x13c>)
 8005c20:	701a      	strb	r2, [r3, #0]
			}
			counter++;														// increment counter
 8005c22:	4b06      	ldr	r3, [pc, #24]	; (8005c3c <rf24_urci_putc+0x130>)
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	3301      	adds	r3, #1
 8005c28:	b2da      	uxtb	r2, r3
 8005c2a:	4b04      	ldr	r3, [pc, #16]	; (8005c3c <rf24_urci_putc+0x130>)
 8005c2c:	701a      	strb	r2, [r3, #0]
			break;
 8005c2e:	bf00      	nop
	}
}
 8005c30:	bf00      	nop
 8005c32:	3708      	adds	r7, #8
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	200005ec 	.word	0x200005ec
 8005c3c:	200005ed 	.word	0x200005ed
 8005c40:	20000824 	.word	0x20000824
 8005c44:	20000844 	.word	0x20000844
 8005c48:	200005ee 	.word	0x200005ee

08005c4c <string_to_bytes>:

// HELPER FUNCTIONS

uint8_t string_to_bytes(char *str_in, char* delimiters, uint8_t *array_out, uint8_t array_out_length){
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b086      	sub	sp, #24
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
 8005c58:	70fb      	strb	r3, [r7, #3]

	int count = 0;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	617b      	str	r3, [r7, #20]

	char *ptr = strtok(str_in, delimiters);
 8005c5e:	68b9      	ldr	r1, [r7, #8]
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f000 fa3f 	bl	80060e4 <strtok>
 8005c66:	6138      	str	r0, [r7, #16]

	while(ptr != NULL /*&& count<(array_out_length)*/) {
 8005c68:	e010      	b.n	8005c8c <string_to_bytes+0x40>
		array_out[count++] = atoi(ptr);
 8005c6a:	6938      	ldr	r0, [r7, #16]
 8005c6c:	f000 f87f 	bl	8005d6e <atoi>
 8005c70:	4601      	mov	r1, r0
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	1c5a      	adds	r2, r3, #1
 8005c76:	617a      	str	r2, [r7, #20]
 8005c78:	461a      	mov	r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	b2ca      	uxtb	r2, r1
 8005c80:	701a      	strb	r2, [r3, #0]
		ptr = strtok(NULL, delimiters);
 8005c82:	68b9      	ldr	r1, [r7, #8]
 8005c84:	2000      	movs	r0, #0
 8005c86:	f000 fa2d 	bl	80060e4 <strtok>
 8005c8a:	6138      	str	r0, [r7, #16]
	while(ptr != NULL /*&& count<(array_out_length)*/) {
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1eb      	bne.n	8005c6a <string_to_bytes+0x1e>
	}

	return true;
 8005c92:	2301      	movs	r3, #1
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3718      	adds	r7, #24
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <bytes_to_string>:

void bytes_to_string(uint8_t *address_in, uint8_t address_length, const char delimiter, char *str_out){
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b088      	sub	sp, #32
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	607b      	str	r3, [r7, #4]
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	72fb      	strb	r3, [r7, #11]
 8005caa:	4613      	mov	r3, r2
 8005cac:	72bb      	strb	r3, [r7, #10]

	bool first = true;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i < address_length; i++){
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	61bb      	str	r3, [r7, #24]
 8005cb6:	e02b      	b.n	8005d10 <bytes_to_string+0x74>

		char ascii_digits[4];
		itoa(address_in[i], ascii_digits, 10);
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f107 0314 	add.w	r3, r7, #20
 8005cc6:	220a      	movs	r2, #10
 8005cc8:	4619      	mov	r1, r3
 8005cca:	f000 f891 	bl	8005df0 <itoa>

		if(first){
 8005cce:	7ffb      	ldrb	r3, [r7, #31]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d008      	beq.n	8005ce6 <bytes_to_string+0x4a>
			strcpy(str_out, ascii_digits);
 8005cd4:	f107 0314 	add.w	r3, r7, #20
 8005cd8:	4619      	mov	r1, r3
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 f9f9 	bl	80060d2 <strcpy>
			first = false;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	77fb      	strb	r3, [r7, #31]
 8005ce4:	e011      	b.n	8005d0a <bytes_to_string+0x6e>
		}
		else{
			strcat(str_out, ":");
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f7fa fa3a 	bl	8000160 <strlen>
 8005cec:	4603      	mov	r3, r0
 8005cee:	461a      	mov	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	490a      	ldr	r1, [pc, #40]	; (8005d20 <bytes_to_string+0x84>)
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	881b      	ldrh	r3, [r3, #0]
 8005cfc:	8013      	strh	r3, [r2, #0]
			strcat(str_out, ascii_digits);
 8005cfe:	f107 0314 	add.w	r3, r7, #20
 8005d02:	4619      	mov	r1, r3
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 f9d5 	bl	80060b4 <strcat>
	for(int i=0; i < address_length; i++){
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	61bb      	str	r3, [r7, #24]
 8005d10:	7afb      	ldrb	r3, [r7, #11]
 8005d12:	69ba      	ldr	r2, [r7, #24]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	dbcf      	blt.n	8005cb8 <bytes_to_string+0x1c>
		}
	}
}
 8005d18:	bf00      	nop
 8005d1a:	3720      	adds	r7, #32
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	080087c8 	.word	0x080087c8

08005d24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005d24:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005d26:	e003      	b.n	8005d30 <LoopCopyDataInit>

08005d28 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005d28:	4b0b      	ldr	r3, [pc, #44]	; (8005d58 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8005d2a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005d2c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005d2e:	3104      	adds	r1, #4

08005d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005d30:	480a      	ldr	r0, [pc, #40]	; (8005d5c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005d32:	4b0b      	ldr	r3, [pc, #44]	; (8005d60 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005d34:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005d36:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005d38:	d3f6      	bcc.n	8005d28 <CopyDataInit>
  ldr r2, =_sbss
 8005d3a:	4a0a      	ldr	r2, [pc, #40]	; (8005d64 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005d3c:	e002      	b.n	8005d44 <LoopFillZerobss>

08005d3e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005d3e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005d40:	f842 3b04 	str.w	r3, [r2], #4

08005d44 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005d44:	4b08      	ldr	r3, [pc, #32]	; (8005d68 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8005d46:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005d48:	d3f9      	bcc.n	8005d3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005d4a:	f7fa fa17 	bl	800017c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005d4e:	f000 f813 	bl	8005d78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005d52:	f7fa fa0d 	bl	8000170 <main>
  bx lr
 8005d56:	4770      	bx	lr
  ldr r3, =_sidata
 8005d58:	08008d7c 	.word	0x08008d7c
  ldr r0, =_sdata
 8005d5c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005d60:	20000594 	.word	0x20000594
  ldr r2, =_sbss
 8005d64:	20000594 	.word	0x20000594
  ldr r3, = _ebss
 8005d68:	200008c8 	.word	0x200008c8

08005d6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005d6c:	e7fe      	b.n	8005d6c <ADC1_2_IRQHandler>

08005d6e <atoi>:
 8005d6e:	220a      	movs	r2, #10
 8005d70:	2100      	movs	r1, #0
 8005d72:	f000 ba87 	b.w	8006284 <strtol>
	...

08005d78 <__libc_init_array>:
 8005d78:	b570      	push	{r4, r5, r6, lr}
 8005d7a:	2500      	movs	r5, #0
 8005d7c:	4e0c      	ldr	r6, [pc, #48]	; (8005db0 <__libc_init_array+0x38>)
 8005d7e:	4c0d      	ldr	r4, [pc, #52]	; (8005db4 <__libc_init_array+0x3c>)
 8005d80:	1ba4      	subs	r4, r4, r6
 8005d82:	10a4      	asrs	r4, r4, #2
 8005d84:	42a5      	cmp	r5, r4
 8005d86:	d109      	bne.n	8005d9c <__libc_init_array+0x24>
 8005d88:	f000 fe32 	bl	80069f0 <_init>
 8005d8c:	2500      	movs	r5, #0
 8005d8e:	4e0a      	ldr	r6, [pc, #40]	; (8005db8 <__libc_init_array+0x40>)
 8005d90:	4c0a      	ldr	r4, [pc, #40]	; (8005dbc <__libc_init_array+0x44>)
 8005d92:	1ba4      	subs	r4, r4, r6
 8005d94:	10a4      	asrs	r4, r4, #2
 8005d96:	42a5      	cmp	r5, r4
 8005d98:	d105      	bne.n	8005da6 <__libc_init_array+0x2e>
 8005d9a:	bd70      	pop	{r4, r5, r6, pc}
 8005d9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005da0:	4798      	blx	r3
 8005da2:	3501      	adds	r5, #1
 8005da4:	e7ee      	b.n	8005d84 <__libc_init_array+0xc>
 8005da6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005daa:	4798      	blx	r3
 8005dac:	3501      	adds	r5, #1
 8005dae:	e7f2      	b.n	8005d96 <__libc_init_array+0x1e>
 8005db0:	08008d74 	.word	0x08008d74
 8005db4:	08008d74 	.word	0x08008d74
 8005db8:	08008d74 	.word	0x08008d74
 8005dbc:	08008d78 	.word	0x08008d78

08005dc0 <__itoa>:
 8005dc0:	1e93      	subs	r3, r2, #2
 8005dc2:	2b22      	cmp	r3, #34	; 0x22
 8005dc4:	b510      	push	{r4, lr}
 8005dc6:	460c      	mov	r4, r1
 8005dc8:	d904      	bls.n	8005dd4 <__itoa+0x14>
 8005dca:	2300      	movs	r3, #0
 8005dcc:	461c      	mov	r4, r3
 8005dce:	700b      	strb	r3, [r1, #0]
 8005dd0:	4620      	mov	r0, r4
 8005dd2:	bd10      	pop	{r4, pc}
 8005dd4:	2a0a      	cmp	r2, #10
 8005dd6:	d109      	bne.n	8005dec <__itoa+0x2c>
 8005dd8:	2800      	cmp	r0, #0
 8005dda:	da07      	bge.n	8005dec <__itoa+0x2c>
 8005ddc:	232d      	movs	r3, #45	; 0x2d
 8005dde:	700b      	strb	r3, [r1, #0]
 8005de0:	2101      	movs	r1, #1
 8005de2:	4240      	negs	r0, r0
 8005de4:	4421      	add	r1, r4
 8005de6:	f000 fa63 	bl	80062b0 <__utoa>
 8005dea:	e7f1      	b.n	8005dd0 <__itoa+0x10>
 8005dec:	2100      	movs	r1, #0
 8005dee:	e7f9      	b.n	8005de4 <__itoa+0x24>

08005df0 <itoa>:
 8005df0:	f7ff bfe6 	b.w	8005dc0 <__itoa>

08005df4 <malloc>:
 8005df4:	4b02      	ldr	r3, [pc, #8]	; (8005e00 <malloc+0xc>)
 8005df6:	4601      	mov	r1, r0
 8005df8:	6818      	ldr	r0, [r3, #0]
 8005dfa:	f000 b879 	b.w	8005ef0 <_malloc_r>
 8005dfe:	bf00      	nop
 8005e00:	200003c4 	.word	0x200003c4

08005e04 <free>:
 8005e04:	4b02      	ldr	r3, [pc, #8]	; (8005e10 <free+0xc>)
 8005e06:	4601      	mov	r1, r0
 8005e08:	6818      	ldr	r0, [r3, #0]
 8005e0a:	f000 b825 	b.w	8005e58 <_free_r>
 8005e0e:	bf00      	nop
 8005e10:	200003c4 	.word	0x200003c4

08005e14 <memcmp>:
 8005e14:	b530      	push	{r4, r5, lr}
 8005e16:	2400      	movs	r4, #0
 8005e18:	42a2      	cmp	r2, r4
 8005e1a:	d101      	bne.n	8005e20 <memcmp+0xc>
 8005e1c:	2000      	movs	r0, #0
 8005e1e:	e007      	b.n	8005e30 <memcmp+0x1c>
 8005e20:	5d03      	ldrb	r3, [r0, r4]
 8005e22:	3401      	adds	r4, #1
 8005e24:	190d      	adds	r5, r1, r4
 8005e26:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8005e2a:	42ab      	cmp	r3, r5
 8005e2c:	d0f4      	beq.n	8005e18 <memcmp+0x4>
 8005e2e:	1b58      	subs	r0, r3, r5
 8005e30:	bd30      	pop	{r4, r5, pc}

08005e32 <memcpy>:
 8005e32:	b510      	push	{r4, lr}
 8005e34:	1e43      	subs	r3, r0, #1
 8005e36:	440a      	add	r2, r1
 8005e38:	4291      	cmp	r1, r2
 8005e3a:	d100      	bne.n	8005e3e <memcpy+0xc>
 8005e3c:	bd10      	pop	{r4, pc}
 8005e3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e46:	e7f7      	b.n	8005e38 <memcpy+0x6>

08005e48 <memset>:
 8005e48:	4603      	mov	r3, r0
 8005e4a:	4402      	add	r2, r0
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d100      	bne.n	8005e52 <memset+0xa>
 8005e50:	4770      	bx	lr
 8005e52:	f803 1b01 	strb.w	r1, [r3], #1
 8005e56:	e7f9      	b.n	8005e4c <memset+0x4>

08005e58 <_free_r>:
 8005e58:	b538      	push	{r3, r4, r5, lr}
 8005e5a:	4605      	mov	r5, r0
 8005e5c:	2900      	cmp	r1, #0
 8005e5e:	d043      	beq.n	8005ee8 <_free_r+0x90>
 8005e60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e64:	1f0c      	subs	r4, r1, #4
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	bfb8      	it	lt
 8005e6a:	18e4      	addlt	r4, r4, r3
 8005e6c:	f000 fa73 	bl	8006356 <__malloc_lock>
 8005e70:	4a1e      	ldr	r2, [pc, #120]	; (8005eec <_free_r+0x94>)
 8005e72:	6813      	ldr	r3, [r2, #0]
 8005e74:	4610      	mov	r0, r2
 8005e76:	b933      	cbnz	r3, 8005e86 <_free_r+0x2e>
 8005e78:	6063      	str	r3, [r4, #4]
 8005e7a:	6014      	str	r4, [r2, #0]
 8005e7c:	4628      	mov	r0, r5
 8005e7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e82:	f000 ba69 	b.w	8006358 <__malloc_unlock>
 8005e86:	42a3      	cmp	r3, r4
 8005e88:	d90b      	bls.n	8005ea2 <_free_r+0x4a>
 8005e8a:	6821      	ldr	r1, [r4, #0]
 8005e8c:	1862      	adds	r2, r4, r1
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	bf01      	itttt	eq
 8005e92:	681a      	ldreq	r2, [r3, #0]
 8005e94:	685b      	ldreq	r3, [r3, #4]
 8005e96:	1852      	addeq	r2, r2, r1
 8005e98:	6022      	streq	r2, [r4, #0]
 8005e9a:	6063      	str	r3, [r4, #4]
 8005e9c:	6004      	str	r4, [r0, #0]
 8005e9e:	e7ed      	b.n	8005e7c <_free_r+0x24>
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	685a      	ldr	r2, [r3, #4]
 8005ea4:	b10a      	cbz	r2, 8005eaa <_free_r+0x52>
 8005ea6:	42a2      	cmp	r2, r4
 8005ea8:	d9fa      	bls.n	8005ea0 <_free_r+0x48>
 8005eaa:	6819      	ldr	r1, [r3, #0]
 8005eac:	1858      	adds	r0, r3, r1
 8005eae:	42a0      	cmp	r0, r4
 8005eb0:	d10b      	bne.n	8005eca <_free_r+0x72>
 8005eb2:	6820      	ldr	r0, [r4, #0]
 8005eb4:	4401      	add	r1, r0
 8005eb6:	1858      	adds	r0, r3, r1
 8005eb8:	4282      	cmp	r2, r0
 8005eba:	6019      	str	r1, [r3, #0]
 8005ebc:	d1de      	bne.n	8005e7c <_free_r+0x24>
 8005ebe:	6810      	ldr	r0, [r2, #0]
 8005ec0:	6852      	ldr	r2, [r2, #4]
 8005ec2:	4401      	add	r1, r0
 8005ec4:	6019      	str	r1, [r3, #0]
 8005ec6:	605a      	str	r2, [r3, #4]
 8005ec8:	e7d8      	b.n	8005e7c <_free_r+0x24>
 8005eca:	d902      	bls.n	8005ed2 <_free_r+0x7a>
 8005ecc:	230c      	movs	r3, #12
 8005ece:	602b      	str	r3, [r5, #0]
 8005ed0:	e7d4      	b.n	8005e7c <_free_r+0x24>
 8005ed2:	6820      	ldr	r0, [r4, #0]
 8005ed4:	1821      	adds	r1, r4, r0
 8005ed6:	428a      	cmp	r2, r1
 8005ed8:	bf01      	itttt	eq
 8005eda:	6811      	ldreq	r1, [r2, #0]
 8005edc:	6852      	ldreq	r2, [r2, #4]
 8005ede:	1809      	addeq	r1, r1, r0
 8005ee0:	6021      	streq	r1, [r4, #0]
 8005ee2:	6062      	str	r2, [r4, #4]
 8005ee4:	605c      	str	r4, [r3, #4]
 8005ee6:	e7c9      	b.n	8005e7c <_free_r+0x24>
 8005ee8:	bd38      	pop	{r3, r4, r5, pc}
 8005eea:	bf00      	nop
 8005eec:	200005f0 	.word	0x200005f0

08005ef0 <_malloc_r>:
 8005ef0:	b570      	push	{r4, r5, r6, lr}
 8005ef2:	1ccd      	adds	r5, r1, #3
 8005ef4:	f025 0503 	bic.w	r5, r5, #3
 8005ef8:	3508      	adds	r5, #8
 8005efa:	2d0c      	cmp	r5, #12
 8005efc:	bf38      	it	cc
 8005efe:	250c      	movcc	r5, #12
 8005f00:	2d00      	cmp	r5, #0
 8005f02:	4606      	mov	r6, r0
 8005f04:	db01      	blt.n	8005f0a <_malloc_r+0x1a>
 8005f06:	42a9      	cmp	r1, r5
 8005f08:	d903      	bls.n	8005f12 <_malloc_r+0x22>
 8005f0a:	230c      	movs	r3, #12
 8005f0c:	6033      	str	r3, [r6, #0]
 8005f0e:	2000      	movs	r0, #0
 8005f10:	bd70      	pop	{r4, r5, r6, pc}
 8005f12:	f000 fa20 	bl	8006356 <__malloc_lock>
 8005f16:	4a21      	ldr	r2, [pc, #132]	; (8005f9c <_malloc_r+0xac>)
 8005f18:	6814      	ldr	r4, [r2, #0]
 8005f1a:	4621      	mov	r1, r4
 8005f1c:	b991      	cbnz	r1, 8005f44 <_malloc_r+0x54>
 8005f1e:	4c20      	ldr	r4, [pc, #128]	; (8005fa0 <_malloc_r+0xb0>)
 8005f20:	6823      	ldr	r3, [r4, #0]
 8005f22:	b91b      	cbnz	r3, 8005f2c <_malloc_r+0x3c>
 8005f24:	4630      	mov	r0, r6
 8005f26:	f000 f895 	bl	8006054 <_sbrk_r>
 8005f2a:	6020      	str	r0, [r4, #0]
 8005f2c:	4629      	mov	r1, r5
 8005f2e:	4630      	mov	r0, r6
 8005f30:	f000 f890 	bl	8006054 <_sbrk_r>
 8005f34:	1c43      	adds	r3, r0, #1
 8005f36:	d124      	bne.n	8005f82 <_malloc_r+0x92>
 8005f38:	230c      	movs	r3, #12
 8005f3a:	4630      	mov	r0, r6
 8005f3c:	6033      	str	r3, [r6, #0]
 8005f3e:	f000 fa0b 	bl	8006358 <__malloc_unlock>
 8005f42:	e7e4      	b.n	8005f0e <_malloc_r+0x1e>
 8005f44:	680b      	ldr	r3, [r1, #0]
 8005f46:	1b5b      	subs	r3, r3, r5
 8005f48:	d418      	bmi.n	8005f7c <_malloc_r+0x8c>
 8005f4a:	2b0b      	cmp	r3, #11
 8005f4c:	d90f      	bls.n	8005f6e <_malloc_r+0x7e>
 8005f4e:	600b      	str	r3, [r1, #0]
 8005f50:	18cc      	adds	r4, r1, r3
 8005f52:	50cd      	str	r5, [r1, r3]
 8005f54:	4630      	mov	r0, r6
 8005f56:	f000 f9ff 	bl	8006358 <__malloc_unlock>
 8005f5a:	f104 000b 	add.w	r0, r4, #11
 8005f5e:	1d23      	adds	r3, r4, #4
 8005f60:	f020 0007 	bic.w	r0, r0, #7
 8005f64:	1ac3      	subs	r3, r0, r3
 8005f66:	d0d3      	beq.n	8005f10 <_malloc_r+0x20>
 8005f68:	425a      	negs	r2, r3
 8005f6a:	50e2      	str	r2, [r4, r3]
 8005f6c:	e7d0      	b.n	8005f10 <_malloc_r+0x20>
 8005f6e:	684b      	ldr	r3, [r1, #4]
 8005f70:	428c      	cmp	r4, r1
 8005f72:	bf16      	itet	ne
 8005f74:	6063      	strne	r3, [r4, #4]
 8005f76:	6013      	streq	r3, [r2, #0]
 8005f78:	460c      	movne	r4, r1
 8005f7a:	e7eb      	b.n	8005f54 <_malloc_r+0x64>
 8005f7c:	460c      	mov	r4, r1
 8005f7e:	6849      	ldr	r1, [r1, #4]
 8005f80:	e7cc      	b.n	8005f1c <_malloc_r+0x2c>
 8005f82:	1cc4      	adds	r4, r0, #3
 8005f84:	f024 0403 	bic.w	r4, r4, #3
 8005f88:	42a0      	cmp	r0, r4
 8005f8a:	d005      	beq.n	8005f98 <_malloc_r+0xa8>
 8005f8c:	1a21      	subs	r1, r4, r0
 8005f8e:	4630      	mov	r0, r6
 8005f90:	f000 f860 	bl	8006054 <_sbrk_r>
 8005f94:	3001      	adds	r0, #1
 8005f96:	d0cf      	beq.n	8005f38 <_malloc_r+0x48>
 8005f98:	6025      	str	r5, [r4, #0]
 8005f9a:	e7db      	b.n	8005f54 <_malloc_r+0x64>
 8005f9c:	200005f0 	.word	0x200005f0
 8005fa0:	200005f4 	.word	0x200005f4

08005fa4 <srand>:
 8005fa4:	b538      	push	{r3, r4, r5, lr}
 8005fa6:	4b0d      	ldr	r3, [pc, #52]	; (8005fdc <srand+0x38>)
 8005fa8:	4605      	mov	r5, r0
 8005faa:	681c      	ldr	r4, [r3, #0]
 8005fac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005fae:	b97b      	cbnz	r3, 8005fd0 <srand+0x2c>
 8005fb0:	2018      	movs	r0, #24
 8005fb2:	f7ff ff1f 	bl	8005df4 <malloc>
 8005fb6:	4a0a      	ldr	r2, [pc, #40]	; (8005fe0 <srand+0x3c>)
 8005fb8:	4b0a      	ldr	r3, [pc, #40]	; (8005fe4 <srand+0x40>)
 8005fba:	63a0      	str	r0, [r4, #56]	; 0x38
 8005fbc:	e9c0 2300 	strd	r2, r3, [r0]
 8005fc0:	4b09      	ldr	r3, [pc, #36]	; (8005fe8 <srand+0x44>)
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	6083      	str	r3, [r0, #8]
 8005fc6:	230b      	movs	r3, #11
 8005fc8:	8183      	strh	r3, [r0, #12]
 8005fca:	2300      	movs	r3, #0
 8005fcc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005fd4:	611d      	str	r5, [r3, #16]
 8005fd6:	615a      	str	r2, [r3, #20]
 8005fd8:	bd38      	pop	{r3, r4, r5, pc}
 8005fda:	bf00      	nop
 8005fdc:	200003c4 	.word	0x200003c4
 8005fe0:	abcd330e 	.word	0xabcd330e
 8005fe4:	e66d1234 	.word	0xe66d1234
 8005fe8:	0005deec 	.word	0x0005deec

08005fec <rand>:
 8005fec:	b538      	push	{r3, r4, r5, lr}
 8005fee:	4b13      	ldr	r3, [pc, #76]	; (800603c <rand+0x50>)
 8005ff0:	681c      	ldr	r4, [r3, #0]
 8005ff2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005ff4:	b97b      	cbnz	r3, 8006016 <rand+0x2a>
 8005ff6:	2018      	movs	r0, #24
 8005ff8:	f7ff fefc 	bl	8005df4 <malloc>
 8005ffc:	4a10      	ldr	r2, [pc, #64]	; (8006040 <rand+0x54>)
 8005ffe:	4b11      	ldr	r3, [pc, #68]	; (8006044 <rand+0x58>)
 8006000:	63a0      	str	r0, [r4, #56]	; 0x38
 8006002:	e9c0 2300 	strd	r2, r3, [r0]
 8006006:	4b10      	ldr	r3, [pc, #64]	; (8006048 <rand+0x5c>)
 8006008:	2201      	movs	r2, #1
 800600a:	6083      	str	r3, [r0, #8]
 800600c:	230b      	movs	r3, #11
 800600e:	8183      	strh	r3, [r0, #12]
 8006010:	2300      	movs	r3, #0
 8006012:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8006016:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006018:	480c      	ldr	r0, [pc, #48]	; (800604c <rand+0x60>)
 800601a:	690a      	ldr	r2, [r1, #16]
 800601c:	694b      	ldr	r3, [r1, #20]
 800601e:	4350      	muls	r0, r2
 8006020:	4c0b      	ldr	r4, [pc, #44]	; (8006050 <rand+0x64>)
 8006022:	fb04 0003 	mla	r0, r4, r3, r0
 8006026:	fba2 2304 	umull	r2, r3, r2, r4
 800602a:	4403      	add	r3, r0
 800602c:	1c54      	adds	r4, r2, #1
 800602e:	f143 0500 	adc.w	r5, r3, #0
 8006032:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8006036:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800603a:	bd38      	pop	{r3, r4, r5, pc}
 800603c:	200003c4 	.word	0x200003c4
 8006040:	abcd330e 	.word	0xabcd330e
 8006044:	e66d1234 	.word	0xe66d1234
 8006048:	0005deec 	.word	0x0005deec
 800604c:	5851f42d 	.word	0x5851f42d
 8006050:	4c957f2d 	.word	0x4c957f2d

08006054 <_sbrk_r>:
 8006054:	b538      	push	{r3, r4, r5, lr}
 8006056:	2300      	movs	r3, #0
 8006058:	4c05      	ldr	r4, [pc, #20]	; (8006070 <_sbrk_r+0x1c>)
 800605a:	4605      	mov	r5, r0
 800605c:	4608      	mov	r0, r1
 800605e:	6023      	str	r3, [r4, #0]
 8006060:	f000 fcb8 	bl	80069d4 <_sbrk>
 8006064:	1c43      	adds	r3, r0, #1
 8006066:	d102      	bne.n	800606e <_sbrk_r+0x1a>
 8006068:	6823      	ldr	r3, [r4, #0]
 800606a:	b103      	cbz	r3, 800606e <_sbrk_r+0x1a>
 800606c:	602b      	str	r3, [r5, #0]
 800606e:	bd38      	pop	{r3, r4, r5, pc}
 8006070:	200008c4 	.word	0x200008c4

08006074 <siprintf>:
 8006074:	b40e      	push	{r1, r2, r3}
 8006076:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800607a:	b500      	push	{lr}
 800607c:	b09c      	sub	sp, #112	; 0x70
 800607e:	ab1d      	add	r3, sp, #116	; 0x74
 8006080:	9002      	str	r0, [sp, #8]
 8006082:	9006      	str	r0, [sp, #24]
 8006084:	9107      	str	r1, [sp, #28]
 8006086:	9104      	str	r1, [sp, #16]
 8006088:	4808      	ldr	r0, [pc, #32]	; (80060ac <siprintf+0x38>)
 800608a:	4909      	ldr	r1, [pc, #36]	; (80060b0 <siprintf+0x3c>)
 800608c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006090:	9105      	str	r1, [sp, #20]
 8006092:	6800      	ldr	r0, [r0, #0]
 8006094:	a902      	add	r1, sp, #8
 8006096:	9301      	str	r3, [sp, #4]
 8006098:	f000 f9ba 	bl	8006410 <_svfiprintf_r>
 800609c:	2200      	movs	r2, #0
 800609e:	9b02      	ldr	r3, [sp, #8]
 80060a0:	701a      	strb	r2, [r3, #0]
 80060a2:	b01c      	add	sp, #112	; 0x70
 80060a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80060a8:	b003      	add	sp, #12
 80060aa:	4770      	bx	lr
 80060ac:	200003c4 	.word	0x200003c4
 80060b0:	ffff0208 	.word	0xffff0208

080060b4 <strcat>:
 80060b4:	4603      	mov	r3, r0
 80060b6:	b510      	push	{r4, lr}
 80060b8:	781a      	ldrb	r2, [r3, #0]
 80060ba:	1c5c      	adds	r4, r3, #1
 80060bc:	b93a      	cbnz	r2, 80060ce <strcat+0x1a>
 80060be:	3b01      	subs	r3, #1
 80060c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80060c4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80060c8:	2a00      	cmp	r2, #0
 80060ca:	d1f9      	bne.n	80060c0 <strcat+0xc>
 80060cc:	bd10      	pop	{r4, pc}
 80060ce:	4623      	mov	r3, r4
 80060d0:	e7f2      	b.n	80060b8 <strcat+0x4>

080060d2 <strcpy>:
 80060d2:	4603      	mov	r3, r0
 80060d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80060d8:	f803 2b01 	strb.w	r2, [r3], #1
 80060dc:	2a00      	cmp	r2, #0
 80060de:	d1f9      	bne.n	80060d4 <strcpy+0x2>
 80060e0:	4770      	bx	lr
	...

080060e4 <strtok>:
 80060e4:	4b13      	ldr	r3, [pc, #76]	; (8006134 <strtok+0x50>)
 80060e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060ea:	681d      	ldr	r5, [r3, #0]
 80060ec:	4606      	mov	r6, r0
 80060ee:	6dac      	ldr	r4, [r5, #88]	; 0x58
 80060f0:	460f      	mov	r7, r1
 80060f2:	b9b4      	cbnz	r4, 8006122 <strtok+0x3e>
 80060f4:	2050      	movs	r0, #80	; 0x50
 80060f6:	f7ff fe7d 	bl	8005df4 <malloc>
 80060fa:	65a8      	str	r0, [r5, #88]	; 0x58
 80060fc:	e9c0 4400 	strd	r4, r4, [r0]
 8006100:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006104:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006108:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800610c:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006110:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006114:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006118:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800611c:	6184      	str	r4, [r0, #24]
 800611e:	7704      	strb	r4, [r0, #28]
 8006120:	6244      	str	r4, [r0, #36]	; 0x24
 8006122:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8006124:	4639      	mov	r1, r7
 8006126:	4630      	mov	r0, r6
 8006128:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800612c:	2301      	movs	r3, #1
 800612e:	f000 b803 	b.w	8006138 <__strtok_r>
 8006132:	bf00      	nop
 8006134:	200003c4 	.word	0x200003c4

08006138 <__strtok_r>:
 8006138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800613a:	b918      	cbnz	r0, 8006144 <__strtok_r+0xc>
 800613c:	6810      	ldr	r0, [r2, #0]
 800613e:	b908      	cbnz	r0, 8006144 <__strtok_r+0xc>
 8006140:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006142:	4620      	mov	r0, r4
 8006144:	4604      	mov	r4, r0
 8006146:	460f      	mov	r7, r1
 8006148:	f814 5b01 	ldrb.w	r5, [r4], #1
 800614c:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006150:	b91e      	cbnz	r6, 800615a <__strtok_r+0x22>
 8006152:	b96d      	cbnz	r5, 8006170 <__strtok_r+0x38>
 8006154:	6015      	str	r5, [r2, #0]
 8006156:	4628      	mov	r0, r5
 8006158:	e7f2      	b.n	8006140 <__strtok_r+0x8>
 800615a:	42b5      	cmp	r5, r6
 800615c:	d1f6      	bne.n	800614c <__strtok_r+0x14>
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1ef      	bne.n	8006142 <__strtok_r+0xa>
 8006162:	6014      	str	r4, [r2, #0]
 8006164:	7003      	strb	r3, [r0, #0]
 8006166:	e7eb      	b.n	8006140 <__strtok_r+0x8>
 8006168:	462b      	mov	r3, r5
 800616a:	e00d      	b.n	8006188 <__strtok_r+0x50>
 800616c:	b926      	cbnz	r6, 8006178 <__strtok_r+0x40>
 800616e:	461c      	mov	r4, r3
 8006170:	4623      	mov	r3, r4
 8006172:	460f      	mov	r7, r1
 8006174:	f813 5b01 	ldrb.w	r5, [r3], #1
 8006178:	f817 6b01 	ldrb.w	r6, [r7], #1
 800617c:	42b5      	cmp	r5, r6
 800617e:	d1f5      	bne.n	800616c <__strtok_r+0x34>
 8006180:	2d00      	cmp	r5, #0
 8006182:	d0f1      	beq.n	8006168 <__strtok_r+0x30>
 8006184:	2100      	movs	r1, #0
 8006186:	7021      	strb	r1, [r4, #0]
 8006188:	6013      	str	r3, [r2, #0]
 800618a:	e7d9      	b.n	8006140 <__strtok_r+0x8>

0800618c <_strtol_l.isra.0>:
 800618c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006190:	4680      	mov	r8, r0
 8006192:	4689      	mov	r9, r1
 8006194:	4692      	mov	sl, r2
 8006196:	461e      	mov	r6, r3
 8006198:	460f      	mov	r7, r1
 800619a:	463d      	mov	r5, r7
 800619c:	9808      	ldr	r0, [sp, #32]
 800619e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80061a2:	f000 f8c3 	bl	800632c <__locale_ctype_ptr_l>
 80061a6:	4420      	add	r0, r4
 80061a8:	7843      	ldrb	r3, [r0, #1]
 80061aa:	f013 0308 	ands.w	r3, r3, #8
 80061ae:	d132      	bne.n	8006216 <_strtol_l.isra.0+0x8a>
 80061b0:	2c2d      	cmp	r4, #45	; 0x2d
 80061b2:	d132      	bne.n	800621a <_strtol_l.isra.0+0x8e>
 80061b4:	2201      	movs	r2, #1
 80061b6:	787c      	ldrb	r4, [r7, #1]
 80061b8:	1cbd      	adds	r5, r7, #2
 80061ba:	2e00      	cmp	r6, #0
 80061bc:	d05d      	beq.n	800627a <_strtol_l.isra.0+0xee>
 80061be:	2e10      	cmp	r6, #16
 80061c0:	d109      	bne.n	80061d6 <_strtol_l.isra.0+0x4a>
 80061c2:	2c30      	cmp	r4, #48	; 0x30
 80061c4:	d107      	bne.n	80061d6 <_strtol_l.isra.0+0x4a>
 80061c6:	782b      	ldrb	r3, [r5, #0]
 80061c8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80061cc:	2b58      	cmp	r3, #88	; 0x58
 80061ce:	d14f      	bne.n	8006270 <_strtol_l.isra.0+0xe4>
 80061d0:	2610      	movs	r6, #16
 80061d2:	786c      	ldrb	r4, [r5, #1]
 80061d4:	3502      	adds	r5, #2
 80061d6:	2a00      	cmp	r2, #0
 80061d8:	bf14      	ite	ne
 80061da:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80061de:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80061e2:	2700      	movs	r7, #0
 80061e4:	fbb1 fcf6 	udiv	ip, r1, r6
 80061e8:	4638      	mov	r0, r7
 80061ea:	fb06 1e1c 	mls	lr, r6, ip, r1
 80061ee:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80061f2:	2b09      	cmp	r3, #9
 80061f4:	d817      	bhi.n	8006226 <_strtol_l.isra.0+0x9a>
 80061f6:	461c      	mov	r4, r3
 80061f8:	42a6      	cmp	r6, r4
 80061fa:	dd23      	ble.n	8006244 <_strtol_l.isra.0+0xb8>
 80061fc:	1c7b      	adds	r3, r7, #1
 80061fe:	d007      	beq.n	8006210 <_strtol_l.isra.0+0x84>
 8006200:	4584      	cmp	ip, r0
 8006202:	d31c      	bcc.n	800623e <_strtol_l.isra.0+0xb2>
 8006204:	d101      	bne.n	800620a <_strtol_l.isra.0+0x7e>
 8006206:	45a6      	cmp	lr, r4
 8006208:	db19      	blt.n	800623e <_strtol_l.isra.0+0xb2>
 800620a:	2701      	movs	r7, #1
 800620c:	fb00 4006 	mla	r0, r0, r6, r4
 8006210:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006214:	e7eb      	b.n	80061ee <_strtol_l.isra.0+0x62>
 8006216:	462f      	mov	r7, r5
 8006218:	e7bf      	b.n	800619a <_strtol_l.isra.0+0xe>
 800621a:	2c2b      	cmp	r4, #43	; 0x2b
 800621c:	bf04      	itt	eq
 800621e:	1cbd      	addeq	r5, r7, #2
 8006220:	787c      	ldrbeq	r4, [r7, #1]
 8006222:	461a      	mov	r2, r3
 8006224:	e7c9      	b.n	80061ba <_strtol_l.isra.0+0x2e>
 8006226:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800622a:	2b19      	cmp	r3, #25
 800622c:	d801      	bhi.n	8006232 <_strtol_l.isra.0+0xa6>
 800622e:	3c37      	subs	r4, #55	; 0x37
 8006230:	e7e2      	b.n	80061f8 <_strtol_l.isra.0+0x6c>
 8006232:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006236:	2b19      	cmp	r3, #25
 8006238:	d804      	bhi.n	8006244 <_strtol_l.isra.0+0xb8>
 800623a:	3c57      	subs	r4, #87	; 0x57
 800623c:	e7dc      	b.n	80061f8 <_strtol_l.isra.0+0x6c>
 800623e:	f04f 37ff 	mov.w	r7, #4294967295
 8006242:	e7e5      	b.n	8006210 <_strtol_l.isra.0+0x84>
 8006244:	1c7b      	adds	r3, r7, #1
 8006246:	d108      	bne.n	800625a <_strtol_l.isra.0+0xce>
 8006248:	2322      	movs	r3, #34	; 0x22
 800624a:	4608      	mov	r0, r1
 800624c:	f8c8 3000 	str.w	r3, [r8]
 8006250:	f1ba 0f00 	cmp.w	sl, #0
 8006254:	d107      	bne.n	8006266 <_strtol_l.isra.0+0xda>
 8006256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800625a:	b102      	cbz	r2, 800625e <_strtol_l.isra.0+0xd2>
 800625c:	4240      	negs	r0, r0
 800625e:	f1ba 0f00 	cmp.w	sl, #0
 8006262:	d0f8      	beq.n	8006256 <_strtol_l.isra.0+0xca>
 8006264:	b10f      	cbz	r7, 800626a <_strtol_l.isra.0+0xde>
 8006266:	f105 39ff 	add.w	r9, r5, #4294967295
 800626a:	f8ca 9000 	str.w	r9, [sl]
 800626e:	e7f2      	b.n	8006256 <_strtol_l.isra.0+0xca>
 8006270:	2430      	movs	r4, #48	; 0x30
 8006272:	2e00      	cmp	r6, #0
 8006274:	d1af      	bne.n	80061d6 <_strtol_l.isra.0+0x4a>
 8006276:	2608      	movs	r6, #8
 8006278:	e7ad      	b.n	80061d6 <_strtol_l.isra.0+0x4a>
 800627a:	2c30      	cmp	r4, #48	; 0x30
 800627c:	d0a3      	beq.n	80061c6 <_strtol_l.isra.0+0x3a>
 800627e:	260a      	movs	r6, #10
 8006280:	e7a9      	b.n	80061d6 <_strtol_l.isra.0+0x4a>
	...

08006284 <strtol>:
 8006284:	4b08      	ldr	r3, [pc, #32]	; (80062a8 <strtol+0x24>)
 8006286:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006288:	681c      	ldr	r4, [r3, #0]
 800628a:	4d08      	ldr	r5, [pc, #32]	; (80062ac <strtol+0x28>)
 800628c:	6a23      	ldr	r3, [r4, #32]
 800628e:	2b00      	cmp	r3, #0
 8006290:	bf08      	it	eq
 8006292:	462b      	moveq	r3, r5
 8006294:	9300      	str	r3, [sp, #0]
 8006296:	4613      	mov	r3, r2
 8006298:	460a      	mov	r2, r1
 800629a:	4601      	mov	r1, r0
 800629c:	4620      	mov	r0, r4
 800629e:	f7ff ff75 	bl	800618c <_strtol_l.isra.0>
 80062a2:	b003      	add	sp, #12
 80062a4:	bd30      	pop	{r4, r5, pc}
 80062a6:	bf00      	nop
 80062a8:	200003c4 	.word	0x200003c4
 80062ac:	20000428 	.word	0x20000428

080062b0 <__utoa>:
 80062b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062b2:	b08b      	sub	sp, #44	; 0x2c
 80062b4:	4605      	mov	r5, r0
 80062b6:	460c      	mov	r4, r1
 80062b8:	466e      	mov	r6, sp
 80062ba:	4b1b      	ldr	r3, [pc, #108]	; (8006328 <__utoa+0x78>)
 80062bc:	f103 0c20 	add.w	ip, r3, #32
 80062c0:	4637      	mov	r7, r6
 80062c2:	6818      	ldr	r0, [r3, #0]
 80062c4:	6859      	ldr	r1, [r3, #4]
 80062c6:	3308      	adds	r3, #8
 80062c8:	c703      	stmia	r7!, {r0, r1}
 80062ca:	4563      	cmp	r3, ip
 80062cc:	463e      	mov	r6, r7
 80062ce:	d1f7      	bne.n	80062c0 <__utoa+0x10>
 80062d0:	6818      	ldr	r0, [r3, #0]
 80062d2:	791b      	ldrb	r3, [r3, #4]
 80062d4:	6038      	str	r0, [r7, #0]
 80062d6:	713b      	strb	r3, [r7, #4]
 80062d8:	1e93      	subs	r3, r2, #2
 80062da:	2b22      	cmp	r3, #34	; 0x22
 80062dc:	f04f 0300 	mov.w	r3, #0
 80062e0:	d904      	bls.n	80062ec <__utoa+0x3c>
 80062e2:	7023      	strb	r3, [r4, #0]
 80062e4:	461c      	mov	r4, r3
 80062e6:	4620      	mov	r0, r4
 80062e8:	b00b      	add	sp, #44	; 0x2c
 80062ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062ec:	1e66      	subs	r6, r4, #1
 80062ee:	fbb5 f0f2 	udiv	r0, r5, r2
 80062f2:	fb02 5510 	mls	r5, r2, r0, r5
 80062f6:	af0a      	add	r7, sp, #40	; 0x28
 80062f8:	443d      	add	r5, r7
 80062fa:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 80062fe:	1c59      	adds	r1, r3, #1
 8006300:	f806 5f01 	strb.w	r5, [r6, #1]!
 8006304:	4605      	mov	r5, r0
 8006306:	b968      	cbnz	r0, 8006324 <__utoa+0x74>
 8006308:	4622      	mov	r2, r4
 800630a:	5460      	strb	r0, [r4, r1]
 800630c:	4423      	add	r3, r4
 800630e:	1b19      	subs	r1, r3, r4
 8006310:	1b10      	subs	r0, r2, r4
 8006312:	4281      	cmp	r1, r0
 8006314:	dde7      	ble.n	80062e6 <__utoa+0x36>
 8006316:	7811      	ldrb	r1, [r2, #0]
 8006318:	7818      	ldrb	r0, [r3, #0]
 800631a:	f802 0b01 	strb.w	r0, [r2], #1
 800631e:	f803 1901 	strb.w	r1, [r3], #-1
 8006322:	e7f4      	b.n	800630e <__utoa+0x5e>
 8006324:	460b      	mov	r3, r1
 8006326:	e7e2      	b.n	80062ee <__utoa+0x3e>
 8006328:	08008c10 	.word	0x08008c10

0800632c <__locale_ctype_ptr_l>:
 800632c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006330:	4770      	bx	lr

08006332 <__ascii_mbtowc>:
 8006332:	b082      	sub	sp, #8
 8006334:	b901      	cbnz	r1, 8006338 <__ascii_mbtowc+0x6>
 8006336:	a901      	add	r1, sp, #4
 8006338:	b142      	cbz	r2, 800634c <__ascii_mbtowc+0x1a>
 800633a:	b14b      	cbz	r3, 8006350 <__ascii_mbtowc+0x1e>
 800633c:	7813      	ldrb	r3, [r2, #0]
 800633e:	600b      	str	r3, [r1, #0]
 8006340:	7812      	ldrb	r2, [r2, #0]
 8006342:	1c10      	adds	r0, r2, #0
 8006344:	bf18      	it	ne
 8006346:	2001      	movne	r0, #1
 8006348:	b002      	add	sp, #8
 800634a:	4770      	bx	lr
 800634c:	4610      	mov	r0, r2
 800634e:	e7fb      	b.n	8006348 <__ascii_mbtowc+0x16>
 8006350:	f06f 0001 	mvn.w	r0, #1
 8006354:	e7f8      	b.n	8006348 <__ascii_mbtowc+0x16>

08006356 <__malloc_lock>:
 8006356:	4770      	bx	lr

08006358 <__malloc_unlock>:
 8006358:	4770      	bx	lr

0800635a <__ssputs_r>:
 800635a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800635e:	688e      	ldr	r6, [r1, #8]
 8006360:	4682      	mov	sl, r0
 8006362:	429e      	cmp	r6, r3
 8006364:	460c      	mov	r4, r1
 8006366:	4690      	mov	r8, r2
 8006368:	4699      	mov	r9, r3
 800636a:	d837      	bhi.n	80063dc <__ssputs_r+0x82>
 800636c:	898a      	ldrh	r2, [r1, #12]
 800636e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006372:	d031      	beq.n	80063d8 <__ssputs_r+0x7e>
 8006374:	2302      	movs	r3, #2
 8006376:	6825      	ldr	r5, [r4, #0]
 8006378:	6909      	ldr	r1, [r1, #16]
 800637a:	1a6f      	subs	r7, r5, r1
 800637c:	6965      	ldr	r5, [r4, #20]
 800637e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006382:	fb95 f5f3 	sdiv	r5, r5, r3
 8006386:	f109 0301 	add.w	r3, r9, #1
 800638a:	443b      	add	r3, r7
 800638c:	429d      	cmp	r5, r3
 800638e:	bf38      	it	cc
 8006390:	461d      	movcc	r5, r3
 8006392:	0553      	lsls	r3, r2, #21
 8006394:	d530      	bpl.n	80063f8 <__ssputs_r+0x9e>
 8006396:	4629      	mov	r1, r5
 8006398:	f7ff fdaa 	bl	8005ef0 <_malloc_r>
 800639c:	4606      	mov	r6, r0
 800639e:	b950      	cbnz	r0, 80063b6 <__ssputs_r+0x5c>
 80063a0:	230c      	movs	r3, #12
 80063a2:	f04f 30ff 	mov.w	r0, #4294967295
 80063a6:	f8ca 3000 	str.w	r3, [sl]
 80063aa:	89a3      	ldrh	r3, [r4, #12]
 80063ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063b0:	81a3      	strh	r3, [r4, #12]
 80063b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063b6:	463a      	mov	r2, r7
 80063b8:	6921      	ldr	r1, [r4, #16]
 80063ba:	f7ff fd3a 	bl	8005e32 <memcpy>
 80063be:	89a3      	ldrh	r3, [r4, #12]
 80063c0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80063c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063c8:	81a3      	strh	r3, [r4, #12]
 80063ca:	6126      	str	r6, [r4, #16]
 80063cc:	443e      	add	r6, r7
 80063ce:	6026      	str	r6, [r4, #0]
 80063d0:	464e      	mov	r6, r9
 80063d2:	6165      	str	r5, [r4, #20]
 80063d4:	1bed      	subs	r5, r5, r7
 80063d6:	60a5      	str	r5, [r4, #8]
 80063d8:	454e      	cmp	r6, r9
 80063da:	d900      	bls.n	80063de <__ssputs_r+0x84>
 80063dc:	464e      	mov	r6, r9
 80063de:	4632      	mov	r2, r6
 80063e0:	4641      	mov	r1, r8
 80063e2:	6820      	ldr	r0, [r4, #0]
 80063e4:	f000 faaf 	bl	8006946 <memmove>
 80063e8:	68a3      	ldr	r3, [r4, #8]
 80063ea:	2000      	movs	r0, #0
 80063ec:	1b9b      	subs	r3, r3, r6
 80063ee:	60a3      	str	r3, [r4, #8]
 80063f0:	6823      	ldr	r3, [r4, #0]
 80063f2:	441e      	add	r6, r3
 80063f4:	6026      	str	r6, [r4, #0]
 80063f6:	e7dc      	b.n	80063b2 <__ssputs_r+0x58>
 80063f8:	462a      	mov	r2, r5
 80063fa:	f000 fabd 	bl	8006978 <_realloc_r>
 80063fe:	4606      	mov	r6, r0
 8006400:	2800      	cmp	r0, #0
 8006402:	d1e2      	bne.n	80063ca <__ssputs_r+0x70>
 8006404:	6921      	ldr	r1, [r4, #16]
 8006406:	4650      	mov	r0, sl
 8006408:	f7ff fd26 	bl	8005e58 <_free_r>
 800640c:	e7c8      	b.n	80063a0 <__ssputs_r+0x46>
	...

08006410 <_svfiprintf_r>:
 8006410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006414:	461d      	mov	r5, r3
 8006416:	898b      	ldrh	r3, [r1, #12]
 8006418:	b09d      	sub	sp, #116	; 0x74
 800641a:	061f      	lsls	r7, r3, #24
 800641c:	4680      	mov	r8, r0
 800641e:	460c      	mov	r4, r1
 8006420:	4616      	mov	r6, r2
 8006422:	d50f      	bpl.n	8006444 <_svfiprintf_r+0x34>
 8006424:	690b      	ldr	r3, [r1, #16]
 8006426:	b96b      	cbnz	r3, 8006444 <_svfiprintf_r+0x34>
 8006428:	2140      	movs	r1, #64	; 0x40
 800642a:	f7ff fd61 	bl	8005ef0 <_malloc_r>
 800642e:	6020      	str	r0, [r4, #0]
 8006430:	6120      	str	r0, [r4, #16]
 8006432:	b928      	cbnz	r0, 8006440 <_svfiprintf_r+0x30>
 8006434:	230c      	movs	r3, #12
 8006436:	f8c8 3000 	str.w	r3, [r8]
 800643a:	f04f 30ff 	mov.w	r0, #4294967295
 800643e:	e0c8      	b.n	80065d2 <_svfiprintf_r+0x1c2>
 8006440:	2340      	movs	r3, #64	; 0x40
 8006442:	6163      	str	r3, [r4, #20]
 8006444:	2300      	movs	r3, #0
 8006446:	9309      	str	r3, [sp, #36]	; 0x24
 8006448:	2320      	movs	r3, #32
 800644a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800644e:	2330      	movs	r3, #48	; 0x30
 8006450:	f04f 0b01 	mov.w	fp, #1
 8006454:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006458:	9503      	str	r5, [sp, #12]
 800645a:	4637      	mov	r7, r6
 800645c:	463d      	mov	r5, r7
 800645e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006462:	b10b      	cbz	r3, 8006468 <_svfiprintf_r+0x58>
 8006464:	2b25      	cmp	r3, #37	; 0x25
 8006466:	d13e      	bne.n	80064e6 <_svfiprintf_r+0xd6>
 8006468:	ebb7 0a06 	subs.w	sl, r7, r6
 800646c:	d00b      	beq.n	8006486 <_svfiprintf_r+0x76>
 800646e:	4653      	mov	r3, sl
 8006470:	4632      	mov	r2, r6
 8006472:	4621      	mov	r1, r4
 8006474:	4640      	mov	r0, r8
 8006476:	f7ff ff70 	bl	800635a <__ssputs_r>
 800647a:	3001      	adds	r0, #1
 800647c:	f000 80a4 	beq.w	80065c8 <_svfiprintf_r+0x1b8>
 8006480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006482:	4453      	add	r3, sl
 8006484:	9309      	str	r3, [sp, #36]	; 0x24
 8006486:	783b      	ldrb	r3, [r7, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	f000 809d 	beq.w	80065c8 <_svfiprintf_r+0x1b8>
 800648e:	2300      	movs	r3, #0
 8006490:	f04f 32ff 	mov.w	r2, #4294967295
 8006494:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006498:	9304      	str	r3, [sp, #16]
 800649a:	9307      	str	r3, [sp, #28]
 800649c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064a0:	931a      	str	r3, [sp, #104]	; 0x68
 80064a2:	462f      	mov	r7, r5
 80064a4:	2205      	movs	r2, #5
 80064a6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80064aa:	4850      	ldr	r0, [pc, #320]	; (80065ec <_svfiprintf_r+0x1dc>)
 80064ac:	f000 fa3d 	bl	800692a <memchr>
 80064b0:	9b04      	ldr	r3, [sp, #16]
 80064b2:	b9d0      	cbnz	r0, 80064ea <_svfiprintf_r+0xda>
 80064b4:	06d9      	lsls	r1, r3, #27
 80064b6:	bf44      	itt	mi
 80064b8:	2220      	movmi	r2, #32
 80064ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80064be:	071a      	lsls	r2, r3, #28
 80064c0:	bf44      	itt	mi
 80064c2:	222b      	movmi	r2, #43	; 0x2b
 80064c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80064c8:	782a      	ldrb	r2, [r5, #0]
 80064ca:	2a2a      	cmp	r2, #42	; 0x2a
 80064cc:	d015      	beq.n	80064fa <_svfiprintf_r+0xea>
 80064ce:	462f      	mov	r7, r5
 80064d0:	2000      	movs	r0, #0
 80064d2:	250a      	movs	r5, #10
 80064d4:	9a07      	ldr	r2, [sp, #28]
 80064d6:	4639      	mov	r1, r7
 80064d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064dc:	3b30      	subs	r3, #48	; 0x30
 80064de:	2b09      	cmp	r3, #9
 80064e0:	d94d      	bls.n	800657e <_svfiprintf_r+0x16e>
 80064e2:	b1b8      	cbz	r0, 8006514 <_svfiprintf_r+0x104>
 80064e4:	e00f      	b.n	8006506 <_svfiprintf_r+0xf6>
 80064e6:	462f      	mov	r7, r5
 80064e8:	e7b8      	b.n	800645c <_svfiprintf_r+0x4c>
 80064ea:	4a40      	ldr	r2, [pc, #256]	; (80065ec <_svfiprintf_r+0x1dc>)
 80064ec:	463d      	mov	r5, r7
 80064ee:	1a80      	subs	r0, r0, r2
 80064f0:	fa0b f000 	lsl.w	r0, fp, r0
 80064f4:	4318      	orrs	r0, r3
 80064f6:	9004      	str	r0, [sp, #16]
 80064f8:	e7d3      	b.n	80064a2 <_svfiprintf_r+0x92>
 80064fa:	9a03      	ldr	r2, [sp, #12]
 80064fc:	1d11      	adds	r1, r2, #4
 80064fe:	6812      	ldr	r2, [r2, #0]
 8006500:	9103      	str	r1, [sp, #12]
 8006502:	2a00      	cmp	r2, #0
 8006504:	db01      	blt.n	800650a <_svfiprintf_r+0xfa>
 8006506:	9207      	str	r2, [sp, #28]
 8006508:	e004      	b.n	8006514 <_svfiprintf_r+0x104>
 800650a:	4252      	negs	r2, r2
 800650c:	f043 0302 	orr.w	r3, r3, #2
 8006510:	9207      	str	r2, [sp, #28]
 8006512:	9304      	str	r3, [sp, #16]
 8006514:	783b      	ldrb	r3, [r7, #0]
 8006516:	2b2e      	cmp	r3, #46	; 0x2e
 8006518:	d10c      	bne.n	8006534 <_svfiprintf_r+0x124>
 800651a:	787b      	ldrb	r3, [r7, #1]
 800651c:	2b2a      	cmp	r3, #42	; 0x2a
 800651e:	d133      	bne.n	8006588 <_svfiprintf_r+0x178>
 8006520:	9b03      	ldr	r3, [sp, #12]
 8006522:	3702      	adds	r7, #2
 8006524:	1d1a      	adds	r2, r3, #4
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	9203      	str	r2, [sp, #12]
 800652a:	2b00      	cmp	r3, #0
 800652c:	bfb8      	it	lt
 800652e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006532:	9305      	str	r3, [sp, #20]
 8006534:	4d2e      	ldr	r5, [pc, #184]	; (80065f0 <_svfiprintf_r+0x1e0>)
 8006536:	2203      	movs	r2, #3
 8006538:	7839      	ldrb	r1, [r7, #0]
 800653a:	4628      	mov	r0, r5
 800653c:	f000 f9f5 	bl	800692a <memchr>
 8006540:	b138      	cbz	r0, 8006552 <_svfiprintf_r+0x142>
 8006542:	2340      	movs	r3, #64	; 0x40
 8006544:	1b40      	subs	r0, r0, r5
 8006546:	fa03 f000 	lsl.w	r0, r3, r0
 800654a:	9b04      	ldr	r3, [sp, #16]
 800654c:	3701      	adds	r7, #1
 800654e:	4303      	orrs	r3, r0
 8006550:	9304      	str	r3, [sp, #16]
 8006552:	7839      	ldrb	r1, [r7, #0]
 8006554:	2206      	movs	r2, #6
 8006556:	4827      	ldr	r0, [pc, #156]	; (80065f4 <_svfiprintf_r+0x1e4>)
 8006558:	1c7e      	adds	r6, r7, #1
 800655a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800655e:	f000 f9e4 	bl	800692a <memchr>
 8006562:	2800      	cmp	r0, #0
 8006564:	d038      	beq.n	80065d8 <_svfiprintf_r+0x1c8>
 8006566:	4b24      	ldr	r3, [pc, #144]	; (80065f8 <_svfiprintf_r+0x1e8>)
 8006568:	bb13      	cbnz	r3, 80065b0 <_svfiprintf_r+0x1a0>
 800656a:	9b03      	ldr	r3, [sp, #12]
 800656c:	3307      	adds	r3, #7
 800656e:	f023 0307 	bic.w	r3, r3, #7
 8006572:	3308      	adds	r3, #8
 8006574:	9303      	str	r3, [sp, #12]
 8006576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006578:	444b      	add	r3, r9
 800657a:	9309      	str	r3, [sp, #36]	; 0x24
 800657c:	e76d      	b.n	800645a <_svfiprintf_r+0x4a>
 800657e:	fb05 3202 	mla	r2, r5, r2, r3
 8006582:	2001      	movs	r0, #1
 8006584:	460f      	mov	r7, r1
 8006586:	e7a6      	b.n	80064d6 <_svfiprintf_r+0xc6>
 8006588:	2300      	movs	r3, #0
 800658a:	250a      	movs	r5, #10
 800658c:	4619      	mov	r1, r3
 800658e:	3701      	adds	r7, #1
 8006590:	9305      	str	r3, [sp, #20]
 8006592:	4638      	mov	r0, r7
 8006594:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006598:	3a30      	subs	r2, #48	; 0x30
 800659a:	2a09      	cmp	r2, #9
 800659c:	d903      	bls.n	80065a6 <_svfiprintf_r+0x196>
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d0c8      	beq.n	8006534 <_svfiprintf_r+0x124>
 80065a2:	9105      	str	r1, [sp, #20]
 80065a4:	e7c6      	b.n	8006534 <_svfiprintf_r+0x124>
 80065a6:	fb05 2101 	mla	r1, r5, r1, r2
 80065aa:	2301      	movs	r3, #1
 80065ac:	4607      	mov	r7, r0
 80065ae:	e7f0      	b.n	8006592 <_svfiprintf_r+0x182>
 80065b0:	ab03      	add	r3, sp, #12
 80065b2:	9300      	str	r3, [sp, #0]
 80065b4:	4622      	mov	r2, r4
 80065b6:	4b11      	ldr	r3, [pc, #68]	; (80065fc <_svfiprintf_r+0x1ec>)
 80065b8:	a904      	add	r1, sp, #16
 80065ba:	4640      	mov	r0, r8
 80065bc:	f3af 8000 	nop.w
 80065c0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80065c4:	4681      	mov	r9, r0
 80065c6:	d1d6      	bne.n	8006576 <_svfiprintf_r+0x166>
 80065c8:	89a3      	ldrh	r3, [r4, #12]
 80065ca:	065b      	lsls	r3, r3, #25
 80065cc:	f53f af35 	bmi.w	800643a <_svfiprintf_r+0x2a>
 80065d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065d2:	b01d      	add	sp, #116	; 0x74
 80065d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065d8:	ab03      	add	r3, sp, #12
 80065da:	9300      	str	r3, [sp, #0]
 80065dc:	4622      	mov	r2, r4
 80065de:	4b07      	ldr	r3, [pc, #28]	; (80065fc <_svfiprintf_r+0x1ec>)
 80065e0:	a904      	add	r1, sp, #16
 80065e2:	4640      	mov	r0, r8
 80065e4:	f000 f882 	bl	80066ec <_printf_i>
 80065e8:	e7ea      	b.n	80065c0 <_svfiprintf_r+0x1b0>
 80065ea:	bf00      	nop
 80065ec:	08008c3f 	.word	0x08008c3f
 80065f0:	08008c45 	.word	0x08008c45
 80065f4:	08008c49 	.word	0x08008c49
 80065f8:	00000000 	.word	0x00000000
 80065fc:	0800635b 	.word	0x0800635b

08006600 <_printf_common>:
 8006600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006604:	4691      	mov	r9, r2
 8006606:	461f      	mov	r7, r3
 8006608:	688a      	ldr	r2, [r1, #8]
 800660a:	690b      	ldr	r3, [r1, #16]
 800660c:	4606      	mov	r6, r0
 800660e:	4293      	cmp	r3, r2
 8006610:	bfb8      	it	lt
 8006612:	4613      	movlt	r3, r2
 8006614:	f8c9 3000 	str.w	r3, [r9]
 8006618:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800661c:	460c      	mov	r4, r1
 800661e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006622:	b112      	cbz	r2, 800662a <_printf_common+0x2a>
 8006624:	3301      	adds	r3, #1
 8006626:	f8c9 3000 	str.w	r3, [r9]
 800662a:	6823      	ldr	r3, [r4, #0]
 800662c:	0699      	lsls	r1, r3, #26
 800662e:	bf42      	ittt	mi
 8006630:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006634:	3302      	addmi	r3, #2
 8006636:	f8c9 3000 	strmi.w	r3, [r9]
 800663a:	6825      	ldr	r5, [r4, #0]
 800663c:	f015 0506 	ands.w	r5, r5, #6
 8006640:	d107      	bne.n	8006652 <_printf_common+0x52>
 8006642:	f104 0a19 	add.w	sl, r4, #25
 8006646:	68e3      	ldr	r3, [r4, #12]
 8006648:	f8d9 2000 	ldr.w	r2, [r9]
 800664c:	1a9b      	subs	r3, r3, r2
 800664e:	42ab      	cmp	r3, r5
 8006650:	dc29      	bgt.n	80066a6 <_printf_common+0xa6>
 8006652:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006656:	6822      	ldr	r2, [r4, #0]
 8006658:	3300      	adds	r3, #0
 800665a:	bf18      	it	ne
 800665c:	2301      	movne	r3, #1
 800665e:	0692      	lsls	r2, r2, #26
 8006660:	d42e      	bmi.n	80066c0 <_printf_common+0xc0>
 8006662:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006666:	4639      	mov	r1, r7
 8006668:	4630      	mov	r0, r6
 800666a:	47c0      	blx	r8
 800666c:	3001      	adds	r0, #1
 800666e:	d021      	beq.n	80066b4 <_printf_common+0xb4>
 8006670:	6823      	ldr	r3, [r4, #0]
 8006672:	68e5      	ldr	r5, [r4, #12]
 8006674:	f003 0306 	and.w	r3, r3, #6
 8006678:	2b04      	cmp	r3, #4
 800667a:	bf18      	it	ne
 800667c:	2500      	movne	r5, #0
 800667e:	f8d9 2000 	ldr.w	r2, [r9]
 8006682:	f04f 0900 	mov.w	r9, #0
 8006686:	bf08      	it	eq
 8006688:	1aad      	subeq	r5, r5, r2
 800668a:	68a3      	ldr	r3, [r4, #8]
 800668c:	6922      	ldr	r2, [r4, #16]
 800668e:	bf08      	it	eq
 8006690:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006694:	4293      	cmp	r3, r2
 8006696:	bfc4      	itt	gt
 8006698:	1a9b      	subgt	r3, r3, r2
 800669a:	18ed      	addgt	r5, r5, r3
 800669c:	341a      	adds	r4, #26
 800669e:	454d      	cmp	r5, r9
 80066a0:	d11a      	bne.n	80066d8 <_printf_common+0xd8>
 80066a2:	2000      	movs	r0, #0
 80066a4:	e008      	b.n	80066b8 <_printf_common+0xb8>
 80066a6:	2301      	movs	r3, #1
 80066a8:	4652      	mov	r2, sl
 80066aa:	4639      	mov	r1, r7
 80066ac:	4630      	mov	r0, r6
 80066ae:	47c0      	blx	r8
 80066b0:	3001      	adds	r0, #1
 80066b2:	d103      	bne.n	80066bc <_printf_common+0xbc>
 80066b4:	f04f 30ff 	mov.w	r0, #4294967295
 80066b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066bc:	3501      	adds	r5, #1
 80066be:	e7c2      	b.n	8006646 <_printf_common+0x46>
 80066c0:	2030      	movs	r0, #48	; 0x30
 80066c2:	18e1      	adds	r1, r4, r3
 80066c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80066c8:	1c5a      	adds	r2, r3, #1
 80066ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80066ce:	4422      	add	r2, r4
 80066d0:	3302      	adds	r3, #2
 80066d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80066d6:	e7c4      	b.n	8006662 <_printf_common+0x62>
 80066d8:	2301      	movs	r3, #1
 80066da:	4622      	mov	r2, r4
 80066dc:	4639      	mov	r1, r7
 80066de:	4630      	mov	r0, r6
 80066e0:	47c0      	blx	r8
 80066e2:	3001      	adds	r0, #1
 80066e4:	d0e6      	beq.n	80066b4 <_printf_common+0xb4>
 80066e6:	f109 0901 	add.w	r9, r9, #1
 80066ea:	e7d8      	b.n	800669e <_printf_common+0x9e>

080066ec <_printf_i>:
 80066ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80066f0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80066f4:	460c      	mov	r4, r1
 80066f6:	7e09      	ldrb	r1, [r1, #24]
 80066f8:	b085      	sub	sp, #20
 80066fa:	296e      	cmp	r1, #110	; 0x6e
 80066fc:	4617      	mov	r7, r2
 80066fe:	4606      	mov	r6, r0
 8006700:	4698      	mov	r8, r3
 8006702:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006704:	f000 80b3 	beq.w	800686e <_printf_i+0x182>
 8006708:	d822      	bhi.n	8006750 <_printf_i+0x64>
 800670a:	2963      	cmp	r1, #99	; 0x63
 800670c:	d036      	beq.n	800677c <_printf_i+0x90>
 800670e:	d80a      	bhi.n	8006726 <_printf_i+0x3a>
 8006710:	2900      	cmp	r1, #0
 8006712:	f000 80b9 	beq.w	8006888 <_printf_i+0x19c>
 8006716:	2958      	cmp	r1, #88	; 0x58
 8006718:	f000 8083 	beq.w	8006822 <_printf_i+0x136>
 800671c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006720:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006724:	e032      	b.n	800678c <_printf_i+0xa0>
 8006726:	2964      	cmp	r1, #100	; 0x64
 8006728:	d001      	beq.n	800672e <_printf_i+0x42>
 800672a:	2969      	cmp	r1, #105	; 0x69
 800672c:	d1f6      	bne.n	800671c <_printf_i+0x30>
 800672e:	6820      	ldr	r0, [r4, #0]
 8006730:	6813      	ldr	r3, [r2, #0]
 8006732:	0605      	lsls	r5, r0, #24
 8006734:	f103 0104 	add.w	r1, r3, #4
 8006738:	d52a      	bpl.n	8006790 <_printf_i+0xa4>
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	6011      	str	r1, [r2, #0]
 800673e:	2b00      	cmp	r3, #0
 8006740:	da03      	bge.n	800674a <_printf_i+0x5e>
 8006742:	222d      	movs	r2, #45	; 0x2d
 8006744:	425b      	negs	r3, r3
 8006746:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800674a:	486f      	ldr	r0, [pc, #444]	; (8006908 <_printf_i+0x21c>)
 800674c:	220a      	movs	r2, #10
 800674e:	e039      	b.n	80067c4 <_printf_i+0xd8>
 8006750:	2973      	cmp	r1, #115	; 0x73
 8006752:	f000 809d 	beq.w	8006890 <_printf_i+0x1a4>
 8006756:	d808      	bhi.n	800676a <_printf_i+0x7e>
 8006758:	296f      	cmp	r1, #111	; 0x6f
 800675a:	d020      	beq.n	800679e <_printf_i+0xb2>
 800675c:	2970      	cmp	r1, #112	; 0x70
 800675e:	d1dd      	bne.n	800671c <_printf_i+0x30>
 8006760:	6823      	ldr	r3, [r4, #0]
 8006762:	f043 0320 	orr.w	r3, r3, #32
 8006766:	6023      	str	r3, [r4, #0]
 8006768:	e003      	b.n	8006772 <_printf_i+0x86>
 800676a:	2975      	cmp	r1, #117	; 0x75
 800676c:	d017      	beq.n	800679e <_printf_i+0xb2>
 800676e:	2978      	cmp	r1, #120	; 0x78
 8006770:	d1d4      	bne.n	800671c <_printf_i+0x30>
 8006772:	2378      	movs	r3, #120	; 0x78
 8006774:	4865      	ldr	r0, [pc, #404]	; (800690c <_printf_i+0x220>)
 8006776:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800677a:	e055      	b.n	8006828 <_printf_i+0x13c>
 800677c:	6813      	ldr	r3, [r2, #0]
 800677e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006782:	1d19      	adds	r1, r3, #4
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	6011      	str	r1, [r2, #0]
 8006788:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800678c:	2301      	movs	r3, #1
 800678e:	e08c      	b.n	80068aa <_printf_i+0x1be>
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006796:	6011      	str	r1, [r2, #0]
 8006798:	bf18      	it	ne
 800679a:	b21b      	sxthne	r3, r3
 800679c:	e7cf      	b.n	800673e <_printf_i+0x52>
 800679e:	6813      	ldr	r3, [r2, #0]
 80067a0:	6825      	ldr	r5, [r4, #0]
 80067a2:	1d18      	adds	r0, r3, #4
 80067a4:	6010      	str	r0, [r2, #0]
 80067a6:	0628      	lsls	r0, r5, #24
 80067a8:	d501      	bpl.n	80067ae <_printf_i+0xc2>
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	e002      	b.n	80067b4 <_printf_i+0xc8>
 80067ae:	0668      	lsls	r0, r5, #25
 80067b0:	d5fb      	bpl.n	80067aa <_printf_i+0xbe>
 80067b2:	881b      	ldrh	r3, [r3, #0]
 80067b4:	296f      	cmp	r1, #111	; 0x6f
 80067b6:	bf14      	ite	ne
 80067b8:	220a      	movne	r2, #10
 80067ba:	2208      	moveq	r2, #8
 80067bc:	4852      	ldr	r0, [pc, #328]	; (8006908 <_printf_i+0x21c>)
 80067be:	2100      	movs	r1, #0
 80067c0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80067c4:	6865      	ldr	r5, [r4, #4]
 80067c6:	2d00      	cmp	r5, #0
 80067c8:	60a5      	str	r5, [r4, #8]
 80067ca:	f2c0 8095 	blt.w	80068f8 <_printf_i+0x20c>
 80067ce:	6821      	ldr	r1, [r4, #0]
 80067d0:	f021 0104 	bic.w	r1, r1, #4
 80067d4:	6021      	str	r1, [r4, #0]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d13d      	bne.n	8006856 <_printf_i+0x16a>
 80067da:	2d00      	cmp	r5, #0
 80067dc:	f040 808e 	bne.w	80068fc <_printf_i+0x210>
 80067e0:	4665      	mov	r5, ip
 80067e2:	2a08      	cmp	r2, #8
 80067e4:	d10b      	bne.n	80067fe <_printf_i+0x112>
 80067e6:	6823      	ldr	r3, [r4, #0]
 80067e8:	07db      	lsls	r3, r3, #31
 80067ea:	d508      	bpl.n	80067fe <_printf_i+0x112>
 80067ec:	6923      	ldr	r3, [r4, #16]
 80067ee:	6862      	ldr	r2, [r4, #4]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	bfde      	ittt	le
 80067f4:	2330      	movle	r3, #48	; 0x30
 80067f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80067fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80067fe:	ebac 0305 	sub.w	r3, ip, r5
 8006802:	6123      	str	r3, [r4, #16]
 8006804:	f8cd 8000 	str.w	r8, [sp]
 8006808:	463b      	mov	r3, r7
 800680a:	aa03      	add	r2, sp, #12
 800680c:	4621      	mov	r1, r4
 800680e:	4630      	mov	r0, r6
 8006810:	f7ff fef6 	bl	8006600 <_printf_common>
 8006814:	3001      	adds	r0, #1
 8006816:	d14d      	bne.n	80068b4 <_printf_i+0x1c8>
 8006818:	f04f 30ff 	mov.w	r0, #4294967295
 800681c:	b005      	add	sp, #20
 800681e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006822:	4839      	ldr	r0, [pc, #228]	; (8006908 <_printf_i+0x21c>)
 8006824:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006828:	6813      	ldr	r3, [r2, #0]
 800682a:	6821      	ldr	r1, [r4, #0]
 800682c:	1d1d      	adds	r5, r3, #4
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	6015      	str	r5, [r2, #0]
 8006832:	060a      	lsls	r2, r1, #24
 8006834:	d50b      	bpl.n	800684e <_printf_i+0x162>
 8006836:	07ca      	lsls	r2, r1, #31
 8006838:	bf44      	itt	mi
 800683a:	f041 0120 	orrmi.w	r1, r1, #32
 800683e:	6021      	strmi	r1, [r4, #0]
 8006840:	b91b      	cbnz	r3, 800684a <_printf_i+0x15e>
 8006842:	6822      	ldr	r2, [r4, #0]
 8006844:	f022 0220 	bic.w	r2, r2, #32
 8006848:	6022      	str	r2, [r4, #0]
 800684a:	2210      	movs	r2, #16
 800684c:	e7b7      	b.n	80067be <_printf_i+0xd2>
 800684e:	064d      	lsls	r5, r1, #25
 8006850:	bf48      	it	mi
 8006852:	b29b      	uxthmi	r3, r3
 8006854:	e7ef      	b.n	8006836 <_printf_i+0x14a>
 8006856:	4665      	mov	r5, ip
 8006858:	fbb3 f1f2 	udiv	r1, r3, r2
 800685c:	fb02 3311 	mls	r3, r2, r1, r3
 8006860:	5cc3      	ldrb	r3, [r0, r3]
 8006862:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006866:	460b      	mov	r3, r1
 8006868:	2900      	cmp	r1, #0
 800686a:	d1f5      	bne.n	8006858 <_printf_i+0x16c>
 800686c:	e7b9      	b.n	80067e2 <_printf_i+0xf6>
 800686e:	6813      	ldr	r3, [r2, #0]
 8006870:	6825      	ldr	r5, [r4, #0]
 8006872:	1d18      	adds	r0, r3, #4
 8006874:	6961      	ldr	r1, [r4, #20]
 8006876:	6010      	str	r0, [r2, #0]
 8006878:	0628      	lsls	r0, r5, #24
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	d501      	bpl.n	8006882 <_printf_i+0x196>
 800687e:	6019      	str	r1, [r3, #0]
 8006880:	e002      	b.n	8006888 <_printf_i+0x19c>
 8006882:	066a      	lsls	r2, r5, #25
 8006884:	d5fb      	bpl.n	800687e <_printf_i+0x192>
 8006886:	8019      	strh	r1, [r3, #0]
 8006888:	2300      	movs	r3, #0
 800688a:	4665      	mov	r5, ip
 800688c:	6123      	str	r3, [r4, #16]
 800688e:	e7b9      	b.n	8006804 <_printf_i+0x118>
 8006890:	6813      	ldr	r3, [r2, #0]
 8006892:	1d19      	adds	r1, r3, #4
 8006894:	6011      	str	r1, [r2, #0]
 8006896:	681d      	ldr	r5, [r3, #0]
 8006898:	6862      	ldr	r2, [r4, #4]
 800689a:	2100      	movs	r1, #0
 800689c:	4628      	mov	r0, r5
 800689e:	f000 f844 	bl	800692a <memchr>
 80068a2:	b108      	cbz	r0, 80068a8 <_printf_i+0x1bc>
 80068a4:	1b40      	subs	r0, r0, r5
 80068a6:	6060      	str	r0, [r4, #4]
 80068a8:	6863      	ldr	r3, [r4, #4]
 80068aa:	6123      	str	r3, [r4, #16]
 80068ac:	2300      	movs	r3, #0
 80068ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068b2:	e7a7      	b.n	8006804 <_printf_i+0x118>
 80068b4:	6923      	ldr	r3, [r4, #16]
 80068b6:	462a      	mov	r2, r5
 80068b8:	4639      	mov	r1, r7
 80068ba:	4630      	mov	r0, r6
 80068bc:	47c0      	blx	r8
 80068be:	3001      	adds	r0, #1
 80068c0:	d0aa      	beq.n	8006818 <_printf_i+0x12c>
 80068c2:	6823      	ldr	r3, [r4, #0]
 80068c4:	079b      	lsls	r3, r3, #30
 80068c6:	d413      	bmi.n	80068f0 <_printf_i+0x204>
 80068c8:	68e0      	ldr	r0, [r4, #12]
 80068ca:	9b03      	ldr	r3, [sp, #12]
 80068cc:	4298      	cmp	r0, r3
 80068ce:	bfb8      	it	lt
 80068d0:	4618      	movlt	r0, r3
 80068d2:	e7a3      	b.n	800681c <_printf_i+0x130>
 80068d4:	2301      	movs	r3, #1
 80068d6:	464a      	mov	r2, r9
 80068d8:	4639      	mov	r1, r7
 80068da:	4630      	mov	r0, r6
 80068dc:	47c0      	blx	r8
 80068de:	3001      	adds	r0, #1
 80068e0:	d09a      	beq.n	8006818 <_printf_i+0x12c>
 80068e2:	3501      	adds	r5, #1
 80068e4:	68e3      	ldr	r3, [r4, #12]
 80068e6:	9a03      	ldr	r2, [sp, #12]
 80068e8:	1a9b      	subs	r3, r3, r2
 80068ea:	42ab      	cmp	r3, r5
 80068ec:	dcf2      	bgt.n	80068d4 <_printf_i+0x1e8>
 80068ee:	e7eb      	b.n	80068c8 <_printf_i+0x1dc>
 80068f0:	2500      	movs	r5, #0
 80068f2:	f104 0919 	add.w	r9, r4, #25
 80068f6:	e7f5      	b.n	80068e4 <_printf_i+0x1f8>
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d1ac      	bne.n	8006856 <_printf_i+0x16a>
 80068fc:	7803      	ldrb	r3, [r0, #0]
 80068fe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006902:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006906:	e76c      	b.n	80067e2 <_printf_i+0xf6>
 8006908:	08008c50 	.word	0x08008c50
 800690c:	08008c61 	.word	0x08008c61

08006910 <__ascii_wctomb>:
 8006910:	b149      	cbz	r1, 8006926 <__ascii_wctomb+0x16>
 8006912:	2aff      	cmp	r2, #255	; 0xff
 8006914:	bf8b      	itete	hi
 8006916:	238a      	movhi	r3, #138	; 0x8a
 8006918:	700a      	strbls	r2, [r1, #0]
 800691a:	6003      	strhi	r3, [r0, #0]
 800691c:	2001      	movls	r0, #1
 800691e:	bf88      	it	hi
 8006920:	f04f 30ff 	movhi.w	r0, #4294967295
 8006924:	4770      	bx	lr
 8006926:	4608      	mov	r0, r1
 8006928:	4770      	bx	lr

0800692a <memchr>:
 800692a:	b510      	push	{r4, lr}
 800692c:	b2c9      	uxtb	r1, r1
 800692e:	4402      	add	r2, r0
 8006930:	4290      	cmp	r0, r2
 8006932:	4603      	mov	r3, r0
 8006934:	d101      	bne.n	800693a <memchr+0x10>
 8006936:	2300      	movs	r3, #0
 8006938:	e003      	b.n	8006942 <memchr+0x18>
 800693a:	781c      	ldrb	r4, [r3, #0]
 800693c:	3001      	adds	r0, #1
 800693e:	428c      	cmp	r4, r1
 8006940:	d1f6      	bne.n	8006930 <memchr+0x6>
 8006942:	4618      	mov	r0, r3
 8006944:	bd10      	pop	{r4, pc}

08006946 <memmove>:
 8006946:	4288      	cmp	r0, r1
 8006948:	b510      	push	{r4, lr}
 800694a:	eb01 0302 	add.w	r3, r1, r2
 800694e:	d807      	bhi.n	8006960 <memmove+0x1a>
 8006950:	1e42      	subs	r2, r0, #1
 8006952:	4299      	cmp	r1, r3
 8006954:	d00a      	beq.n	800696c <memmove+0x26>
 8006956:	f811 4b01 	ldrb.w	r4, [r1], #1
 800695a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800695e:	e7f8      	b.n	8006952 <memmove+0xc>
 8006960:	4283      	cmp	r3, r0
 8006962:	d9f5      	bls.n	8006950 <memmove+0xa>
 8006964:	1881      	adds	r1, r0, r2
 8006966:	1ad2      	subs	r2, r2, r3
 8006968:	42d3      	cmn	r3, r2
 800696a:	d100      	bne.n	800696e <memmove+0x28>
 800696c:	bd10      	pop	{r4, pc}
 800696e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006972:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006976:	e7f7      	b.n	8006968 <memmove+0x22>

08006978 <_realloc_r>:
 8006978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800697a:	4607      	mov	r7, r0
 800697c:	4614      	mov	r4, r2
 800697e:	460e      	mov	r6, r1
 8006980:	b921      	cbnz	r1, 800698c <_realloc_r+0x14>
 8006982:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006986:	4611      	mov	r1, r2
 8006988:	f7ff bab2 	b.w	8005ef0 <_malloc_r>
 800698c:	b922      	cbnz	r2, 8006998 <_realloc_r+0x20>
 800698e:	f7ff fa63 	bl	8005e58 <_free_r>
 8006992:	4625      	mov	r5, r4
 8006994:	4628      	mov	r0, r5
 8006996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006998:	f000 f814 	bl	80069c4 <_malloc_usable_size_r>
 800699c:	42a0      	cmp	r0, r4
 800699e:	d20f      	bcs.n	80069c0 <_realloc_r+0x48>
 80069a0:	4621      	mov	r1, r4
 80069a2:	4638      	mov	r0, r7
 80069a4:	f7ff faa4 	bl	8005ef0 <_malloc_r>
 80069a8:	4605      	mov	r5, r0
 80069aa:	2800      	cmp	r0, #0
 80069ac:	d0f2      	beq.n	8006994 <_realloc_r+0x1c>
 80069ae:	4631      	mov	r1, r6
 80069b0:	4622      	mov	r2, r4
 80069b2:	f7ff fa3e 	bl	8005e32 <memcpy>
 80069b6:	4631      	mov	r1, r6
 80069b8:	4638      	mov	r0, r7
 80069ba:	f7ff fa4d 	bl	8005e58 <_free_r>
 80069be:	e7e9      	b.n	8006994 <_realloc_r+0x1c>
 80069c0:	4635      	mov	r5, r6
 80069c2:	e7e7      	b.n	8006994 <_realloc_r+0x1c>

080069c4 <_malloc_usable_size_r>:
 80069c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069c8:	1f18      	subs	r0, r3, #4
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	bfbc      	itt	lt
 80069ce:	580b      	ldrlt	r3, [r1, r0]
 80069d0:	18c0      	addlt	r0, r0, r3
 80069d2:	4770      	bx	lr

080069d4 <_sbrk>:
 80069d4:	4b04      	ldr	r3, [pc, #16]	; (80069e8 <_sbrk+0x14>)
 80069d6:	4602      	mov	r2, r0
 80069d8:	6819      	ldr	r1, [r3, #0]
 80069da:	b909      	cbnz	r1, 80069e0 <_sbrk+0xc>
 80069dc:	4903      	ldr	r1, [pc, #12]	; (80069ec <_sbrk+0x18>)
 80069de:	6019      	str	r1, [r3, #0]
 80069e0:	6818      	ldr	r0, [r3, #0]
 80069e2:	4402      	add	r2, r0
 80069e4:	601a      	str	r2, [r3, #0]
 80069e6:	4770      	bx	lr
 80069e8:	200005f8 	.word	0x200005f8
 80069ec:	200008c8 	.word	0x200008c8

080069f0 <_init>:
 80069f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069f2:	bf00      	nop
 80069f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069f6:	bc08      	pop	{r3}
 80069f8:	469e      	mov	lr, r3
 80069fa:	4770      	bx	lr

080069fc <_fini>:
 80069fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069fe:	bf00      	nop
 8006a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a02:	bc08      	pop	{r3}
 8006a04:	469e      	mov	lr, r3
 8006a06:	4770      	bx	lr
