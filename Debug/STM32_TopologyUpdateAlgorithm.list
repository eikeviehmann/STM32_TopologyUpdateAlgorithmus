
STM32_TopologyUpdateAlgorithm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077ac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003334  080078b8  080078b8  000178b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abec  0800abec  00020664  2**0
                  CONTENTS
  4 .ARM          00000000  0800abec  0800abec  00020664  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800abec  0800abec  00020664  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abec  0800abec  0001abec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800abf0  0800abf0  0001abf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000664  20000000  0800abf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  20000664  0800b258  00020664  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000924  0800b258  00020924  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020664  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013a17  00000000  00000000  0002068d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002612  00000000  00000000  000340a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ad0  00000000  00000000  000366b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a30  00000000  00000000  00037188  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014410  00000000  00000000  00037bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008beb  00000000  00000000  0004bfc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005f32c  00000000  00000000  00054bb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b3edf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003194  00000000  00000000  000b3f5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000664 	.word	0x20000664
 8000128:	00000000 	.word	0x00000000
 800012c:	080078a0 	.word	0x080078a0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000668 	.word	0x20000668
 8000148:	080078a0 	.word	0x080078a0

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <main>:
#include "rf24/rf24.h"

/*-------------------------MAIN FUNCTION------------------------------*/

int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	rf24_init();
 8000174:	f001 f82a 	bl	80011cc <rf24_init>

    while(1)
 8000178:	e7fe      	b.n	8000178 <main+0x8>
	...

0800017c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800017c:	b480      	push	{r7}
 800017e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000180:	4b15      	ldr	r3, [pc, #84]	; (80001d8 <SystemInit+0x5c>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a14      	ldr	r2, [pc, #80]	; (80001d8 <SystemInit+0x5c>)
 8000186:	f043 0301 	orr.w	r3, r3, #1
 800018a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800018c:	4b12      	ldr	r3, [pc, #72]	; (80001d8 <SystemInit+0x5c>)
 800018e:	685a      	ldr	r2, [r3, #4]
 8000190:	4911      	ldr	r1, [pc, #68]	; (80001d8 <SystemInit+0x5c>)
 8000192:	4b12      	ldr	r3, [pc, #72]	; (80001dc <SystemInit+0x60>)
 8000194:	4013      	ands	r3, r2
 8000196:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000198:	4b0f      	ldr	r3, [pc, #60]	; (80001d8 <SystemInit+0x5c>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4a0e      	ldr	r2, [pc, #56]	; (80001d8 <SystemInit+0x5c>)
 800019e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80001a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80001a6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80001a8:	4b0b      	ldr	r3, [pc, #44]	; (80001d8 <SystemInit+0x5c>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	4a0a      	ldr	r2, [pc, #40]	; (80001d8 <SystemInit+0x5c>)
 80001ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80001b2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80001b4:	4b08      	ldr	r3, [pc, #32]	; (80001d8 <SystemInit+0x5c>)
 80001b6:	685b      	ldr	r3, [r3, #4]
 80001b8:	4a07      	ldr	r2, [pc, #28]	; (80001d8 <SystemInit+0x5c>)
 80001ba:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80001be:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80001c0:	4b05      	ldr	r3, [pc, #20]	; (80001d8 <SystemInit+0x5c>)
 80001c2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80001c6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80001c8:	4b05      	ldr	r3, [pc, #20]	; (80001e0 <SystemInit+0x64>)
 80001ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80001ce:	609a      	str	r2, [r3, #8]
#endif 
}
 80001d0:	bf00      	nop
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bc80      	pop	{r7}
 80001d6:	4770      	bx	lr
 80001d8:	40021000 	.word	0x40021000
 80001dc:	f8ff0000 	.word	0xf8ff0000
 80001e0:	e000ed00 	.word	0xe000ed00

080001e4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b085      	sub	sp, #20
 80001e8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmull = 0U, pllsource = 0U;
 80001ea:	2300      	movs	r3, #0
 80001ec:	60fb      	str	r3, [r7, #12]
 80001ee:	2300      	movs	r3, #0
 80001f0:	60bb      	str	r3, [r7, #8]
 80001f2:	2300      	movs	r3, #0
 80001f4:	607b      	str	r3, [r7, #4]
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80001f6:	4b2c      	ldr	r3, [pc, #176]	; (80002a8 <SystemCoreClockUpdate+0xc4>)
 80001f8:	685b      	ldr	r3, [r3, #4]
 80001fa:	f003 030c 	and.w	r3, r3, #12
 80001fe:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	2b04      	cmp	r3, #4
 8000204:	d007      	beq.n	8000216 <SystemCoreClockUpdate+0x32>
 8000206:	2b08      	cmp	r3, #8
 8000208:	d009      	beq.n	800021e <SystemCoreClockUpdate+0x3a>
 800020a:	2b00      	cmp	r3, #0
 800020c:	d133      	bne.n	8000276 <SystemCoreClockUpdate+0x92>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 800020e:	4b27      	ldr	r3, [pc, #156]	; (80002ac <SystemCoreClockUpdate+0xc8>)
 8000210:	4a27      	ldr	r2, [pc, #156]	; (80002b0 <SystemCoreClockUpdate+0xcc>)
 8000212:	601a      	str	r2, [r3, #0]
      break;
 8000214:	e033      	b.n	800027e <SystemCoreClockUpdate+0x9a>
    case 0x04U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000216:	4b25      	ldr	r3, [pc, #148]	; (80002ac <SystemCoreClockUpdate+0xc8>)
 8000218:	4a25      	ldr	r2, [pc, #148]	; (80002b0 <SystemCoreClockUpdate+0xcc>)
 800021a:	601a      	str	r2, [r3, #0]
      break;
 800021c:	e02f      	b.n	800027e <SystemCoreClockUpdate+0x9a>
    case 0x08U:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800021e:	4b22      	ldr	r3, [pc, #136]	; (80002a8 <SystemCoreClockUpdate+0xc4>)
 8000220:	685b      	ldr	r3, [r3, #4]
 8000222:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000226:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000228:	4b1f      	ldr	r3, [pc, #124]	; (80002a8 <SystemCoreClockUpdate+0xc4>)
 800022a:	685b      	ldr	r3, [r3, #4]
 800022c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000230:	607b      	str	r3, [r7, #4]
      
#if !defined(STM32F105xC) && !defined(STM32F107xC)      
      pllmull = ( pllmull >> 18U) + 2U;
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	0c9b      	lsrs	r3, r3, #18
 8000236:	3302      	adds	r3, #2
 8000238:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00U)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d106      	bne.n	800024e <SystemCoreClockUpdate+0x6a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 8000240:	68bb      	ldr	r3, [r7, #8]
 8000242:	4a1c      	ldr	r2, [pc, #112]	; (80002b4 <SystemCoreClockUpdate+0xd0>)
 8000244:	fb02 f303 	mul.w	r3, r2, r3
 8000248:	4a18      	ldr	r2, [pc, #96]	; (80002ac <SystemCoreClockUpdate+0xc8>)
 800024a:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F105xC */ 
      break;
 800024c:	e017      	b.n	800027e <SystemCoreClockUpdate+0x9a>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 800024e:	4b16      	ldr	r3, [pc, #88]	; (80002a8 <SystemCoreClockUpdate+0xc4>)
 8000250:	685b      	ldr	r3, [r3, #4]
 8000252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000256:	2b00      	cmp	r3, #0
 8000258:	d006      	beq.n	8000268 <SystemCoreClockUpdate+0x84>
          SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 800025a:	68bb      	ldr	r3, [r7, #8]
 800025c:	4a15      	ldr	r2, [pc, #84]	; (80002b4 <SystemCoreClockUpdate+0xd0>)
 800025e:	fb02 f303 	mul.w	r3, r2, r3
 8000262:	4a12      	ldr	r2, [pc, #72]	; (80002ac <SystemCoreClockUpdate+0xc8>)
 8000264:	6013      	str	r3, [r2, #0]
      break;
 8000266:	e00a      	b.n	800027e <SystemCoreClockUpdate+0x9a>
          SystemCoreClock = HSE_VALUE * pllmull;
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	4a11      	ldr	r2, [pc, #68]	; (80002b0 <SystemCoreClockUpdate+0xcc>)
 800026c:	fb02 f303 	mul.w	r3, r2, r3
 8000270:	4a0e      	ldr	r2, [pc, #56]	; (80002ac <SystemCoreClockUpdate+0xc8>)
 8000272:	6013      	str	r3, [r2, #0]
      break;
 8000274:	e003      	b.n	800027e <SystemCoreClockUpdate+0x9a>

    default:
      SystemCoreClock = HSI_VALUE;
 8000276:	4b0d      	ldr	r3, [pc, #52]	; (80002ac <SystemCoreClockUpdate+0xc8>)
 8000278:	4a0d      	ldr	r2, [pc, #52]	; (80002b0 <SystemCoreClockUpdate+0xcc>)
 800027a:	601a      	str	r2, [r3, #0]
      break;
 800027c:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800027e:	4b0a      	ldr	r3, [pc, #40]	; (80002a8 <SystemCoreClockUpdate+0xc4>)
 8000280:	685b      	ldr	r3, [r3, #4]
 8000282:	091b      	lsrs	r3, r3, #4
 8000284:	f003 030f 	and.w	r3, r3, #15
 8000288:	4a0b      	ldr	r2, [pc, #44]	; (80002b8 <SystemCoreClockUpdate+0xd4>)
 800028a:	5cd3      	ldrb	r3, [r2, r3]
 800028c:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 800028e:	4b07      	ldr	r3, [pc, #28]	; (80002ac <SystemCoreClockUpdate+0xc8>)
 8000290:	681a      	ldr	r2, [r3, #0]
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	fa22 f303 	lsr.w	r3, r2, r3
 8000298:	4a04      	ldr	r2, [pc, #16]	; (80002ac <SystemCoreClockUpdate+0xc8>)
 800029a:	6013      	str	r3, [r2, #0]
}
 800029c:	bf00      	nop
 800029e:	3714      	adds	r7, #20
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bc80      	pop	{r7}
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	40021000 	.word	0x40021000
 80002ac:	20000000 	.word	0x20000000
 80002b0:	007a1200 	.word	0x007a1200
 80002b4:	003d0900 	.word	0x003d0900
 80002b8:	0800a54c 	.word	0x0800a54c

080002bc <Encode>:
  }

// Encodes input (UINT4) into output (BYTE). Assumes len is
// a multiple of 4.
static void Encode (uint8_t *output, const uint32_t *input, uint16_t len )
{
 80002bc:	b480      	push	{r7}
 80002be:	b087      	sub	sp, #28
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	60f8      	str	r0, [r7, #12]
 80002c4:	60b9      	str	r1, [r7, #8]
 80002c6:	4613      	mov	r3, r2
 80002c8:	80fb      	strh	r3, [r7, #6]
  uint16_t i, j;

  for (i = 0, j = 0; j < len; i++, j += 4)
 80002ca:	2300      	movs	r3, #0
 80002cc:	82fb      	strh	r3, [r7, #22]
 80002ce:	2300      	movs	r3, #0
 80002d0:	82bb      	strh	r3, [r7, #20]
 80002d2:	e033      	b.n	800033c <Encode+0x80>
  {
    output[j]     = (uint8_t)(input[i] & 0xff);
 80002d4:	8afb      	ldrh	r3, [r7, #22]
 80002d6:	009b      	lsls	r3, r3, #2
 80002d8:	68ba      	ldr	r2, [r7, #8]
 80002da:	4413      	add	r3, r2
 80002dc:	6819      	ldr	r1, [r3, #0]
 80002de:	8abb      	ldrh	r3, [r7, #20]
 80002e0:	68fa      	ldr	r2, [r7, #12]
 80002e2:	4413      	add	r3, r2
 80002e4:	b2ca      	uxtb	r2, r1
 80002e6:	701a      	strb	r2, [r3, #0]
    *(output+j+1) = (uint8_t)((input[i] >> 8) & 0xff);
 80002e8:	8afb      	ldrh	r3, [r7, #22]
 80002ea:	009b      	lsls	r3, r3, #2
 80002ec:	68ba      	ldr	r2, [r7, #8]
 80002ee:	4413      	add	r3, r2
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	0a19      	lsrs	r1, r3, #8
 80002f4:	8abb      	ldrh	r3, [r7, #20]
 80002f6:	3301      	adds	r3, #1
 80002f8:	68fa      	ldr	r2, [r7, #12]
 80002fa:	4413      	add	r3, r2
 80002fc:	b2ca      	uxtb	r2, r1
 80002fe:	701a      	strb	r2, [r3, #0]
    *(output+j+2) = (uint8_t)((input[i] >> 16) & 0xff);
 8000300:	8afb      	ldrh	r3, [r7, #22]
 8000302:	009b      	lsls	r3, r3, #2
 8000304:	68ba      	ldr	r2, [r7, #8]
 8000306:	4413      	add	r3, r2
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	0c19      	lsrs	r1, r3, #16
 800030c:	8abb      	ldrh	r3, [r7, #20]
 800030e:	3302      	adds	r3, #2
 8000310:	68fa      	ldr	r2, [r7, #12]
 8000312:	4413      	add	r3, r2
 8000314:	b2ca      	uxtb	r2, r1
 8000316:	701a      	strb	r2, [r3, #0]
    *(output+j+3) = (uint8_t)((input[i] >> 24) & 0xff);
 8000318:	8afb      	ldrh	r3, [r7, #22]
 800031a:	009b      	lsls	r3, r3, #2
 800031c:	68ba      	ldr	r2, [r7, #8]
 800031e:	4413      	add	r3, r2
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	0e19      	lsrs	r1, r3, #24
 8000324:	8abb      	ldrh	r3, [r7, #20]
 8000326:	3303      	adds	r3, #3
 8000328:	68fa      	ldr	r2, [r7, #12]
 800032a:	4413      	add	r3, r2
 800032c:	b2ca      	uxtb	r2, r1
 800032e:	701a      	strb	r2, [r3, #0]
  for (i = 0, j = 0; j < len; i++, j += 4)
 8000330:	8afb      	ldrh	r3, [r7, #22]
 8000332:	3301      	adds	r3, #1
 8000334:	82fb      	strh	r3, [r7, #22]
 8000336:	8abb      	ldrh	r3, [r7, #20]
 8000338:	3304      	adds	r3, #4
 800033a:	82bb      	strh	r3, [r7, #20]
 800033c:	8aba      	ldrh	r2, [r7, #20]
 800033e:	88fb      	ldrh	r3, [r7, #6]
 8000340:	429a      	cmp	r2, r3
 8000342:	d3c7      	bcc.n	80002d4 <Encode+0x18>
  }
}
 8000344:	bf00      	nop
 8000346:	371c      	adds	r7, #28
 8000348:	46bd      	mov	sp, r7
 800034a:	bc80      	pop	{r7}
 800034c:	4770      	bx	lr

0800034e <Decode>:

// Decodes input (BYTE) into output (UINT4). Assumes len is
// multiple of 4.
static void Decode (uint32_t *output, const uint8_t *input, uint16_t len )
{
 800034e:	b480      	push	{r7}
 8000350:	b087      	sub	sp, #28
 8000352:	af00      	add	r7, sp, #0
 8000354:	60f8      	str	r0, [r7, #12]
 8000356:	60b9      	str	r1, [r7, #8]
 8000358:	4613      	mov	r3, r2
 800035a:	80fb      	strh	r3, [r7, #6]
  uint16_t i, j;

  for (i = 0, j = 0; j < len; i++, j += 4)
 800035c:	2300      	movs	r3, #0
 800035e:	82fb      	strh	r3, [r7, #22]
 8000360:	2300      	movs	r3, #0
 8000362:	82bb      	strh	r3, [r7, #20]
 8000364:	e026      	b.n	80003b4 <Decode+0x66>
    output[i] = ((uint32_t)input[j]) | (((uint32_t)*(input + j + 1)) << 8) | (((uint32_t)*(input + j + 2)) << 16) | (((uint32_t)*(input + j + 3)) << 24);
 8000366:	8abb      	ldrh	r3, [r7, #20]
 8000368:	68ba      	ldr	r2, [r7, #8]
 800036a:	4413      	add	r3, r2
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	4619      	mov	r1, r3
 8000370:	8abb      	ldrh	r3, [r7, #20]
 8000372:	3301      	adds	r3, #1
 8000374:	68ba      	ldr	r2, [r7, #8]
 8000376:	4413      	add	r3, r2
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	021b      	lsls	r3, r3, #8
 800037c:	ea41 0203 	orr.w	r2, r1, r3
 8000380:	8abb      	ldrh	r3, [r7, #20]
 8000382:	3302      	adds	r3, #2
 8000384:	68b9      	ldr	r1, [r7, #8]
 8000386:	440b      	add	r3, r1
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	041b      	lsls	r3, r3, #16
 800038c:	ea42 0103 	orr.w	r1, r2, r3
 8000390:	8abb      	ldrh	r3, [r7, #20]
 8000392:	3303      	adds	r3, #3
 8000394:	68ba      	ldr	r2, [r7, #8]
 8000396:	4413      	add	r3, r2
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	061a      	lsls	r2, r3, #24
 800039c:	8afb      	ldrh	r3, [r7, #22]
 800039e:	009b      	lsls	r3, r3, #2
 80003a0:	68f8      	ldr	r0, [r7, #12]
 80003a2:	4403      	add	r3, r0
 80003a4:	430a      	orrs	r2, r1
 80003a6:	601a      	str	r2, [r3, #0]
  for (i = 0, j = 0; j < len; i++, j += 4)
 80003a8:	8afb      	ldrh	r3, [r7, #22]
 80003aa:	3301      	adds	r3, #1
 80003ac:	82fb      	strh	r3, [r7, #22]
 80003ae:	8abb      	ldrh	r3, [r7, #20]
 80003b0:	3304      	adds	r3, #4
 80003b2:	82bb      	strh	r3, [r7, #20]
 80003b4:	8aba      	ldrh	r2, [r7, #20]
 80003b6:	88fb      	ldrh	r3, [r7, #6]
 80003b8:	429a      	cmp	r2, r3
 80003ba:	d3d4      	bcc.n	8000366 <Decode+0x18>
}
 80003bc:	bf00      	nop
 80003be:	371c      	adds	r7, #28
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bc80      	pop	{r7}
 80003c4:	4770      	bx	lr
	...

080003c8 <MD5Transform>:
//}

// MD5 basic transformation. Transforms state based on block.

static void MD5Transform (uint32_t state[4], const uint8_t block[64])
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b096      	sub	sp, #88	; 0x58
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
 80003d0:	6039      	str	r1, [r7, #0]
  uint32_t a = state[0], b = state[1], c = state[2], d = state[3], x[16];
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	657b      	str	r3, [r7, #84]	; 0x54
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	685b      	ldr	r3, [r3, #4]
 80003dc:	653b      	str	r3, [r7, #80]	; 0x50
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	689b      	ldr	r3, [r3, #8]
 80003e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	68db      	ldr	r3, [r3, #12]
 80003e8:	64bb      	str	r3, [r7, #72]	; 0x48

  Decode (x, block, 64);
 80003ea:	f107 0308 	add.w	r3, r7, #8
 80003ee:	2240      	movs	r2, #64	; 0x40
 80003f0:	6839      	ldr	r1, [r7, #0]
 80003f2:	4618      	mov	r0, r3
 80003f4:	f7ff ffab 	bl	800034e <Decode>

  // Round 1
  FF (a, b, c, d, x[ 0], S11, 0xd76aa478); // 1
 80003f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80003fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80003fc:	401a      	ands	r2, r3
 80003fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000400:	43d9      	mvns	r1, r3
 8000402:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000404:	400b      	ands	r3, r1
 8000406:	431a      	orrs	r2, r3
 8000408:	68bb      	ldr	r3, [r7, #8]
 800040a:	441a      	add	r2, r3
 800040c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800040e:	441a      	add	r2, r3
 8000410:	4ba2      	ldr	r3, [pc, #648]	; (800069c <MD5Transform+0x2d4>)
 8000412:	4413      	add	r3, r2
 8000414:	657b      	str	r3, [r7, #84]	; 0x54
 8000416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000418:	ea4f 6373 	mov.w	r3, r3, ror #25
 800041c:	657b      	str	r3, [r7, #84]	; 0x54
 800041e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000422:	4413      	add	r3, r2
 8000424:	657b      	str	r3, [r7, #84]	; 0x54
  FF (d, a, b, c, x[ 1], S12, 0xe8c7b756); // 2
 8000426:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000428:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800042a:	401a      	ands	r2, r3
 800042c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800042e:	43d9      	mvns	r1, r3
 8000430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000432:	400b      	ands	r3, r1
 8000434:	431a      	orrs	r2, r3
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	441a      	add	r2, r3
 800043a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800043c:	441a      	add	r2, r3
 800043e:	4b98      	ldr	r3, [pc, #608]	; (80006a0 <MD5Transform+0x2d8>)
 8000440:	4413      	add	r3, r2
 8000442:	64bb      	str	r3, [r7, #72]	; 0x48
 8000444:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000446:	ea4f 5333 	mov.w	r3, r3, ror #20
 800044a:	64bb      	str	r3, [r7, #72]	; 0x48
 800044c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800044e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000450:	4413      	add	r3, r2
 8000452:	64bb      	str	r3, [r7, #72]	; 0x48
  FF (c, d, a, b, x[ 2], S13, 0x242070db); // 3
 8000454:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000456:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000458:	401a      	ands	r2, r3
 800045a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800045c:	43d9      	mvns	r1, r3
 800045e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000460:	400b      	ands	r3, r1
 8000462:	431a      	orrs	r2, r3
 8000464:	693b      	ldr	r3, [r7, #16]
 8000466:	441a      	add	r2, r3
 8000468:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800046a:	441a      	add	r2, r3
 800046c:	4b8d      	ldr	r3, [pc, #564]	; (80006a4 <MD5Transform+0x2dc>)
 800046e:	4413      	add	r3, r2
 8000470:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000474:	ea4f 33f3 	mov.w	r3, r3, ror #15
 8000478:	64fb      	str	r3, [r7, #76]	; 0x4c
 800047a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800047c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800047e:	4413      	add	r3, r2
 8000480:	64fb      	str	r3, [r7, #76]	; 0x4c
  FF (b, c, d, a, x[ 3], S14, 0xc1bdceee); // 4
 8000482:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000486:	401a      	ands	r2, r3
 8000488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800048a:	43d9      	mvns	r1, r3
 800048c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800048e:	400b      	ands	r3, r1
 8000490:	431a      	orrs	r2, r3
 8000492:	697b      	ldr	r3, [r7, #20]
 8000494:	441a      	add	r2, r3
 8000496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000498:	441a      	add	r2, r3
 800049a:	4b83      	ldr	r3, [pc, #524]	; (80006a8 <MD5Transform+0x2e0>)
 800049c:	4413      	add	r3, r2
 800049e:	653b      	str	r3, [r7, #80]	; 0x50
 80004a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80004a2:	ea4f 23b3 	mov.w	r3, r3, ror #10
 80004a6:	653b      	str	r3, [r7, #80]	; 0x50
 80004a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80004aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80004ac:	4413      	add	r3, r2
 80004ae:	653b      	str	r3, [r7, #80]	; 0x50
  FF (a, b, c, d, x[ 4], S11, 0xf57c0faf); // 5
 80004b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80004b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80004b4:	401a      	ands	r2, r3
 80004b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80004b8:	43d9      	mvns	r1, r3
 80004ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80004bc:	400b      	ands	r3, r1
 80004be:	431a      	orrs	r2, r3
 80004c0:	69bb      	ldr	r3, [r7, #24]
 80004c2:	441a      	add	r2, r3
 80004c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80004c6:	441a      	add	r2, r3
 80004c8:	4b78      	ldr	r3, [pc, #480]	; (80006ac <MD5Transform+0x2e4>)
 80004ca:	4413      	add	r3, r2
 80004cc:	657b      	str	r3, [r7, #84]	; 0x54
 80004ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80004d0:	ea4f 6373 	mov.w	r3, r3, ror #25
 80004d4:	657b      	str	r3, [r7, #84]	; 0x54
 80004d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80004d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80004da:	4413      	add	r3, r2
 80004dc:	657b      	str	r3, [r7, #84]	; 0x54
  FF (d, a, b, c, x[ 5], S12, 0x4787c62a); // 6
 80004de:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80004e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80004e2:	401a      	ands	r2, r3
 80004e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80004e6:	43d9      	mvns	r1, r3
 80004e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80004ea:	400b      	ands	r3, r1
 80004ec:	431a      	orrs	r2, r3
 80004ee:	69fb      	ldr	r3, [r7, #28]
 80004f0:	441a      	add	r2, r3
 80004f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80004f4:	441a      	add	r2, r3
 80004f6:	4b6e      	ldr	r3, [pc, #440]	; (80006b0 <MD5Transform+0x2e8>)
 80004f8:	4413      	add	r3, r2
 80004fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80004fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80004fe:	ea4f 5333 	mov.w	r3, r3, ror #20
 8000502:	64bb      	str	r3, [r7, #72]	; 0x48
 8000504:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000506:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000508:	4413      	add	r3, r2
 800050a:	64bb      	str	r3, [r7, #72]	; 0x48
  FF (c, d, a, b, x[ 6], S13, 0xa8304613); // 7
 800050c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800050e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000510:	401a      	ands	r2, r3
 8000512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000514:	43d9      	mvns	r1, r3
 8000516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000518:	400b      	ands	r3, r1
 800051a:	431a      	orrs	r2, r3
 800051c:	6a3b      	ldr	r3, [r7, #32]
 800051e:	441a      	add	r2, r3
 8000520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000522:	441a      	add	r2, r3
 8000524:	4b63      	ldr	r3, [pc, #396]	; (80006b4 <MD5Transform+0x2ec>)
 8000526:	4413      	add	r3, r2
 8000528:	64fb      	str	r3, [r7, #76]	; 0x4c
 800052a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800052c:	ea4f 33f3 	mov.w	r3, r3, ror #15
 8000530:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000532:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000534:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000536:	4413      	add	r3, r2
 8000538:	64fb      	str	r3, [r7, #76]	; 0x4c
  FF (b, c, d, a, x[ 7], S14, 0xfd469501); // 8
 800053a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800053c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800053e:	401a      	ands	r2, r3
 8000540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000542:	43d9      	mvns	r1, r3
 8000544:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000546:	400b      	ands	r3, r1
 8000548:	431a      	orrs	r2, r3
 800054a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800054c:	441a      	add	r2, r3
 800054e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000550:	441a      	add	r2, r3
 8000552:	4b59      	ldr	r3, [pc, #356]	; (80006b8 <MD5Transform+0x2f0>)
 8000554:	4413      	add	r3, r2
 8000556:	653b      	str	r3, [r7, #80]	; 0x50
 8000558:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800055a:	ea4f 23b3 	mov.w	r3, r3, ror #10
 800055e:	653b      	str	r3, [r7, #80]	; 0x50
 8000560:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000564:	4413      	add	r3, r2
 8000566:	653b      	str	r3, [r7, #80]	; 0x50
  FF (a, b, c, d, x[ 8], S11, 0x698098d8); // 9
 8000568:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800056a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800056c:	401a      	ands	r2, r3
 800056e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000570:	43d9      	mvns	r1, r3
 8000572:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000574:	400b      	ands	r3, r1
 8000576:	431a      	orrs	r2, r3
 8000578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800057a:	441a      	add	r2, r3
 800057c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800057e:	441a      	add	r2, r3
 8000580:	4b4e      	ldr	r3, [pc, #312]	; (80006bc <MD5Transform+0x2f4>)
 8000582:	4413      	add	r3, r2
 8000584:	657b      	str	r3, [r7, #84]	; 0x54
 8000586:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000588:	ea4f 6373 	mov.w	r3, r3, ror #25
 800058c:	657b      	str	r3, [r7, #84]	; 0x54
 800058e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000592:	4413      	add	r3, r2
 8000594:	657b      	str	r3, [r7, #84]	; 0x54
  FF (d, a, b, c, x[ 9], S12, 0x8b44f7af); // 10
 8000596:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000598:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800059a:	401a      	ands	r2, r3
 800059c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800059e:	43d9      	mvns	r1, r3
 80005a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005a2:	400b      	ands	r3, r1
 80005a4:	431a      	orrs	r2, r3
 80005a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005a8:	441a      	add	r2, r3
 80005aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80005ac:	441a      	add	r2, r3
 80005ae:	4b44      	ldr	r3, [pc, #272]	; (80006c0 <MD5Transform+0x2f8>)
 80005b0:	4413      	add	r3, r2
 80005b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80005b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80005b6:	ea4f 5333 	mov.w	r3, r3, ror #20
 80005ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80005bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80005be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80005c0:	4413      	add	r3, r2
 80005c2:	64bb      	str	r3, [r7, #72]	; 0x48
  FF (c, d, a, b, x[10], S13, 0xffff5bb1); // 11
 80005c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80005c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80005c8:	401a      	ands	r2, r3
 80005ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80005cc:	43d9      	mvns	r1, r3
 80005ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80005d0:	400b      	ands	r3, r1
 80005d2:	431a      	orrs	r2, r3
 80005d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005d6:	441a      	add	r2, r3
 80005d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005da:	4413      	add	r3, r2
 80005dc:	f5a3 4324 	sub.w	r3, r3, #41984	; 0xa400
 80005e0:	3b4f      	subs	r3, #79	; 0x4f
 80005e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80005e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005e6:	ea4f 33f3 	mov.w	r3, r3, ror #15
 80005ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80005ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80005ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80005f0:	4413      	add	r3, r2
 80005f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  FF (b, c, d, a, x[11], S14, 0x895cd7be); // 12
 80005f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80005f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80005f8:	401a      	ands	r2, r3
 80005fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005fc:	43d9      	mvns	r1, r3
 80005fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000600:	400b      	ands	r3, r1
 8000602:	431a      	orrs	r2, r3
 8000604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000606:	441a      	add	r2, r3
 8000608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800060a:	441a      	add	r2, r3
 800060c:	4b2d      	ldr	r3, [pc, #180]	; (80006c4 <MD5Transform+0x2fc>)
 800060e:	4413      	add	r3, r2
 8000610:	653b      	str	r3, [r7, #80]	; 0x50
 8000612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000614:	ea4f 23b3 	mov.w	r3, r3, ror #10
 8000618:	653b      	str	r3, [r7, #80]	; 0x50
 800061a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800061c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800061e:	4413      	add	r3, r2
 8000620:	653b      	str	r3, [r7, #80]	; 0x50
  FF (a, b, c, d, x[12], S11, 0x6b901122); // 13
 8000622:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000626:	401a      	ands	r2, r3
 8000628:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800062a:	43d9      	mvns	r1, r3
 800062c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800062e:	400b      	ands	r3, r1
 8000630:	431a      	orrs	r2, r3
 8000632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000634:	441a      	add	r2, r3
 8000636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000638:	441a      	add	r2, r3
 800063a:	4b23      	ldr	r3, [pc, #140]	; (80006c8 <MD5Transform+0x300>)
 800063c:	4413      	add	r3, r2
 800063e:	657b      	str	r3, [r7, #84]	; 0x54
 8000640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000642:	ea4f 6373 	mov.w	r3, r3, ror #25
 8000646:	657b      	str	r3, [r7, #84]	; 0x54
 8000648:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800064a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800064c:	4413      	add	r3, r2
 800064e:	657b      	str	r3, [r7, #84]	; 0x54
  FF (d, a, b, c, x[13], S12, 0xfd987193); // 14
 8000650:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000654:	401a      	ands	r2, r3
 8000656:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000658:	43d9      	mvns	r1, r3
 800065a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800065c:	400b      	ands	r3, r1
 800065e:	431a      	orrs	r2, r3
 8000660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000662:	441a      	add	r2, r3
 8000664:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000666:	441a      	add	r2, r3
 8000668:	4b18      	ldr	r3, [pc, #96]	; (80006cc <MD5Transform+0x304>)
 800066a:	4413      	add	r3, r2
 800066c:	64bb      	str	r3, [r7, #72]	; 0x48
 800066e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000670:	ea4f 5333 	mov.w	r3, r3, ror #20
 8000674:	64bb      	str	r3, [r7, #72]	; 0x48
 8000676:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800067a:	4413      	add	r3, r2
 800067c:	64bb      	str	r3, [r7, #72]	; 0x48
  FF (c, d, a, b, x[14], S13, 0xa679438e); // 15
 800067e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000682:	401a      	ands	r2, r3
 8000684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000686:	43d9      	mvns	r1, r3
 8000688:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800068a:	400b      	ands	r3, r1
 800068c:	431a      	orrs	r2, r3
 800068e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000690:	441a      	add	r2, r3
 8000692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000694:	441a      	add	r2, r3
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <MD5Transform+0x308>)
 8000698:	4413      	add	r3, r2
 800069a:	e01b      	b.n	80006d4 <MD5Transform+0x30c>
 800069c:	d76aa478 	.word	0xd76aa478
 80006a0:	e8c7b756 	.word	0xe8c7b756
 80006a4:	242070db 	.word	0x242070db
 80006a8:	c1bdceee 	.word	0xc1bdceee
 80006ac:	f57c0faf 	.word	0xf57c0faf
 80006b0:	4787c62a 	.word	0x4787c62a
 80006b4:	a8304613 	.word	0xa8304613
 80006b8:	fd469501 	.word	0xfd469501
 80006bc:	698098d8 	.word	0x698098d8
 80006c0:	8b44f7af 	.word	0x8b44f7af
 80006c4:	895cd7be 	.word	0x895cd7be
 80006c8:	6b901122 	.word	0x6b901122
 80006cc:	fd987193 	.word	0xfd987193
 80006d0:	a679438e 	.word	0xa679438e
 80006d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80006d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80006d8:	ea4f 33f3 	mov.w	r3, r3, ror #15
 80006dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80006de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80006e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80006e2:	4413      	add	r3, r2
 80006e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  FF (b, c, d, a, x[15], S14, 0x49b40821); // 16
 80006e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80006e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80006ea:	401a      	ands	r2, r3
 80006ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80006ee:	43d9      	mvns	r1, r3
 80006f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80006f2:	400b      	ands	r3, r1
 80006f4:	431a      	orrs	r2, r3
 80006f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80006f8:	441a      	add	r2, r3
 80006fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80006fc:	441a      	add	r2, r3
 80006fe:	4ba2      	ldr	r3, [pc, #648]	; (8000988 <MD5Transform+0x5c0>)
 8000700:	4413      	add	r3, r2
 8000702:	653b      	str	r3, [r7, #80]	; 0x50
 8000704:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000706:	ea4f 23b3 	mov.w	r3, r3, ror #10
 800070a:	653b      	str	r3, [r7, #80]	; 0x50
 800070c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800070e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000710:	4413      	add	r3, r2
 8000712:	653b      	str	r3, [r7, #80]	; 0x50

  // Round 2
  GG (a, b, c, d, x[ 1], S21, 0xf61e2562); // 17
 8000714:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000718:	401a      	ands	r2, r3
 800071a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800071c:	43d9      	mvns	r1, r3
 800071e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000720:	400b      	ands	r3, r1
 8000722:	431a      	orrs	r2, r3
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	441a      	add	r2, r3
 8000728:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800072a:	441a      	add	r2, r3
 800072c:	4b97      	ldr	r3, [pc, #604]	; (800098c <MD5Transform+0x5c4>)
 800072e:	4413      	add	r3, r2
 8000730:	657b      	str	r3, [r7, #84]	; 0x54
 8000732:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000734:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8000738:	657b      	str	r3, [r7, #84]	; 0x54
 800073a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800073c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800073e:	4413      	add	r3, r2
 8000740:	657b      	str	r3, [r7, #84]	; 0x54
  GG (d, a, b, c, x[ 6], S22, 0xc040b340); // 18
 8000742:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000746:	401a      	ands	r2, r3
 8000748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800074a:	43d9      	mvns	r1, r3
 800074c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800074e:	400b      	ands	r3, r1
 8000750:	431a      	orrs	r2, r3
 8000752:	6a3b      	ldr	r3, [r7, #32]
 8000754:	441a      	add	r2, r3
 8000756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000758:	441a      	add	r2, r3
 800075a:	4b8d      	ldr	r3, [pc, #564]	; (8000990 <MD5Transform+0x5c8>)
 800075c:	4413      	add	r3, r2
 800075e:	64bb      	str	r3, [r7, #72]	; 0x48
 8000760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000762:	ea4f 53f3 	mov.w	r3, r3, ror #23
 8000766:	64bb      	str	r3, [r7, #72]	; 0x48
 8000768:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800076a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800076c:	4413      	add	r3, r2
 800076e:	64bb      	str	r3, [r7, #72]	; 0x48
  GG (c, d, a, b, x[11], S23, 0x265e5a51); // 19
 8000770:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000772:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000774:	401a      	ands	r2, r3
 8000776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000778:	43d9      	mvns	r1, r3
 800077a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800077c:	400b      	ands	r3, r1
 800077e:	431a      	orrs	r2, r3
 8000780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000782:	441a      	add	r2, r3
 8000784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000786:	441a      	add	r2, r3
 8000788:	4b82      	ldr	r3, [pc, #520]	; (8000994 <MD5Transform+0x5cc>)
 800078a:	4413      	add	r3, r2
 800078c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800078e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000790:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8000794:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000796:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000798:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800079a:	4413      	add	r3, r2
 800079c:	64fb      	str	r3, [r7, #76]	; 0x4c
  GG (b, c, d, a, x[ 0], S24, 0xe9b6c7aa); // 20
 800079e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80007a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80007a2:	401a      	ands	r2, r3
 80007a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80007a6:	43d9      	mvns	r1, r3
 80007a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007aa:	400b      	ands	r3, r1
 80007ac:	431a      	orrs	r2, r3
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	441a      	add	r2, r3
 80007b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80007b4:	441a      	add	r2, r3
 80007b6:	4b78      	ldr	r3, [pc, #480]	; (8000998 <MD5Transform+0x5d0>)
 80007b8:	4413      	add	r3, r2
 80007ba:	653b      	str	r3, [r7, #80]	; 0x50
 80007bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80007be:	ea4f 3333 	mov.w	r3, r3, ror #12
 80007c2:	653b      	str	r3, [r7, #80]	; 0x50
 80007c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80007c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80007c8:	4413      	add	r3, r2
 80007ca:	653b      	str	r3, [r7, #80]	; 0x50
  GG (a, b, c, d, x[ 5], S21, 0xd62f105d); // 21
 80007cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80007ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007d0:	401a      	ands	r2, r3
 80007d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007d4:	43d9      	mvns	r1, r3
 80007d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80007d8:	400b      	ands	r3, r1
 80007da:	431a      	orrs	r2, r3
 80007dc:	69fb      	ldr	r3, [r7, #28]
 80007de:	441a      	add	r2, r3
 80007e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80007e2:	441a      	add	r2, r3
 80007e4:	4b6d      	ldr	r3, [pc, #436]	; (800099c <MD5Transform+0x5d4>)
 80007e6:	4413      	add	r3, r2
 80007e8:	657b      	str	r3, [r7, #84]	; 0x54
 80007ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80007ec:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80007f0:	657b      	str	r3, [r7, #84]	; 0x54
 80007f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80007f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80007f6:	4413      	add	r3, r2
 80007f8:	657b      	str	r3, [r7, #84]	; 0x54
  GG (d, a, b, c, x[10], S22,  0x2441453); // 22
 80007fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80007fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80007fe:	401a      	ands	r2, r3
 8000800:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000802:	43d9      	mvns	r1, r3
 8000804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000806:	400b      	ands	r3, r1
 8000808:	431a      	orrs	r2, r3
 800080a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800080c:	441a      	add	r2, r3
 800080e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000810:	441a      	add	r2, r3
 8000812:	4b63      	ldr	r3, [pc, #396]	; (80009a0 <MD5Transform+0x5d8>)
 8000814:	4413      	add	r3, r2
 8000816:	64bb      	str	r3, [r7, #72]	; 0x48
 8000818:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800081a:	ea4f 53f3 	mov.w	r3, r3, ror #23
 800081e:	64bb      	str	r3, [r7, #72]	; 0x48
 8000820:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000824:	4413      	add	r3, r2
 8000826:	64bb      	str	r3, [r7, #72]	; 0x48
  GG (c, d, a, b, x[15], S23, 0xd8a1e681); // 23
 8000828:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800082a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800082c:	401a      	ands	r2, r3
 800082e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000830:	43d9      	mvns	r1, r3
 8000832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000834:	400b      	ands	r3, r1
 8000836:	431a      	orrs	r2, r3
 8000838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800083a:	441a      	add	r2, r3
 800083c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800083e:	441a      	add	r2, r3
 8000840:	4b58      	ldr	r3, [pc, #352]	; (80009a4 <MD5Transform+0x5dc>)
 8000842:	4413      	add	r3, r2
 8000844:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000848:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800084c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800084e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000850:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000852:	4413      	add	r3, r2
 8000854:	64fb      	str	r3, [r7, #76]	; 0x4c
  GG (b, c, d, a, x[ 4], S24, 0xe7d3fbc8); // 24
 8000856:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800085a:	401a      	ands	r2, r3
 800085c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800085e:	43d9      	mvns	r1, r3
 8000860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000862:	400b      	ands	r3, r1
 8000864:	431a      	orrs	r2, r3
 8000866:	69bb      	ldr	r3, [r7, #24]
 8000868:	441a      	add	r2, r3
 800086a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800086c:	441a      	add	r2, r3
 800086e:	4b4e      	ldr	r3, [pc, #312]	; (80009a8 <MD5Transform+0x5e0>)
 8000870:	4413      	add	r3, r2
 8000872:	653b      	str	r3, [r7, #80]	; 0x50
 8000874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000876:	ea4f 3333 	mov.w	r3, r3, ror #12
 800087a:	653b      	str	r3, [r7, #80]	; 0x50
 800087c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800087e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000880:	4413      	add	r3, r2
 8000882:	653b      	str	r3, [r7, #80]	; 0x50
  GG (a, b, c, d, x[ 9], S21, 0x21e1cde6); // 25
 8000884:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000886:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000888:	401a      	ands	r2, r3
 800088a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800088c:	43d9      	mvns	r1, r3
 800088e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000890:	400b      	ands	r3, r1
 8000892:	431a      	orrs	r2, r3
 8000894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000896:	441a      	add	r2, r3
 8000898:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800089a:	441a      	add	r2, r3
 800089c:	4b43      	ldr	r3, [pc, #268]	; (80009ac <MD5Transform+0x5e4>)
 800089e:	4413      	add	r3, r2
 80008a0:	657b      	str	r3, [r7, #84]	; 0x54
 80008a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80008a4:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80008a8:	657b      	str	r3, [r7, #84]	; 0x54
 80008aa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80008ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80008ae:	4413      	add	r3, r2
 80008b0:	657b      	str	r3, [r7, #84]	; 0x54
  GG (d, a, b, c, x[14], S22, 0xc33707d6); // 26
 80008b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80008b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80008b6:	401a      	ands	r2, r3
 80008b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80008ba:	43d9      	mvns	r1, r3
 80008bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80008be:	400b      	ands	r3, r1
 80008c0:	431a      	orrs	r2, r3
 80008c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80008c4:	441a      	add	r2, r3
 80008c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80008c8:	441a      	add	r2, r3
 80008ca:	4b39      	ldr	r3, [pc, #228]	; (80009b0 <MD5Transform+0x5e8>)
 80008cc:	4413      	add	r3, r2
 80008ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80008d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80008d2:	ea4f 53f3 	mov.w	r3, r3, ror #23
 80008d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80008d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80008da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80008dc:	4413      	add	r3, r2
 80008de:	64bb      	str	r3, [r7, #72]	; 0x48
  GG (c, d, a, b, x[ 3], S23, 0xf4d50d87); // 27
 80008e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80008e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80008e4:	401a      	ands	r2, r3
 80008e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80008e8:	43d9      	mvns	r1, r3
 80008ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80008ec:	400b      	ands	r3, r1
 80008ee:	431a      	orrs	r2, r3
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	441a      	add	r2, r3
 80008f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80008f6:	441a      	add	r2, r3
 80008f8:	4b2e      	ldr	r3, [pc, #184]	; (80009b4 <MD5Transform+0x5ec>)
 80008fa:	4413      	add	r3, r2
 80008fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80008fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000900:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8000904:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000906:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000908:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800090a:	4413      	add	r3, r2
 800090c:	64fb      	str	r3, [r7, #76]	; 0x4c
  GG (b, c, d, a, x[ 8], S24, 0x455a14ed); // 28
 800090e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000910:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000912:	401a      	ands	r2, r3
 8000914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000916:	43d9      	mvns	r1, r3
 8000918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800091a:	400b      	ands	r3, r1
 800091c:	431a      	orrs	r2, r3
 800091e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000920:	441a      	add	r2, r3
 8000922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000924:	441a      	add	r2, r3
 8000926:	4b24      	ldr	r3, [pc, #144]	; (80009b8 <MD5Transform+0x5f0>)
 8000928:	4413      	add	r3, r2
 800092a:	653b      	str	r3, [r7, #80]	; 0x50
 800092c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800092e:	ea4f 3333 	mov.w	r3, r3, ror #12
 8000932:	653b      	str	r3, [r7, #80]	; 0x50
 8000934:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000938:	4413      	add	r3, r2
 800093a:	653b      	str	r3, [r7, #80]	; 0x50
  GG (a, b, c, d, x[13], S21, 0xa9e3e905); // 29
 800093c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800093e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000940:	401a      	ands	r2, r3
 8000942:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000944:	43d9      	mvns	r1, r3
 8000946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000948:	400b      	ands	r3, r1
 800094a:	431a      	orrs	r2, r3
 800094c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800094e:	441a      	add	r2, r3
 8000950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000952:	441a      	add	r2, r3
 8000954:	4b19      	ldr	r3, [pc, #100]	; (80009bc <MD5Transform+0x5f4>)
 8000956:	4413      	add	r3, r2
 8000958:	657b      	str	r3, [r7, #84]	; 0x54
 800095a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800095c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8000960:	657b      	str	r3, [r7, #84]	; 0x54
 8000962:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000966:	4413      	add	r3, r2
 8000968:	657b      	str	r3, [r7, #84]	; 0x54
  GG (d, a, b, c, x[ 2], S22, 0xfcefa3f8); // 30
 800096a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800096c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800096e:	401a      	ands	r2, r3
 8000970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000972:	43d9      	mvns	r1, r3
 8000974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000976:	400b      	ands	r3, r1
 8000978:	431a      	orrs	r2, r3
 800097a:	693b      	ldr	r3, [r7, #16]
 800097c:	441a      	add	r2, r3
 800097e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000980:	441a      	add	r2, r3
 8000982:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <MD5Transform+0x5f8>)
 8000984:	4413      	add	r3, r2
 8000986:	e01d      	b.n	80009c4 <MD5Transform+0x5fc>
 8000988:	49b40821 	.word	0x49b40821
 800098c:	f61e2562 	.word	0xf61e2562
 8000990:	c040b340 	.word	0xc040b340
 8000994:	265e5a51 	.word	0x265e5a51
 8000998:	e9b6c7aa 	.word	0xe9b6c7aa
 800099c:	d62f105d 	.word	0xd62f105d
 80009a0:	02441453 	.word	0x02441453
 80009a4:	d8a1e681 	.word	0xd8a1e681
 80009a8:	e7d3fbc8 	.word	0xe7d3fbc8
 80009ac:	21e1cde6 	.word	0x21e1cde6
 80009b0:	c33707d6 	.word	0xc33707d6
 80009b4:	f4d50d87 	.word	0xf4d50d87
 80009b8:	455a14ed 	.word	0x455a14ed
 80009bc:	a9e3e905 	.word	0xa9e3e905
 80009c0:	fcefa3f8 	.word	0xfcefa3f8
 80009c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80009c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80009c8:	ea4f 53f3 	mov.w	r3, r3, ror #23
 80009cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80009ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80009d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009d2:	4413      	add	r3, r2
 80009d4:	64bb      	str	r3, [r7, #72]	; 0x48
  GG (c, d, a, b, x[ 7], S23, 0x676f02d9); // 31
 80009d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80009d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009da:	401a      	ands	r2, r3
 80009dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009de:	43d9      	mvns	r1, r3
 80009e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009e2:	400b      	ands	r3, r1
 80009e4:	431a      	orrs	r2, r3
 80009e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e8:	441a      	add	r2, r3
 80009ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80009ec:	441a      	add	r2, r3
 80009ee:	4ba0      	ldr	r3, [pc, #640]	; (8000c70 <MD5Transform+0x8a8>)
 80009f0:	4413      	add	r3, r2
 80009f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80009f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80009f6:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80009fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80009fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80009fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a00:	4413      	add	r3, r2
 8000a02:	64fb      	str	r3, [r7, #76]	; 0x4c
  GG (b, c, d, a, x[12], S24, 0x8d2a4c8a); // 32
 8000a04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a08:	401a      	ands	r2, r3
 8000a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a0c:	43d9      	mvns	r1, r3
 8000a0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a10:	400b      	ands	r3, r1
 8000a12:	431a      	orrs	r2, r3
 8000a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a16:	441a      	add	r2, r3
 8000a18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a1a:	441a      	add	r2, r3
 8000a1c:	4b95      	ldr	r3, [pc, #596]	; (8000c74 <MD5Transform+0x8ac>)
 8000a1e:	4413      	add	r3, r2
 8000a20:	653b      	str	r3, [r7, #80]	; 0x50
 8000a22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a24:	ea4f 3333 	mov.w	r3, r3, ror #12
 8000a28:	653b      	str	r3, [r7, #80]	; 0x50
 8000a2a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a2e:	4413      	add	r3, r2
 8000a30:	653b      	str	r3, [r7, #80]	; 0x50

  // Round 3
  HH (a, b, c, d, x[ 5], S31, 0xfffa3942); // 33
 8000a32:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000a34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a36:	405a      	eors	r2, r3
 8000a38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a3a:	405a      	eors	r2, r3
 8000a3c:	69fb      	ldr	r3, [r7, #28]
 8000a3e:	441a      	add	r2, r3
 8000a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a42:	4413      	add	r3, r2
 8000a44:	f5a3 23b8 	sub.w	r3, r3, #376832	; 0x5c000
 8000a48:	f2a3 63be 	subw	r3, r3, #1726	; 0x6be
 8000a4c:	657b      	str	r3, [r7, #84]	; 0x54
 8000a4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a50:	ea4f 7333 	mov.w	r3, r3, ror #28
 8000a54:	657b      	str	r3, [r7, #84]	; 0x54
 8000a56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000a58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a5a:	4413      	add	r3, r2
 8000a5c:	657b      	str	r3, [r7, #84]	; 0x54
  HH (d, a, b, c, x[ 8], S32, 0x8771f681); // 34
 8000a5e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000a60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a62:	405a      	eors	r2, r3
 8000a64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a66:	405a      	eors	r2, r3
 8000a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6a:	441a      	add	r2, r3
 8000a6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a6e:	441a      	add	r2, r3
 8000a70:	4b81      	ldr	r3, [pc, #516]	; (8000c78 <MD5Transform+0x8b0>)
 8000a72:	4413      	add	r3, r2
 8000a74:	64bb      	str	r3, [r7, #72]	; 0x48
 8000a76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a78:	ea4f 5373 	mov.w	r3, r3, ror #21
 8000a7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8000a7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000a80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a82:	4413      	add	r3, r2
 8000a84:	64bb      	str	r3, [r7, #72]	; 0x48
  HH (c, d, a, b, x[11], S33, 0x6d9d6122); // 35
 8000a86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a8a:	405a      	eors	r2, r3
 8000a8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a8e:	405a      	eors	r2, r3
 8000a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a92:	441a      	add	r2, r3
 8000a94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a96:	441a      	add	r2, r3
 8000a98:	4b78      	ldr	r3, [pc, #480]	; (8000c7c <MD5Transform+0x8b4>)
 8000a9a:	4413      	add	r3, r2
 8000a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000aa0:	ea4f 4333 	mov.w	r3, r3, ror #16
 8000aa4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000aa6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000aa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000aaa:	4413      	add	r3, r2
 8000aac:	64fb      	str	r3, [r7, #76]	; 0x4c
  HH (b, c, d, a, x[14], S34, 0xfde5380c); // 36
 8000aae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000ab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ab2:	405a      	eors	r2, r3
 8000ab4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ab6:	405a      	eors	r2, r3
 8000ab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000aba:	441a      	add	r2, r3
 8000abc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000abe:	441a      	add	r2, r3
 8000ac0:	4b6f      	ldr	r3, [pc, #444]	; (8000c80 <MD5Transform+0x8b8>)
 8000ac2:	4413      	add	r3, r2
 8000ac4:	653b      	str	r3, [r7, #80]	; 0x50
 8000ac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ac8:	ea4f 2373 	mov.w	r3, r3, ror #9
 8000acc:	653b      	str	r3, [r7, #80]	; 0x50
 8000ace:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000ad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ad2:	4413      	add	r3, r2
 8000ad4:	653b      	str	r3, [r7, #80]	; 0x50
  HH (a, b, c, d, x[ 1], S31, 0xa4beea44); // 37
 8000ad6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000ad8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ada:	405a      	eors	r2, r3
 8000adc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ade:	405a      	eors	r2, r3
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	441a      	add	r2, r3
 8000ae4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ae6:	441a      	add	r2, r3
 8000ae8:	4b66      	ldr	r3, [pc, #408]	; (8000c84 <MD5Transform+0x8bc>)
 8000aea:	4413      	add	r3, r2
 8000aec:	657b      	str	r3, [r7, #84]	; 0x54
 8000aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000af0:	ea4f 7333 	mov.w	r3, r3, ror #28
 8000af4:	657b      	str	r3, [r7, #84]	; 0x54
 8000af6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000af8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000afa:	4413      	add	r3, r2
 8000afc:	657b      	str	r3, [r7, #84]	; 0x54
  HH (d, a, b, c, x[ 4], S32, 0x4bdecfa9); // 38
 8000afe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b02:	405a      	eors	r2, r3
 8000b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b06:	405a      	eors	r2, r3
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	441a      	add	r2, r3
 8000b0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000b0e:	441a      	add	r2, r3
 8000b10:	4b5d      	ldr	r3, [pc, #372]	; (8000c88 <MD5Transform+0x8c0>)
 8000b12:	4413      	add	r3, r2
 8000b14:	64bb      	str	r3, [r7, #72]	; 0x48
 8000b16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000b18:	ea4f 5373 	mov.w	r3, r3, ror #21
 8000b1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8000b1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000b20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b22:	4413      	add	r3, r2
 8000b24:	64bb      	str	r3, [r7, #72]	; 0x48
  HH (c, d, a, b, x[ 7], S33, 0xf6bb4b60); // 39
 8000b26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000b28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b2a:	405a      	eors	r2, r3
 8000b2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b2e:	405a      	eors	r2, r3
 8000b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b32:	441a      	add	r2, r3
 8000b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b36:	441a      	add	r2, r3
 8000b38:	4b54      	ldr	r3, [pc, #336]	; (8000c8c <MD5Transform+0x8c4>)
 8000b3a:	4413      	add	r3, r2
 8000b3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b40:	ea4f 4333 	mov.w	r3, r3, ror #16
 8000b44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000b48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000b4a:	4413      	add	r3, r2
 8000b4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  HH (b, c, d, a, x[10], S34, 0xbebfbc70); // 40
 8000b4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000b50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000b52:	405a      	eors	r2, r3
 8000b54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b56:	405a      	eors	r2, r3
 8000b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b5a:	441a      	add	r2, r3
 8000b5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b5e:	441a      	add	r2, r3
 8000b60:	4b4b      	ldr	r3, [pc, #300]	; (8000c90 <MD5Transform+0x8c8>)
 8000b62:	4413      	add	r3, r2
 8000b64:	653b      	str	r3, [r7, #80]	; 0x50
 8000b66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b68:	ea4f 2373 	mov.w	r3, r3, ror #9
 8000b6c:	653b      	str	r3, [r7, #80]	; 0x50
 8000b6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000b70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b72:	4413      	add	r3, r2
 8000b74:	653b      	str	r3, [r7, #80]	; 0x50
  HH (a, b, c, d, x[13], S31, 0x289b7ec6); // 41
 8000b76:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000b78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b7a:	405a      	eors	r2, r3
 8000b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000b7e:	405a      	eors	r2, r3
 8000b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b82:	441a      	add	r2, r3
 8000b84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b86:	441a      	add	r2, r3
 8000b88:	4b42      	ldr	r3, [pc, #264]	; (8000c94 <MD5Transform+0x8cc>)
 8000b8a:	4413      	add	r3, r2
 8000b8c:	657b      	str	r3, [r7, #84]	; 0x54
 8000b8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b90:	ea4f 7333 	mov.w	r3, r3, ror #28
 8000b94:	657b      	str	r3, [r7, #84]	; 0x54
 8000b96:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b9a:	4413      	add	r3, r2
 8000b9c:	657b      	str	r3, [r7, #84]	; 0x54
  HH (d, a, b, c, x[ 0], S32, 0xeaa127fa); // 42
 8000b9e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000ba0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ba2:	405a      	eors	r2, r3
 8000ba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ba6:	405a      	eors	r2, r3
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	441a      	add	r2, r3
 8000bac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000bae:	441a      	add	r2, r3
 8000bb0:	4b39      	ldr	r3, [pc, #228]	; (8000c98 <MD5Transform+0x8d0>)
 8000bb2:	4413      	add	r3, r2
 8000bb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8000bb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000bb8:	ea4f 5373 	mov.w	r3, r3, ror #21
 8000bbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8000bbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000bc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000bc2:	4413      	add	r3, r2
 8000bc4:	64bb      	str	r3, [r7, #72]	; 0x48
  HH (c, d, a, b, x[ 3], S33, 0xd4ef3085); // 43
 8000bc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000bca:	405a      	eors	r2, r3
 8000bcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000bce:	405a      	eors	r2, r3
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	441a      	add	r2, r3
 8000bd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bd6:	441a      	add	r2, r3
 8000bd8:	4b30      	ldr	r3, [pc, #192]	; (8000c9c <MD5Transform+0x8d4>)
 8000bda:	4413      	add	r3, r2
 8000bdc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000be0:	ea4f 4333 	mov.w	r3, r3, ror #16
 8000be4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000be6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000be8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000bea:	4413      	add	r3, r2
 8000bec:	64fb      	str	r3, [r7, #76]	; 0x4c
  HH (b, c, d, a, x[ 6], S34,  0x4881d05); // 44
 8000bee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000bf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000bf2:	405a      	eors	r2, r3
 8000bf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000bf6:	405a      	eors	r2, r3
 8000bf8:	6a3b      	ldr	r3, [r7, #32]
 8000bfa:	441a      	add	r2, r3
 8000bfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000bfe:	441a      	add	r2, r3
 8000c00:	4b27      	ldr	r3, [pc, #156]	; (8000ca0 <MD5Transform+0x8d8>)
 8000c02:	4413      	add	r3, r2
 8000c04:	653b      	str	r3, [r7, #80]	; 0x50
 8000c06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c08:	ea4f 2373 	mov.w	r3, r3, ror #9
 8000c0c:	653b      	str	r3, [r7, #80]	; 0x50
 8000c0e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c12:	4413      	add	r3, r2
 8000c14:	653b      	str	r3, [r7, #80]	; 0x50
  HH (a, b, c, d, x[ 9], S31, 0xd9d4d039); // 45
 8000c16:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c1a:	405a      	eors	r2, r3
 8000c1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c1e:	405a      	eors	r2, r3
 8000c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c22:	441a      	add	r2, r3
 8000c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c26:	441a      	add	r2, r3
 8000c28:	4b1e      	ldr	r3, [pc, #120]	; (8000ca4 <MD5Transform+0x8dc>)
 8000c2a:	4413      	add	r3, r2
 8000c2c:	657b      	str	r3, [r7, #84]	; 0x54
 8000c2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c30:	ea4f 7333 	mov.w	r3, r3, ror #28
 8000c34:	657b      	str	r3, [r7, #84]	; 0x54
 8000c36:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c3a:	4413      	add	r3, r2
 8000c3c:	657b      	str	r3, [r7, #84]	; 0x54
  HH (d, a, b, c, x[12], S32, 0xe6db99e5); // 46
 8000c3e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000c40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c42:	405a      	eors	r2, r3
 8000c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c46:	405a      	eors	r2, r3
 8000c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c4a:	441a      	add	r2, r3
 8000c4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c4e:	441a      	add	r2, r3
 8000c50:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <MD5Transform+0x8e0>)
 8000c52:	4413      	add	r3, r2
 8000c54:	64bb      	str	r3, [r7, #72]	; 0x48
 8000c56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c58:	ea4f 5373 	mov.w	r3, r3, ror #21
 8000c5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8000c5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c62:	4413      	add	r3, r2
 8000c64:	64bb      	str	r3, [r7, #72]	; 0x48
  HH (c, d, a, b, x[15], S33, 0x1fa27cf8); // 47
 8000c66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c6a:	405a      	eors	r2, r3
 8000c6c:	e01e      	b.n	8000cac <MD5Transform+0x8e4>
 8000c6e:	bf00      	nop
 8000c70:	676f02d9 	.word	0x676f02d9
 8000c74:	8d2a4c8a 	.word	0x8d2a4c8a
 8000c78:	8771f681 	.word	0x8771f681
 8000c7c:	6d9d6122 	.word	0x6d9d6122
 8000c80:	fde5380c 	.word	0xfde5380c
 8000c84:	a4beea44 	.word	0xa4beea44
 8000c88:	4bdecfa9 	.word	0x4bdecfa9
 8000c8c:	f6bb4b60 	.word	0xf6bb4b60
 8000c90:	bebfbc70 	.word	0xbebfbc70
 8000c94:	289b7ec6 	.word	0x289b7ec6
 8000c98:	eaa127fa 	.word	0xeaa127fa
 8000c9c:	d4ef3085 	.word	0xd4ef3085
 8000ca0:	04881d05 	.word	0x04881d05
 8000ca4:	d9d4d039 	.word	0xd9d4d039
 8000ca8:	e6db99e5 	.word	0xe6db99e5
 8000cac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000cae:	405a      	eors	r2, r3
 8000cb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cb2:	441a      	add	r2, r3
 8000cb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cb6:	441a      	add	r2, r3
 8000cb8:	4ba2      	ldr	r3, [pc, #648]	; (8000f44 <MD5Transform+0xb7c>)
 8000cba:	4413      	add	r3, r2
 8000cbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cc0:	ea4f 4333 	mov.w	r3, r3, ror #16
 8000cc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000cc6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000cc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cca:	4413      	add	r3, r2
 8000ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
  HH (b, c, d, a, x[ 2], S34, 0xc4ac5665); // 48
 8000cce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000cd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cd2:	405a      	eors	r2, r3
 8000cd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000cd6:	405a      	eors	r2, r3
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	441a      	add	r2, r3
 8000cdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000cde:	441a      	add	r2, r3
 8000ce0:	4b99      	ldr	r3, [pc, #612]	; (8000f48 <MD5Transform+0xb80>)
 8000ce2:	4413      	add	r3, r2
 8000ce4:	653b      	str	r3, [r7, #80]	; 0x50
 8000ce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ce8:	ea4f 2373 	mov.w	r3, r3, ror #9
 8000cec:	653b      	str	r3, [r7, #80]	; 0x50
 8000cee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000cf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cf2:	4413      	add	r3, r2
 8000cf4:	653b      	str	r3, [r7, #80]	; 0x50

  // Round 4
  II (a, b, c, d, x[ 0], S41, 0xf4292244); // 49
 8000cf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cf8:	43da      	mvns	r2, r3
 8000cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000cfc:	431a      	orrs	r2, r3
 8000cfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d00:	405a      	eors	r2, r3
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	441a      	add	r2, r3
 8000d06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d08:	441a      	add	r2, r3
 8000d0a:	4b90      	ldr	r3, [pc, #576]	; (8000f4c <MD5Transform+0xb84>)
 8000d0c:	4413      	add	r3, r2
 8000d0e:	657b      	str	r3, [r7, #84]	; 0x54
 8000d10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d12:	ea4f 63b3 	mov.w	r3, r3, ror #26
 8000d16:	657b      	str	r3, [r7, #84]	; 0x54
 8000d18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000d1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d1c:	4413      	add	r3, r2
 8000d1e:	657b      	str	r3, [r7, #84]	; 0x54
  II (d, a, b, c, x[ 7], S42, 0x432aff97); // 50
 8000d20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d22:	43da      	mvns	r2, r3
 8000d24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d26:	431a      	orrs	r2, r3
 8000d28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d2a:	405a      	eors	r2, r3
 8000d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2e:	441a      	add	r2, r3
 8000d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d32:	441a      	add	r2, r3
 8000d34:	4b86      	ldr	r3, [pc, #536]	; (8000f50 <MD5Transform+0xb88>)
 8000d36:	4413      	add	r3, r2
 8000d38:	64bb      	str	r3, [r7, #72]	; 0x48
 8000d3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d3c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8000d40:	64bb      	str	r3, [r7, #72]	; 0x48
 8000d42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000d44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d46:	4413      	add	r3, r2
 8000d48:	64bb      	str	r3, [r7, #72]	; 0x48
  II (c, d, a, b, x[14], S43, 0xab9423a7); // 51
 8000d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d4c:	43da      	mvns	r2, r3
 8000d4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d50:	431a      	orrs	r2, r3
 8000d52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d54:	405a      	eors	r2, r3
 8000d56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d58:	441a      	add	r2, r3
 8000d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d5c:	441a      	add	r2, r3
 8000d5e:	4b7d      	ldr	r3, [pc, #500]	; (8000f54 <MD5Transform+0xb8c>)
 8000d60:	4413      	add	r3, r2
 8000d62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d66:	ea4f 4373 	mov.w	r3, r3, ror #17
 8000d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000d6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d70:	4413      	add	r3, r2
 8000d72:	64fb      	str	r3, [r7, #76]	; 0x4c
  II (b, c, d, a, x[ 5], S44, 0xfc93a039); // 52
 8000d74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d76:	43da      	mvns	r2, r3
 8000d78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d7a:	431a      	orrs	r2, r3
 8000d7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d7e:	405a      	eors	r2, r3
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	441a      	add	r2, r3
 8000d84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d86:	441a      	add	r2, r3
 8000d88:	4b73      	ldr	r3, [pc, #460]	; (8000f58 <MD5Transform+0xb90>)
 8000d8a:	4413      	add	r3, r2
 8000d8c:	653b      	str	r3, [r7, #80]	; 0x50
 8000d8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d90:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8000d94:	653b      	str	r3, [r7, #80]	; 0x50
 8000d96:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000d98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d9a:	4413      	add	r3, r2
 8000d9c:	653b      	str	r3, [r7, #80]	; 0x50
  II (a, b, c, d, x[12], S41, 0x655b59c3); // 53
 8000d9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000da0:	43da      	mvns	r2, r3
 8000da2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000da4:	431a      	orrs	r2, r3
 8000da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000da8:	405a      	eors	r2, r3
 8000daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dac:	441a      	add	r2, r3
 8000dae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000db0:	441a      	add	r2, r3
 8000db2:	4b6a      	ldr	r3, [pc, #424]	; (8000f5c <MD5Transform+0xb94>)
 8000db4:	4413      	add	r3, r2
 8000db6:	657b      	str	r3, [r7, #84]	; 0x54
 8000db8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000dba:	ea4f 63b3 	mov.w	r3, r3, ror #26
 8000dbe:	657b      	str	r3, [r7, #84]	; 0x54
 8000dc0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000dc4:	4413      	add	r3, r2
 8000dc6:	657b      	str	r3, [r7, #84]	; 0x54
  II (d, a, b, c, x[ 3], S42, 0x8f0ccc92); // 54
 8000dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000dca:	43da      	mvns	r2, r3
 8000dcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000dce:	431a      	orrs	r2, r3
 8000dd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000dd2:	405a      	eors	r2, r3
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	441a      	add	r2, r3
 8000dd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000dda:	441a      	add	r2, r3
 8000ddc:	4b60      	ldr	r3, [pc, #384]	; (8000f60 <MD5Transform+0xb98>)
 8000dde:	4413      	add	r3, r2
 8000de0:	64bb      	str	r3, [r7, #72]	; 0x48
 8000de2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000de4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8000de8:	64bb      	str	r3, [r7, #72]	; 0x48
 8000dea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000dec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000dee:	4413      	add	r3, r2
 8000df0:	64bb      	str	r3, [r7, #72]	; 0x48
  II (c, d, a, b, x[10], S43, 0xffeff47d); // 55
 8000df2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000df4:	43da      	mvns	r2, r3
 8000df6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000dfc:	405a      	eors	r2, r3
 8000dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e00:	441a      	add	r2, r3
 8000e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e04:	4413      	add	r3, r2
 8000e06:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8000e0a:	f6a3 3383 	subw	r3, r3, #2947	; 0xb83
 8000e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e12:	ea4f 4373 	mov.w	r3, r3, ror #17
 8000e16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000e1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e1c:	4413      	add	r3, r2
 8000e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  II (b, c, d, a, x[ 1], S44, 0x85845dd1); // 56
 8000e20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e22:	43da      	mvns	r2, r3
 8000e24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e26:	431a      	orrs	r2, r3
 8000e28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e2a:	405a      	eors	r2, r3
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	441a      	add	r2, r3
 8000e30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e32:	441a      	add	r2, r3
 8000e34:	4b4b      	ldr	r3, [pc, #300]	; (8000f64 <MD5Transform+0xb9c>)
 8000e36:	4413      	add	r3, r2
 8000e38:	653b      	str	r3, [r7, #80]	; 0x50
 8000e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e3c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8000e40:	653b      	str	r3, [r7, #80]	; 0x50
 8000e42:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000e44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e46:	4413      	add	r3, r2
 8000e48:	653b      	str	r3, [r7, #80]	; 0x50
  II (a, b, c, d, x[ 8], S41, 0x6fa87e4f); // 57
 8000e4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e4c:	43da      	mvns	r2, r3
 8000e4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e50:	431a      	orrs	r2, r3
 8000e52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e54:	405a      	eors	r2, r3
 8000e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e58:	441a      	add	r2, r3
 8000e5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e5c:	441a      	add	r2, r3
 8000e5e:	4b42      	ldr	r3, [pc, #264]	; (8000f68 <MD5Transform+0xba0>)
 8000e60:	4413      	add	r3, r2
 8000e62:	657b      	str	r3, [r7, #84]	; 0x54
 8000e64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e66:	ea4f 63b3 	mov.w	r3, r3, ror #26
 8000e6a:	657b      	str	r3, [r7, #84]	; 0x54
 8000e6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000e6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e70:	4413      	add	r3, r2
 8000e72:	657b      	str	r3, [r7, #84]	; 0x54
  II (d, a, b, c, x[15], S42, 0xfe2ce6e0); // 58
 8000e74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e76:	43da      	mvns	r2, r3
 8000e78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e7a:	431a      	orrs	r2, r3
 8000e7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e7e:	405a      	eors	r2, r3
 8000e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e82:	441a      	add	r2, r3
 8000e84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e86:	441a      	add	r2, r3
 8000e88:	4b38      	ldr	r3, [pc, #224]	; (8000f6c <MD5Transform+0xba4>)
 8000e8a:	4413      	add	r3, r2
 8000e8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8000e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e90:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8000e94:	64bb      	str	r3, [r7, #72]	; 0x48
 8000e96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000e98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e9a:	4413      	add	r3, r2
 8000e9c:	64bb      	str	r3, [r7, #72]	; 0x48
  II (c, d, a, b, x[ 6], S43, 0xa3014314); // 59
 8000e9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ea0:	43da      	mvns	r2, r3
 8000ea2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ea4:	431a      	orrs	r2, r3
 8000ea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ea8:	405a      	eors	r2, r3
 8000eaa:	6a3b      	ldr	r3, [r7, #32]
 8000eac:	441a      	add	r2, r3
 8000eae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000eb0:	441a      	add	r2, r3
 8000eb2:	4b2f      	ldr	r3, [pc, #188]	; (8000f70 <MD5Transform+0xba8>)
 8000eb4:	4413      	add	r3, r2
 8000eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000eb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000eba:	ea4f 4373 	mov.w	r3, r3, ror #17
 8000ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000ec0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000ec2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ec4:	4413      	add	r3, r2
 8000ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
  II (b, c, d, a, x[13], S44, 0x4e0811a1); // 60
 8000ec8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000eca:	43da      	mvns	r2, r3
 8000ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ece:	431a      	orrs	r2, r3
 8000ed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ed2:	405a      	eors	r2, r3
 8000ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ed6:	441a      	add	r2, r3
 8000ed8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000eda:	441a      	add	r2, r3
 8000edc:	4b25      	ldr	r3, [pc, #148]	; (8000f74 <MD5Transform+0xbac>)
 8000ede:	4413      	add	r3, r2
 8000ee0:	653b      	str	r3, [r7, #80]	; 0x50
 8000ee2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ee4:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8000ee8:	653b      	str	r3, [r7, #80]	; 0x50
 8000eea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000eec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000eee:	4413      	add	r3, r2
 8000ef0:	653b      	str	r3, [r7, #80]	; 0x50
  II (a, b, c, d, x[ 4], S41, 0xf7537e82); // 61
 8000ef2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ef4:	43da      	mvns	r2, r3
 8000ef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ef8:	431a      	orrs	r2, r3
 8000efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000efc:	405a      	eors	r2, r3
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	441a      	add	r2, r3
 8000f02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f04:	441a      	add	r2, r3
 8000f06:	4b1c      	ldr	r3, [pc, #112]	; (8000f78 <MD5Transform+0xbb0>)
 8000f08:	4413      	add	r3, r2
 8000f0a:	657b      	str	r3, [r7, #84]	; 0x54
 8000f0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f0e:	ea4f 63b3 	mov.w	r3, r3, ror #26
 8000f12:	657b      	str	r3, [r7, #84]	; 0x54
 8000f14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000f16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f18:	4413      	add	r3, r2
 8000f1a:	657b      	str	r3, [r7, #84]	; 0x54
  II (d, a, b, c, x[11], S42, 0xbd3af235); // 62
 8000f1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f1e:	43da      	mvns	r2, r3
 8000f20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f22:	431a      	orrs	r2, r3
 8000f24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f26:	405a      	eors	r2, r3
 8000f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f2a:	441a      	add	r2, r3
 8000f2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f2e:	441a      	add	r2, r3
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <MD5Transform+0xbb4>)
 8000f32:	4413      	add	r3, r2
 8000f34:	64bb      	str	r3, [r7, #72]	; 0x48
 8000f36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f38:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8000f3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8000f3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000f40:	e01e      	b.n	8000f80 <MD5Transform+0xbb8>
 8000f42:	bf00      	nop
 8000f44:	1fa27cf8 	.word	0x1fa27cf8
 8000f48:	c4ac5665 	.word	0xc4ac5665
 8000f4c:	f4292244 	.word	0xf4292244
 8000f50:	432aff97 	.word	0x432aff97
 8000f54:	ab9423a7 	.word	0xab9423a7
 8000f58:	fc93a039 	.word	0xfc93a039
 8000f5c:	655b59c3 	.word	0x655b59c3
 8000f60:	8f0ccc92 	.word	0x8f0ccc92
 8000f64:	85845dd1 	.word	0x85845dd1
 8000f68:	6fa87e4f 	.word	0x6fa87e4f
 8000f6c:	fe2ce6e0 	.word	0xfe2ce6e0
 8000f70:	a3014314 	.word	0xa3014314
 8000f74:	4e0811a1 	.word	0x4e0811a1
 8000f78:	f7537e82 	.word	0xf7537e82
 8000f7c:	bd3af235 	.word	0xbd3af235
 8000f80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f82:	4413      	add	r3, r2
 8000f84:	64bb      	str	r3, [r7, #72]	; 0x48
  II (c, d, a, b, x[ 2], S43, 0x2ad7d2bb); // 63
 8000f86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f88:	43da      	mvns	r2, r3
 8000f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f8c:	431a      	orrs	r2, r3
 8000f8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f90:	405a      	eors	r2, r3
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	441a      	add	r2, r3
 8000f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f98:	441a      	add	r2, r3
 8000f9a:	4b24      	ldr	r3, [pc, #144]	; (800102c <MD5Transform+0xc64>)
 8000f9c:	4413      	add	r3, r2
 8000f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000fa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fa2:	ea4f 4373 	mov.w	r3, r3, ror #17
 8000fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000fa8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000faa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000fac:	4413      	add	r3, r2
 8000fae:	64fb      	str	r3, [r7, #76]	; 0x4c
  II (b, c, d, a, x[ 9], S44, 0xeb86d391); // 64
 8000fb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fb2:	43da      	mvns	r2, r3
 8000fb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fb6:	431a      	orrs	r2, r3
 8000fb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000fba:	405a      	eors	r2, r3
 8000fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fbe:	441a      	add	r2, r3
 8000fc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000fc2:	441a      	add	r2, r3
 8000fc4:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <MD5Transform+0xc68>)
 8000fc6:	4413      	add	r3, r2
 8000fc8:	653b      	str	r3, [r7, #80]	; 0x50
 8000fca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000fcc:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8000fd0:	653b      	str	r3, [r7, #80]	; 0x50
 8000fd2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000fd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fd6:	4413      	add	r3, r2
 8000fd8:	653b      	str	r3, [r7, #80]	; 0x50

  state[0] += a;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fe0:	441a      	add	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	601a      	str	r2, [r3, #0]
  state[1] += b;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3304      	adds	r3, #4
 8000fea:	6819      	ldr	r1, [r3, #0]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3304      	adds	r3, #4
 8000ff0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000ff2:	440a      	add	r2, r1
 8000ff4:	601a      	str	r2, [r3, #0]
  state[2] += c;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	3308      	adds	r3, #8
 8000ffa:	6819      	ldr	r1, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3308      	adds	r3, #8
 8001000:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001002:	440a      	add	r2, r1
 8001004:	601a      	str	r2, [r3, #0]
  state[3] += d;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	330c      	adds	r3, #12
 800100a:	6819      	ldr	r1, [r3, #0]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	330c      	adds	r3, #12
 8001010:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001012:	440a      	add	r2, r1
 8001014:	601a      	str	r2, [r3, #0]

  // Zeroize sensitive information.
  MD5_memset ((char *)x, 0, sizeof (x));
 8001016:	f107 0308 	add.w	r3, r7, #8
 800101a:	2240      	movs	r2, #64	; 0x40
 800101c:	2100      	movs	r1, #0
 800101e:	4618      	mov	r0, r3
 8001020:	f005 fe6a 	bl	8006cf8 <memset>
}
 8001024:	bf00      	nop
 8001026:	3758      	adds	r7, #88	; 0x58
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	2ad7d2bb 	.word	0x2ad7d2bb
 8001030:	eb86d391 	.word	0xeb86d391

08001034 <MD5Init>:

void MD5Init (MD5_CTX *context)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  context->count[0] = context->count[1] = 0;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	615a      	str	r2, [r3, #20]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	695a      	ldr	r2, [r3, #20]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	611a      	str	r2, [r3, #16]
  // Load magic initialization constants.

  context->state[0] = 0x67452301;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a07      	ldr	r2, [pc, #28]	; (800106c <MD5Init+0x38>)
 800104e:	601a      	str	r2, [r3, #0]
  context->state[1] = 0xefcdab89;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4a07      	ldr	r2, [pc, #28]	; (8001070 <MD5Init+0x3c>)
 8001054:	605a      	str	r2, [r3, #4]
  context->state[2] = 0x98badcfe;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a06      	ldr	r2, [pc, #24]	; (8001074 <MD5Init+0x40>)
 800105a:	609a      	str	r2, [r3, #8]
  context->state[3] = 0x10325476;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a06      	ldr	r2, [pc, #24]	; (8001078 <MD5Init+0x44>)
 8001060:	60da      	str	r2, [r3, #12]
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr
 800106c:	67452301 	.word	0x67452301
 8001070:	efcdab89 	.word	0xefcdab89
 8001074:	98badcfe 	.word	0x98badcfe
 8001078:	10325476 	.word	0x10325476

0800107c <MD5Update>:
// MD5 block update operation. Continues an MD5 message-digest
// operation, processing another message block, and updating the
// context.

void MD5Update ( MD5_CTX *context, const uint8_t *input, uint32_t inputLen )
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
  uint16_t i, index, partLen;

  // Compute number of bytes mod 64
  index = (uint16_t)((context->count[0] >> 3) & 0x3F);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	691b      	ldr	r3, [r3, #16]
 800108c:	08db      	lsrs	r3, r3, #3
 800108e:	b29b      	uxth	r3, r3
 8001090:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001094:	82bb      	strh	r3, [r7, #20]

  // Update number of bits
  if ((context->count[0] += (inputLen << 3)) < (inputLen << 3))
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	691a      	ldr	r2, [r3, #16]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	00db      	lsls	r3, r3, #3
 800109e:	441a      	add	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	611a      	str	r2, [r3, #16]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	691a      	ldr	r2, [r3, #16]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d204      	bcs.n	80010ba <MD5Update+0x3e>
    context->count[1]++;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	695b      	ldr	r3, [r3, #20]
 80010b4:	1c5a      	adds	r2, r3, #1
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	615a      	str	r2, [r3, #20]

  context->count[1] += (inputLen >> 29);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	695a      	ldr	r2, [r3, #20]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	0f5b      	lsrs	r3, r3, #29
 80010c2:	441a      	add	r2, r3
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	615a      	str	r2, [r3, #20]

  partLen = 64 - index;
 80010c8:	8abb      	ldrh	r3, [r7, #20]
 80010ca:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80010ce:	827b      	strh	r3, [r7, #18]

  // Transform as many times as possible.

  if (inputLen >= partLen)
 80010d0:	8a7b      	ldrh	r3, [r7, #18]
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d325      	bcc.n	8001124 <MD5Update+0xa8>
  {
    MD5_memcpy(&context->buffer[index], (char *)input, (int)partLen);
 80010d8:	8abb      	ldrh	r3, [r7, #20]
 80010da:	3318      	adds	r3, #24
 80010dc:	68fa      	ldr	r2, [r7, #12]
 80010de:	4413      	add	r3, r2
 80010e0:	8a7a      	ldrh	r2, [r7, #18]
 80010e2:	68b9      	ldr	r1, [r7, #8]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f005 fdfc 	bl	8006ce2 <memcpy>
    MD5Transform (context->state, context->buffer);
 80010ea:	68fa      	ldr	r2, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	3318      	adds	r3, #24
 80010f0:	4619      	mov	r1, r3
 80010f2:	4610      	mov	r0, r2
 80010f4:	f7ff f968 	bl	80003c8 <MD5Transform>

    for (i = partLen; i + 63 < inputLen; i += 64)
 80010f8:	8a7b      	ldrh	r3, [r7, #18]
 80010fa:	82fb      	strh	r3, [r7, #22]
 80010fc:	e009      	b.n	8001112 <MD5Update+0x96>
       MD5Transform (context->state, &input[i]);
 80010fe:	68f8      	ldr	r0, [r7, #12]
 8001100:	8afb      	ldrh	r3, [r7, #22]
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	4413      	add	r3, r2
 8001106:	4619      	mov	r1, r3
 8001108:	f7ff f95e 	bl	80003c8 <MD5Transform>
    for (i = partLen; i + 63 < inputLen; i += 64)
 800110c:	8afb      	ldrh	r3, [r7, #22]
 800110e:	3340      	adds	r3, #64	; 0x40
 8001110:	82fb      	strh	r3, [r7, #22]
 8001112:	8afb      	ldrh	r3, [r7, #22]
 8001114:	333f      	adds	r3, #63	; 0x3f
 8001116:	461a      	mov	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4293      	cmp	r3, r2
 800111c:	d8ef      	bhi.n	80010fe <MD5Update+0x82>

    index = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	82bb      	strh	r3, [r7, #20]
 8001122:	e001      	b.n	8001128 <MD5Update+0xac>
  }
  else
    i = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	82fb      	strh	r3, [r7, #22]

  // Buffer remaining input
  MD5_memcpy(&context->buffer[index], (char *)&input[i],(int)(inputLen-i));
 8001128:	8abb      	ldrh	r3, [r7, #20]
 800112a:	3318      	adds	r3, #24
 800112c:	68fa      	ldr	r2, [r7, #12]
 800112e:	18d0      	adds	r0, r2, r3
 8001130:	8afb      	ldrh	r3, [r7, #22]
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	18d1      	adds	r1, r2, r3
 8001136:	8afb      	ldrh	r3, [r7, #22]
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	461a      	mov	r2, r3
 800113e:	f005 fdd0 	bl	8006ce2 <memcpy>
}
 8001142:	bf00      	nop
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <MD5Final>:

// MD5 finalization. Ends an MD5 message-digest operation, writing the
// the message digest and zeroizing the context.
void MD5Final ( uint8_t digest[16], MD5_CTX *context )
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
  uint8_t bits[8];
  uint16_t index, padLen;

  // Save number of bits
  Encode (bits, context->count, 8);
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	f103 0110 	add.w	r1, r3, #16
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	2208      	movs	r2, #8
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff f8aa 	bl	80002bc <Encode>

  // Pad out to 56 mod 64.

  index = (uint16_t)((context->count[0] >> 3) & 0x3f);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	691b      	ldr	r3, [r3, #16]
 800116c:	08db      	lsrs	r3, r3, #3
 800116e:	b29b      	uxth	r3, r3
 8001170:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001174:	82fb      	strh	r3, [r7, #22]
  padLen = (index < 56) ? (56 - index) : (120 - index);
 8001176:	8afb      	ldrh	r3, [r7, #22]
 8001178:	2b37      	cmp	r3, #55	; 0x37
 800117a:	d804      	bhi.n	8001186 <MD5Final+0x3a>
 800117c:	8afb      	ldrh	r3, [r7, #22]
 800117e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8001182:	b29b      	uxth	r3, r3
 8001184:	e003      	b.n	800118e <MD5Final+0x42>
 8001186:	8afb      	ldrh	r3, [r7, #22]
 8001188:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 800118c:	b29b      	uxth	r3, r3
 800118e:	82bb      	strh	r3, [r7, #20]
  MD5Update (context, PADDING, (uint32_t)padLen);
 8001190:	8abb      	ldrh	r3, [r7, #20]
 8001192:	461a      	mov	r2, r3
 8001194:	490c      	ldr	r1, [pc, #48]	; (80011c8 <MD5Final+0x7c>)
 8001196:	6838      	ldr	r0, [r7, #0]
 8001198:	f7ff ff70 	bl	800107c <MD5Update>

  // Append length (before padding)
  MD5Update (context, bits, 8L);
 800119c:	f107 030c 	add.w	r3, r7, #12
 80011a0:	2208      	movs	r2, #8
 80011a2:	4619      	mov	r1, r3
 80011a4:	6838      	ldr	r0, [r7, #0]
 80011a6:	f7ff ff69 	bl	800107c <MD5Update>

  // Store state in digest
  Encode (digest, context->state, 16);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	2210      	movs	r2, #16
 80011ae:	4619      	mov	r1, r3
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff f883 	bl	80002bc <Encode>

  // Zeroize sensitive information.
  MD5_memset ((char *)context, 0, sizeof (*context));
 80011b6:	2258      	movs	r2, #88	; 0x58
 80011b8:	2100      	movs	r1, #0
 80011ba:	6838      	ldr	r0, [r7, #0]
 80011bc:	f005 fd9c 	bl	8006cf8 <memset>
}
 80011c0:	bf00      	nop
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	0800a55c 	.word	0x0800a55c

080011cc <rf24_init>:
#include "rf24.h"
#include "rf24_network/rf24_worker.h"
#include "rf24_network/rf24_network.h"

void rf24_init()
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
	rf24_network_init();
 80011d0:	f003 fa10 	bl	80045f4 <rf24_network_init>
}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <rf24_debug_enable>:
struct rf24_timer *debug_timer;

bool enable = false;

void rf24_debug_enable()
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
	enable = true;
 80011dc:	4b03      	ldr	r3, [pc, #12]	; (80011ec <rf24_debug_enable+0x14>)
 80011de:	2201      	movs	r2, #1
 80011e0:	701a      	strb	r2, [r3, #0]
}
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	20000680 	.word	0x20000680

080011f0 <rf24_debug_disable>:

void rf24_debug_disable()
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
	enable = false;
 80011f4:	4b03      	ldr	r3, [pc, #12]	; (8001204 <rf24_debug_disable+0x14>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	701a      	strb	r2, [r3, #0]
}
 80011fa:	bf00      	nop
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	20000680 	.word	0x20000680

08001208 <rf24_debug>:
{
	debug_timer = timer;
}

void rf24_debug(rf24_debug_source source, rf24_debug_msg_type msg_type, uint8_t frame_subtype, uint8_t frame_subtype_reference, rf24_mac_addr *mac_addr, char* format, ...)
{
 8001208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800120a:	b093      	sub	sp, #76	; 0x4c
 800120c:	af04      	add	r7, sp, #16
 800120e:	4604      	mov	r4, r0
 8001210:	4608      	mov	r0, r1
 8001212:	4611      	mov	r1, r2
 8001214:	461a      	mov	r2, r3
 8001216:	4623      	mov	r3, r4
 8001218:	71fb      	strb	r3, [r7, #7]
 800121a:	4603      	mov	r3, r0
 800121c:	71bb      	strb	r3, [r7, #6]
 800121e:	460b      	mov	r3, r1
 8001220:	717b      	strb	r3, [r7, #5]
 8001222:	4613      	mov	r3, r2
 8001224:	713b      	strb	r3, [r7, #4]
	if(enable)
 8001226:	4b44      	ldr	r3, [pc, #272]	; (8001338 <rf24_debug+0x130>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d07f      	beq.n	800132e <rf24_debug+0x126>
	{
		char string[30];

		// (1) Print time stamp
		//__________________________________________________________________________________________________________________________________________________
		if(debug_timer){
 800122e:	4b43      	ldr	r3, [pc, #268]	; (800133c <rf24_debug+0x134>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d01a      	beq.n	800126c <rf24_debug+0x64>
			rf24_timespan timespan = rf24_worker_us_to_timespan(debug_timer->t_count_us);
 8001236:	4b41      	ldr	r3, [pc, #260]	; (800133c <rf24_debug+0x134>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	689a      	ldr	r2, [r3, #8]
 800123c:	f107 030c 	add.w	r3, r7, #12
 8001240:	4611      	mov	r1, r2
 8001242:	4618      	mov	r0, r3
 8001244:	f004 f8c8 	bl	80053d8 <rf24_worker_us_to_timespan>
			sprintf(string, "%d:%d:%d ", timespan.s, timespan.ms, timespan.us);
 8001248:	7b3b      	ldrb	r3, [r7, #12]
 800124a:	461a      	mov	r2, r3
 800124c:	89fb      	ldrh	r3, [r7, #14]
 800124e:	4619      	mov	r1, r3
 8001250:	8a3b      	ldrh	r3, [r7, #16]
 8001252:	f107 0018 	add.w	r0, r7, #24
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	460b      	mov	r3, r1
 800125a:	4939      	ldr	r1, [pc, #228]	; (8001340 <rf24_debug+0x138>)
 800125c:	f005 fe62 	bl	8006f24 <siprintf>
			rf24_printf("%-10s", string);
 8001260:	f107 0318 	add.w	r3, r7, #24
 8001264:	4619      	mov	r1, r3
 8001266:	4837      	ldr	r0, [pc, #220]	; (8001344 <rf24_debug+0x13c>)
 8001268:	f000 f87e 	bl	8001368 <rf24_printf>
		}

		// (2) Print source & message type (class)
		//__________________________________________________________________________________________________________________________________________________
		rf24_printf("%-10s %-7s", rf24_debug_source_string[source], rf24_debug_msg_type_string[msg_type]);
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	4a36      	ldr	r2, [pc, #216]	; (8001348 <rf24_debug+0x140>)
 8001270:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001274:	79bb      	ldrb	r3, [r7, #6]
 8001276:	4a35      	ldr	r2, [pc, #212]	; (800134c <rf24_debug+0x144>)
 8001278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800127c:	461a      	mov	r2, r3
 800127e:	4834      	ldr	r0, [pc, #208]	; (8001350 <rf24_debug+0x148>)
 8001280:	f000 f872 	bl	8001368 <rf24_printf>

		// (3) Print mac frame sub type & reference
		//__________________________________________________________________________________________________________________________________________________
		string[0] = '\0';
 8001284:	2300      	movs	r3, #0
 8001286:	763b      	strb	r3, [r7, #24]
		if(frame_subtype > 0)
 8001288:	797b      	ldrb	r3, [r7, #5]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d01b      	beq.n	80012c6 <rf24_debug+0xbe>
		{
			if(frame_subtype_reference > 0)
 800128e:	793b      	ldrb	r3, [r7, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d00e      	beq.n	80012b2 <rf24_debug+0xaa>
				sprintf(string, "%s(%s)", rf24_mac_frame_subtype_string_short[frame_subtype], rf24_mac_frame_subtype_string_short[frame_subtype_reference]);
 8001294:	797b      	ldrb	r3, [r7, #5]
 8001296:	4a2f      	ldr	r2, [pc, #188]	; (8001354 <rf24_debug+0x14c>)
 8001298:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800129c:	793b      	ldrb	r3, [r7, #4]
 800129e:	4a2d      	ldr	r2, [pc, #180]	; (8001354 <rf24_debug+0x14c>)
 80012a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a4:	f107 0018 	add.w	r0, r7, #24
 80012a8:	460a      	mov	r2, r1
 80012aa:	492b      	ldr	r1, [pc, #172]	; (8001358 <rf24_debug+0x150>)
 80012ac:	f005 fe3a 	bl	8006f24 <siprintf>
 80012b0:	e009      	b.n	80012c6 <rf24_debug+0xbe>
			else
				sprintf(string, "%s", rf24_mac_frame_subtype_string_short[frame_subtype]);
 80012b2:	797b      	ldrb	r3, [r7, #5]
 80012b4:	4a27      	ldr	r2, [pc, #156]	; (8001354 <rf24_debug+0x14c>)
 80012b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012ba:	f107 0318 	add.w	r3, r7, #24
 80012be:	4611      	mov	r1, r2
 80012c0:	4618      	mov	r0, r3
 80012c2:	f005 fe5e 	bl	8006f82 <strcpy>
		}
		rf24_printf("%-20s", string);
 80012c6:	f107 0318 	add.w	r3, r7, #24
 80012ca:	4619      	mov	r1, r3
 80012cc:	4823      	ldr	r0, [pc, #140]	; (800135c <rf24_debug+0x154>)
 80012ce:	f000 f84b 	bl	8001368 <rf24_printf>

		// (4) Print transmitter / receiver
		//__________________________________________________________________________________________________________________________________________________
		string[0] = '\0';
 80012d2:	2300      	movs	r3, #0
 80012d4:	763b      	strb	r3, [r7, #24]
		if(mac_addr) sprintf(string, "%d:%d:%d:%d:%d:%d", mac_addr->bytes[0], mac_addr->bytes[1], mac_addr->bytes[2], mac_addr->bytes[3], mac_addr->bytes[4], mac_addr->bytes[5]);
 80012d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d01b      	beq.n	8001314 <rf24_debug+0x10c>
 80012dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	461d      	mov	r5, r3
 80012e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012e4:	785b      	ldrb	r3, [r3, #1]
 80012e6:	461e      	mov	r6, r3
 80012e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012ea:	789b      	ldrb	r3, [r3, #2]
 80012ec:	461a      	mov	r2, r3
 80012ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012f0:	78db      	ldrb	r3, [r3, #3]
 80012f2:	4619      	mov	r1, r3
 80012f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012f6:	791b      	ldrb	r3, [r3, #4]
 80012f8:	461c      	mov	r4, r3
 80012fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012fc:	795b      	ldrb	r3, [r3, #5]
 80012fe:	f107 0018 	add.w	r0, r7, #24
 8001302:	9303      	str	r3, [sp, #12]
 8001304:	9402      	str	r4, [sp, #8]
 8001306:	9101      	str	r1, [sp, #4]
 8001308:	9200      	str	r2, [sp, #0]
 800130a:	4633      	mov	r3, r6
 800130c:	462a      	mov	r2, r5
 800130e:	4914      	ldr	r1, [pc, #80]	; (8001360 <rf24_debug+0x158>)
 8001310:	f005 fe08 	bl	8006f24 <siprintf>
		rf24_printf("%-24s", string);
 8001314:	f107 0318 	add.w	r3, r7, #24
 8001318:	4619      	mov	r1, r3
 800131a:	4812      	ldr	r0, [pc, #72]	; (8001364 <rf24_debug+0x15c>)
 800131c:	f000 f824 	bl	8001368 <rf24_printf>

		// (5) Print optional VARGS
		//__________________________________________________________________________________________________________________________________________________
		va_list args;
		va_start(args, format);
 8001320:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001324:	617b      	str	r3, [r7, #20]
		rf24_printf_vargs(format, args);
 8001326:	6979      	ldr	r1, [r7, #20]
 8001328:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800132a:	f000 f82f 	bl	800138c <rf24_printf_vargs>
		va_end(args);
	}
}
 800132e:	bf00      	nop
 8001330:	373c      	adds	r7, #60	; 0x3c
 8001332:	46bd      	mov	sp, r7
 8001334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001336:	bf00      	nop
 8001338:	20000680 	.word	0x20000680
 800133c:	20000794 	.word	0x20000794
 8001340:	08007d14 	.word	0x08007d14
 8001344:	08007d20 	.word	0x08007d20
 8001348:	20000030 	.word	0x20000030
 800134c:	20000048 	.word	0x20000048
 8001350:	08007d28 	.word	0x08007d28
 8001354:	20000004 	.word	0x20000004
 8001358:	08007d34 	.word	0x08007d34
 800135c:	08007d3c 	.word	0x08007d3c
 8001360:	08007d44 	.word	0x08007d44
 8001364:	08007d58 	.word	0x08007d58

08001368 <rf24_printf>:

void rf24_printf(char* format, ...)
{
 8001368:	b40f      	push	{r0, r1, r2, r3}
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, format);
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	607b      	str	r3, [r7, #4]
	rf24_printf_vargs(format, args);
 8001376:	6879      	ldr	r1, [r7, #4]
 8001378:	6938      	ldr	r0, [r7, #16]
 800137a:	f000 f807 	bl	800138c <rf24_printf_vargs>
	va_end(args);
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001388:	b004      	add	sp, #16
 800138a:	4770      	bx	lr

0800138c <rf24_printf_vargs>:

void rf24_printf_vargs(char* format, va_list args)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b094      	sub	sp, #80	; 0x50
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
	while (*format != '\0')
 8001396:	e0ca      	b.n	800152e <rf24_printf_vargs+0x1a2>
	{
		if (*format == '%')
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b25      	cmp	r3, #37	; 0x25
 800139e:	f040 80be 	bne.w	800151e <rf24_printf_vargs+0x192>
		{
			format++;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	3301      	adds	r3, #1
 80013a6:	607b      	str	r3, [r7, #4]

			switch(*format)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b64      	cmp	r3, #100	; 0x64
 80013ae:	d048      	beq.n	8001442 <rf24_printf_vargs+0xb6>
 80013b0:	2b64      	cmp	r3, #100	; 0x64
 80013b2:	dc04      	bgt.n	80013be <rf24_printf_vargs+0x32>
 80013b4:	2b2d      	cmp	r3, #45	; 0x2d
 80013b6:	d057      	beq.n	8001468 <rf24_printf_vargs+0xdc>
 80013b8:	2b63      	cmp	r3, #99	; 0x63
 80013ba:	d036      	beq.n	800142a <rf24_printf_vargs+0x9e>
 80013bc:	e0b4      	b.n	8001528 <rf24_printf_vargs+0x19c>
 80013be:	2b6c      	cmp	r3, #108	; 0x6c
 80013c0:	d003      	beq.n	80013ca <rf24_printf_vargs+0x3e>
 80013c2:	2b73      	cmp	r3, #115	; 0x73
 80013c4:	f000 80a1 	beq.w	800150a <rf24_printf_vargs+0x17e>
 80013c8:	e0ae      	b.n	8001528 <rf24_printf_vargs+0x19c>
			{
				case 'l':
				{
					format++;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	3301      	adds	r3, #1
 80013ce:	607b      	str	r3, [r7, #4]

					switch(*format)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b73      	cmp	r3, #115	; 0x73
 80013d6:	d015      	beq.n	8001404 <rf24_printf_vargs+0x78>
 80013d8:	2b75      	cmp	r3, #117	; 0x75
 80013da:	d000      	beq.n	80013de <rf24_printf_vargs+0x52>
							itoa(ls, str, 10);
							rf24_stm32f1xx_usart_write_str(str);
							break;
						}
					}
					break;
 80013dc:	e0a4      	b.n	8001528 <rf24_printf_vargs+0x19c>
							unsigned long int lu = va_arg(args, unsigned long int);
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	1d1a      	adds	r2, r3, #4
 80013e2:	603a      	str	r2, [r7, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	647b      	str	r3, [r7, #68]	; 0x44
							itoa(lu, str, 10);
 80013e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013ea:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80013ee:	220a      	movs	r2, #10
 80013f0:	4618      	mov	r0, r3
 80013f2:	f005 fc55 	bl	8006ca0 <itoa>
							rf24_stm32f1xx_usart_write_str(str);
 80013f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013fa:	4618      	mov	r0, r3
 80013fc:	f004 fcc0 	bl	8005d80 <rf24_stm32f1xx_usart_write_str>
							break;
 8001400:	bf00      	nop
 8001402:	e011      	b.n	8001428 <rf24_printf_vargs+0x9c>
							long int ls = va_arg(args, long int);
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	1d1a      	adds	r2, r3, #4
 8001408:	603a      	str	r2, [r7, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	643b      	str	r3, [r7, #64]	; 0x40
							itoa(ls, str, 10);
 800140e:	f107 031c 	add.w	r3, r7, #28
 8001412:	220a      	movs	r2, #10
 8001414:	4619      	mov	r1, r3
 8001416:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001418:	f005 fc42 	bl	8006ca0 <itoa>
							rf24_stm32f1xx_usart_write_str(str);
 800141c:	f107 031c 	add.w	r3, r7, #28
 8001420:	4618      	mov	r0, r3
 8001422:	f004 fcad 	bl	8005d80 <rf24_stm32f1xx_usart_write_str>
							break;
 8001426:	bf00      	nop
					break;
 8001428:	e07e      	b.n	8001528 <rf24_printf_vargs+0x19c>
				}
				case 'c':
				{
					char c = va_arg(args, int);
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	1d1a      	adds	r2, r3, #4
 800142e:	603a      	str	r2, [r7, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					rf24_stm32f1xx_usart_write_byte(c);
 8001436:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800143a:	4618      	mov	r0, r3
 800143c:	f004 fc84 	bl	8005d48 <rf24_stm32f1xx_usart_write_byte>
					break;
 8001440:	e072      	b.n	8001528 <rf24_printf_vargs+0x19c>
				}
				case 'd':
				{
					char str[10];
					int d = va_arg(args, int);
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	1d1a      	adds	r2, r3, #4
 8001446:	603a      	str	r2, [r7, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	63fb      	str	r3, [r7, #60]	; 0x3c
					itoa(d, str, 10);
 800144c:	f107 0310 	add.w	r3, r7, #16
 8001450:	220a      	movs	r2, #10
 8001452:	4619      	mov	r1, r3
 8001454:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001456:	f005 fc23 	bl	8006ca0 <itoa>
					rf24_stm32f1xx_usart_write_str(str);
 800145a:	f107 0310 	add.w	r3, r7, #16
 800145e:	4618      	mov	r0, r3
 8001460:	f004 fc8e 	bl	8005d80 <rf24_stm32f1xx_usart_write_str>
					break;
 8001464:	bf00      	nop
 8001466:	e05f      	b.n	8001528 <rf24_printf_vargs+0x19c>
				}
				case '-':
				{
					format++;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3301      	adds	r3, #1
 800146c:	607b      	str	r3, [r7, #4]
					uint8_t index = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					char spaces_string[4];
					uint8_t spaces_number = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

					while(*format != 's')
 800147a:	e016      	b.n	80014aa <rf24_printf_vargs+0x11e>
					{
						if(index > 2) rf24_stm32f1xx_usart_write_str("[format: %-123s]");
 800147c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001480:	2b02      	cmp	r3, #2
 8001482:	d902      	bls.n	800148a <rf24_printf_vargs+0xfe>
 8001484:	482e      	ldr	r0, [pc, #184]	; (8001540 <rf24_printf_vargs+0x1b4>)
 8001486:	f004 fc7b 	bl	8005d80 <rf24_stm32f1xx_usart_write_str>
						spaces_string[index++] = *format;
 800148a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800148e:	1c5a      	adds	r2, r3, #1
 8001490:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
 8001494:	4619      	mov	r1, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	781a      	ldrb	r2, [r3, #0]
 800149a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800149e:	440b      	add	r3, r1
 80014a0:	f803 2c44 	strb.w	r2, [r3, #-68]
						format++;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3301      	adds	r3, #1
 80014a8:	607b      	str	r3, [r7, #4]
					while(*format != 's')
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b73      	cmp	r3, #115	; 0x73
 80014b0:	d1e4      	bne.n	800147c <rf24_printf_vargs+0xf0>
					}

					spaces_string[index] = '\0';
 80014b2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80014b6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80014ba:	4413      	add	r3, r2
 80014bc:	2200      	movs	r2, #0
 80014be:	f803 2c44 	strb.w	r2, [r3, #-68]
					spaces_number = atoi(spaces_string);
 80014c2:	f107 030c 	add.w	r3, r7, #12
 80014c6:	4618      	mov	r0, r3
 80014c8:	f005 fba9 	bl	8006c1e <atoi>
 80014cc:	4603      	mov	r3, r0
 80014ce:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
					char *str = va_arg(args, char*);
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	1d1a      	adds	r2, r3, #4
 80014d6:	603a      	str	r2, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	637b      	str	r3, [r7, #52]	; 0x34
					uint8_t string_length = rf24_stm32f1xx_usart_write_str(str);
 80014dc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80014de:	f004 fc4f 	bl	8005d80 <rf24_stm32f1xx_usart_write_str>
 80014e2:	4603      	mov	r3, r0
 80014e4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

					while(string_length < spaces_number)
 80014e8:	e007      	b.n	80014fa <rf24_printf_vargs+0x16e>
					{
						string_length++;
 80014ea:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80014ee:	3301      	adds	r3, #1
 80014f0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
						rf24_stm32f1xx_usart_write_byte(' ');
 80014f4:	2020      	movs	r0, #32
 80014f6:	f004 fc27 	bl	8005d48 <rf24_stm32f1xx_usart_write_byte>
					while(string_length < spaces_number)
 80014fa:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80014fe:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001502:	429a      	cmp	r2, r3
 8001504:	d3f1      	bcc.n	80014ea <rf24_printf_vargs+0x15e>
					}

					break;
 8001506:	bf00      	nop
 8001508:	e00e      	b.n	8001528 <rf24_printf_vargs+0x19c>
				}
				case 's':
				{
					char *str = va_arg(args, char*);
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	1d1a      	adds	r2, r3, #4
 800150e:	603a      	str	r2, [r7, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	64bb      	str	r3, [r7, #72]	; 0x48
					rf24_stm32f1xx_usart_write_str(str);
 8001514:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001516:	f004 fc33 	bl	8005d80 <rf24_stm32f1xx_usart_write_str>
					break;
 800151a:	bf00      	nop
 800151c:	e004      	b.n	8001528 <rf24_printf_vargs+0x19c>
				}
				default:{}
			}
		}
		else rf24_stm32f1xx_usart_write_byte(*format);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f004 fc10 	bl	8005d48 <rf24_stm32f1xx_usart_write_byte>

		format++;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3301      	adds	r3, #1
 800152c:	607b      	str	r3, [r7, #4]
	while (*format != '\0')
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b00      	cmp	r3, #0
 8001534:	f47f af30 	bne.w	8001398 <rf24_printf_vargs+0xc>
	}
}
 8001538:	bf00      	nop
 800153a:	3750      	adds	r7, #80	; 0x50
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	08007d60 	.word	0x08007d60

08001544 <decimal_to_string>:

char buffer[100];

char* decimal_to_string(uint8_t* arr, uint8_t length, char space)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	70fb      	strb	r3, [r7, #3]
 8001550:	4613      	mov	r3, r2
 8001552:	70bb      	strb	r3, [r7, #2]
	uint8_t i = 0, k = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	73fb      	strb	r3, [r7, #15]
 8001558:	2300      	movs	r3, #0
 800155a:	73bb      	strb	r3, [r7, #14]

	for (i = 0; i < (length-1); i++) k += sprintf(&buffer[k], "%d%c", arr[i], space);
 800155c:	2300      	movs	r3, #0
 800155e:	73fb      	strb	r3, [r7, #15]
 8001560:	e013      	b.n	800158a <decimal_to_string+0x46>
 8001562:	7bbb      	ldrb	r3, [r7, #14]
 8001564:	4a13      	ldr	r2, [pc, #76]	; (80015b4 <decimal_to_string+0x70>)
 8001566:	1898      	adds	r0, r3, r2
 8001568:	7bfb      	ldrb	r3, [r7, #15]
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	4413      	add	r3, r2
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	461a      	mov	r2, r3
 8001572:	78bb      	ldrb	r3, [r7, #2]
 8001574:	4910      	ldr	r1, [pc, #64]	; (80015b8 <decimal_to_string+0x74>)
 8001576:	f005 fcd5 	bl	8006f24 <siprintf>
 800157a:	4603      	mov	r3, r0
 800157c:	b2da      	uxtb	r2, r3
 800157e:	7bbb      	ldrb	r3, [r7, #14]
 8001580:	4413      	add	r3, r2
 8001582:	73bb      	strb	r3, [r7, #14]
 8001584:	7bfb      	ldrb	r3, [r7, #15]
 8001586:	3301      	adds	r3, #1
 8001588:	73fb      	strb	r3, [r7, #15]
 800158a:	7bfa      	ldrb	r2, [r7, #15]
 800158c:	78fb      	ldrb	r3, [r7, #3]
 800158e:	3b01      	subs	r3, #1
 8001590:	429a      	cmp	r2, r3
 8001592:	dbe6      	blt.n	8001562 <decimal_to_string+0x1e>

	sprintf(&buffer[k], "%d", arr[i]);
 8001594:	7bbb      	ldrb	r3, [r7, #14]
 8001596:	4a07      	ldr	r2, [pc, #28]	; (80015b4 <decimal_to_string+0x70>)
 8001598:	1898      	adds	r0, r3, r2
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	4413      	add	r3, r2
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	461a      	mov	r2, r3
 80015a4:	4905      	ldr	r1, [pc, #20]	; (80015bc <decimal_to_string+0x78>)
 80015a6:	f005 fcbd 	bl	8006f24 <siprintf>

	return buffer;
 80015aa:	4b02      	ldr	r3, [pc, #8]	; (80015b4 <decimal_to_string+0x70>)
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000730 	.word	0x20000730
 80015b8:	08007d74 	.word	0x08007d74
 80015bc:	08007d7c 	.word	0x08007d7c

080015c0 <decimal_to_binary>:

char* decimal_to_binary(int n)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
	int c, d, count = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	613b      	str	r3, [r7, #16]
	char *ptr = (char*) malloc(8+1);
 80015cc:	2009      	movs	r0, #9
 80015ce:	f005 fb69 	bl	8006ca4 <malloc>
 80015d2:	4603      	mov	r3, r0
 80015d4:	60fb      	str	r3, [r7, #12]

	for (c = 7 ; c >= 0 ; c--)
 80015d6:	2307      	movs	r3, #7
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	e01a      	b.n	8001612 <decimal_to_binary+0x52>
	{
		d = n >> c;
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	fa42 f303 	asr.w	r3, r2, r3
 80015e4:	60bb      	str	r3, [r7, #8]

		if (d & 1)
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d005      	beq.n	80015fc <decimal_to_binary+0x3c>
		*(ptr+count) = 1 + '0';
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	4413      	add	r3, r2
 80015f6:	2231      	movs	r2, #49	; 0x31
 80015f8:	701a      	strb	r2, [r3, #0]
 80015fa:	e004      	b.n	8001606 <decimal_to_binary+0x46>
		else
		*(ptr+count) = 0 + '0';
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	4413      	add	r3, r2
 8001602:	2230      	movs	r2, #48	; 0x30
 8001604:	701a      	strb	r2, [r3, #0]

		count++;
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	3301      	adds	r3, #1
 800160a:	613b      	str	r3, [r7, #16]
	for (c = 7 ; c >= 0 ; c--)
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	3b01      	subs	r3, #1
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	2b00      	cmp	r3, #0
 8001616:	dae1      	bge.n	80015dc <decimal_to_binary+0x1c>
	}
	*(ptr+count) = '\0';
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	4413      	add	r3, r2
 800161e:	2200      	movs	r2, #0
 8001620:	701a      	strb	r2, [r3, #0]

	return ptr;
 8001622:	68fb      	ldr	r3, [r7, #12]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <rf24_module_read_register>:
// FUNCTIONS

// REGISTER ACCESS

uint8_t rf24_module_read_register(uint8_t register_name)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	71fb      	strb	r3, [r7, #7]
	rf24_stm32f1xx_spi_csn_low();
 8001636:	f004 faed 	bl	8005c14 <rf24_stm32f1xx_spi_csn_low>

	rf24_stm32f1xx_spi_shift_byte(R_REGISTER | (REGISTER_MASK & register_name));
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	f003 031f 	and.w	r3, r3, #31
 8001640:	b2db      	uxtb	r3, r3
 8001642:	4618      	mov	r0, r3
 8001644:	f004 fafe 	bl	8005c44 <rf24_stm32f1xx_spi_shift_byte>

	uint8_t value = rf24_stm32f1xx_spi_shift_byte(NOP);
 8001648:	20ff      	movs	r0, #255	; 0xff
 800164a:	f004 fafb 	bl	8005c44 <rf24_stm32f1xx_spi_shift_byte>
 800164e:	4603      	mov	r3, r0
 8001650:	73fb      	strb	r3, [r7, #15]

	rf24_stm32f1xx_spi_csn_high();
 8001652:	f004 faeb 	bl	8005c2c <rf24_stm32f1xx_spi_csn_high>

	return value;
 8001656:	7bfb      	ldrb	r3, [r7, #15]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <rf24_module_write_register>:

uint8_t rf24_module_write_register(uint8_t register_name, uint8_t data)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	460a      	mov	r2, r1
 800166a:	71fb      	strb	r3, [r7, #7]
 800166c:	4613      	mov	r3, r2
 800166e:	71bb      	strb	r3, [r7, #6]
	rf24_stm32f1xx_spi_csn_low();
 8001670:	f004 fad0 	bl	8005c14 <rf24_stm32f1xx_spi_csn_low>

	rf24_stm32f1xx_spi_shift_byte(W_REGISTER | (REGISTER_MASK & register_name));
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	f003 031f 	and.w	r3, r3, #31
 800167a:	b2db      	uxtb	r3, r3
 800167c:	f043 0320 	orr.w	r3, r3, #32
 8001680:	b2db      	uxtb	r3, r3
 8001682:	4618      	mov	r0, r3
 8001684:	f004 fade 	bl	8005c44 <rf24_stm32f1xx_spi_shift_byte>

	uint8_t status = rf24_stm32f1xx_spi_shift_byte(data);
 8001688:	79bb      	ldrb	r3, [r7, #6]
 800168a:	4618      	mov	r0, r3
 800168c:	f004 fada 	bl	8005c44 <rf24_stm32f1xx_spi_shift_byte>
 8001690:	4603      	mov	r3, r0
 8001692:	73fb      	strb	r3, [r7, #15]

	rf24_stm32f1xx_spi_csn_high();
 8001694:	f004 faca 	bl	8005c2c <rf24_stm32f1xx_spi_csn_high>

	return status;
 8001698:	7bfb      	ldrb	r3, [r7, #15]
}
 800169a:	4618      	mov	r0, r3
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <rf24_module_readwrite_register>:

void rf24_module_readwrite_register(rf24_module_read_write read_write, uint8_t register_name, uint8_t *data_inout, uint8_t length)
{
 80016a2:	b590      	push	{r4, r7, lr}
 80016a4:	b085      	sub	sp, #20
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	603a      	str	r2, [r7, #0]
 80016aa:	461a      	mov	r2, r3
 80016ac:	4603      	mov	r3, r0
 80016ae:	71fb      	strb	r3, [r7, #7]
 80016b0:	460b      	mov	r3, r1
 80016b2:	71bb      	strb	r3, [r7, #6]
 80016b4:	4613      	mov	r3, r2
 80016b6:	717b      	strb	r3, [r7, #5]
	if (read_write == write && register_name != W_TX_PAYLOAD && register_name != W_TX_PAYLOAD_NO_ACK)
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d108      	bne.n	80016d0 <rf24_module_readwrite_register+0x2e>
 80016be:	79bb      	ldrb	r3, [r7, #6]
 80016c0:	2ba0      	cmp	r3, #160	; 0xa0
 80016c2:	d005      	beq.n	80016d0 <rf24_module_readwrite_register+0x2e>
 80016c4:	79bb      	ldrb	r3, [r7, #6]
 80016c6:	2bb0      	cmp	r3, #176	; 0xb0
 80016c8:	d002      	beq.n	80016d0 <rf24_module_readwrite_register+0x2e>
	{
		register_name = W_REGISTER + register_name;
 80016ca:	79bb      	ldrb	r3, [r7, #6]
 80016cc:	3320      	adds	r3, #32
 80016ce:	71bb      	strb	r3, [r7, #6]
	}

	rf24_stm32f1xx_spi_csn_low();
 80016d0:	f004 faa0 	bl	8005c14 <rf24_stm32f1xx_spi_csn_low>

	rf24_stm32f1xx_spi_shift_byte(register_name);
 80016d4:	79bb      	ldrb	r3, [r7, #6]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f004 fab4 	bl	8005c44 <rf24_stm32f1xx_spi_shift_byte>

	for(int i=0; i<length; i++)
 80016dc:	2300      	movs	r3, #0
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	e017      	b.n	8001712 <rf24_module_readwrite_register+0x70>
	{
		if(read_write == read)
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d107      	bne.n	80016f8 <rf24_module_readwrite_register+0x56>
		{
			data_inout[i] = rf24_stm32f1xx_spi_shift_byte(NOP);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	18d4      	adds	r4, r2, r3
 80016ee:	20ff      	movs	r0, #255	; 0xff
 80016f0:	f004 faa8 	bl	8005c44 <rf24_stm32f1xx_spi_shift_byte>
 80016f4:	4603      	mov	r3, r0
 80016f6:	7023      	strb	r3, [r4, #0]
		}
		if(read_write == write)
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d106      	bne.n	800170c <rf24_module_readwrite_register+0x6a>
		{
			rf24_stm32f1xx_spi_shift_byte(data_inout[i]);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	4413      	add	r3, r2
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f004 fa9c 	bl	8005c44 <rf24_stm32f1xx_spi_shift_byte>
	for(int i=0; i<length; i++)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	3301      	adds	r3, #1
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	797b      	ldrb	r3, [r7, #5]
 8001714:	68fa      	ldr	r2, [r7, #12]
 8001716:	429a      	cmp	r2, r3
 8001718:	dbe3      	blt.n	80016e2 <rf24_module_readwrite_register+0x40>
		}
	}

	rf24_stm32f1xx_spi_csn_high();
 800171a:	f004 fa87 	bl	8005c2c <rf24_stm32f1xx_spi_csn_high>
}
 800171e:	bf00      	nop
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	bd90      	pop	{r4, r7, pc}
	...

08001728 <rf24_module_write_attribute>:

// FUNCTON ACCESS

bool rf24_module_write_attribute(rf24_module_attribute *attribute, rf24_module_attribute_value *value_in)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
	switch(attribute->type)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b03      	cmp	r3, #3
 8001738:	d035      	beq.n	80017a6 <rf24_module_write_attribute+0x7e>
 800173a:	2b05      	cmp	r3, #5
 800173c:	d065      	beq.n	800180a <rf24_module_write_attribute+0xe2>
 800173e:	2b01      	cmp	r3, #1
 8001740:	d16d      	bne.n	800181e <rf24_module_write_attribute+0xf6>
	{
		/* w1: set/clear bit in register */
		case w1_rw:
		{
			if(value_in->w1 >= attribute->w1.min && value_in->w1 <= attribute->w1.max)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	781a      	ldrb	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	791b      	ldrb	r3, [r3, #4]
 800174a:	429a      	cmp	r2, r3
 800174c:	d326      	bcc.n	800179c <rf24_module_write_attribute+0x74>
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	781a      	ldrb	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	795b      	ldrb	r3, [r3, #5]
 8001756:	429a      	cmp	r2, r3
 8001758:	d820      	bhi.n	800179c <rf24_module_write_attribute+0x74>
			{
				uint8_t rf24_module_register = rf24_module_read_register(attribute->reg_addr) & attribute->mask;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	785b      	ldrb	r3, [r3, #1]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff ff64 	bl	800162c <rf24_module_read_register>
 8001764:	4603      	mov	r3, r0
 8001766:	461a      	mov	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	789b      	ldrb	r3, [r3, #2]
 800176c:	4013      	ands	r3, r2
 800176e:	73bb      	strb	r3, [r7, #14]
				rf24_module_register |= ( (value_in->w1) << attribute->mnemonic );
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	461a      	mov	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	78db      	ldrb	r3, [r3, #3]
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	b25a      	sxtb	r2, r3
 8001780:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001784:	4313      	orrs	r3, r2
 8001786:	b25b      	sxtb	r3, r3
 8001788:	73bb      	strb	r3, [r7, #14]
				rf24_module_write_register(attribute->reg_addr, rf24_module_register);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	785b      	ldrb	r3, [r3, #1]
 800178e:	7bba      	ldrb	r2, [r7, #14]
 8001790:	4611      	mov	r1, r2
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff ff64 	bl	8001660 <rf24_module_write_register>
				return true;
 8001798:	2301      	movs	r3, #1
 800179a:	e041      	b.n	8001820 <rf24_module_write_attribute+0xf8>
			}
			else
			{
				#ifdef DEBUG
					rf24_stm32f1xx_usart_write_line("[i] input of wrong value or wrong format!");
 800179c:	4822      	ldr	r0, [pc, #136]	; (8001828 <rf24_module_write_attribute+0x100>)
 800179e:	f004 fb0a 	bl	8005db6 <rf24_stm32f1xx_usart_write_line>
				#endif
				return false;
 80017a2:	2300      	movs	r3, #0
 80017a4:	e03c      	b.n	8001820 <rf24_module_write_attribute+0xf8>
		}

		/* w8: set/clear bits of register */
		case w8_rw:
		{
			if(value_in->w8 >= attribute->w8.min && value_in->w8 <= attribute->w8.max)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	785a      	ldrb	r2, [r3, #1]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	791b      	ldrb	r3, [r3, #4]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d326      	bcc.n	8001800 <rf24_module_write_attribute+0xd8>
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	785a      	ldrb	r2, [r3, #1]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	795b      	ldrb	r3, [r3, #5]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d820      	bhi.n	8001800 <rf24_module_write_attribute+0xd8>
			{
				uint8_t rf24_module_register = rf24_module_read_register(attribute->reg_addr) & attribute->mask;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	785b      	ldrb	r3, [r3, #1]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff ff32 	bl	800162c <rf24_module_read_register>
 80017c8:	4603      	mov	r3, r0
 80017ca:	461a      	mov	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	789b      	ldrb	r3, [r3, #2]
 80017d0:	4013      	ands	r3, r2
 80017d2:	73fb      	strb	r3, [r7, #15]
				rf24_module_register |= (value_in->w8) << attribute->mnemonic;
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	785b      	ldrb	r3, [r3, #1]
 80017d8:	461a      	mov	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	78db      	ldrb	r3, [r3, #3]
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	b25a      	sxtb	r2, r3
 80017e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	b25b      	sxtb	r3, r3
 80017ec:	73fb      	strb	r3, [r7, #15]
				rf24_module_write_register(attribute->reg_addr, rf24_module_register);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	785b      	ldrb	r3, [r3, #1]
 80017f2:	7bfa      	ldrb	r2, [r7, #15]
 80017f4:	4611      	mov	r1, r2
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff ff32 	bl	8001660 <rf24_module_write_register>
				return true;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e00f      	b.n	8001820 <rf24_module_write_attribute+0xf8>
			}
			else
			{
				#ifdef DEBUG
					rf24_stm32f1xx_usart_write_line("[i] input of wrong value or wrong format!");
 8001800:	4809      	ldr	r0, [pc, #36]	; (8001828 <rf24_module_write_attribute+0x100>)
 8001802:	f004 fad8 	bl	8005db6 <rf24_stm32f1xx_usart_write_line>
				#endif
				return false;
 8001806:	2300      	movs	r3, #0
 8001808:	e00a      	b.n	8001820 <rf24_module_write_attribute+0xf8>
		}

		/* w40: write into register w40 (5x8byte)*/
		case w40_rw:
		{
			rf24_module_readwrite_register(write, attribute->reg_addr, value_in->w40, 5);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	7859      	ldrb	r1, [r3, #1]
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	2305      	movs	r3, #5
 8001814:	2001      	movs	r0, #1
 8001816:	f7ff ff44 	bl	80016a2 <rf24_module_readwrite_register>
			return true;
 800181a:	2301      	movs	r3, #1
 800181c:	e000      	b.n	8001820 <rf24_module_write_attribute+0xf8>
		}
		default:break;
	}

	return false;
 800181e:	2300      	movs	r3, #0
}
 8001820:	4618      	mov	r0, r3
 8001822:	3710      	adds	r7, #16
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	08008180 	.word	0x08008180

0800182c <rf24_module_read_attribute>:

bool rf24_module_read_attribute(rf24_module_attribute *attribute, rf24_module_attribute_value *value_out)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
	switch(attribute->type){
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	2b05      	cmp	r3, #5
 800183c:	d84f      	bhi.n	80018de <rf24_module_read_attribute+0xb2>
 800183e:	a201      	add	r2, pc, #4	; (adr r2, 8001844 <rf24_module_read_attribute+0x18>)
 8001840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001844:	0800185d 	.word	0x0800185d
 8001848:	0800185d 	.word	0x0800185d
 800184c:	08001899 	.word	0x08001899
 8001850:	08001899 	.word	0x08001899
 8001854:	080018cb 	.word	0x080018cb
 8001858:	080018cb 	.word	0x080018cb

		case w1_r:
		case w1_rw:{
			uint8_t reg = rf24_module_read_register(attribute->reg_addr) & ~(attribute->mask);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	785b      	ldrb	r3, [r3, #1]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fee3 	bl	800162c <rf24_module_read_register>
 8001866:	4603      	mov	r3, r0
 8001868:	b25a      	sxtb	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	789b      	ldrb	r3, [r3, #2]
 800186e:	b25b      	sxtb	r3, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	b25b      	sxtb	r3, r3
 8001874:	4013      	ands	r3, r2
 8001876:	b25b      	sxtb	r3, r3
 8001878:	737b      	strb	r3, [r7, #13]
			uint8_t reg_value = reg >> attribute->mnemonic;
 800187a:	7b7b      	ldrb	r3, [r7, #13]
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	78d2      	ldrb	r2, [r2, #3]
 8001880:	4113      	asrs	r3, r2
 8001882:	733b      	strb	r3, [r7, #12]
			value_out->w1 = reg_value;
 8001884:	7b3b      	ldrb	r3, [r7, #12]
 8001886:	2b00      	cmp	r3, #0
 8001888:	bf14      	ite	ne
 800188a:	2301      	movne	r3, #1
 800188c:	2300      	moveq	r3, #0
 800188e:	b2da      	uxtb	r2, r3
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	701a      	strb	r2, [r3, #0]
			return true;
 8001894:	2301      	movs	r3, #1
 8001896:	e023      	b.n	80018e0 <rf24_module_read_attribute+0xb4>
		}

		case w8_r:
		case w8_rw:
		{
			uint8_t reg = rf24_module_read_register(attribute->reg_addr) & ~(attribute->mask);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	785b      	ldrb	r3, [r3, #1]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fec5 	bl	800162c <rf24_module_read_register>
 80018a2:	4603      	mov	r3, r0
 80018a4:	b25a      	sxtb	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	789b      	ldrb	r3, [r3, #2]
 80018aa:	b25b      	sxtb	r3, r3
 80018ac:	43db      	mvns	r3, r3
 80018ae:	b25b      	sxtb	r3, r3
 80018b0:	4013      	ands	r3, r2
 80018b2:	b25b      	sxtb	r3, r3
 80018b4:	73fb      	strb	r3, [r7, #15]
			uint8_t reg_value = reg >> attribute->mnemonic;
 80018b6:	7bfb      	ldrb	r3, [r7, #15]
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	78d2      	ldrb	r2, [r2, #3]
 80018bc:	4113      	asrs	r3, r2
 80018be:	73bb      	strb	r3, [r7, #14]
			value_out->w8 = reg_value;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	7bba      	ldrb	r2, [r7, #14]
 80018c4:	705a      	strb	r2, [r3, #1]
			return true;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e00a      	b.n	80018e0 <rf24_module_read_attribute+0xb4>
		}

		case w40_r:
		case w40_rw:
		{
			rf24_module_readwrite_register(read, attribute->reg_addr, value_out->w40, 5);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	7859      	ldrb	r1, [r3, #1]
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685a      	ldr	r2, [r3, #4]
 80018d2:	2305      	movs	r3, #5
 80018d4:	2000      	movs	r0, #0
 80018d6:	f7ff fee4 	bl	80016a2 <rf24_module_readwrite_register>
			return true;
 80018da:	2301      	movs	r3, #1
 80018dc:	e000      	b.n	80018e0 <rf24_module_read_attribute+0xb4>
		}
	}

	return false;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3710      	adds	r7, #16
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <rf24_module_value_w1>:

rf24_module_attribute_value* rf24_module_value_w1(bool value){
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	71fb      	strb	r3, [r7, #7]
	value_in.w1 = value;
 80018f2:	4a04      	ldr	r2, [pc, #16]	; (8001904 <rf24_module_value_w1+0x1c>)
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	7013      	strb	r3, [r2, #0]
	return &value_in;
 80018f8:	4b02      	ldr	r3, [pc, #8]	; (8001904 <rf24_module_value_w1+0x1c>)
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr
 8001904:	200006d4 	.word	0x200006d4

08001908 <rf24_module_value_w8>:

rf24_module_attribute_value* rf24_module_value_w8(uint8_t value){
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	71fb      	strb	r3, [r7, #7]
	value_in.w8 = value;
 8001912:	4a04      	ldr	r2, [pc, #16]	; (8001924 <rf24_module_value_w8+0x1c>)
 8001914:	79fb      	ldrb	r3, [r7, #7]
 8001916:	7053      	strb	r3, [r2, #1]
	return &value_in;
 8001918:	4b02      	ldr	r3, [pc, #8]	; (8001924 <rf24_module_value_w8+0x1c>)
}
 800191a:	4618      	mov	r0, r3
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr
 8001924:	200006d4 	.word	0x200006d4

08001928 <rf24_module_value_w40>:

rf24_module_attribute_value* rf24_module_value_w40(uint8_t *value, uint8_t value_length){
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	460b      	mov	r3, r1
 8001932:	70fb      	strb	r3, [r7, #3]
	value_in.w40 = value;
 8001934:	4a05      	ldr	r2, [pc, #20]	; (800194c <rf24_module_value_w40+0x24>)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6053      	str	r3, [r2, #4]
	value_in.length = value_length;
 800193a:	4a04      	ldr	r2, [pc, #16]	; (800194c <rf24_module_value_w40+0x24>)
 800193c:	78fb      	ldrb	r3, [r7, #3]
 800193e:	7213      	strb	r3, [r2, #8]
	return &value_in;
 8001940:	4b02      	ldr	r3, [pc, #8]	; (800194c <rf24_module_value_w40+0x24>)
}
 8001942:	4618      	mov	r0, r3
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr
 800194c:	200006d4 	.word	0x200006d4

08001950 <rf24_module_set_ce>:

// NRF24L01 INTERNAL FUNCTIONS

void rf24_module_set_ce(rf24_stm32f1xx_pin_state ce_state)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	71fb      	strb	r3, [r7, #7]
	switch(ce_state)
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d005      	beq.n	800196c <rf24_module_set_ce+0x1c>
 8001960:	2b01      	cmp	r3, #1
 8001962:	d000      	beq.n	8001966 <rf24_module_set_ce+0x16>
	{
		case high: rf24_stm32f1xx_ce_high(); break;
		case low: rf24_stm32f1xx_ce_low(); break;
	}
}
 8001964:	e005      	b.n	8001972 <rf24_module_set_ce+0x22>
		case high: rf24_stm32f1xx_ce_high(); break;
 8001966:	f004 f86d 	bl	8005a44 <rf24_stm32f1xx_ce_high>
 800196a:	e002      	b.n	8001972 <rf24_module_set_ce+0x22>
		case low: rf24_stm32f1xx_ce_low(); break;
 800196c:	f004 f876 	bl	8005a5c <rf24_stm32f1xx_ce_low>
 8001970:	bf00      	nop
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <rf24_module_set_prim_rx>:
// NRF24L01 USER EXPORT FUNCTIONS

// REGISTER ACCESS FUNCTIONS

void rf24_module_set_prim_rx(rf24_stm32f1xx_pin_state prim_rx_state)
{
 800197c:	b590      	push	{r4, r7, lr}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	71fb      	strb	r3, [r7, #7]
	switch(prim_rx_state)
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d00d      	beq.n	80019a8 <rf24_module_set_prim_rx+0x2c>
 800198c:	2b01      	cmp	r3, #1
 800198e:	d000      	beq.n	8001992 <rf24_module_set_prim_rx+0x16>
			break;
		case low:
			rf24_module_write_attribute(rf24_module_attributes.prim_rx, rf24_module_value_w1(false));
			break;
	}
}
 8001990:	e015      	b.n	80019be <rf24_module_set_prim_rx+0x42>
			rf24_module_write_attribute(rf24_module_attributes.prim_rx, rf24_module_value_w1(true));
 8001992:	4b0d      	ldr	r3, [pc, #52]	; (80019c8 <rf24_module_set_prim_rx+0x4c>)
 8001994:	681c      	ldr	r4, [r3, #0]
 8001996:	2001      	movs	r0, #1
 8001998:	f7ff ffa6 	bl	80018e8 <rf24_module_value_w1>
 800199c:	4603      	mov	r3, r0
 800199e:	4619      	mov	r1, r3
 80019a0:	4620      	mov	r0, r4
 80019a2:	f7ff fec1 	bl	8001728 <rf24_module_write_attribute>
			break;
 80019a6:	e00a      	b.n	80019be <rf24_module_set_prim_rx+0x42>
			rf24_module_write_attribute(rf24_module_attributes.prim_rx, rf24_module_value_w1(false));
 80019a8:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <rf24_module_set_prim_rx+0x4c>)
 80019aa:	681c      	ldr	r4, [r3, #0]
 80019ac:	2000      	movs	r0, #0
 80019ae:	f7ff ff9b 	bl	80018e8 <rf24_module_value_w1>
 80019b2:	4603      	mov	r3, r0
 80019b4:	4619      	mov	r1, r3
 80019b6:	4620      	mov	r0, r4
 80019b8:	f7ff feb6 	bl	8001728 <rf24_module_write_attribute>
			break;
 80019bc:	bf00      	nop
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd90      	pop	{r4, r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000064 	.word	0x20000064

080019cc <rf24_module_power_up>:

void rf24_module_power_up()
{
 80019cc:	b598      	push	{r3, r4, r7, lr}
 80019ce:	af00      	add	r7, sp, #0
	rf24_module_write_attribute(rf24_module_attributes.pwr_up, rf24_module_value_w1(true));
 80019d0:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <rf24_module_power_up+0x1c>)
 80019d2:	685c      	ldr	r4, [r3, #4]
 80019d4:	2001      	movs	r0, #1
 80019d6:	f7ff ff87 	bl	80018e8 <rf24_module_value_w1>
 80019da:	4603      	mov	r3, r0
 80019dc:	4619      	mov	r1, r3
 80019de:	4620      	mov	r0, r4
 80019e0:	f7ff fea2 	bl	8001728 <rf24_module_write_attribute>
}
 80019e4:	bf00      	nop
 80019e6:	bd98      	pop	{r3, r4, r7, pc}
 80019e8:	20000064 	.word	0x20000064

080019ec <rf24_module_enable_crc>:
{
	rf24_module_write_attribute(rf24_module_attributes.pwr_up, rf24_module_value_w1(false));
}

void rf24_module_enable_crc()
{
 80019ec:	b598      	push	{r3, r4, r7, lr}
 80019ee:	af00      	add	r7, sp, #0
	rf24_module_write_attribute(rf24_module_attributes.en_crc, rf24_module_value_w1(true));
 80019f0:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <rf24_module_enable_crc+0x1c>)
 80019f2:	68dc      	ldr	r4, [r3, #12]
 80019f4:	2001      	movs	r0, #1
 80019f6:	f7ff ff77 	bl	80018e8 <rf24_module_value_w1>
 80019fa:	4603      	mov	r3, r0
 80019fc:	4619      	mov	r1, r3
 80019fe:	4620      	mov	r0, r4
 8001a00:	f7ff fe92 	bl	8001728 <rf24_module_write_attribute>
}
 8001a04:	bf00      	nop
 8001a06:	bd98      	pop	{r3, r4, r7, pc}
 8001a08:	20000064 	.word	0x20000064

08001a0c <rf24_module_disable_crc>:

void rf24_module_disable_crc()
{
 8001a0c:	b598      	push	{r3, r4, r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
	rf24_module_write_attribute(rf24_module_attributes.en_crc, rf24_module_value_w1(false));
 8001a10:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <rf24_module_disable_crc+0x1c>)
 8001a12:	68dc      	ldr	r4, [r3, #12]
 8001a14:	2000      	movs	r0, #0
 8001a16:	f7ff ff67 	bl	80018e8 <rf24_module_value_w1>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4620      	mov	r0, r4
 8001a20:	f7ff fe82 	bl	8001728 <rf24_module_write_attribute>
}
 8001a24:	bf00      	nop
 8001a26:	bd98      	pop	{r3, r4, r7, pc}
 8001a28:	20000064 	.word	0x20000064

08001a2c <rf24_module_crc_enabled>:

bool rf24_module_crc_enabled()
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
	rf24_module_read_attribute(rf24_module_attributes.en_crc, &value_out);
 8001a30:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <rf24_module_crc_enabled+0x18>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	4904      	ldr	r1, [pc, #16]	; (8001a48 <rf24_module_crc_enabled+0x1c>)
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fef8 	bl	800182c <rf24_module_read_attribute>
	return value_out.w1;
 8001a3c:	4b02      	ldr	r3, [pc, #8]	; (8001a48 <rf24_module_crc_enabled+0x1c>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20000064 	.word	0x20000064
 8001a48:	20000718 	.word	0x20000718

08001a4c <rf24_module_set_crc_length>:

void rf24_module_set_crc_length(rf24_module_crc_length crc_length)
{
 8001a4c:	b590      	push	{r4, r7, lr}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	71fb      	strb	r3, [r7, #7]
	rf24_module_write_attribute(rf24_module_attributes.crc0, rf24_module_value_w1(crc_length));
 8001a56:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <rf24_module_set_crc_length+0x34>)
 8001a58:	689c      	ldr	r4, [r3, #8]
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	bf14      	ite	ne
 8001a60:	2301      	movne	r3, #1
 8001a62:	2300      	moveq	r3, #0
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff ff3e 	bl	80018e8 <rf24_module_value_w1>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4620      	mov	r0, r4
 8001a72:	f7ff fe59 	bl	8001728 <rf24_module_write_attribute>
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd90      	pop	{r4, r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000064 	.word	0x20000064

08001a84 <rf24_module_get_crc_length>:

rf24_module_crc_length rf24_module_get_crc_length()
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
	rf24_module_read_attribute(rf24_module_attributes.crc0, &value_out);
 8001a88:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <rf24_module_get_crc_length+0x18>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	4904      	ldr	r1, [pc, #16]	; (8001aa0 <rf24_module_get_crc_length+0x1c>)
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff fecc 	bl	800182c <rf24_module_read_attribute>
	return (rf24_module_crc_length) value_out.w1;
 8001a94:	4b02      	ldr	r3, [pc, #8]	; (8001aa0 <rf24_module_get_crc_length+0x1c>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20000064 	.word	0x20000064
 8001aa0:	20000718 	.word	0x20000718

08001aa4 <rf24_module_enable_max_retries_interrupt>:

void rf24_module_enable_max_retries_interrupt()
{
 8001aa4:	b598      	push	{r3, r4, r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
	rf24_module_write_attribute(rf24_module_attributes.mask_max_rt, rf24_module_value_w1(false));
 8001aa8:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <rf24_module_enable_max_retries_interrupt+0x1c>)
 8001aaa:	691c      	ldr	r4, [r3, #16]
 8001aac:	2000      	movs	r0, #0
 8001aae:	f7ff ff1b 	bl	80018e8 <rf24_module_value_w1>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4620      	mov	r0, r4
 8001ab8:	f7ff fe36 	bl	8001728 <rf24_module_write_attribute>
}
 8001abc:	bf00      	nop
 8001abe:	bd98      	pop	{r3, r4, r7, pc}
 8001ac0:	20000064 	.word	0x20000064

08001ac4 <rf24_module_enable_tx_data_sent_interrupt>:
{
	rf24_module_write_attribute(rf24_module_attributes.mask_max_rt, rf24_module_value_w1(true));
}

void rf24_module_enable_tx_data_sent_interrupt()
{
 8001ac4:	b598      	push	{r3, r4, r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
	rf24_module_write_attribute(rf24_module_attributes.mask_tx_ds, rf24_module_value_w1(false));
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <rf24_module_enable_tx_data_sent_interrupt+0x1c>)
 8001aca:	695c      	ldr	r4, [r3, #20]
 8001acc:	2000      	movs	r0, #0
 8001ace:	f7ff ff0b 	bl	80018e8 <rf24_module_value_w1>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	f7ff fe26 	bl	8001728 <rf24_module_write_attribute>
}
 8001adc:	bf00      	nop
 8001ade:	bd98      	pop	{r3, r4, r7, pc}
 8001ae0:	20000064 	.word	0x20000064

08001ae4 <rf24_module_enable_rx_data_read_interrupt>:
{
	rf24_module_write_attribute(rf24_module_attributes.mask_tx_ds, rf24_module_value_w1(true));
}

void rf24_module_enable_rx_data_read_interrupt()
{
 8001ae4:	b598      	push	{r3, r4, r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
	rf24_module_write_attribute(rf24_module_attributes.mask_rx_dr, rf24_module_value_w1(false));
 8001ae8:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <rf24_module_enable_rx_data_read_interrupt+0x1c>)
 8001aea:	699c      	ldr	r4, [r3, #24]
 8001aec:	2000      	movs	r0, #0
 8001aee:	f7ff fefb 	bl	80018e8 <rf24_module_value_w1>
 8001af2:	4603      	mov	r3, r0
 8001af4:	4619      	mov	r1, r3
 8001af6:	4620      	mov	r0, r4
 8001af8:	f7ff fe16 	bl	8001728 <rf24_module_write_attribute>
}
 8001afc:	bf00      	nop
 8001afe:	bd98      	pop	{r3, r4, r7, pc}
 8001b00:	20000064 	.word	0x20000064

08001b04 <rf24_module_enable_rx_pipe>:
		rf24_module_write_register(EN_AA, rf24_module_read_register(EN_AA) | (1<<rx_pipes));
	}
}

void rf24_module_enable_rx_pipe(rf24_module_rx_pipes rx_pipes)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	71fb      	strb	r3, [r7, #7]
	rf24_module_write_register(EN_RXADDR, rf24_module_read_register(EN_RXADDR) | (1<<rx_pipes));
 8001b0e:	2002      	movs	r0, #2
 8001b10:	f7ff fd8c 	bl	800162c <rf24_module_read_register>
 8001b14:	4603      	mov	r3, r0
 8001b16:	b25a      	sxtb	r2, r3
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b20:	b25b      	sxtb	r3, r3
 8001b22:	4313      	orrs	r3, r2
 8001b24:	b25b      	sxtb	r3, r3
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	4619      	mov	r1, r3
 8001b2a:	2002      	movs	r0, #2
 8001b2c:	f7ff fd98 	bl	8001660 <rf24_module_write_register>
}
 8001b30:	bf00      	nop
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <rf24_module_set_address_width>:

void rf24_module_set_address_width(rf24_module_address_width address_width)
{
 8001b38:	b590      	push	{r4, r7, lr}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	71fb      	strb	r3, [r7, #7]
	rf24_module_write_attribute(rf24_module_attributes.aw, rf24_module_value_w8(address_width - rf24_module_address_width_offset));
 8001b42:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <rf24_module_set_address_width+0x2c>)
 8001b44:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	3b02      	subs	r3, #2
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff fedb 	bl	8001908 <rf24_module_value_w8>
 8001b52:	4603      	mov	r3, r0
 8001b54:	4619      	mov	r1, r3
 8001b56:	4620      	mov	r0, r4
 8001b58:	f7ff fde6 	bl	8001728 <rf24_module_write_attribute>
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd90      	pop	{r4, r7, pc}
 8001b64:	20000064 	.word	0x20000064

08001b68 <rf24_module_get_address_width>:

rf24_module_address_width rf24_module_get_address_width()
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
	rf24_module_read_attribute(rf24_module_attributes.aw, &value_out);
 8001b6c:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <rf24_module_get_address_width+0x1c>)
 8001b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b70:	4905      	ldr	r1, [pc, #20]	; (8001b88 <rf24_module_get_address_width+0x20>)
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff fe5a 	bl	800182c <rf24_module_read_attribute>
	return (rf24_module_address_width) value_out.w8 + rf24_module_address_width_offset;
 8001b78:	4b03      	ldr	r3, [pc, #12]	; (8001b88 <rf24_module_get_address_width+0x20>)
 8001b7a:	785b      	ldrb	r3, [r3, #1]
 8001b7c:	3302      	adds	r3, #2
 8001b7e:	b2db      	uxtb	r3, r3
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20000064 	.word	0x20000064
 8001b88:	20000718 	.word	0x20000718

08001b8c <rf24_module_set_autoretransmit_delay>:

void rf24_module_set_autoretransmit_delay(rf24_module_autoretransmit_delay autoretransmit_delay)
{
 8001b8c:	b590      	push	{r4, r7, lr}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
	rf24_module_write_attribute(rf24_module_attributes.ard, rf24_module_value_w8(autoretransmit_delay));
 8001b96:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <rf24_module_set_autoretransmit_delay+0x28>)
 8001b98:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff feb3 	bl	8001908 <rf24_module_value_w8>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4620      	mov	r0, r4
 8001ba8:	f7ff fdbe 	bl	8001728 <rf24_module_write_attribute>
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd90      	pop	{r4, r7, pc}
 8001bb4:	20000064 	.word	0x20000064

08001bb8 <rf24_module_get_autoretransmit_delay>:

rf24_module_autoretransmit_delay rf24_module_get_autoretransmit_delay()
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
	rf24_module_read_attribute(rf24_module_attributes.ard, &value_out);
 8001bbc:	4b04      	ldr	r3, [pc, #16]	; (8001bd0 <rf24_module_get_autoretransmit_delay+0x18>)
 8001bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bc0:	4904      	ldr	r1, [pc, #16]	; (8001bd4 <rf24_module_get_autoretransmit_delay+0x1c>)
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff fe32 	bl	800182c <rf24_module_read_attribute>
	return (rf24_module_autoretransmit_delay) value_out.w8;
 8001bc8:	4b02      	ldr	r3, [pc, #8]	; (8001bd4 <rf24_module_get_autoretransmit_delay+0x1c>)
 8001bca:	785b      	ldrb	r3, [r3, #1]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20000064 	.word	0x20000064
 8001bd4:	20000718 	.word	0x20000718

08001bd8 <rf24_module_set_autoretransmit_count>:

void rf24_module_set_autoretransmit_count(rf24_module_autoretransmit_count autoretransmit_count)
{
 8001bd8:	b590      	push	{r4, r7, lr}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
	rf24_module_write_attribute(rf24_module_attributes.arc, rf24_module_value_w8(autoretransmit_count));
 8001be2:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <rf24_module_set_autoretransmit_count+0x28>)
 8001be4:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 8001be6:	79fb      	ldrb	r3, [r7, #7]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff fe8d 	bl	8001908 <rf24_module_value_w8>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4620      	mov	r0, r4
 8001bf4:	f7ff fd98 	bl	8001728 <rf24_module_write_attribute>
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd90      	pop	{r4, r7, pc}
 8001c00:	20000064 	.word	0x20000064

08001c04 <rf24_module_get_autoretransmit_count>:

rf24_module_autoretransmit_count rf24_module_get_autoretransmit_count()
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
	rf24_module_read_attribute(rf24_module_attributes.arc, &value_out);
 8001c08:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <rf24_module_get_autoretransmit_count+0x18>)
 8001c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c0c:	4904      	ldr	r1, [pc, #16]	; (8001c20 <rf24_module_get_autoretransmit_count+0x1c>)
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff fe0c 	bl	800182c <rf24_module_read_attribute>
	return (rf24_module_autoretransmit_count) value_out.w8;
 8001c14:	4b02      	ldr	r3, [pc, #8]	; (8001c20 <rf24_module_get_autoretransmit_count+0x1c>)
 8001c16:	785b      	ldrb	r3, [r3, #1]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20000064 	.word	0x20000064
 8001c20:	20000718 	.word	0x20000718

08001c24 <rf24_module_set_rf_channel>:

void rf24_module_set_rf_channel(uint8_t rfchannel)
{
 8001c24:	b590      	push	{r4, r7, lr}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	71fb      	strb	r3, [r7, #7]
	rf24_module_write_attribute(rf24_module_attributes.rf_ch, rf24_module_value_w8(rfchannel));
 8001c2e:	4b07      	ldr	r3, [pc, #28]	; (8001c4c <rf24_module_set_rf_channel+0x28>)
 8001c30:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff fe67 	bl	8001908 <rf24_module_value_w8>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4620      	mov	r0, r4
 8001c40:	f7ff fd72 	bl	8001728 <rf24_module_write_attribute>
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd90      	pop	{r4, r7, pc}
 8001c4c:	20000064 	.word	0x20000064

08001c50 <rf24_module_get_rf_channel>:

uint8_t rf24_module_get_rf_channel()
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
	rf24_module_read_attribute(rf24_module_attributes.rf_ch, &value_out);
 8001c54:	4b04      	ldr	r3, [pc, #16]	; (8001c68 <rf24_module_get_rf_channel+0x18>)
 8001c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c58:	4904      	ldr	r1, [pc, #16]	; (8001c6c <rf24_module_get_rf_channel+0x1c>)
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff fde6 	bl	800182c <rf24_module_read_attribute>
	return value_out.w8;
 8001c60:	4b02      	ldr	r3, [pc, #8]	; (8001c6c <rf24_module_get_rf_channel+0x1c>)
 8001c62:	785b      	ldrb	r3, [r3, #1]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20000064 	.word	0x20000064
 8001c6c:	20000718 	.word	0x20000718

08001c70 <rf24_module_set_rf_outputpower>:

void rf24_module_set_rf_outputpower(rf24_module_rf_output_power rf_output_power)
{
 8001c70:	b590      	push	{r4, r7, lr}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	71fb      	strb	r3, [r7, #7]
	rf24_module_write_attribute(rf24_module_attributes.rf_pwr, rf24_module_value_w8(rf_output_power));
 8001c7a:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <rf24_module_set_rf_outputpower+0x28>)
 8001c7c:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff fe41 	bl	8001908 <rf24_module_value_w8>
 8001c86:	4603      	mov	r3, r0
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4620      	mov	r0, r4
 8001c8c:	f7ff fd4c 	bl	8001728 <rf24_module_write_attribute>
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd90      	pop	{r4, r7, pc}
 8001c98:	20000064 	.word	0x20000064

08001c9c <rf24_module_get_rf_outputpower>:

rf24_module_rf_output_power rf24_module_get_rf_outputpower()
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
	rf24_module_read_attribute(rf24_module_attributes.rf_pwr, &value_out);
 8001ca0:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <rf24_module_get_rf_outputpower+0x18>)
 8001ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca4:	4904      	ldr	r1, [pc, #16]	; (8001cb8 <rf24_module_get_rf_outputpower+0x1c>)
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff fdc0 	bl	800182c <rf24_module_read_attribute>
	return (rf24_module_rf_output_power) value_out.w8;
 8001cac:	4b02      	ldr	r3, [pc, #8]	; (8001cb8 <rf24_module_get_rf_outputpower+0x1c>)
 8001cae:	785b      	ldrb	r3, [r3, #1]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20000064 	.word	0x20000064
 8001cb8:	20000718 	.word	0x20000718

08001cbc <rf24_module_set_datarate>:

void rf24_module_set_datarate(rf24_module_datarate datarate)
{
 8001cbc:	b590      	push	{r4, r7, lr}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	71fb      	strb	r3, [r7, #7]
	switch(datarate)
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	db2a      	blt.n	8001d22 <rf24_module_set_datarate+0x66>
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	dd0d      	ble.n	8001cec <rf24_module_set_datarate+0x30>
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d000      	beq.n	8001cd6 <rf24_module_set_datarate+0x1a>
		case rf24_module_datarate_2Mbps:
			rf24_module_write_attribute(rf24_module_attributes.rf_dr_low, rf24_module_value_w1(false));
			rf24_module_write_attribute(rf24_module_attributes.rf_dr_high, rf24_module_value_w1(datarate));
			break;
	}
}
 8001cd4:	e025      	b.n	8001d22 <rf24_module_set_datarate+0x66>
			rf24_module_write_attribute(rf24_module_attributes.rf_dr_low, rf24_module_value_w1(true));
 8001cd6:	4b15      	ldr	r3, [pc, #84]	; (8001d2c <rf24_module_set_datarate+0x70>)
 8001cd8:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 8001cda:	2001      	movs	r0, #1
 8001cdc:	f7ff fe04 	bl	80018e8 <rf24_module_value_w1>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4620      	mov	r0, r4
 8001ce6:	f7ff fd1f 	bl	8001728 <rf24_module_write_attribute>
			break;
 8001cea:	e01a      	b.n	8001d22 <rf24_module_set_datarate+0x66>
			rf24_module_write_attribute(rf24_module_attributes.rf_dr_low, rf24_module_value_w1(false));
 8001cec:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <rf24_module_set_datarate+0x70>)
 8001cee:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	f7ff fdf9 	bl	80018e8 <rf24_module_value_w1>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4620      	mov	r0, r4
 8001cfc:	f7ff fd14 	bl	8001728 <rf24_module_write_attribute>
			rf24_module_write_attribute(rf24_module_attributes.rf_dr_high, rf24_module_value_w1(datarate));
 8001d00:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <rf24_module_set_datarate+0x70>)
 8001d02:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	bf14      	ite	ne
 8001d0a:	2301      	movne	r3, #1
 8001d0c:	2300      	moveq	r3, #0
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff fde9 	bl	80018e8 <rf24_module_value_w1>
 8001d16:	4603      	mov	r3, r0
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4620      	mov	r0, r4
 8001d1c:	f7ff fd04 	bl	8001728 <rf24_module_write_attribute>
			break;
 8001d20:	bf00      	nop
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd90      	pop	{r4, r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20000064 	.word	0x20000064

08001d30 <rf24_module_get_datarate>:

rf24_module_datarate rf24_module_get_datarate()
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
	rf24_module_read_attribute(rf24_module_attributes.rf_dr_low, &value_out);
 8001d36:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <rf24_module_get_datarate+0x40>)
 8001d38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d3a:	490e      	ldr	r1, [pc, #56]	; (8001d74 <rf24_module_get_datarate+0x44>)
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff fd75 	bl	800182c <rf24_module_read_attribute>
	bool rf_dr_low = value_out.w1;
 8001d42:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <rf24_module_get_datarate+0x44>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	71fb      	strb	r3, [r7, #7]

	if(rf_dr_low) return rf24_module_datarate_250kbps;
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <rf24_module_get_datarate+0x22>
 8001d4e:	2302      	movs	r3, #2
 8001d50:	e009      	b.n	8001d66 <rf24_module_get_datarate+0x36>

	rf24_module_read_attribute(rf24_module_attributes.rf_dr_high, &value_out);
 8001d52:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <rf24_module_get_datarate+0x40>)
 8001d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d56:	4907      	ldr	r1, [pc, #28]	; (8001d74 <rf24_module_get_datarate+0x44>)
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff fd67 	bl	800182c <rf24_module_read_attribute>
	bool rf_dr_high = value_out.w1;
 8001d5e:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <rf24_module_get_datarate+0x44>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	71bb      	strb	r3, [r7, #6]

	return (rf24_module_datarate) rf_dr_high;
 8001d64:	79bb      	ldrb	r3, [r7, #6]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000064 	.word	0x20000064
 8001d74:	20000718 	.word	0x20000718

08001d78 <rf24_module_get_rx_available_pipe>:
	rf24_module_read_attribute(rf24_module_attributes.tx_full, &value_out);
	return (value_out.w1 == 1);
}

rf24_module_rx_pipes rf24_module_get_rx_available_pipe()
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
	rf24_module_read_attribute(rf24_module_attributes.rx_p_no, &value_out);
 8001d7c:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <rf24_module_get_rx_available_pipe+0x18>)
 8001d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d80:	4904      	ldr	r1, [pc, #16]	; (8001d94 <rf24_module_get_rx_available_pipe+0x1c>)
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff fd52 	bl	800182c <rf24_module_read_attribute>
	return (rf24_module_rx_pipes) value_out.w8;
 8001d88:	4b02      	ldr	r3, [pc, #8]	; (8001d94 <rf24_module_get_rx_available_pipe+0x1c>)
 8001d8a:	785b      	ldrb	r3, [r3, #1]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20000064 	.word	0x20000064
 8001d94:	20000718 	.word	0x20000718

08001d98 <rf24_module_max_retransmits>:

bool rf24_module_max_retransmits()
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
	rf24_module_read_attribute(rf24_module_attributes.max_rt, &value_out);
 8001d9c:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <rf24_module_max_retransmits+0x18>)
 8001d9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001da0:	4904      	ldr	r1, [pc, #16]	; (8001db4 <rf24_module_max_retransmits+0x1c>)
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff fd42 	bl	800182c <rf24_module_read_attribute>
	return (value_out.w1 == 1);
 8001da8:	4b02      	ldr	r3, [pc, #8]	; (8001db4 <rf24_module_max_retransmits+0x1c>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	20000064 	.word	0x20000064
 8001db4:	20000718 	.word	0x20000718

08001db8 <rf24_module_package_transmitted>:
{
	rf24_module_read_attribute(rf24_module_attributes.max_rt, rf24_module_value_w1(true));
}

bool rf24_module_package_transmitted()
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
	rf24_module_read_attribute(rf24_module_attributes.tx_ds, &value_out);
 8001dbc:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <rf24_module_package_transmitted+0x18>)
 8001dbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001dc0:	4904      	ldr	r1, [pc, #16]	; (8001dd4 <rf24_module_package_transmitted+0x1c>)
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff fd32 	bl	800182c <rf24_module_read_attribute>
	return (value_out.w1 == 1);
 8001dc8:	4b02      	ldr	r3, [pc, #8]	; (8001dd4 <rf24_module_package_transmitted+0x1c>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20000064 	.word	0x20000064
 8001dd4:	20000718 	.word	0x20000718

08001dd8 <rf24_module_rx_data_available>:
	uint8_t status = rf24_module_read_register(STATUS);
	rf24_module_write_register(STATUS, status & (1<<TX_DS) );
}

bool rf24_module_rx_data_available()
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
	rf24_module_read_attribute(rf24_module_attributes.rx_dr, &value_out);
 8001ddc:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <rf24_module_rx_data_available+0x1c>)
 8001dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001de2:	4905      	ldr	r1, [pc, #20]	; (8001df8 <rf24_module_rx_data_available+0x20>)
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff fd21 	bl	800182c <rf24_module_read_attribute>
	return (value_out.w1 == 1);
 8001dea:	4b03      	ldr	r3, [pc, #12]	; (8001df8 <rf24_module_rx_data_available+0x20>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000064 	.word	0x20000064
 8001df8:	20000718 	.word	0x20000718

08001dfc <rf24_module_clear_all_interrupts>:
	uint8_t status = rf24_module_read_register(STATUS);
	rf24_module_write_register(STATUS, status & (1<<RX_DR) );
}

void rf24_module_clear_all_interrupts()
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
	uint8_t status = rf24_module_read_register(STATUS);
 8001e02:	2007      	movs	r0, #7
 8001e04:	f7ff fc12 	bl	800162c <rf24_module_read_register>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	71fb      	strb	r3, [r7, #7]
	rf24_module_write_register(STATUS, status & ( (1<<MAX_RT) | (1<<TX_DS) | (1<<RX_DR) ) );
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	4619      	mov	r1, r3
 8001e16:	2007      	movs	r0, #7
 8001e18:	f7ff fc22 	bl	8001660 <rf24_module_write_register>
}
 8001e1c:	bf00      	nop
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <rf24_module_set_rx_address_pipe0>:

uint8_t rf24_module_get_received_power_detector(){
	return 0;
}

void rf24_module_set_rx_address_pipe0(uint8_t *rx_address /*3-5 bytes*/, uint8_t rx_address_length){
 8001e24:	b590      	push	{r4, r7, lr}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	70fb      	strb	r3, [r7, #3]
	rf24_module_write_attribute(rf24_module_attributes.rx_addr_p0, rf24_module_value_w40(rx_address, rx_address_length));
 8001e30:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <rf24_module_set_rx_address_pipe0+0x30>)
 8001e32:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
 8001e36:	78fb      	ldrb	r3, [r7, #3]
 8001e38:	4619      	mov	r1, r3
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7ff fd74 	bl	8001928 <rf24_module_value_w40>
 8001e40:	4603      	mov	r3, r0
 8001e42:	4619      	mov	r1, r3
 8001e44:	4620      	mov	r0, r4
 8001e46:	f7ff fc6f 	bl	8001728 <rf24_module_write_attribute>
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd90      	pop	{r4, r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000064 	.word	0x20000064

08001e58 <rf24_module_set_tx_address>:

void rf24_module_set_rx_address_pipe5(uint8_t rx_address /*1 byte*/){
	rf24_module_write_attribute(rf24_module_attributes.rx_addr_p5, rf24_module_value_w8(rx_address));
}

void rf24_module_set_tx_address(uint8_t *tx_address /*3-5 bytes*/, uint8_t tx_address_length){
 8001e58:	b590      	push	{r4, r7, lr}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	460b      	mov	r3, r1
 8001e62:	70fb      	strb	r3, [r7, #3]
	rf24_module_write_attribute(rf24_module_attributes.tx_addr, rf24_module_value_w40(tx_address, tx_address_length));
 8001e64:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <rf24_module_set_tx_address+0x30>)
 8001e66:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8001e6a:	78fb      	ldrb	r3, [r7, #3]
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7ff fd5a 	bl	8001928 <rf24_module_value_w40>
 8001e74:	4603      	mov	r3, r0
 8001e76:	4619      	mov	r1, r3
 8001e78:	4620      	mov	r0, r4
 8001e7a:	f7ff fc55 	bl	8001728 <rf24_module_write_attribute>
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd90      	pop	{r4, r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000064 	.word	0x20000064

08001e8c <rf24_module_get_tx_address>:

void rf24_module_get_tx_address(uint8_t *tx_address_out /*3-5 bytes*/){
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
	value_out.w40 = tx_address_out;
 8001e94:	4a06      	ldr	r2, [pc, #24]	; (8001eb0 <rf24_module_get_tx_address+0x24>)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6053      	str	r3, [r2, #4]
	rf24_module_read_attribute(rf24_module_attributes.tx_addr, &value_out);
 8001e9a:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <rf24_module_get_tx_address+0x28>)
 8001e9c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001ea0:	4903      	ldr	r1, [pc, #12]	; (8001eb0 <rf24_module_get_tx_address+0x24>)
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff fcc2 	bl	800182c <rf24_module_read_attribute>
}
 8001ea8:	bf00      	nop
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20000718 	.word	0x20000718
 8001eb4:	20000064 	.word	0x20000064

08001eb8 <rf24_module_set_payload_width_pipe>:

void rf24_module_set_payload_width_pipe(rf24_module_rx_pipes rx_pipe, uint8_t payload_width){
 8001eb8:	b590      	push	{r4, r7, lr}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	460a      	mov	r2, r1
 8001ec2:	71fb      	strb	r3, [r7, #7]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	71bb      	strb	r3, [r7, #6]

	//rf24_module_write_register(RX_PW_P0 + rx_pipe, payload_width & 0b00111111);

	switch(rx_pipe)
 8001ec8:	79fb      	ldrb	r3, [r7, #7]
 8001eca:	2b05      	cmp	r3, #5
 8001ecc:	d85c      	bhi.n	8001f88 <rf24_module_set_payload_width_pipe+0xd0>
 8001ece:	a201      	add	r2, pc, #4	; (adr r2, 8001ed4 <rf24_module_set_payload_width_pipe+0x1c>)
 8001ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed4:	08001eed 	.word	0x08001eed
 8001ed8:	08001f07 	.word	0x08001f07
 8001edc:	08001f21 	.word	0x08001f21
 8001ee0:	08001f3b 	.word	0x08001f3b
 8001ee4:	08001f55 	.word	0x08001f55
 8001ee8:	08001f6f 	.word	0x08001f6f
	{
		case 0: rf24_module_write_attribute(rf24_module_attributes.rx_pw_p0, rf24_module_value_w8(payload_width)); break;
 8001eec:	4b28      	ldr	r3, [pc, #160]	; (8001f90 <rf24_module_set_payload_width_pipe+0xd8>)
 8001eee:	f8d3 40ac 	ldr.w	r4, [r3, #172]	; 0xac
 8001ef2:	79bb      	ldrb	r3, [r7, #6]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff fd07 	bl	8001908 <rf24_module_value_w8>
 8001efa:	4603      	mov	r3, r0
 8001efc:	4619      	mov	r1, r3
 8001efe:	4620      	mov	r0, r4
 8001f00:	f7ff fc12 	bl	8001728 <rf24_module_write_attribute>
 8001f04:	e040      	b.n	8001f88 <rf24_module_set_payload_width_pipe+0xd0>
		case 1: rf24_module_write_attribute(rf24_module_attributes.rx_pw_p1, rf24_module_value_w8(payload_width)); break;
 8001f06:	4b22      	ldr	r3, [pc, #136]	; (8001f90 <rf24_module_set_payload_width_pipe+0xd8>)
 8001f08:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
 8001f0c:	79bb      	ldrb	r3, [r7, #6]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff fcfa 	bl	8001908 <rf24_module_value_w8>
 8001f14:	4603      	mov	r3, r0
 8001f16:	4619      	mov	r1, r3
 8001f18:	4620      	mov	r0, r4
 8001f1a:	f7ff fc05 	bl	8001728 <rf24_module_write_attribute>
 8001f1e:	e033      	b.n	8001f88 <rf24_module_set_payload_width_pipe+0xd0>
		case 2: rf24_module_write_attribute(rf24_module_attributes.rx_pw_p2, rf24_module_value_w8(payload_width)); break;
 8001f20:	4b1b      	ldr	r3, [pc, #108]	; (8001f90 <rf24_module_set_payload_width_pipe+0xd8>)
 8001f22:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8001f26:	79bb      	ldrb	r3, [r7, #6]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff fced 	bl	8001908 <rf24_module_value_w8>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	4619      	mov	r1, r3
 8001f32:	4620      	mov	r0, r4
 8001f34:	f7ff fbf8 	bl	8001728 <rf24_module_write_attribute>
 8001f38:	e026      	b.n	8001f88 <rf24_module_set_payload_width_pipe+0xd0>
		case 3: rf24_module_write_attribute(rf24_module_attributes.rx_pw_p3, rf24_module_value_w8(payload_width)); break;
 8001f3a:	4b15      	ldr	r3, [pc, #84]	; (8001f90 <rf24_module_set_payload_width_pipe+0xd8>)
 8001f3c:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 8001f40:	79bb      	ldrb	r3, [r7, #6]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff fce0 	bl	8001908 <rf24_module_value_w8>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4620      	mov	r0, r4
 8001f4e:	f7ff fbeb 	bl	8001728 <rf24_module_write_attribute>
 8001f52:	e019      	b.n	8001f88 <rf24_module_set_payload_width_pipe+0xd0>
		case 4: rf24_module_write_attribute(rf24_module_attributes.rx_pw_p4, rf24_module_value_w8(payload_width)); break;
 8001f54:	4b0e      	ldr	r3, [pc, #56]	; (8001f90 <rf24_module_set_payload_width_pipe+0xd8>)
 8001f56:	f8d3 40bc 	ldr.w	r4, [r3, #188]	; 0xbc
 8001f5a:	79bb      	ldrb	r3, [r7, #6]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff fcd3 	bl	8001908 <rf24_module_value_w8>
 8001f62:	4603      	mov	r3, r0
 8001f64:	4619      	mov	r1, r3
 8001f66:	4620      	mov	r0, r4
 8001f68:	f7ff fbde 	bl	8001728 <rf24_module_write_attribute>
 8001f6c:	e00c      	b.n	8001f88 <rf24_module_set_payload_width_pipe+0xd0>
		case 5: rf24_module_write_attribute(rf24_module_attributes.rx_pw_p5, rf24_module_value_w8(payload_width)); break;
 8001f6e:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <rf24_module_set_payload_width_pipe+0xd8>)
 8001f70:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
 8001f74:	79bb      	ldrb	r3, [r7, #6]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff fcc6 	bl	8001908 <rf24_module_value_w8>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4620      	mov	r0, r4
 8001f82:	f7ff fbd1 	bl	8001728 <rf24_module_write_attribute>
 8001f86:	bf00      	nop
	}
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd90      	pop	{r4, r7, pc}
 8001f90:	20000064 	.word	0x20000064

08001f94 <rf24_module_flush_tx>:
void rf24_module_disable_transmission_without_ack(){
	rf24_module_write_attribute(rf24_module_attributes.en_dyn_ack, rf24_module_value_w1(false));
}

void rf24_module_flush_tx()
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
	rf24_stm32f1xx_spi_csn_low();
 8001f98:	f003 fe3c 	bl	8005c14 <rf24_stm32f1xx_spi_csn_low>
	rf24_stm32f1xx_spi_shift_byte(FLUSH_TX);
 8001f9c:	20e1      	movs	r0, #225	; 0xe1
 8001f9e:	f003 fe51 	bl	8005c44 <rf24_stm32f1xx_spi_shift_byte>
	rf24_stm32f1xx_spi_csn_high();
 8001fa2:	f003 fe43 	bl	8005c2c <rf24_stm32f1xx_spi_csn_high>
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <rf24_module_flush_rx>:

void rf24_module_flush_rx()
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	af00      	add	r7, sp, #0
	rf24_stm32f1xx_spi_csn_low();
 8001fae:	f003 fe31 	bl	8005c14 <rf24_stm32f1xx_spi_csn_low>
	rf24_stm32f1xx_spi_shift_byte(FLUSH_RX);
 8001fb2:	20e2      	movs	r0, #226	; 0xe2
 8001fb4:	f003 fe46 	bl	8005c44 <rf24_stm32f1xx_spi_shift_byte>
	rf24_stm32f1xx_spi_csn_high();
 8001fb8:	f003 fe38 	bl	8005c2c <rf24_stm32f1xx_spi_csn_high>
}
 8001fbc:	bf00      	nop
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <rf24_module_collect_rx_data>:

void rf24_module_collect_rx_data(rf24_module_rx_data *rx_data)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
	rf24_module_readwrite_register(read, R_RX_PAYLOAD, rx_data->payload, 32);
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	2320      	movs	r3, #32
 8001fcc:	2161      	movs	r1, #97	; 0x61
 8001fce:	2000      	movs	r0, #0
 8001fd0:	f7ff fb67 	bl	80016a2 <rf24_module_readwrite_register>
	rx_data->length = 32;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2220      	movs	r2, #32
 8001fd8:	f883 2020 	strb.w	r2, [r3, #32]
	rx_data->rx_pipe = rf24_module_get_rx_available_pipe();
 8001fdc:	f7ff fecc 	bl	8001d78 <rf24_module_get_rx_available_pipe>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8001fea:	bf00      	nop
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
	...

08001ff4 <rf24_module_goto_state>:

// USER FUNCTIONS

void rf24_module_goto_state(rf24_module_states goto_state)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	71fb      	strb	r3, [r7, #7]
	#ifdef RF24_MODULE_DEBUG_STATE_MACHINE
		usart_write_str("[rf24]: switched state from ");
		usart_write_str(rf24_module_states_string[rf24_module_state]);
	#endif

	switch(rf24_module_state){
 8001ffe:	4b42      	ldr	r3, [pc, #264]	; (8002108 <rf24_module_goto_state+0x114>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2b09      	cmp	r3, #9
 8002006:	d87a      	bhi.n	80020fe <rf24_module_goto_state+0x10a>
 8002008:	a201      	add	r2, pc, #4	; (adr r2, 8002010 <rf24_module_goto_state+0x1c>)
 800200a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800200e:	bf00      	nop
 8002010:	08002039 	.word	0x08002039
 8002014:	080020ff 	.word	0x080020ff
 8002018:	08002051 	.word	0x08002051
 800201c:	080020ff 	.word	0x080020ff
 8002020:	08002073 	.word	0x08002073
 8002024:	080020ff 	.word	0x080020ff
 8002028:	080020ff 	.word	0x080020ff
 800202c:	080020e9 	.word	0x080020e9
 8002030:	080020ff 	.word	0x080020ff
 8002034:	080020d1 	.word	0x080020d1

		/* UNDEFINED -> POWER_DOWN */
		case UNDEFINED:{
			switch(goto_state){
 8002038:	79fb      	ldrb	r3, [r7, #7]
 800203a:	2b02      	cmp	r3, #2
 800203c:	d000      	beq.n	8002040 <rf24_module_goto_state+0x4c>
				case POWER_DOWN:
					delay_ms(20); //10.3ms
					rf24_module_state = POWER_DOWN;
					break;
				default:break;
 800203e:	e006      	b.n	800204e <rf24_module_goto_state+0x5a>
					delay_ms(20); //10.3ms
 8002040:	2014      	movs	r0, #20
 8002042:	f003 fc41 	bl	80058c8 <delay_ms>
					rf24_module_state = POWER_DOWN;
 8002046:	4b30      	ldr	r3, [pc, #192]	; (8002108 <rf24_module_goto_state+0x114>)
 8002048:	2202      	movs	r2, #2
 800204a:	701a      	strb	r2, [r3, #0]
					break;
 800204c:	bf00      	nop
			}
			break;
 800204e:	e057      	b.n	8002100 <rf24_module_goto_state+0x10c>
		}

		/* POWER_DOWN -> STAND_BY_I */
		case POWER_DOWN:{
			switch(goto_state){
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	2b04      	cmp	r3, #4
 8002054:	d000      	beq.n	8002058 <rf24_module_goto_state+0x64>
					rf24_module_state = START_UP;
					delay_ms(2); //1.5ms
					rf24_module_state = STAND_BY_I;
					break;
				}
				default:break;
 8002056:	e00b      	b.n	8002070 <rf24_module_goto_state+0x7c>
					rf24_module_power_up();
 8002058:	f7ff fcb8 	bl	80019cc <rf24_module_power_up>
					rf24_module_state = START_UP;
 800205c:	4b2a      	ldr	r3, [pc, #168]	; (8002108 <rf24_module_goto_state+0x114>)
 800205e:	2203      	movs	r2, #3
 8002060:	701a      	strb	r2, [r3, #0]
					delay_ms(2); //1.5ms
 8002062:	2002      	movs	r0, #2
 8002064:	f003 fc30 	bl	80058c8 <delay_ms>
					rf24_module_state = STAND_BY_I;
 8002068:	4b27      	ldr	r3, [pc, #156]	; (8002108 <rf24_module_goto_state+0x114>)
 800206a:	2204      	movs	r2, #4
 800206c:	701a      	strb	r2, [r3, #0]
					break;
 800206e:	bf00      	nop
			}
			break;
 8002070:	e046      	b.n	8002100 <rf24_module_goto_state+0x10c>
		}

		/* STAND_BY_I -> TX_MODE, RX_MODE */
		case STAND_BY_I:{
			switch(goto_state){
 8002072:	79fb      	ldrb	r3, [r7, #7]
 8002074:	2b07      	cmp	r3, #7
 8002076:	d002      	beq.n	800207e <rf24_module_goto_state+0x8a>
 8002078:	2b09      	cmp	r3, #9
 800207a:	d010      	beq.n	800209e <rf24_module_goto_state+0xaa>
					rf24_module_state = TX_SETTING;
					delay_us(130); //130us
					rf24_module_state = TX_MODE;
					break;
				}
				default:break;
 800207c:	e028      	b.n	80020d0 <rf24_module_goto_state+0xdc>
					rf24_module_set_prim_rx(high);
 800207e:	2001      	movs	r0, #1
 8002080:	f7ff fc7c 	bl	800197c <rf24_module_set_prim_rx>
					rf24_module_set_ce(high);
 8002084:	2001      	movs	r0, #1
 8002086:	f7ff fc63 	bl	8001950 <rf24_module_set_ce>
					rf24_module_state = RX_SETTING;
 800208a:	4b1f      	ldr	r3, [pc, #124]	; (8002108 <rf24_module_goto_state+0x114>)
 800208c:	2206      	movs	r2, #6
 800208e:	701a      	strb	r2, [r3, #0]
					delay_us(130); //130us
 8002090:	2082      	movs	r0, #130	; 0x82
 8002092:	f003 fc39 	bl	8005908 <delay_us>
					rf24_module_state = RX_MODE;
 8002096:	4b1c      	ldr	r3, [pc, #112]	; (8002108 <rf24_module_goto_state+0x114>)
 8002098:	2207      	movs	r2, #7
 800209a:	701a      	strb	r2, [r3, #0]
					break;
 800209c:	e018      	b.n	80020d0 <rf24_module_goto_state+0xdc>
					rf24_module_set_prim_rx(low);
 800209e:	2000      	movs	r0, #0
 80020a0:	f7ff fc6c 	bl	800197c <rf24_module_set_prim_rx>
					rf24_module_set_ce(low);
 80020a4:	2000      	movs	r0, #0
 80020a6:	f7ff fc53 	bl	8001950 <rf24_module_set_ce>
					rf24_module_set_ce(high);
 80020aa:	2001      	movs	r0, #1
 80020ac:	f7ff fc50 	bl	8001950 <rf24_module_set_ce>
					delay_us(20); // > 10us
 80020b0:	2014      	movs	r0, #20
 80020b2:	f003 fc29 	bl	8005908 <delay_us>
					rf24_module_set_ce(low);
 80020b6:	2000      	movs	r0, #0
 80020b8:	f7ff fc4a 	bl	8001950 <rf24_module_set_ce>
					rf24_module_state = TX_SETTING;
 80020bc:	4b12      	ldr	r3, [pc, #72]	; (8002108 <rf24_module_goto_state+0x114>)
 80020be:	2208      	movs	r2, #8
 80020c0:	701a      	strb	r2, [r3, #0]
					delay_us(130); //130us
 80020c2:	2082      	movs	r0, #130	; 0x82
 80020c4:	f003 fc20 	bl	8005908 <delay_us>
					rf24_module_state = TX_MODE;
 80020c8:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <rf24_module_goto_state+0x114>)
 80020ca:	2209      	movs	r2, #9
 80020cc:	701a      	strb	r2, [r3, #0]
					break;
 80020ce:	bf00      	nop
			}
		}

		/* TX_MODE -> STAND_BY_I */
		case TX_MODE:{
			switch(goto_state){
 80020d0:	79fb      	ldrb	r3, [r7, #7]
 80020d2:	2b04      	cmp	r3, #4
 80020d4:	d000      	beq.n	80020d8 <rf24_module_goto_state+0xe4>
				case STAND_BY_I:{
					rf24_module_set_ce(low);
					rf24_module_state = STAND_BY_I;
					break;
				}
				default:break;
 80020d6:	e006      	b.n	80020e6 <rf24_module_goto_state+0xf2>
					rf24_module_set_ce(low);
 80020d8:	2000      	movs	r0, #0
 80020da:	f7ff fc39 	bl	8001950 <rf24_module_set_ce>
					rf24_module_state = STAND_BY_I;
 80020de:	4b0a      	ldr	r3, [pc, #40]	; (8002108 <rf24_module_goto_state+0x114>)
 80020e0:	2204      	movs	r2, #4
 80020e2:	701a      	strb	r2, [r3, #0]
					break;
 80020e4:	bf00      	nop
			}
			break;
 80020e6:	e00b      	b.n	8002100 <rf24_module_goto_state+0x10c>
		}

		/* RX_MODE -> STAND_BY_I */
		case RX_MODE:{
			switch(goto_state){
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	d000      	beq.n	80020f0 <rf24_module_goto_state+0xfc>
					rf24_module_set_ce(low);
					rf24_module_state = STAND_BY_I;
				}
				default:break;
			}
			break;
 80020ee:	e007      	b.n	8002100 <rf24_module_goto_state+0x10c>
					rf24_module_set_ce(low);
 80020f0:	2000      	movs	r0, #0
 80020f2:	f7ff fc2d 	bl	8001950 <rf24_module_set_ce>
					rf24_module_state = STAND_BY_I;
 80020f6:	4b04      	ldr	r3, [pc, #16]	; (8002108 <rf24_module_goto_state+0x114>)
 80020f8:	2204      	movs	r2, #4
 80020fa:	701a      	strb	r2, [r3, #0]
			break;
 80020fc:	e000      	b.n	8002100 <rf24_module_goto_state+0x10c>
		}

		default: break;
 80020fe:	bf00      	nop
	#ifdef RF24_MODULE_DEBUG_STATE_MACHINE
		usart_write_str(" to ");
		usart_write_line(rf24_module_states_string[rf24_module_state]);
	#endif

}
 8002100:	bf00      	nop
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20000681 	.word	0x20000681

0800210c <rf24_module_init>:
	rf24_module_read_attribute(rf24_module_attributes.aw, &value_in);
	return (value_in.w8 >= 1 && value_in.w8 <= 3);
}

bool rf24_module_init(uint32_t baudrate)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af04      	add	r7, sp, #16
 8002112:	6078      	str	r0, [r7, #4]
	// init hardware: system clock, timers, interrupts, pin out-/inputs, etc.
	rf24_stm32f1xx_init();
 8002114:	f003 fd02 	bl	8005b1c <rf24_stm32f1xx_init>
	// init usart
	rf24_stm32f1xx_usart_init(baudrate);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f003 fdcb 	bl	8005cb4 <rf24_stm32f1xx_usart_init>
	// init spi
	rf24_stm32f1xx_spi_init();
 800211e:	f003 fd13 	bl	8005b48 <rf24_stm32f1xx_spi_init>
		usart_write_line("rf24: module not responding, check pin connections");
		return false;
	}*/

	// switch to state power down (from undefined)
	rf24_module_goto_state(POWER_DOWN);
 8002122:	2002      	movs	r0, #2
 8002124:	f7ff ff66 	bl	8001ff4 <rf24_module_goto_state>

	// configure rf module
	rf24_module_config();
 8002128:	f000 f828 	bl	800217c <rf24_module_config>

	// switch to rx mode over stand_by mode
	rf24_module_goto_state(STAND_BY_I);
 800212c:	2004      	movs	r0, #4
 800212e:	f7ff ff61 	bl	8001ff4 <rf24_module_goto_state>
	rf24_module_goto_state(RX_MODE);
 8002132:	2007      	movs	r0, #7
 8002134:	f7ff ff5e 	bl	8001ff4 <rf24_module_goto_state>


	rf24_debug(RF_MODULE, INFO, VOID, VOID, NULL, "Initialization finished\n", "");
 8002138:	4b08      	ldr	r3, [pc, #32]	; (800215c <rf24_module_init+0x50>)
 800213a:	9302      	str	r3, [sp, #8]
 800213c:	4b08      	ldr	r3, [pc, #32]	; (8002160 <rf24_module_init+0x54>)
 800213e:	9301      	str	r3, [sp, #4]
 8002140:	2300      	movs	r3, #0
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	2300      	movs	r3, #0
 8002146:	2200      	movs	r2, #0
 8002148:	2106      	movs	r1, #6
 800214a:	2001      	movs	r0, #1
 800214c:	f7ff f85c 	bl	8001208 <rf24_debug>


	return true;
 8002150:	2301      	movs	r3, #1
}
 8002152:	4618      	mov	r0, r3
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	08007f2c 	.word	0x08007f2c
 8002160:	080081ac 	.word	0x080081ac

08002164 <rf24_module_disable_autoack>:

void rf24_module_disable_autoack()
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
	rf24_module_write_register(EN_AA, 0x00);
 8002168:	2100      	movs	r1, #0
 800216a:	2001      	movs	r0, #1
 800216c:	f7ff fa78 	bl	8001660 <rf24_module_write_register>
	rf24_module_set_autoretransmit_count(rf24_module_autoretransmit_disable);
 8002170:	2000      	movs	r0, #0
 8002172:	f7ff fd31 	bl	8001bd8 <rf24_module_set_autoretransmit_count>
}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}
	...

0800217c <rf24_module_config>:

void rf24_module_config()
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
	rf24_module_set_rf_channel(5);
 8002182:	2005      	movs	r0, #5
 8002184:	f7ff fd4e 	bl	8001c24 <rf24_module_set_rf_channel>
	rf24_module_set_rf_outputpower(rf24_module_rf_output_power3);
 8002188:	2002      	movs	r0, #2
 800218a:	f7ff fd71 	bl	8001c70 <rf24_module_set_rf_outputpower>
	rf24_module_set_datarate(rf24_module_datarate_250kbps);
 800218e:	2002      	movs	r0, #2
 8002190:	f7ff fd94 	bl	8001cbc <rf24_module_set_datarate>
	//rf24_module_enable_autoack_pipe(rf24_module_rx_pipe0);
	rf24_module_enable_rx_pipe(rf24_module_rx_pipe0);
 8002194:	2000      	movs	r0, #0
 8002196:	f7ff fcb5 	bl	8001b04 <rf24_module_enable_rx_pipe>

	rf24_module_disable_autoack();
 800219a:	f7ff ffe3 	bl	8002164 <rf24_module_disable_autoack>

	rf24_module_enable_crc();
 800219e:	f7ff fc25 	bl	80019ec <rf24_module_enable_crc>
	//rf24_module_disable_crc();
	rf24_module_set_crc_length(rf24_module_crc_length_2bytes);
 80021a2:	2001      	movs	r0, #1
 80021a4:	f7ff fc52 	bl	8001a4c <rf24_module_set_crc_length>
	rf24_module_enable_max_retries_interrupt();
 80021a8:	f7ff fc7c 	bl	8001aa4 <rf24_module_enable_max_retries_interrupt>
	rf24_module_enable_tx_data_sent_interrupt();
 80021ac:	f7ff fc8a 	bl	8001ac4 <rf24_module_enable_tx_data_sent_interrupt>
	rf24_module_enable_rx_data_read_interrupt();
 80021b0:	f7ff fc98 	bl	8001ae4 <rf24_module_enable_rx_data_read_interrupt>

	rf24_module_set_address_width(rf24_module_address_width_5bytes);
 80021b4:	2005      	movs	r0, #5
 80021b6:	f7ff fcbf 	bl	8001b38 <rf24_module_set_address_width>
	rf24_module_set_payload_width_pipe(rf24_module_rx_pipe0, 32);
 80021ba:	2120      	movs	r1, #32
 80021bc:	2000      	movs	r0, #0
 80021be:	f7ff fe7b 	bl	8001eb8 <rf24_module_set_payload_width_pipe>

	//rf24_module_set_autoretransmit_delay(rf24_module_autoretransmit_delay_750us);
	//rf24_module_set_autoretransmit_count(rf24_module_autoretransmit_count_15);
	rf24_module_set_autoretransmit_count(rf24_module_autoretransmit_disable);
 80021c2:	2000      	movs	r0, #0
 80021c4:	f7ff fd08 	bl	8001bd8 <rf24_module_set_autoretransmit_count>
	//rf24_module_enable_dynamic_payload();
	//rf24_module_enable_dynamic_payload_pipe(rf24_module_rx_pipe0);
	//rf24_module_enable_dynamic_payload_with_ack();
	//rf24_module_enable_transmission_without_ack();

	uint8_t address[5] = {'n','R','F','2','4'};
 80021c8:	4a10      	ldr	r2, [pc, #64]	; (800220c <rf24_module_config+0x90>)
 80021ca:	463b      	mov	r3, r7
 80021cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021d0:	6018      	str	r0, [r3, #0]
 80021d2:	3304      	adds	r3, #4
 80021d4:	7019      	strb	r1, [r3, #0]
	uint8_t address_width = rf24_module_get_address_width();
 80021d6:	f7ff fcc7 	bl	8001b68 <rf24_module_get_address_width>
 80021da:	4603      	mov	r3, r0
 80021dc:	71fb      	strb	r3, [r7, #7]
	rf24_module_set_tx_address(address, address_width);
 80021de:	79fa      	ldrb	r2, [r7, #7]
 80021e0:	463b      	mov	r3, r7
 80021e2:	4611      	mov	r1, r2
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff fe37 	bl	8001e58 <rf24_module_set_tx_address>
	rf24_module_set_rx_address_pipe0(address, address_width);
 80021ea:	79fa      	ldrb	r2, [r7, #7]
 80021ec:	463b      	mov	r3, r7
 80021ee:	4611      	mov	r1, r2
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff fe17 	bl	8001e24 <rf24_module_set_rx_address_pipe0>

	rf24_module_flush_tx();
 80021f6:	f7ff fecd 	bl	8001f94 <rf24_module_flush_tx>
	rf24_module_flush_rx();
 80021fa:	f7ff fed6 	bl	8001faa <rf24_module_flush_rx>
	rf24_module_clear_all_interrupts();
 80021fe:	f7ff fdfd 	bl	8001dfc <rf24_module_clear_all_interrupts>
}
 8002202:	bf00      	nop
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	080081c8 	.word	0x080081c8

08002210 <rf24_module_transmit>:

uint8_t rf24_module_transmit(rf24_module_tx_data *tx_data){
 8002210:	b580      	push	{r7, lr}
 8002212:	b08c      	sub	sp, #48	; 0x30
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]

	// 1) flush tx___________________________________________________________________________________________
		rf24_stm32f1xx_spi_shift_byte(FLUSH_TX);
 8002218:	20e1      	movs	r0, #225	; 0xe1
 800221a:	f003 fd13 	bl	8005c44 <rf24_stm32f1xx_spi_shift_byte>

	// 2) Goto STAND_BY_I________________________________________________________________________________
		// Switch state from "RX_MODE" to "STAND_BY_I"
		rf24_module_goto_state(STAND_BY_I);
 800221e:	2004      	movs	r0, #4
 8002220:	f7ff fee8 	bl	8001ff4 <rf24_module_goto_state>
	// 3) Fill tx fifo___________________________________________________________________________________
		// Write payload into tx buffer

		uint8_t payload[32];

		for(int i=0; i<32; i++){
 8002224:	2300      	movs	r3, #0
 8002226:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002228:	e01a      	b.n	8002260 <rf24_module_transmit+0x50>
			if(i < tx_data->length) payload[i] = tx_data->payload[i];
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002230:	461a      	mov	r2, r3
 8002232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002234:	4293      	cmp	r3, r2
 8002236:	da0a      	bge.n	800224e <rf24_module_transmit+0x3e>
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800223c:	4413      	add	r3, r2
 800223e:	7819      	ldrb	r1, [r3, #0]
 8002240:	f107 020c 	add.w	r2, r7, #12
 8002244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002246:	4413      	add	r3, r2
 8002248:	460a      	mov	r2, r1
 800224a:	701a      	strb	r2, [r3, #0]
 800224c:	e005      	b.n	800225a <rf24_module_transmit+0x4a>
			else payload[i] = '\0';
 800224e:	f107 020c 	add.w	r2, r7, #12
 8002252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002254:	4413      	add	r3, r2
 8002256:	2200      	movs	r2, #0
 8002258:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<32; i++){
 800225a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800225c:	3301      	adds	r3, #1
 800225e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002262:	2b1f      	cmp	r3, #31
 8002264:	dde1      	ble.n	800222a <rf24_module_transmit+0x1a>
		}

		rf24_module_readwrite_register(write, W_TX_PAYLOAD, payload, 32);
 8002266:	f107 020c 	add.w	r2, r7, #12
 800226a:	2320      	movs	r3, #32
 800226c:	21a0      	movs	r1, #160	; 0xa0
 800226e:	2001      	movs	r0, #1
 8002270:	f7ff fa17 	bl	80016a2 <rf24_module_readwrite_register>

	// 4) Start transmit_________________________________________________________________________________
		// Switch state from "STAND_BY_I" to "TX_MODE"
		rf24_module_goto_state(TX_MODE);
 8002274:	2009      	movs	r0, #9
 8002276:	f7ff febd 	bl	8001ff4 <rf24_module_goto_state>

	return 1;
 800227a:	2301      	movs	r3, #1
}
 800227c:	4618      	mov	r0, r3
 800227e:	3730      	adds	r7, #48	; 0x30
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <rf24_module_attach_notify_data_received>:

void rf24_module_attach_notify_data_received(rf24_module_rx_data_fct_ptr fct_ptr)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
	rx_data_received_notify_fct_ptr = fct_ptr;
 800228c:	4a03      	ldr	r2, [pc, #12]	; (800229c <rf24_module_attach_notify_data_received+0x18>)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6013      	str	r3, [r2, #0]
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	bc80      	pop	{r7}
 800229a:	4770      	bx	lr
 800229c:	20000704 	.word	0x20000704

080022a0 <rf24_module_attach_notify_data_transmitted>:

void rf24_module_attach_notify_data_transmitted(rf24_module_fct_ptr fct_ptr)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
	tx_data_transmitted_notify_fct_ptr = fct_ptr;
 80022a8:	4a03      	ldr	r2, [pc, #12]	; (80022b8 <rf24_module_attach_notify_data_transmitted+0x18>)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6013      	str	r3, [r2, #0]
}
 80022ae:	bf00      	nop
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bc80      	pop	{r7}
 80022b6:	4770      	bx	lr
 80022b8:	200006d0 	.word	0x200006d0

080022bc <rf24_module_irq_handler>:
	rf24_stm32f1xx_usart_write_line(str);*/
	rf24_stm32f1xx_usart_write_str("\n");
}

void rf24_module_irq_handler()
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
	if(rf24_module_max_retransmits())
 80022c0:	f7ff fd6a 	bl	8001d98 <rf24_module_max_retransmits>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d008      	beq.n	80022dc <rf24_module_irq_handler+0x20>
	{
		rf24_module_flags.max_retransmits = true;
 80022ca:	4b1a      	ldr	r3, [pc, #104]	; (8002334 <rf24_module_irq_handler+0x78>)
 80022cc:	2201      	movs	r2, #1
 80022ce:	705a      	strb	r2, [r3, #1]

		// switch back to receiver mode
		rf24_module_goto_state(STAND_BY_I);
 80022d0:	2004      	movs	r0, #4
 80022d2:	f7ff fe8f 	bl	8001ff4 <rf24_module_goto_state>
		rf24_module_goto_state(RX_MODE);
 80022d6:	2007      	movs	r0, #7
 80022d8:	f7ff fe8c 	bl	8001ff4 <rf24_module_goto_state>
		#ifdef RF24_MODULE_DEBUG_IRQ
			rf24_debug("max retransmits");
		#endif
	}

	if(rf24_module_package_transmitted())
 80022dc:	f7ff fd6c 	bl	8001db8 <rf24_module_package_transmitted>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00f      	beq.n	8002306 <rf24_module_irq_handler+0x4a>
	{
		rf24_module_flags.package_transmitted = true;
 80022e6:	4b13      	ldr	r3, [pc, #76]	; (8002334 <rf24_module_irq_handler+0x78>)
 80022e8:	2201      	movs	r2, #1
 80022ea:	701a      	strb	r2, [r3, #0]

		// switch back to receiver mode
		rf24_module_goto_state(STAND_BY_I);
 80022ec:	2004      	movs	r0, #4
 80022ee:	f7ff fe81 	bl	8001ff4 <rf24_module_goto_state>
		rf24_module_goto_state(RX_MODE);
 80022f2:	2007      	movs	r0, #7
 80022f4:	f7ff fe7e 	bl	8001ff4 <rf24_module_goto_state>

		// if a callback function attached, notify
		// [WARNING:] DONT ATTACH ANY LONG PROCEEDINGS TO THIS NOTIFY
		if(tx_data_transmitted_notify_fct_ptr)
 80022f8:	4b0f      	ldr	r3, [pc, #60]	; (8002338 <rf24_module_irq_handler+0x7c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d002      	beq.n	8002306 <rf24_module_irq_handler+0x4a>
			tx_data_transmitted_notify_fct_ptr();
 8002300:	4b0d      	ldr	r3, [pc, #52]	; (8002338 <rf24_module_irq_handler+0x7c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4798      	blx	r3
		#ifdef RF24_MODULE_DEBUG_IRQ
			rf24_debug("package transmitted");
		#endif
	}

	if(rf24_module_rx_data_available())
 8002306:	f7ff fd67 	bl	8001dd8 <rf24_module_rx_data_available>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d00d      	beq.n	800232c <rf24_module_irq_handler+0x70>
	{
		rf24_module_flags.package_received = true;
 8002310:	4b08      	ldr	r3, [pc, #32]	; (8002334 <rf24_module_irq_handler+0x78>)
 8002312:	2201      	movs	r2, #1
 8002314:	709a      	strb	r2, [r3, #2]

		// read rx data from chip, store it into global struct rx_data
		rf24_module_collect_rx_data(&rx_data);
 8002316:	4809      	ldr	r0, [pc, #36]	; (800233c <rf24_module_irq_handler+0x80>)
 8002318:	f7ff fe52 	bl	8001fc0 <rf24_module_collect_rx_data>

		// if a callback function attached, notify
		// [WARNING:] DONT ATTACH ANY LONG PROCEEDINGS TO THIS NOTIFY
		if(rx_data_received_notify_fct_ptr)
 800231c:	4b08      	ldr	r3, [pc, #32]	; (8002340 <rf24_module_irq_handler+0x84>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d003      	beq.n	800232c <rf24_module_irq_handler+0x70>
			rx_data_received_notify_fct_ptr(&rx_data);
 8002324:	4b06      	ldr	r3, [pc, #24]	; (8002340 <rf24_module_irq_handler+0x84>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4804      	ldr	r0, [pc, #16]	; (800233c <rf24_module_irq_handler+0x80>)
 800232a:	4798      	blx	r3
		#ifdef RF24_MODULE_DEBUG_IRQ
			rf24_module_print_rx_data(&rx_data);
		#endif
	}

	rf24_module_clear_all_interrupts();
 800232c:	f7ff fd66 	bl	8001dfc <rf24_module_clear_all_interrupts>
}
 8002330:	bf00      	nop
 8002332:	bd80      	pop	{r7, pc}
 8002334:	20000798 	.word	0x20000798
 8002338:	200006d0 	.word	0x200006d0
 800233c:	200006e0 	.word	0x200006e0
 8002340:	20000704 	.word	0x20000704

08002344 <rf24_csma_ca_frame_received_handler>:
rf24_csma_ca_fct_ptr_rts_received	csma_ca_fct_ptr_rts_received;

// INTERRUPTS

void rf24_csma_ca_frame_received_handler(rf24_mac_frame *mac_frame)
{
 8002344:	b5b0      	push	{r4, r5, r7, lr}
 8002346:	b08c      	sub	sp, #48	; 0x30
 8002348:	af06      	add	r7, sp, #24
 800234a:	6078      	str	r0, [r7, #4]
	bool addressed_to_me = memcmp(mac_frame->receiver.bytes, rf24_mac_get_address()->bytes, 6) == 0;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	1d1c      	adds	r4, r3, #4
 8002350:	f000 fe58 	bl	8003004 <rf24_mac_get_address>
 8002354:	4603      	mov	r3, r0
 8002356:	2206      	movs	r2, #6
 8002358:	4619      	mov	r1, r3
 800235a:	4620      	mov	r0, r4
 800235c:	f004 fcb2 	bl	8006cc4 <memcmp>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	bf0c      	ite	eq
 8002366:	2301      	moveq	r3, #1
 8002368:	2300      	movne	r3, #0
 800236a:	75fb      	strb	r3, [r7, #23]

	switch(mac_frame->frame_control.subtype)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	781a      	ldrb	r2, [r3, #0]
 8002370:	0992      	lsrs	r2, r2, #6
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	785b      	ldrb	r3, [r3, #1]
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4313      	orrs	r3, r2
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b03      	cmp	r3, #3
 8002382:	d002      	beq.n	800238a <rf24_csma_ca_frame_received_handler+0x46>
 8002384:	2b04      	cmp	r3, #4
 8002386:	d076      	beq.n	8002476 <rf24_csma_ca_frame_received_handler+0x132>
 8002388:	e0de      	b.n	8002548 <rf24_csma_ca_frame_received_handler+0x204>
	{
		case CONTROL_RTS:
		{
			if(addressed_to_me)
 800238a:	7dfb      	ldrb	r3, [r7, #23]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d059      	beq.n	8002444 <rf24_csma_ca_frame_received_handler+0x100>
			{
				bool rts_retransmitted = rf24_mac_addr_equal(&rf24_mac_get_transmission()->transmitter, &mac_frame->transmitter);
 8002390:	f000 fe2e 	bl	8002ff0 <rf24_mac_get_transmission>
 8002394:	4603      	mov	r3, r0
 8002396:	f103 020b 	add.w	r2, r3, #11
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	330a      	adds	r3, #10
 800239e:	4619      	mov	r1, r3
 80023a0:	4610      	mov	r0, r2
 80023a2:	f000 fdcf 	bl	8002f44 <rf24_mac_addr_equal>
 80023a6:	4603      	mov	r3, r0
 80023a8:	757b      	strb	r3, [r7, #21]

				// Case (1): RTS received while in an active transmission with another node, ignore
				if(rf24_mac_transmission_is_active() && !(rts_retransmitted) )
 80023aa:	f000 fdeb 	bl	8002f84 <rf24_mac_transmission_is_active>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d005      	beq.n	80023c0 <rf24_csma_ca_frame_received_handler+0x7c>
 80023b4:	7d7b      	ldrb	r3, [r7, #21]
 80023b6:	f083 0301 	eor.w	r3, r3, #1
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d159      	bne.n	8002474 <rf24_csma_ca_frame_received_handler+0x130>
					//rf24_debug(CSMA_CA, RECEIVE, CONTROL_RTS, mac_frame->rts.subtype, &mac_frame->transmitter, "%d [IGNORED]\n", mac_frame->id);
				}
				// Case (2): New RTS received or RTS retransmit received, transmit CTS
				else
				{
					rf24_debug(CSMA_CA, RECEIVE, CONTROL_RTS, mac_frame->rts.subtype, &mac_frame->transmitter,
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	7c5b      	ldrb	r3, [r3, #17]
 80023c4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	461c      	mov	r4, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	330a      	adds	r3, #10
							   "[%d] %d frame/s, %d byte/s \n", mac_frame->id, mac_frame->rts.n_frames, mac_frame->rts.n_bytes_payload);
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	7c12      	ldrb	r2, [r2, #16]
					rf24_debug(CSMA_CA, RECEIVE, CONTROL_RTS, mac_frame->rts.subtype, &mac_frame->transmitter,
 80023d4:	4611      	mov	r1, r2
							   "[%d] %d frame/s, %d byte/s \n", mac_frame->id, mac_frame->rts.n_frames, mac_frame->rts.n_bytes_payload);
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	7d12      	ldrb	r2, [r2, #20]
					rf24_debug(CSMA_CA, RECEIVE, CONTROL_RTS, mac_frame->rts.subtype, &mac_frame->transmitter,
 80023da:	4610      	mov	r0, r2
							   "[%d] %d frame/s, %d byte/s \n", mac_frame->id, mac_frame->rts.n_frames, mac_frame->rts.n_bytes_payload);
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	8a52      	ldrh	r2, [r2, #18]
 80023e0:	b292      	uxth	r2, r2
					rf24_debug(CSMA_CA, RECEIVE, CONTROL_RTS, mac_frame->rts.subtype, &mac_frame->transmitter,
 80023e2:	9204      	str	r2, [sp, #16]
 80023e4:	9003      	str	r0, [sp, #12]
 80023e6:	9102      	str	r1, [sp, #8]
 80023e8:	4a61      	ldr	r2, [pc, #388]	; (8002570 <rf24_csma_ca_frame_received_handler+0x22c>)
 80023ea:	9201      	str	r2, [sp, #4]
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	4623      	mov	r3, r4
 80023f0:	2203      	movs	r2, #3
 80023f2:	2102      	movs	r1, #2
 80023f4:	2003      	movs	r0, #3
 80023f6:	f7fe ff07 	bl	8001208 <rf24_debug>

					// Call RTS received function pointer (callback to ordering thread (MAC))
					if(csma_ca_fct_ptr_rts_received) csma_ca_fct_ptr_rts_received(mac_frame);
 80023fa:	4b5e      	ldr	r3, [pc, #376]	; (8002574 <rf24_csma_ca_frame_received_handler+0x230>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <rf24_csma_ca_frame_received_handler+0xc6>
 8002402:	4b5c      	ldr	r3, [pc, #368]	; (8002574 <rf24_csma_ca_frame_received_handler+0x230>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	4798      	blx	r3

					// Attach send CTS task, wait a SIFS before transmitting CTS
					struct rf24_task *task = rf24_worker_build_task(send_cts, 1, T_SIFS_US, true);
 800240a:	2301      	movs	r3, #1
 800240c:	22c8      	movs	r2, #200	; 0xc8
 800240e:	2101      	movs	r1, #1
 8002410:	2006      	movs	r0, #6
 8002412:	f002 fe6f 	bl	80050f4 <rf24_worker_build_task>
 8002416:	6138      	str	r0, [r7, #16]

					// Set destination & id for CTS reply
					task->data.csma.receiver = mac_frame->transmitter;
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	330c      	adds	r3, #12
 800241e:	320a      	adds	r2, #10
 8002420:	6810      	ldr	r0, [r2, #0]
 8002422:	6018      	str	r0, [r3, #0]
 8002424:	8892      	ldrh	r2, [r2, #4]
 8002426:	809a      	strh	r2, [r3, #4]
					task->data.csma.frame_id = mac_frame->id;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	7c1a      	ldrb	r2, [r3, #16]
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	749a      	strb	r2, [r3, #18]

					// Bind send CTS function to task
					rf24_worker_attach(task, rf24_csma_ca_send_cts);
 8002430:	4951      	ldr	r1, [pc, #324]	; (8002578 <rf24_csma_ca_frame_received_handler+0x234>)
 8002432:	6938      	ldr	r0, [r7, #16]
 8002434:	f002 fe40 	bl	80050b8 <rf24_worker_attach>

					// Set flag RTS received
					csma_ca_flags.rts_received = true;
 8002438:	4a50      	ldr	r2, [pc, #320]	; (800257c <rf24_csma_ca_frame_received_handler+0x238>)
 800243a:	7813      	ldrb	r3, [r2, #0]
 800243c:	f043 0304 	orr.w	r3, r3, #4
 8002440:	7013      	strb	r3, [r2, #0]
				rf24_csma_ca_wait_nav(mac_frame);

				rf24_debug(CSMA_CA, RECEIVE, CONTROL_RTS, mac_frame->rts.subtype, &mac_frame->transmitter, "[%d] jammed\n", mac_frame->id);
			}

			break;
 8002442:	e090      	b.n	8002566 <rf24_csma_ca_frame_received_handler+0x222>
				rf24_csma_ca_wait_nav(mac_frame);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 f8a1 	bl	800258c <rf24_csma_ca_wait_nav>
				rf24_debug(CSMA_CA, RECEIVE, CONTROL_RTS, mac_frame->rts.subtype, &mac_frame->transmitter, "[%d] jammed\n", mac_frame->id);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	7c5b      	ldrb	r3, [r3, #17]
 800244e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002452:	b2db      	uxtb	r3, r3
 8002454:	4619      	mov	r1, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	330a      	adds	r3, #10
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	7c12      	ldrb	r2, [r2, #16]
 800245e:	9202      	str	r2, [sp, #8]
 8002460:	4a47      	ldr	r2, [pc, #284]	; (8002580 <rf24_csma_ca_frame_received_handler+0x23c>)
 8002462:	9201      	str	r2, [sp, #4]
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	460b      	mov	r3, r1
 8002468:	2203      	movs	r2, #3
 800246a:	2102      	movs	r1, #2
 800246c:	2003      	movs	r0, #3
 800246e:	f7fe fecb 	bl	8001208 <rf24_debug>
			break;
 8002472:	e078      	b.n	8002566 <rf24_csma_ca_frame_received_handler+0x222>
 8002474:	e077      	b.n	8002566 <rf24_csma_ca_frame_received_handler+0x222>
		/***************************************************************************************/

		case CONTROL_CTS:
		{
			// Check if CTS frame is addressed to me
			bool addressed_to_me = memcmp(mac_frame->receiver.bytes, rf24_mac_get_address()->bytes, 6) == 0;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	1d1c      	adds	r4, r3, #4
 800247a:	f000 fdc3 	bl	8003004 <rf24_mac_get_address>
 800247e:	4603      	mov	r3, r0
 8002480:	2206      	movs	r2, #6
 8002482:	4619      	mov	r1, r3
 8002484:	4620      	mov	r0, r4
 8002486:	f004 fc1d 	bl	8006cc4 <memcmp>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	bf0c      	ite	eq
 8002490:	2301      	moveq	r3, #1
 8002492:	2300      	movne	r3, #0
 8002494:	75bb      	strb	r3, [r7, #22]

			if(addressed_to_me)
 8002496:	7dbb      	ldrb	r3, [r7, #22]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d03d      	beq.n	8002518 <rf24_csma_ca_frame_received_handler+0x1d4>
			{
				// remove RTS tasks in case it has been pushed right before
				if(rf24_worker_current_task()->task == send_rts) rf24_worker_pop_task();
 800249c:	f002 fea2 	bl	80051e4 <rf24_worker_current_task>
 80024a0:	4603      	mov	r3, r0
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	2b05      	cmp	r3, #5
 80024a6:	d101      	bne.n	80024ac <rf24_csma_ca_frame_received_handler+0x168>
 80024a8:	f002 fea6 	bl	80051f8 <rf24_worker_pop_task>

				// Stop stop-watch
				//csma_ca_order.t_cts_response_us = rf24_stm32f1xx_stop_stopwatch();
				rf24_timespan t_cts_response = rf24_worker_us_to_timespan(123);
 80024ac:	f107 0308 	add.w	r3, r7, #8
 80024b0:	217b      	movs	r1, #123	; 0x7b
 80024b2:	4618      	mov	r0, r3
 80024b4:	f002 ff90 	bl	80053d8 <rf24_worker_us_to_timespan>

				// Pop CTS timeout from task stack
				rf24_worker_pop_task();
 80024b8:	f002 fe9e 	bl	80051f8 <rf24_worker_pop_task>

				// Call CTS received function pointer (callback function to ordering thread)
				if(!csma_ca_flags.cts_received)
 80024bc:	4b2f      	ldr	r3, [pc, #188]	; (800257c <rf24_csma_ca_frame_received_handler+0x238>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	f003 0308 	and.w	r3, r3, #8
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d120      	bne.n	800250c <rf24_csma_ca_frame_received_handler+0x1c8>
				{
					rf24_debug(	CSMA_CA, RECEIVE, CONTROL_CTS, mac_frame->rts.subtype, &mac_frame->transmitter,
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	7c5b      	ldrb	r3, [r3, #17]
 80024ce:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	461d      	mov	r5, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	330a      	adds	r3, #10
							 	"[%d] t_response: %ds %dms %dus\n", mac_frame->id, t_cts_response.s, t_cts_response.ms, t_cts_response.us);
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	7c12      	ldrb	r2, [r2, #16]
 80024de:	7a39      	ldrb	r1, [r7, #8]
 80024e0:	8978      	ldrh	r0, [r7, #10]
 80024e2:	89bc      	ldrh	r4, [r7, #12]
					rf24_debug(	CSMA_CA, RECEIVE, CONTROL_CTS, mac_frame->rts.subtype, &mac_frame->transmitter,
 80024e4:	9405      	str	r4, [sp, #20]
 80024e6:	9004      	str	r0, [sp, #16]
 80024e8:	9103      	str	r1, [sp, #12]
 80024ea:	9202      	str	r2, [sp, #8]
 80024ec:	4a25      	ldr	r2, [pc, #148]	; (8002584 <rf24_csma_ca_frame_received_handler+0x240>)
 80024ee:	9201      	str	r2, [sp, #4]
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	462b      	mov	r3, r5
 80024f4:	2204      	movs	r2, #4
 80024f6:	2102      	movs	r1, #2
 80024f8:	2003      	movs	r0, #3
 80024fa:	f7fe fe85 	bl	8001208 <rf24_debug>

					if(csma_ca_order.fct_ptr_access_medium) csma_ca_order.fct_ptr_access_medium();
 80024fe:	4b22      	ldr	r3, [pc, #136]	; (8002588 <rf24_csma_ca_frame_received_handler+0x244>)
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d002      	beq.n	800250c <rf24_csma_ca_frame_received_handler+0x1c8>
 8002506:	4b20      	ldr	r3, [pc, #128]	; (8002588 <rf24_csma_ca_frame_received_handler+0x244>)
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	4798      	blx	r3
				}

				// Notice CTS received
				csma_ca_flags.cts_received = true;
 800250c:	4a1b      	ldr	r2, [pc, #108]	; (800257c <rf24_csma_ca_frame_received_handler+0x238>)
 800250e:	7813      	ldrb	r3, [r2, #0]
 8002510:	f043 0308 	orr.w	r3, r3, #8
 8002514:	7013      	strb	r3, [r2, #0]
				rf24_csma_ca_wait_nav(mac_frame);

				rf24_debug(CSMA_CA, RECEIVE, CONTROL_CTS, mac_frame->rts.subtype, &mac_frame->transmitter, "[%d] jammed\n", mac_frame->id);
			}

			break;
 8002516:	e026      	b.n	8002566 <rf24_csma_ca_frame_received_handler+0x222>
				rf24_csma_ca_wait_nav(mac_frame);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 f837 	bl	800258c <rf24_csma_ca_wait_nav>
				rf24_debug(CSMA_CA, RECEIVE, CONTROL_CTS, mac_frame->rts.subtype, &mac_frame->transmitter, "[%d] jammed\n", mac_frame->id);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	7c5b      	ldrb	r3, [r3, #17]
 8002522:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002526:	b2db      	uxtb	r3, r3
 8002528:	4619      	mov	r1, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	330a      	adds	r3, #10
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	7c12      	ldrb	r2, [r2, #16]
 8002532:	9202      	str	r2, [sp, #8]
 8002534:	4a12      	ldr	r2, [pc, #72]	; (8002580 <rf24_csma_ca_frame_received_handler+0x23c>)
 8002536:	9201      	str	r2, [sp, #4]
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	460b      	mov	r3, r1
 800253c:	2204      	movs	r2, #4
 800253e:	2102      	movs	r1, #2
 8002540:	2003      	movs	r0, #3
 8002542:	f7fe fe61 	bl	8001208 <rf24_debug>
			break;
 8002546:	e00e      	b.n	8002566 <rf24_csma_ca_frame_received_handler+0x222>
		/***************************************************************************************/

		default:
		{
			// All frames which aren't addressed to me and have a valid NAV attached
			if(!addressed_to_me)
 8002548:	7dfb      	ldrb	r3, [r7, #23]
 800254a:	f083 0301 	eor.w	r3, r3, #1
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b00      	cmp	r3, #0
 8002552:	d007      	beq.n	8002564 <rf24_csma_ca_frame_received_handler+0x220>
			{
				// Wait NAV
				if(mac_frame->duration > 0) rf24_csma_ca_wait_nav(mac_frame);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	885b      	ldrh	r3, [r3, #2]
 8002558:	b29b      	uxth	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d002      	beq.n	8002564 <rf24_csma_ca_frame_received_handler+0x220>
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f814 	bl	800258c <rf24_csma_ca_wait_nav>
			}

			break;
 8002564:	bf00      	nop
		}
	}
}
 8002566:	bf00      	nop
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bdb0      	pop	{r4, r5, r7, pc}
 800256e:	bf00      	nop
 8002570:	08008660 	.word	0x08008660
 8002574:	200007b0 	.word	0x200007b0
 8002578:	08002749 	.word	0x08002749
 800257c:	20000684 	.word	0x20000684
 8002580:	08008680 	.word	0x08008680
 8002584:	08008690 	.word	0x08008690
 8002588:	2000079c 	.word	0x2000079c

0800258c <rf24_csma_ca_wait_nav>:

void rf24_csma_ca_wait_nav(rf24_mac_frame *mac_frame)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
	// Extran nav duration fragment from frame
	uint32_t t_nav_us = mac_frame->duration * 1000;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	885b      	ldrh	r3, [r3, #2]
 8002598:	b29b      	uxth	r3, r3
 800259a:	461a      	mov	r2, r3
 800259c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025a0:	fb03 f302 	mul.w	r3, r3, r2
 80025a4:	60fb      	str	r3, [r7, #12]

	// Pointer to current (working) tasks
	struct rf24_task *task = rf24_worker_current_task();
 80025a6:	f002 fe1d 	bl	80051e4 <rf24_worker_current_task>
 80025aa:	60b8      	str	r0, [r7, #8]

	// Am i trying to access medium? -> current task == wait random back-off
	if(task->task == wait_random_backoff)
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	2b04      	cmp	r3, #4
 80025b2:	d108      	bne.n	80025c6 <rf24_csma_ca_wait_nav+0x3a>
	{
		// Push a new SIFS before remaining back-off timer (task) into task-pipe
		rf24_worker_push_wait(wait_sifs, T_SIFS_US);
 80025b4:	21c8      	movs	r1, #200	; 0xc8
 80025b6:	2000      	movs	r0, #0
 80025b8:	f002 fd6a 	bl	8005090 <rf24_worker_push_wait>

		// Set flag back off competition lost
		csma_ca_flags.backoff_competition_lost = true;
 80025bc:	4a0f      	ldr	r2, [pc, #60]	; (80025fc <rf24_csma_ca_wait_nav+0x70>)
 80025be:	7813      	ldrb	r3, [r2, #0]
 80025c0:	f043 0301 	orr.w	r3, r3, #1
 80025c4:	7013      	strb	r3, [r2, #0]
	}

	// Am I already waiting?
	if(task->task == wait_nav)
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b03      	cmp	r3, #3
 80025cc:	d106      	bne.n	80025dc <rf24_csma_ca_wait_nav+0x50>

				break;
			}
			// Otherwise update wait NAV task (add duration of new MAC frame on top of current task)
			default:*/
			task->t_cycle_us += t_nav_us;
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	441a      	add	r2, r3
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	605a      	str	r2, [r3, #4]
		task = rf24_worker_build_task(wait_nav, 1, t_nav_us, false);

		// Attach it to NAV expired function
		rf24_worker_push(task, rf24_csma_ca_nav_expired);
	}
}
 80025da:	e00a      	b.n	80025f2 <rf24_csma_ca_wait_nav+0x66>
		task = rf24_worker_build_task(wait_nav, 1, t_nav_us, false);
 80025dc:	2300      	movs	r3, #0
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	2101      	movs	r1, #1
 80025e2:	2003      	movs	r0, #3
 80025e4:	f002 fd86 	bl	80050f4 <rf24_worker_build_task>
 80025e8:	60b8      	str	r0, [r7, #8]
		rf24_worker_push(task, rf24_csma_ca_nav_expired);
 80025ea:	4905      	ldr	r1, [pc, #20]	; (8002600 <rf24_csma_ca_wait_nav+0x74>)
 80025ec:	68b8      	ldr	r0, [r7, #8]
 80025ee:	f002 fd72 	bl	80050d6 <rf24_worker_push>
}
 80025f2:	bf00      	nop
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	20000684 	.word	0x20000684
 8002600:	08002829 	.word	0x08002829

08002604 <rf24_cmsa_ca_init>:

void rf24_cmsa_ca_init(rf24_csma_ca_fct_ptr_rts_received fct_ptr_rts_received)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
	// CTS received (start of reception) callback function
	csma_ca_fct_ptr_rts_received = fct_ptr_rts_received;
 800260c:	4a04      	ldr	r2, [pc, #16]	; (8002620 <rf24_cmsa_ca_init+0x1c>)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6013      	str	r3, [r2, #0]

	// Reset routine
	rf24_csma_ca_reset();
 8002612:	f000 f807 	bl	8002624 <rf24_csma_ca_reset>
}
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	200007b0 	.word	0x200007b0

08002624 <rf24_csma_ca_reset>:

void rf24_csma_ca_reset()
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
	// Reset csma_ca_flags
	memset(&csma_ca_flags, 0, sizeof(rf24_csma_ca_flags));
 8002628:	2204      	movs	r2, #4
 800262a:	2100      	movs	r1, #0
 800262c:	4806      	ldr	r0, [pc, #24]	; (8002648 <rf24_csma_ca_reset+0x24>)
 800262e:	f004 fb63 	bl	8006cf8 <memset>

	// Reset variables
	csma_ca_order.rts_transmits = 0;
 8002632:	4b06      	ldr	r3, [pc, #24]	; (800264c <rf24_csma_ca_reset+0x28>)
 8002634:	2200      	movs	r2, #0
 8002636:	731a      	strb	r2, [r3, #12]
	csma_ca_order.t_random_backoff_us = 0;
 8002638:	4b04      	ldr	r3, [pc, #16]	; (800264c <rf24_csma_ca_reset+0x28>)
 800263a:	2200      	movs	r2, #0
 800263c:	605a      	str	r2, [r3, #4]

	// Reset task pipeline
	rf24_worker_reset_tasks();
 800263e:	f002 fdf1 	bl	8005224 <rf24_worker_reset_tasks>
}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	20000684 	.word	0x20000684
 800264c:	2000079c 	.word	0x2000079c

08002650 <rf24_csma_ca_send_rts>:

void rf24_csma_ca_send_rts()
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b098      	sub	sp, #96	; 0x60
 8002654:	af06      	add	r7, sp, #24
	// notice attempt
	csma_ca_order.rts_transmits++;
 8002656:	4b3a      	ldr	r3, [pc, #232]	; (8002740 <rf24_csma_ca_send_rts+0xf0>)
 8002658:	7b1b      	ldrb	r3, [r3, #12]
 800265a:	3301      	adds	r3, #1
 800265c:	b2da      	uxtb	r2, r3
 800265e:	4b38      	ldr	r3, [pc, #224]	; (8002740 <rf24_csma_ca_send_rts+0xf0>)
 8002660:	731a      	strb	r2, [r3, #12]

	rf24_mac_frame mac_frame;

	mac_frame.frame_control.type = CONTROL;
 8002662:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002666:	2202      	movs	r2, #2
 8002668:	f362 0385 	bfi	r3, r2, #2, #4
 800266c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	mac_frame.frame_control.subtype = CONTROL_RTS;
 8002670:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002672:	2203      	movs	r2, #3
 8002674:	f362 1389 	bfi	r3, r2, #6, #4
 8002678:	853b      	strh	r3, [r7, #40]	; 0x28
	mac_frame.id = csma_ca_order.rts_transmits;
 800267a:	4b31      	ldr	r3, [pc, #196]	; (8002740 <rf24_csma_ca_send_rts+0xf0>)
 800267c:	7b1b      	ldrb	r3, [r3, #12]
 800267e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	mac_frame.duration = T_NAV_RTS_MS;
 8002682:	2300      	movs	r3, #0
 8002684:	857b      	strh	r3, [r7, #42]	; 0x2a
	mac_frame.transmitter = *rf24_mac_get_address();
 8002686:	f000 fcbd 	bl	8003004 <rf24_mac_get_address>
 800268a:	4602      	mov	r2, r0
 800268c:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8002690:	6811      	ldr	r1, [r2, #0]
 8002692:	6019      	str	r1, [r3, #0]
 8002694:	8892      	ldrh	r2, [r2, #4]
 8002696:	809a      	strh	r2, [r3, #4]
	mac_frame.receiver = csma_ca_order.transmission->receiver;
 8002698:	4b29      	ldr	r3, [pc, #164]	; (8002740 <rf24_csma_ca_send_rts+0xf0>)
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026a0:	3205      	adds	r2, #5
 80026a2:	6810      	ldr	r0, [r2, #0]
 80026a4:	6018      	str	r0, [r3, #0]
 80026a6:	8892      	ldrh	r2, [r2, #4]
 80026a8:	809a      	strh	r2, [r3, #4]
	mac_frame.rts.type = csma_ca_order.transmission->frame_type;
 80026aa:	4b25      	ldr	r3, [pc, #148]	; (8002740 <rf24_csma_ca_send_rts+0xf0>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	78db      	ldrb	r3, [r3, #3]
 80026b0:	f003 030f 	and.w	r3, r3, #15
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80026ba:	f362 0303 	bfi	r3, r2, #0, #4
 80026be:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	mac_frame.rts.subtype = csma_ca_order.transmission->frame_subtype;
 80026c2:	4b1f      	ldr	r3, [pc, #124]	; (8002740 <rf24_csma_ca_send_rts+0xf0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	791b      	ldrb	r3, [r3, #4]
 80026c8:	f003 030f 	and.w	r3, r3, #15
 80026cc:	b2da      	uxtb	r2, r3
 80026ce:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80026d2:	f362 1307 	bfi	r3, r2, #4, #4
 80026d6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	mac_frame.rts.n_frames = csma_ca_order.transmission->n_frames;
 80026da:	4b19      	ldr	r3, [pc, #100]	; (8002740 <rf24_csma_ca_send_rts+0xf0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80026e2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	mac_frame.rts.n_bytes_payload = csma_ca_order.transmission->payload_length;
 80026e6:	4b16      	ldr	r3, [pc, #88]	; (8002740 <rf24_csma_ca_send_rts+0xf0>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	877b      	strh	r3, [r7, #58]	; 0x3a

	rf24_module_tx_data tx_data;
	rf24_mac_frame_to_tx_data(&mac_frame, &tx_data);
 80026f2:	1d3a      	adds	r2, r7, #4
 80026f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026f8:	4611      	mov	r1, r2
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 fc96 	bl	800302c <rf24_mac_frame_to_tx_data>
	rf24_module_transmit(&tx_data);
 8002700:	1d3b      	adds	r3, r7, #4
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff fd84 	bl	8002210 <rf24_module_transmit>

	// Start stop watch
	//rf24_stm32f1xx_start_stopwatch();

	rf24_debug(	CSMA_CA, TRANSMIT, CONTROL_RTS, rf24_mac_get_transmission()->frame_subtype, &mac_frame.receiver,
 8002708:	f000 fc72 	bl	8002ff0 <rf24_mac_get_transmission>
 800270c:	4603      	mov	r3, r0
 800270e:	791a      	ldrb	r2, [r3, #4]
				"[%d] %d frame/s, %d byte/s \n", mac_frame.id, mac_frame.rts.n_frames, mac_frame.rts.n_bytes_payload);
 8002710:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002714:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 8002718:	8f78      	ldrh	r0, [r7, #58]	; 0x3a
	rf24_debug(	CSMA_CA, TRANSMIT, CONTROL_RTS, rf24_mac_get_transmission()->frame_subtype, &mac_frame.receiver,
 800271a:	9004      	str	r0, [sp, #16]
 800271c:	9103      	str	r1, [sp, #12]
 800271e:	9302      	str	r3, [sp, #8]
 8002720:	4b08      	ldr	r3, [pc, #32]	; (8002744 <rf24_csma_ca_send_rts+0xf4>)
 8002722:	9301      	str	r3, [sp, #4]
 8002724:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002728:	3304      	adds	r3, #4
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	4613      	mov	r3, r2
 800272e:	2203      	movs	r2, #3
 8002730:	2101      	movs	r1, #1
 8002732:	2003      	movs	r0, #3
 8002734:	f7fe fd68 	bl	8001208 <rf24_debug>
}
 8002738:	bf00      	nop
 800273a:	3748      	adds	r7, #72	; 0x48
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	2000079c 	.word	0x2000079c
 8002744:	08008660 	.word	0x08008660

08002748 <rf24_csma_ca_send_cts>:

void rf24_csma_ca_send_cts()
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b096      	sub	sp, #88	; 0x58
 800274c:	af04      	add	r7, sp, #16
	rf24_mac_frame mac_frame;

	mac_frame.frame_control.type = CONTROL;
 800274e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002752:	2202      	movs	r2, #2
 8002754:	f362 0385 	bfi	r3, r2, #2, #4
 8002758:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	mac_frame.frame_control.subtype = CONTROL_CTS;
 800275c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800275e:	2204      	movs	r2, #4
 8002760:	f362 1389 	bfi	r3, r2, #6, #4
 8002764:	853b      	strh	r3, [r7, #40]	; 0x28
	mac_frame.id = rf24_worker_current_task()->data.csma.frame_id;
 8002766:	f002 fd3d 	bl	80051e4 <rf24_worker_current_task>
 800276a:	4603      	mov	r3, r0
 800276c:	7c9b      	ldrb	r3, [r3, #18]
 800276e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	mac_frame.duration = T_NAV_CTS_MS;
 8002772:	2300      	movs	r3, #0
 8002774:	857b      	strh	r3, [r7, #42]	; 0x2a
	mac_frame.transmitter = *rf24_mac_get_address();
 8002776:	f000 fc45 	bl	8003004 <rf24_mac_get_address>
 800277a:	4602      	mov	r2, r0
 800277c:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8002780:	6811      	ldr	r1, [r2, #0]
 8002782:	6019      	str	r1, [r3, #0]
 8002784:	8892      	ldrh	r2, [r2, #4]
 8002786:	809a      	strh	r2, [r3, #4]
	mac_frame.rts.type = csma_ca_order.transmission->frame_type;
 8002788:	4b25      	ldr	r3, [pc, #148]	; (8002820 <rf24_csma_ca_send_cts+0xd8>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	78db      	ldrb	r3, [r3, #3]
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	b2da      	uxtb	r2, r3
 8002794:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002798:	f362 0303 	bfi	r3, r2, #0, #4
 800279c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	mac_frame.rts.subtype = csma_ca_order.transmission->frame_subtype;
 80027a0:	4b1f      	ldr	r3, [pc, #124]	; (8002820 <rf24_csma_ca_send_cts+0xd8>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	791b      	ldrb	r3, [r3, #4]
 80027a6:	f003 030f 	and.w	r3, r3, #15
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80027b0:	f362 1307 	bfi	r3, r2, #4, #4
 80027b4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	mac_frame.rts.n_bytes_payload = csma_ca_order.transmission->payload_length;
 80027b8:	4b19      	ldr	r3, [pc, #100]	; (8002820 <rf24_csma_ca_send_cts+0xd8>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	877b      	strh	r3, [r7, #58]	; 0x3a
	mac_frame.receiver = rf24_worker_current_task()->data.csma.receiver;
 80027c4:	f002 fd0e 	bl	80051e4 <rf24_worker_current_task>
 80027c8:	4602      	mov	r2, r0
 80027ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027ce:	320c      	adds	r2, #12
 80027d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027d4:	6018      	str	r0, [r3, #0]
 80027d6:	3304      	adds	r3, #4
 80027d8:	8019      	strh	r1, [r3, #0]

	rf24_module_tx_data tx_data;
	rf24_mac_frame_to_tx_data(&mac_frame, &tx_data);
 80027da:	1d3a      	adds	r2, r7, #4
 80027dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027e0:	4611      	mov	r1, r2
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 fc22 	bl	800302c <rf24_mac_frame_to_tx_data>
	rf24_module_transmit(&tx_data);
 80027e8:	1d3b      	adds	r3, r7, #4
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff fd10 	bl	8002210 <rf24_module_transmit>

	rf24_debug(CSMA_CA, TRANSMIT, CONTROL_CTS, rf24_mac_get_transmission()->frame_subtype, &mac_frame.receiver, "[%d]\n", mac_frame.id);
 80027f0:	f000 fbfe 	bl	8002ff0 <rf24_mac_get_transmission>
 80027f4:	4603      	mov	r3, r0
 80027f6:	791a      	ldrb	r2, [r3, #4]
 80027f8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80027fc:	9302      	str	r3, [sp, #8]
 80027fe:	4b09      	ldr	r3, [pc, #36]	; (8002824 <rf24_csma_ca_send_cts+0xdc>)
 8002800:	9301      	str	r3, [sp, #4]
 8002802:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002806:	3304      	adds	r3, #4
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	4613      	mov	r3, r2
 800280c:	2204      	movs	r2, #4
 800280e:	2101      	movs	r1, #1
 8002810:	2003      	movs	r0, #3
 8002812:	f7fe fcf9 	bl	8001208 <rf24_debug>
}
 8002816:	bf00      	nop
 8002818:	3748      	adds	r7, #72	; 0x48
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	2000079c 	.word	0x2000079c
 8002824:	080086b0 	.word	0x080086b0

08002828 <rf24_csma_ca_nav_expired>:

void rf24_csma_ca_nav_expired()
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af04      	add	r7, sp, #16
	rf24_debug(CSMA_CA, INFO, VOID, VOID, NULL, "NAV expired, wake up & proceed\n","");
 800282e:	4b07      	ldr	r3, [pc, #28]	; (800284c <rf24_csma_ca_nav_expired+0x24>)
 8002830:	9302      	str	r3, [sp, #8]
 8002832:	4b07      	ldr	r3, [pc, #28]	; (8002850 <rf24_csma_ca_nav_expired+0x28>)
 8002834:	9301      	str	r3, [sp, #4]
 8002836:	2300      	movs	r3, #0
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	2300      	movs	r3, #0
 800283c:	2200      	movs	r2, #0
 800283e:	2106      	movs	r1, #6
 8002840:	2003      	movs	r0, #3
 8002842:	f7fe fce1 	bl	8001208 <rf24_debug>
}
 8002846:	bf00      	nop
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	0800840c 	.word	0x0800840c
 8002850:	080086b8 	.word	0x080086b8

08002854 <rf24_csma_ca_random_backoff_expired>:

void rf24_csma_ca_random_backoff_expired()
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
	// If access type is a broadcast, allow access to medium after a random back off
	switch(csma_ca_order.transmission->communication_type)
 8002858:	4b07      	ldr	r3, [pc, #28]	; (8002878 <rf24_csma_ca_random_backoff_expired+0x24>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	789b      	ldrb	r3, [r3, #2]
 800285e:	2b02      	cmp	r3, #2
 8002860:	d000      	beq.n	8002864 <rf24_csma_ca_random_backoff_expired+0x10>
			// Random back off expired without disruption, call callback function
			if(csma_ca_order.fct_ptr_access_medium) csma_ca_order.fct_ptr_access_medium();

			break;
		}
		default: break;
 8002862:	e007      	b.n	8002874 <rf24_csma_ca_random_backoff_expired+0x20>
			if(csma_ca_order.fct_ptr_access_medium) csma_ca_order.fct_ptr_access_medium();
 8002864:	4b04      	ldr	r3, [pc, #16]	; (8002878 <rf24_csma_ca_random_backoff_expired+0x24>)
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d002      	beq.n	8002872 <rf24_csma_ca_random_backoff_expired+0x1e>
 800286c:	4b02      	ldr	r3, [pc, #8]	; (8002878 <rf24_csma_ca_random_backoff_expired+0x24>)
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	4798      	blx	r3
			break;
 8002872:	bf00      	nop
	}
}
 8002874:	bf00      	nop
 8002876:	bd80      	pop	{r7, pc}
 8002878:	2000079c 	.word	0x2000079c

0800287c <rf24_csma_ca_cts_timeout>:

void rf24_csma_ca_cts_timeout()
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af04      	add	r7, sp, #16
	// Wait for CTS timeout

	// If CTS timeout reached & CTS not received
	if(!csma_ca_flags.cts_received)
 8002882:	4b1e      	ldr	r3, [pc, #120]	; (80028fc <rf24_csma_ca_cts_timeout+0x80>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	f003 0308 	and.w	r3, r3, #8
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b00      	cmp	r3, #0
 800288e:	d132      	bne.n	80028f6 <rf24_csma_ca_cts_timeout+0x7a>
	{
		if(csma_ca_order.rts_transmits >= N_MAX_RTS_RETRANSMITS)
 8002890:	4b1b      	ldr	r3, [pc, #108]	; (8002900 <rf24_csma_ca_cts_timeout+0x84>)
 8002892:	7b1b      	ldrb	r3, [r3, #12]
 8002894:	2b0e      	cmp	r3, #14
 8002896:	d911      	bls.n	80028bc <rf24_csma_ca_cts_timeout+0x40>
		{
			rf24_debug(CSMA_CA, TIMEOUT, CONTROL_CTS, VOID, NULL,"max retransmits reached, transmission cancelled\n", "");
 8002898:	4b1a      	ldr	r3, [pc, #104]	; (8002904 <rf24_csma_ca_cts_timeout+0x88>)
 800289a:	9302      	str	r3, [sp, #8]
 800289c:	4b1a      	ldr	r3, [pc, #104]	; (8002908 <rf24_csma_ca_cts_timeout+0x8c>)
 800289e:	9301      	str	r3, [sp, #4]
 80028a0:	2300      	movs	r3, #0
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	2300      	movs	r3, #0
 80028a6:	2204      	movs	r2, #4
 80028a8:	2105      	movs	r1, #5
 80028aa:	2003      	movs	r0, #3
 80028ac:	f7fe fcac 	bl	8001208 <rf24_debug>

			// Set transmission state to CANCELLED
			rf24_mac_set_transmission_state(CANCELLED);
 80028b0:	2004      	movs	r0, #4
 80028b2:	f000 fb7d 	bl	8002fb0 <rf24_mac_set_transmission_state>

			// Reset routine
			rf24_csma_ca_reset();
 80028b6:	f7ff feb5 	bl	8002624 <rf24_csma_ca_reset>
					csma_ca_order.transmission,
					csma_ca_order.rts_transmits++,
					csma_ca_order.fct_ptr_access_medium);
		}
	}
}
 80028ba:	e01c      	b.n	80028f6 <rf24_csma_ca_cts_timeout+0x7a>
			rf24_debug(CSMA_CA, TIMEOUT, CONTROL_CTS, VOID, NULL, "retransmit RTS (%d/%d) \n", csma_ca_order.rts_transmits, N_MAX_RTS_RETRANSMITS);
 80028bc:	4b10      	ldr	r3, [pc, #64]	; (8002900 <rf24_csma_ca_cts_timeout+0x84>)
 80028be:	7b1b      	ldrb	r3, [r3, #12]
 80028c0:	461a      	mov	r2, r3
 80028c2:	230f      	movs	r3, #15
 80028c4:	9303      	str	r3, [sp, #12]
 80028c6:	9202      	str	r2, [sp, #8]
 80028c8:	4b10      	ldr	r3, [pc, #64]	; (800290c <rf24_csma_ca_cts_timeout+0x90>)
 80028ca:	9301      	str	r3, [sp, #4]
 80028cc:	2300      	movs	r3, #0
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	2300      	movs	r3, #0
 80028d2:	2204      	movs	r2, #4
 80028d4:	2105      	movs	r1, #5
 80028d6:	2003      	movs	r0, #3
 80028d8:	f7fe fc96 	bl	8001208 <rf24_debug>
			rf24_csma_ca_access_medium(
 80028dc:	4b08      	ldr	r3, [pc, #32]	; (8002900 <rf24_csma_ca_cts_timeout+0x84>)
 80028de:	6818      	ldr	r0, [r3, #0]
					csma_ca_order.rts_transmits++,
 80028e0:	4b07      	ldr	r3, [pc, #28]	; (8002900 <rf24_csma_ca_cts_timeout+0x84>)
 80028e2:	7b1b      	ldrb	r3, [r3, #12]
			rf24_csma_ca_access_medium(
 80028e4:	1c5a      	adds	r2, r3, #1
 80028e6:	b2d1      	uxtb	r1, r2
 80028e8:	4a05      	ldr	r2, [pc, #20]	; (8002900 <rf24_csma_ca_cts_timeout+0x84>)
 80028ea:	7311      	strb	r1, [r2, #12]
 80028ec:	4a04      	ldr	r2, [pc, #16]	; (8002900 <rf24_csma_ca_cts_timeout+0x84>)
 80028ee:	6912      	ldr	r2, [r2, #16]
 80028f0:	4619      	mov	r1, r3
 80028f2:	f000 f829 	bl	8002948 <rf24_csma_ca_access_medium>
}
 80028f6:	bf00      	nop
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	20000684 	.word	0x20000684
 8002900:	2000079c 	.word	0x2000079c
 8002904:	0800840c 	.word	0x0800840c
 8002908:	080086d8 	.word	0x080086d8
 800290c:	0800870c 	.word	0x0800870c

08002910 <rf24_csma_ca_compute_random_backoff>:

uint32_t rf24_csma_ca_compute_random_backoff(uint16_t contention_window)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	80fb      	strh	r3, [r7, #6]
	// Use timer count 3 to seed rand for a pseudo random number
	srand(rf24_stm32f1xx_get_tim3_count());
 800291a:	f002 ffcb 	bl	80058b4 <rf24_stm32f1xx_get_tim3_count>
 800291e:	4603      	mov	r3, r0
 8002920:	4618      	mov	r0, r3
 8002922:	f004 fa97 	bl	8006e54 <srand>

	// Compute random back off with in given contention window
	return ( rand() % contention_window ) * T_SLOT_US;
 8002926:	f004 fab9 	bl	8006e9c <rand>
 800292a:	4602      	mov	r2, r0
 800292c:	88fb      	ldrh	r3, [r7, #6]
 800292e:	fb92 f1f3 	sdiv	r1, r2, r3
 8002932:	fb03 f301 	mul.w	r3, r3, r1
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2232      	movs	r2, #50	; 0x32
 800293a:	fb02 f303 	mul.w	r3, r2, r3
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
	...

08002948 <rf24_csma_ca_access_medium>:

void rf24_csma_ca_access_medium(
		rf24_mac_transmission*				transmission,
		uint8_t								rts_transmits,
		rf24_csma_ca_fct_ptr_access_medium 	fct_ptr_access_medium)
	{
 8002948:	b590      	push	{r4, r7, lr}
 800294a:	b08b      	sub	sp, #44	; 0x2c
 800294c:	af04      	add	r7, sp, #16
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	460b      	mov	r3, r1
 8002952:	607a      	str	r2, [r7, #4]
 8002954:	72fb      	strb	r3, [r7, #11]

	// Reset CSMA_CA routine
	rf24_csma_ca_reset();
 8002956:	f7ff fe65 	bl	8002624 <rf24_csma_ca_reset>

	csma_ca_order.transmission = transmission;
 800295a:	4a31      	ldr	r2, [pc, #196]	; (8002a20 <rf24_csma_ca_access_medium+0xd8>)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6013      	str	r3, [r2, #0]
	csma_ca_order.rts_transmits = rts_transmits;
 8002960:	4a2f      	ldr	r2, [pc, #188]	; (8002a20 <rf24_csma_ca_access_medium+0xd8>)
 8002962:	7afb      	ldrb	r3, [r7, #11]
 8002964:	7313      	strb	r3, [r2, #12]
	csma_ca_order.fct_ptr_access_medium = fct_ptr_access_medium;
 8002966:	4a2e      	ldr	r2, [pc, #184]	; (8002a20 <rf24_csma_ca_access_medium+0xd8>)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6113      	str	r3, [r2, #16]

	// 1)___________________________________________________________________________________________
	// Wait a DIFS

	rf24_worker_attach_wait(wait_difs, T_DIFS_US);
 800296c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002970:	2001      	movs	r0, #1
 8002972:	f002 fb79 	bl	8005068 <rf24_worker_attach_wait>

	// 2)___________________________________________________________________________________________
	// Generate & wait random back-off

	csma_ca_order.t_random_backoff_us = rf24_csma_ca_compute_random_backoff(CONTENTION_WINDOW);
 8002976:	2010      	movs	r0, #16
 8002978:	f7ff ffca 	bl	8002910 <rf24_csma_ca_compute_random_backoff>
 800297c:	4602      	mov	r2, r0
 800297e:	4b28      	ldr	r3, [pc, #160]	; (8002a20 <rf24_csma_ca_access_medium+0xd8>)
 8002980:	605a      	str	r2, [r3, #4]

	struct rf24_task *task = rf24_worker_build_task(wait_random_backoff, 1, csma_ca_order.t_random_backoff_us, false);
 8002982:	4b27      	ldr	r3, [pc, #156]	; (8002a20 <rf24_csma_ca_access_medium+0xd8>)
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	2300      	movs	r3, #0
 8002988:	2101      	movs	r1, #1
 800298a:	2004      	movs	r0, #4
 800298c:	f002 fbb2 	bl	80050f4 <rf24_worker_build_task>
 8002990:	6178      	str	r0, [r7, #20]
	rf24_worker_attach(task, rf24_csma_ca_random_backoff_expired);
 8002992:	4924      	ldr	r1, [pc, #144]	; (8002a24 <rf24_csma_ca_access_medium+0xdc>)
 8002994:	6978      	ldr	r0, [r7, #20]
 8002996:	f002 fb8f 	bl	80050b8 <rf24_worker_attach>

	// only send RTS in case of a directed (UNICAST or MULTICAST) CMSA/CA access (to a receiver node)
	switch(csma_ca_order.transmission->communication_type)
 800299a:	4b21      	ldr	r3, [pc, #132]	; (8002a20 <rf24_csma_ca_access_medium+0xd8>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	789b      	ldrb	r3, [r3, #2]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	db1c      	blt.n	80029de <rf24_csma_ca_access_medium+0x96>
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	dd02      	ble.n	80029ae <rf24_csma_ca_access_medium+0x66>
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d01a      	beq.n	80029e2 <rf24_csma_ca_access_medium+0x9a>
		}
		case BROADCAST:
		{
			break;
		};
		default: break;
 80029ac:	e017      	b.n	80029de <rf24_csma_ca_access_medium+0x96>
			struct rf24_task *task = rf24_worker_build_task(send_rts, 1, T_SIFS_US, false);
 80029ae:	2300      	movs	r3, #0
 80029b0:	22c8      	movs	r2, #200	; 0xc8
 80029b2:	2101      	movs	r1, #1
 80029b4:	2005      	movs	r0, #5
 80029b6:	f002 fb9d 	bl	80050f4 <rf24_worker_build_task>
 80029ba:	6138      	str	r0, [r7, #16]
			rf24_worker_attach(task, rf24_csma_ca_send_rts);
 80029bc:	491a      	ldr	r1, [pc, #104]	; (8002a28 <rf24_csma_ca_access_medium+0xe0>)
 80029be:	6938      	ldr	r0, [r7, #16]
 80029c0:	f002 fb7a 	bl	80050b8 <rf24_worker_attach>
			task = rf24_worker_build_task(wait_for_cts, 1, T_CTS_TIMEOUT_US, false);
 80029c4:	2300      	movs	r3, #0
 80029c6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80029ca:	2101      	movs	r1, #1
 80029cc:	2008      	movs	r0, #8
 80029ce:	f002 fb91 	bl	80050f4 <rf24_worker_build_task>
 80029d2:	6138      	str	r0, [r7, #16]
			rf24_worker_attach(task, rf24_csma_ca_cts_timeout);
 80029d4:	4915      	ldr	r1, [pc, #84]	; (8002a2c <rf24_csma_ca_access_medium+0xe4>)
 80029d6:	6938      	ldr	r0, [r7, #16]
 80029d8:	f002 fb6e 	bl	80050b8 <rf24_worker_attach>
			break;
 80029dc:	e002      	b.n	80029e4 <rf24_csma_ca_access_medium+0x9c>
		default: break;
 80029de:	bf00      	nop
 80029e0:	e000      	b.n	80029e4 <rf24_csma_ca_access_medium+0x9c>
			break;
 80029e2:	bf00      	nop
	}

	rf24_debug(	CSMA_CA, INFO, csma_ca_order.transmission->frame_subtype, VOID, &csma_ca_order.transmission->receiver,
 80029e4:	4b0e      	ldr	r3, [pc, #56]	; (8002a20 <rf24_csma_ca_access_medium+0xd8>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	791c      	ldrb	r4, [r3, #4]
 80029ea:	4b0d      	ldr	r3, [pc, #52]	; (8002a20 <rf24_csma_ca_access_medium+0xd8>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	3305      	adds	r3, #5
 80029f0:	7afa      	ldrb	r2, [r7, #11]
 80029f2:	3201      	adds	r2, #1
				"get access to medium (backoff: %dms)\n", rts_transmits+1, csma_ca_order.t_random_backoff_us/1000);
 80029f4:	490a      	ldr	r1, [pc, #40]	; (8002a20 <rf24_csma_ca_access_medium+0xd8>)
 80029f6:	6849      	ldr	r1, [r1, #4]
	rf24_debug(	CSMA_CA, INFO, csma_ca_order.transmission->frame_subtype, VOID, &csma_ca_order.transmission->receiver,
 80029f8:	480d      	ldr	r0, [pc, #52]	; (8002a30 <rf24_csma_ca_access_medium+0xe8>)
 80029fa:	fba0 0101 	umull	r0, r1, r0, r1
 80029fe:	0989      	lsrs	r1, r1, #6
 8002a00:	9103      	str	r1, [sp, #12]
 8002a02:	9202      	str	r2, [sp, #8]
 8002a04:	4a0b      	ldr	r2, [pc, #44]	; (8002a34 <rf24_csma_ca_access_medium+0xec>)
 8002a06:	9201      	str	r2, [sp, #4]
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	4622      	mov	r2, r4
 8002a0e:	2106      	movs	r1, #6
 8002a10:	2003      	movs	r0, #3
 8002a12:	f7fe fbf9 	bl	8001208 <rf24_debug>
}
 8002a16:	bf00      	nop
 8002a18:	371c      	adds	r7, #28
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd90      	pop	{r4, r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	2000079c 	.word	0x2000079c
 8002a24:	08002855 	.word	0x08002855
 8002a28:	08002651 	.word	0x08002651
 8002a2c:	0800287d 	.word	0x0800287d
 8002a30:	10624dd3 	.word	0x10624dd3
 8002a34:	08008728 	.word	0x08008728

08002a38 <rf24_mac_get_blacklist>:
// Function declarations
// Interrupt service routines / callback functions


rf24_mac_addr* rf24_mac_get_blacklist()
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
	return blacklist;
 8002a3c:	4b02      	ldr	r3, [pc, #8]	; (8002a48 <rf24_mac_get_blacklist+0x10>)
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bc80      	pop	{r7}
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	20000804 	.word	0x20000804

08002a4c <rf24_mac_get_blacklist_length>:

uint8_t rf24_mac_get_blacklist_length()
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
	return blacklist_length;
 8002a50:	4b02      	ldr	r3, [pc, #8]	; (8002a5c <rf24_mac_get_blacklist_length+0x10>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr
 8002a5c:	20000688 	.word	0x20000688

08002a60 <rf24_mac_blacklist_add>:

void rf24_mac_blacklist_add(rf24_mac_addr *mac_addr)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
	if(blacklist_length < 5)
 8002a68:	4b12      	ldr	r3, [pc, #72]	; (8002ab4 <rf24_mac_blacklist_add+0x54>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	2b04      	cmp	r3, #4
 8002a6e:	d81d      	bhi.n	8002aac <rf24_mac_blacklist_add+0x4c>
	{
		blacklist[blacklist_length++] = *mac_addr;
 8002a70:	4b10      	ldr	r3, [pc, #64]	; (8002ab4 <rf24_mac_blacklist_add+0x54>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	1c5a      	adds	r2, r3, #1
 8002a76:	b2d1      	uxtb	r1, r2
 8002a78:	4a0e      	ldr	r2, [pc, #56]	; (8002ab4 <rf24_mac_blacklist_add+0x54>)
 8002a7a:	7011      	strb	r1, [r2, #0]
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4a0e      	ldr	r2, [pc, #56]	; (8002ab8 <rf24_mac_blacklist_add+0x58>)
 8002a80:	460b      	mov	r3, r1
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	440b      	add	r3, r1
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	4413      	add	r3, r2
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6811      	ldr	r1, [r2, #0]
 8002a8e:	6019      	str	r1, [r3, #0]
 8002a90:	8892      	ldrh	r2, [r2, #4]
 8002a92:	809a      	strh	r2, [r3, #4]

		rf24_printf("%-10 %s has been blacklisted\n", "network", decimal_to_string(mac_addr->bytes, 6, ':'));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	223a      	movs	r2, #58	; 0x3a
 8002a98:	2106      	movs	r1, #6
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fe fd52 	bl	8001544 <decimal_to_string>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	4905      	ldr	r1, [pc, #20]	; (8002abc <rf24_mac_blacklist_add+0x5c>)
 8002aa6:	4806      	ldr	r0, [pc, #24]	; (8002ac0 <rf24_mac_blacklist_add+0x60>)
 8002aa8:	f7fe fc5e 	bl	8001368 <rf24_printf>
	}
}
 8002aac:	bf00      	nop
 8002aae:	3708      	adds	r7, #8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	20000688 	.word	0x20000688
 8002ab8:	20000804 	.word	0x20000804
 8002abc:	08008b50 	.word	0x08008b50
 8002ac0:	08008b58 	.word	0x08008b58

08002ac4 <rf24_mac_frame_received_handler>:

void rf24_mac_frame_received_handler(rf24_mac_frame *mac_frame)
{
 8002ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ac6:	b08d      	sub	sp, #52	; 0x34
 8002ac8:	af06      	add	r7, sp, #24
 8002aca:	6078      	str	r0, [r7, #4]
	bool addressed_to_me = rf24_mac_addr_equal(&mac_frame->receiver, &mac_addr);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3304      	adds	r3, #4
 8002ad0:	49a5      	ldr	r1, [pc, #660]	; (8002d68 <rf24_mac_frame_received_handler+0x2a4>)
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f000 fa36 	bl	8002f44 <rf24_mac_addr_equal>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	75fb      	strb	r3, [r7, #23]

	if(!addressed_to_me) return;
 8002adc:	7dfb      	ldrb	r3, [r7, #23]
 8002ade:	f083 0301 	eor.w	r3, r3, #1
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f040 8139 	bne.w	8002d5c <rf24_mac_frame_received_handler+0x298>

	switch(mac_frame->frame_control.type)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	3b02      	subs	r3, #2
 8002af6:	2b03      	cmp	r3, #3
 8002af8:	f200 8133 	bhi.w	8002d62 <rf24_mac_frame_received_handler+0x29e>
 8002afc:	a201      	add	r2, pc, #4	; (adr r2, 8002b04 <rf24_mac_frame_received_handler+0x40>)
 8002afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b02:	bf00      	nop
 8002b04:	08002c9f 	.word	0x08002c9f
 8002b08:	08002c2b 	.word	0x08002c2b
 8002b0c:	08002bd5 	.word	0x08002bd5
 8002b10:	08002b15 	.word	0x08002b15
	{
		/* PING FRAME TREATMENT */
		case PING:
		{
			switch(mac_frame->frame_control.subtype)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	781a      	ldrb	r2, [r3, #0]
 8002b18:	0992      	lsrs	r2, r2, #6
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	785b      	ldrb	r3, [r3, #1]
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4313      	orrs	r3, r2
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b09      	cmp	r3, #9
 8002b2a:	d002      	beq.n	8002b32 <rf24_mac_frame_received_handler+0x6e>
 8002b2c:	2b0a      	cmp	r3, #10
 8002b2e:	d030      	beq.n	8002b92 <rf24_mac_frame_received_handler+0xce>
						rf24_mac_process_ping();
					}
					break;
				}
			}
			break;
 8002b30:	e117      	b.n	8002d62 <rf24_mac_frame_received_handler+0x29e>
					struct rf24_task *task = rf24_worker_build_task(send_ping, 1, 0, true);
 8002b32:	2301      	movs	r3, #1
 8002b34:	2200      	movs	r2, #0
 8002b36:	2101      	movs	r1, #1
 8002b38:	200d      	movs	r0, #13
 8002b3a:	f002 fadb 	bl	80050f4 <rf24_worker_build_task>
 8002b3e:	6138      	str	r0, [r7, #16]
					task->data.mac.mac_frame.id = mac_frame->id;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	7c1a      	ldrb	r2, [r3, #16]
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	771a      	strb	r2, [r3, #28]
					task->data.mac.mac_frame.frame_control.type = PING;
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	7b13      	ldrb	r3, [r2, #12]
 8002b4c:	2105      	movs	r1, #5
 8002b4e:	f361 0385 	bfi	r3, r1, #2, #4
 8002b52:	7313      	strb	r3, [r2, #12]
					task->data.mac.mac_frame.frame_control.subtype = PING_REPLY;
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	8993      	ldrh	r3, [r2, #12]
 8002b58:	210a      	movs	r1, #10
 8002b5a:	f361 1389 	bfi	r3, r1, #6, #4
 8002b5e:	8193      	strh	r3, [r2, #12]
					task->data.mac.mac_frame.transmitter = *rf24_mac_get_address();
 8002b60:	f000 fa50 	bl	8003004 <rf24_mac_get_address>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	3316      	adds	r3, #22
 8002b6a:	6811      	ldr	r1, [r2, #0]
 8002b6c:	6019      	str	r1, [r3, #0]
 8002b6e:	8892      	ldrh	r2, [r2, #4]
 8002b70:	809a      	strh	r2, [r3, #4]
					task->data.mac.mac_frame.receiver = mac_frame->transmitter;
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	3310      	adds	r3, #16
 8002b78:	320a      	adds	r2, #10
 8002b7a:	6810      	ldr	r0, [r2, #0]
 8002b7c:	6018      	str	r0, [r3, #0]
 8002b7e:	8892      	ldrh	r2, [r2, #4]
 8002b80:	809a      	strh	r2, [r3, #4]
					task->data.mac.mac_frame.duration = 0;
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	2200      	movs	r2, #0
 8002b86:	81da      	strh	r2, [r3, #14]
					rf24_worker_push(task, rf24_mac_send_mac_frame);
 8002b88:	4978      	ldr	r1, [pc, #480]	; (8002d6c <rf24_mac_frame_received_handler+0x2a8>)
 8002b8a:	6938      	ldr	r0, [r7, #16]
 8002b8c:	f002 faa3 	bl	80050d6 <rf24_worker_push>
					break;
 8002b90:	e01f      	b.n	8002bd2 <rf24_mac_frame_received_handler+0x10e>
					if(mac_frame->id == ping.requests->id)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	7c1a      	ldrb	r2, [r3, #16]
 8002b96:	4b76      	ldr	r3, [pc, #472]	; (8002d70 <rf24_mac_frame_received_handler+0x2ac>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d117      	bne.n	8002bd0 <rf24_mac_frame_received_handler+0x10c>
						ping.requests->state = REPLY_RECEIVED;
 8002ba0:	4b73      	ldr	r3, [pc, #460]	; (8002d70 <rf24_mac_frame_received_handler+0x2ac>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	705a      	strb	r2, [r3, #1]
						ping.requests->t_response_us = rf24_worker_stop_timer(stopwatch);
 8002ba8:	4b71      	ldr	r3, [pc, #452]	; (8002d70 <rf24_mac_frame_received_handler+0x2ac>)
 8002baa:	689c      	ldr	r4, [r3, #8]
 8002bac:	2000      	movs	r0, #0
 8002bae:	f002 fbb5 	bl	800531c <rf24_worker_stop_timer>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	6063      	str	r3, [r4, #4]
						rf24_printf("%-10s ping reply %d received after %d \n", "ping", ping.requests->id, ping.requests->t_response_us);
 8002bb6:	4b6e      	ldr	r3, [pc, #440]	; (8002d70 <rf24_mac_frame_received_handler+0x2ac>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4b6c      	ldr	r3, [pc, #432]	; (8002d70 <rf24_mac_frame_received_handler+0x2ac>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	496b      	ldr	r1, [pc, #428]	; (8002d74 <rf24_mac_frame_received_handler+0x2b0>)
 8002bc6:	486c      	ldr	r0, [pc, #432]	; (8002d78 <rf24_mac_frame_received_handler+0x2b4>)
 8002bc8:	f7fe fbce 	bl	8001368 <rf24_printf>
						rf24_mac_process_ping();
 8002bcc:	f001 f97e 	bl	8003ecc <rf24_mac_process_ping>
					break;
 8002bd0:	bf00      	nop
			break;
 8002bd2:	e0c6      	b.n	8002d62 <rf24_mac_frame_received_handler+0x29e>
		}

		case TOPOLOGY:
		{
			switch(mac_frame->frame_control.subtype)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	781a      	ldrb	r2, [r3, #0]
 8002bd8:	0992      	lsrs	r2, r2, #6
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	785b      	ldrb	r3, [r3, #1]
 8002bde:	f003 0303 	and.w	r3, r3, #3
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	4313      	orrs	r3, r2
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d000      	beq.n	8002bee <rf24_mac_frame_received_handler+0x12a>
					rf24_mac_send_ack(mac_frame);

					break;
				}
			}
			break;
 8002bec:	e0b9      	b.n	8002d62 <rf24_mac_frame_received_handler+0x29e>
					rf24_debug(	MAC, RECEIVE, mac_transmission.frame_subtype, VOID, &mac_transmission.receiver,
 8002bee:	4b63      	ldr	r3, [pc, #396]	; (8002d7c <rf24_mac_frame_received_handler+0x2b8>)
 8002bf0:	791a      	ldrb	r2, [r3, #4]
								"(%d/%d)\n", mac_frame->id, mac_transmission.n_frames);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	7c1b      	ldrb	r3, [r3, #16]
					rf24_debug(	MAC, RECEIVE, mac_transmission.frame_subtype, VOID, &mac_transmission.receiver,
 8002bf6:	4619      	mov	r1, r3
								"(%d/%d)\n", mac_frame->id, mac_transmission.n_frames);
 8002bf8:	4b60      	ldr	r3, [pc, #384]	; (8002d7c <rf24_mac_frame_received_handler+0x2b8>)
 8002bfa:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
					rf24_debug(	MAC, RECEIVE, mac_transmission.frame_subtype, VOID, &mac_transmission.receiver,
 8002bfe:	9303      	str	r3, [sp, #12]
 8002c00:	9102      	str	r1, [sp, #8]
 8002c02:	4b5f      	ldr	r3, [pc, #380]	; (8002d80 <rf24_mac_frame_received_handler+0x2bc>)
 8002c04:	9301      	str	r3, [sp, #4]
 8002c06:	4b5f      	ldr	r3, [pc, #380]	; (8002d84 <rf24_mac_frame_received_handler+0x2c0>)
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	2102      	movs	r1, #2
 8002c0e:	2002      	movs	r0, #2
 8002c10:	f7fe fafa 	bl	8001208 <rf24_debug>
					rf24_mac_frame_to_payload(mac_frame, &mac_transmission);
 8002c14:	4959      	ldr	r1, [pc, #356]	; (8002d7c <rf24_mac_frame_received_handler+0x2b8>)
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 fc40 	bl	800349c <rf24_mac_frame_to_payload>
					rf24_mac_process_reception();
 8002c1c:	f000 fa7a 	bl	8003114 <rf24_mac_process_reception>
					rf24_mac_send_ack(mac_frame);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 fb1b 	bl	800325c <rf24_mac_send_ack>
					break;
 8002c26:	bf00      	nop
			break;
 8002c28:	e09b      	b.n	8002d62 <rf24_mac_frame_received_handler+0x29e>
		}
		case DATA:
		{
			rf24_debug(	MAC, RECEIVE, mac_transmission.frame_subtype, VOID, &mac_transmission.receiver,
 8002c2a:	4b54      	ldr	r3, [pc, #336]	; (8002d7c <rf24_mac_frame_received_handler+0x2b8>)
 8002c2c:	791c      	ldrb	r4, [r3, #4]
						"(%d/%d) \"%s\"\n", mac_frame->id, mac_transmission.n_frames,
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	7c1b      	ldrb	r3, [r3, #16]
			rf24_debug(	MAC, RECEIVE, mac_transmission.frame_subtype, VOID, &mac_transmission.receiver,
 8002c32:	461d      	mov	r5, r3
						"(%d/%d) \"%s\"\n", mac_frame->id, mac_transmission.n_frames,
 8002c34:	4b51      	ldr	r3, [pc, #324]	; (8002d7c <rf24_mac_frame_received_handler+0x2b8>)
 8002c36:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
			rf24_debug(	MAC, RECEIVE, mac_transmission.frame_subtype, VOID, &mac_transmission.receiver,
 8002c3a:	461e      	mov	r6, r3
						decimal_to_string(mac_frame->data.payload, mac_frame->data.header.length, ' '));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f103 0012 	add.w	r0, r3, #18
			rf24_debug(	MAC, RECEIVE, mac_transmission.frame_subtype, VOID, &mac_transmission.receiver,
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	7c5b      	ldrb	r3, [r3, #17]
 8002c46:	2220      	movs	r2, #32
 8002c48:	4619      	mov	r1, r3
 8002c4a:	f7fe fc7b 	bl	8001544 <decimal_to_string>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	9304      	str	r3, [sp, #16]
 8002c52:	9603      	str	r6, [sp, #12]
 8002c54:	9502      	str	r5, [sp, #8]
 8002c56:	4b4c      	ldr	r3, [pc, #304]	; (8002d88 <rf24_mac_frame_received_handler+0x2c4>)
 8002c58:	9301      	str	r3, [sp, #4]
 8002c5a:	4b4a      	ldr	r3, [pc, #296]	; (8002d84 <rf24_mac_frame_received_handler+0x2c0>)
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	2300      	movs	r3, #0
 8002c60:	4622      	mov	r2, r4
 8002c62:	2102      	movs	r1, #2
 8002c64:	2002      	movs	r0, #2
 8002c66:	f7fe facf 	bl	8001208 <rf24_debug>

			// Validate if MAC frame is part of an active transmission
			bool validation = rf24_mac_addr_equal(&mac_frame->transmitter, &rf24_mac_get_transmission()->transmitter);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f103 040a 	add.w	r4, r3, #10
 8002c70:	f000 f9be 	bl	8002ff0 <rf24_mac_get_transmission>
 8002c74:	4603      	mov	r3, r0
 8002c76:	330b      	adds	r3, #11
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4620      	mov	r0, r4
 8002c7c:	f000 f962 	bl	8002f44 <rf24_mac_addr_equal>
 8002c80:	4603      	mov	r3, r0
 8002c82:	73fb      	strb	r3, [r7, #15]

			if(validation)
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d005      	beq.n	8002c96 <rf24_mac_frame_received_handler+0x1d2>
			{
				// Attach payload
				rf24_mac_frame_to_payload(mac_frame, &mac_transmission);
 8002c8a:	493c      	ldr	r1, [pc, #240]	; (8002d7c <rf24_mac_frame_received_handler+0x2b8>)
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 fc05 	bl	800349c <rf24_mac_frame_to_payload>

				// Finalize reception if frame is last frame
				rf24_mac_process_reception();
 8002c92:	f000 fa3f 	bl	8003114 <rf24_mac_process_reception>
			}

			// Send ACK
			rf24_mac_send_ack(mac_frame);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 fae0 	bl	800325c <rf24_mac_send_ack>

			break;
 8002c9c:	e061      	b.n	8002d62 <rf24_mac_frame_received_handler+0x29e>
		}

		case CONTROL: switch(mac_frame->frame_control.subtype) case CONTROL_ACK:
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	781a      	ldrb	r2, [r3, #0]
 8002ca2:	0992      	lsrs	r2, r2, #6
 8002ca4:	b2d2      	uxtb	r2, r2
 8002ca6:	785b      	ldrb	r3, [r3, #1]
 8002ca8:	f003 0303 	and.w	r3, r3, #3
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b05      	cmp	r3, #5
 8002cb4:	d155      	bne.n	8002d62 <rf24_mac_frame_received_handler+0x29e>
		{
			if(addressed_to_me)
 8002cb6:	7dfb      	ldrb	r3, [r7, #23]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d051      	beq.n	8002d60 <rf24_mac_frame_received_handler+0x29c>
			{
				bool in_transmission = rf24_mac_get_transmission()->transmission_type == transmission;
 8002cbc:	f000 f998 	bl	8002ff0 <rf24_mac_get_transmission>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	785b      	ldrb	r3, [r3, #1]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	bf0c      	ite	eq
 8002cc8:	2301      	moveq	r3, #1
 8002cca:	2300      	movne	r3, #0
 8002ccc:	73bb      	strb	r3, [r7, #14]
				// ACK frame is from tranmission partner (receiver)?
				bool from_receiver = rf24_mac_addr_equal(&mac_frame->transmitter, &rf24_mac_get_transmission()->receiver);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f103 040a 	add.w	r4, r3, #10
 8002cd4:	f000 f98c 	bl	8002ff0 <rf24_mac_get_transmission>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	3305      	adds	r3, #5
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4620      	mov	r0, r4
 8002ce0:	f000 f930 	bl	8002f44 <rf24_mac_addr_equal>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	737b      	strb	r3, [r7, #13]
				// ACK frame ID matches ID of mac frame preciously sent
				bool id_match = mac_frame->ack.id == rf24_mac_get_transmission()->mac_frame.id;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	7c9c      	ldrb	r4, [r3, #18]
 8002cec:	f000 f980 	bl	8002ff0 <rf24_mac_get_transmission>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002cf6:	429c      	cmp	r4, r3
 8002cf8:	bf0c      	ite	eq
 8002cfa:	2301      	moveq	r3, #1
 8002cfc:	2300      	movne	r3, #0
 8002cfe:	733b      	strb	r3, [r7, #12]

				if(in_transmission && from_receiver && id_match)
 8002d00:	7bbb      	ldrb	r3, [r7, #14]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d02c      	beq.n	8002d60 <rf24_mac_frame_received_handler+0x29c>
 8002d06:	7b7b      	ldrb	r3, [r7, #13]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d029      	beq.n	8002d60 <rf24_mac_frame_received_handler+0x29c>
 8002d0c:	7b3b      	ldrb	r3, [r7, #12]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d026      	beq.n	8002d60 <rf24_mac_frame_received_handler+0x29c>
				{
					rf24_debug(	MAC, RECEIVE, CONTROL_ACK, mac_frame->ack.subtype, &mac_frame->transmitter,
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	7c5b      	ldrb	r3, [r3, #17]
 8002d16:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	330a      	adds	r3, #10
								"(%d/%d)\n", mac_frame->ack.id, mac_transmission.n_frames);
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	7c92      	ldrb	r2, [r2, #18]
					rf24_debug(	MAC, RECEIVE, CONTROL_ACK, mac_frame->ack.subtype, &mac_frame->transmitter,
 8002d26:	4611      	mov	r1, r2
								"(%d/%d)\n", mac_frame->ack.id, mac_transmission.n_frames);
 8002d28:	4a14      	ldr	r2, [pc, #80]	; (8002d7c <rf24_mac_frame_received_handler+0x2b8>)
 8002d2a:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
					rf24_debug(	MAC, RECEIVE, CONTROL_ACK, mac_frame->ack.subtype, &mac_frame->transmitter,
 8002d2e:	9203      	str	r2, [sp, #12]
 8002d30:	9102      	str	r1, [sp, #8]
 8002d32:	4a13      	ldr	r2, [pc, #76]	; (8002d80 <rf24_mac_frame_received_handler+0x2bc>)
 8002d34:	9201      	str	r2, [sp, #4]
 8002d36:	9300      	str	r3, [sp, #0]
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2205      	movs	r2, #5
 8002d3c:	2102      	movs	r1, #2
 8002d3e:	2002      	movs	r0, #2
 8002d40:	f7fe fa62 	bl	8001208 <rf24_debug>

					// Pop "wait_for_ack" task from task stack
					if(rf24_worker_current_task()->task == wait_for_ack) rf24_worker_pop_task();
 8002d44:	f002 fa4e 	bl	80051e4 <rf24_worker_current_task>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2b0a      	cmp	r3, #10
 8002d4e:	d101      	bne.n	8002d54 <rf24_mac_frame_received_handler+0x290>
 8002d50:	f002 fa52 	bl	80051f8 <rf24_worker_pop_task>

					// Send next data frame
					rf24_mac_process_transmission();
 8002d54:	f000 f97e 	bl	8003054 <rf24_mac_process_transmission>
				}
			}

			break;
 8002d58:	bf00      	nop
 8002d5a:	e001      	b.n	8002d60 <rf24_mac_frame_received_handler+0x29c>
	if(!addressed_to_me) return;
 8002d5c:	bf00      	nop
 8002d5e:	e000      	b.n	8002d62 <rf24_mac_frame_received_handler+0x29e>
			break;
 8002d60:	bf00      	nop
		}
	}
}
 8002d62:	371c      	adds	r7, #28
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d68:	200007c0 	.word	0x200007c0
 8002d6c:	08003179 	.word	0x08003179
 8002d70:	200007b4 	.word	0x200007b4
 8002d74:	08008b78 	.word	0x08008b78
 8002d78:	08008b80 	.word	0x08008b80
 8002d7c:	200007c8 	.word	0x200007c8
 8002d80:	08008ba8 	.word	0x08008ba8
 8002d84:	200007cd 	.word	0x200007cd
 8002d88:	08008bb4 	.word	0x08008bb4

08002d8c <rf24_mac_reception_successfull>:

void rf24_mac_reception_successfull()
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
	switch(mac_transmission.frame_subtype)
 8002d90:	4b08      	ldr	r3, [pc, #32]	; (8002db4 <rf24_mac_reception_successfull+0x28>)
 8002d92:	791b      	ldrb	r3, [r3, #4]
 8002d94:	2b06      	cmp	r3, #6
 8002d96:	d007      	beq.n	8002da8 <rf24_mac_reception_successfull+0x1c>
 8002d98:	2b07      	cmp	r3, #7
 8002d9a:	d002      	beq.n	8002da2 <rf24_mac_reception_successfull+0x16>
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d000      	beq.n	8002da2 <rf24_mac_reception_successfull+0x16>
		case TOPOLOGY_REPLY_MESSAGE:
			rf24_network_reception_successfull_handler(); break;
		case DATA_DATA:
			rf24_mac_print_payload(&mac_transmission); break;
		default:
			break;
 8002da0:	e006      	b.n	8002db0 <rf24_mac_reception_successfull+0x24>
			rf24_network_reception_successfull_handler(); break;
 8002da2:	f001 fad5 	bl	8004350 <rf24_network_reception_successfull_handler>
 8002da6:	e003      	b.n	8002db0 <rf24_mac_reception_successfull+0x24>
			rf24_mac_print_payload(&mac_transmission); break;
 8002da8:	4802      	ldr	r0, [pc, #8]	; (8002db4 <rf24_mac_reception_successfull+0x28>)
 8002daa:	f000 fd7f 	bl	80038ac <rf24_mac_print_payload>
 8002dae:	bf00      	nop
	}
}
 8002db0:	bf00      	nop
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	200007c8 	.word	0x200007c8

08002db8 <rf24_mac_transmission_successfull>:

void rf24_mac_transmission_successfull()
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
	switch(mac_transmission.frame_subtype)
 8002dbc:	4b07      	ldr	r3, [pc, #28]	; (8002ddc <rf24_mac_transmission_successfull+0x24>)
 8002dbe:	791b      	ldrb	r3, [r3, #4]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	db07      	blt.n	8002dd4 <rf24_mac_transmission_successfull+0x1c>
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	dd02      	ble.n	8002dce <rf24_mac_transmission_successfull+0x16>
 8002dc8:	2b07      	cmp	r3, #7
 8002dca:	d000      	beq.n	8002dce <rf24_mac_transmission_successfull+0x16>
		case DATA_TOPOLOGY:
		case TOPOLOGY_REPLY_MESSAGE:
		case TOPOLOGY_NEIGHBOR_UPDATE_MESSAGE:
			rf24_network_transmission_successfull_handler(); break;
		default:
			break;
 8002dcc:	e002      	b.n	8002dd4 <rf24_mac_transmission_successfull+0x1c>
			rf24_network_transmission_successfull_handler(); break;
 8002dce:	f001 fb1b 	bl	8004408 <rf24_network_transmission_successfull_handler>
 8002dd2:	e000      	b.n	8002dd6 <rf24_mac_transmission_successfull+0x1e>
			break;
 8002dd4:	bf00      	nop
	}
}
 8002dd6:	bf00      	nop
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	200007c8 	.word	0x200007c8

08002de0 <rf24_mac_ack_timeout>:

void rf24_mac_ack_timeout()
{
 8002de0:	b5b0      	push	{r4, r5, r7, lr}
 8002de2:	b088      	sub	sp, #32
 8002de4:	af06      	add	r7, sp, #24
	// Only retransmit frame if attempts are lower than maximum retransmits
	if(mac_transmission.attempts < N_MAX_RETRANSMITS)
 8002de6:	4b33      	ldr	r3, [pc, #204]	; (8002eb4 <rf24_mac_ack_timeout+0xd4>)
 8002de8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002dec:	2b0e      	cmp	r3, #14
 8002dee:	d849      	bhi.n	8002e84 <rf24_mac_ack_timeout+0xa4>
	{
		// Build a new "send_mac_frame" task
		struct rf24_task *task = rf24_worker_build_task(send_mac_frame, 1, T_SIFS_US, false);
 8002df0:	2300      	movs	r3, #0
 8002df2:	22c8      	movs	r2, #200	; 0xc8
 8002df4:	2101      	movs	r1, #1
 8002df6:	2009      	movs	r0, #9
 8002df8:	f002 f97c 	bl	80050f4 <rf24_worker_build_task>
 8002dfc:	6078      	str	r0, [r7, #4]

		// Attach mac_frame to task
		task->data.mac.mac_frame = mac_transmission.mac_frame;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a2c      	ldr	r2, [pc, #176]	; (8002eb4 <rf24_mac_ack_timeout+0xd4>)
 8002e02:	f103 040c 	add.w	r4, r3, #12
 8002e06:	f102 0511 	add.w	r5, r2, #17
 8002e0a:	6828      	ldr	r0, [r5, #0]
 8002e0c:	6869      	ldr	r1, [r5, #4]
 8002e0e:	68aa      	ldr	r2, [r5, #8]
 8002e10:	68eb      	ldr	r3, [r5, #12]
 8002e12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e14:	6928      	ldr	r0, [r5, #16]
 8002e16:	6969      	ldr	r1, [r5, #20]
 8002e18:	69aa      	ldr	r2, [r5, #24]
 8002e1a:	c407      	stmia	r4!, {r0, r1, r2}
 8002e1c:	8bab      	ldrh	r3, [r5, #28]
 8002e1e:	7faa      	ldrb	r2, [r5, #30]
 8002e20:	8023      	strh	r3, [r4, #0]
 8002e22:	4613      	mov	r3, r2
 8002e24:	70a3      	strb	r3, [r4, #2]

		// Attach function rf24_mac_send_frame to task
		rf24_worker_attach(task, rf24_mac_send_mac_frame);
 8002e26:	4924      	ldr	r1, [pc, #144]	; (8002eb8 <rf24_mac_ack_timeout+0xd8>)
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f002 f945 	bl	80050b8 <rf24_worker_attach>

		// Create a "wait_for_ack" task
		task = rf24_worker_build_task(wait_for_ack, 1, T_ACK_TIMEOUT_US, false);
 8002e2e:	2300      	movs	r3, #0
 8002e30:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002e34:	2101      	movs	r1, #1
 8002e36:	200a      	movs	r0, #10
 8002e38:	f002 f95c 	bl	80050f4 <rf24_worker_build_task>
 8002e3c:	6078      	str	r0, [r7, #4]
		rf24_worker_attach(task, rf24_mac_ack_timeout);
 8002e3e:	491f      	ldr	r1, [pc, #124]	; (8002ebc <rf24_mac_ack_timeout+0xdc>)
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f002 f939 	bl	80050b8 <rf24_worker_attach>

		// Notice one more attempt
		mac_transmission.attempts++;
 8002e46:	4b1b      	ldr	r3, [pc, #108]	; (8002eb4 <rf24_mac_ack_timeout+0xd4>)
 8002e48:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	4b18      	ldr	r3, [pc, #96]	; (8002eb4 <rf24_mac_ack_timeout+0xd4>)
 8002e52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

		rf24_debug(MAC, TIMEOUT, CONTROL_ACK, VOID, NULL, "retransmit frame with id %d (%d/%d)\n", mac_transmission.frame_count, mac_transmission.attempts, N_MAX_RETRANSMITS);
 8002e56:	4b17      	ldr	r3, [pc, #92]	; (8002eb4 <rf24_mac_ack_timeout+0xd4>)
 8002e58:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	4b15      	ldr	r3, [pc, #84]	; (8002eb4 <rf24_mac_ack_timeout+0xd4>)
 8002e60:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e64:	4619      	mov	r1, r3
 8002e66:	230f      	movs	r3, #15
 8002e68:	9304      	str	r3, [sp, #16]
 8002e6a:	9103      	str	r1, [sp, #12]
 8002e6c:	9202      	str	r2, [sp, #8]
 8002e6e:	4b14      	ldr	r3, [pc, #80]	; (8002ec0 <rf24_mac_ack_timeout+0xe0>)
 8002e70:	9301      	str	r3, [sp, #4]
 8002e72:	2300      	movs	r3, #0
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	2300      	movs	r3, #0
 8002e78:	2205      	movs	r2, #5
 8002e7a:	2105      	movs	r1, #5
 8002e7c:	2002      	movs	r0, #2
 8002e7e:	f7fe f9c3 	bl	8001208 <rf24_debug>
 8002e82:	e014      	b.n	8002eae <rf24_mac_ack_timeout+0xce>
	}
	else
	{
		rf24_debug(MAC, TIMEOUT, CONTROL_ACK, VOID, NULL, "max retries reached, transmission cancelled\n");
 8002e84:	4b0f      	ldr	r3, [pc, #60]	; (8002ec4 <rf24_mac_ack_timeout+0xe4>)
 8002e86:	9301      	str	r3, [sp, #4]
 8002e88:	2300      	movs	r3, #0
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	2205      	movs	r2, #5
 8002e90:	2105      	movs	r1, #5
 8002e92:	2002      	movs	r0, #2
 8002e94:	f7fe f9b8 	bl	8001208 <rf24_debug>

		// Set transmission state to CANCELLED
		rf24_mac_set_transmission_state(CANCELLED);
 8002e98:	2004      	movs	r0, #4
 8002e9a:	f000 f889 	bl	8002fb0 <rf24_mac_set_transmission_state>

		// Call notifications
		switch(mac_transmission.frame_type)
 8002e9e:	4b05      	ldr	r3, [pc, #20]	; (8002eb4 <rf24_mac_ack_timeout+0xd4>)
 8002ea0:	78db      	ldrb	r3, [r3, #3]
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d000      	beq.n	8002ea8 <rf24_mac_ack_timeout+0xc8>
		{
			case TOPOLOGY:
				rf24_network_transmission_failed_handler();
				return;
			default:
				break;
 8002ea6:	e002      	b.n	8002eae <rf24_mac_ack_timeout+0xce>
				rf24_network_transmission_failed_handler();
 8002ea8:	f001 fb02 	bl	80044b0 <rf24_network_transmission_failed_handler>
				return;
 8002eac:	bf00      	nop
		}
	}
}
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bdb0      	pop	{r4, r5, r7, pc}
 8002eb4:	200007c8 	.word	0x200007c8
 8002eb8:	08003179 	.word	0x08003179
 8002ebc:	08002de1 	.word	0x08002de1
 8002ec0:	08008bc4 	.word	0x08008bc4
 8002ec4:	08008bec 	.word	0x08008bec

08002ec8 <rf24_mac_init>:

// FUNCTIONS

void rf24_mac_init()
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
	// csma ca init
	rf24_cmsa_ca_init(rf24_mac_setup_reception);
 8002ecc:	4809      	ldr	r0, [pc, #36]	; (8002ef4 <rf24_mac_init+0x2c>)
 8002ece:	f7ff fb99 	bl	8002604 <rf24_cmsa_ca_init>

	// build mac adress from stm32 uuid
	rf24_mac_build_address();
 8002ed2:	f000 f819 	bl	8002f08 <rf24_mac_build_address>

	rf24_printf("%-10s %s %s\n", "mac", "MAC_ADDRESS", decimal_to_string(mac_addr.bytes, 6, ':'));
 8002ed6:	223a      	movs	r2, #58	; 0x3a
 8002ed8:	2106      	movs	r1, #6
 8002eda:	4807      	ldr	r0, [pc, #28]	; (8002ef8 <rf24_mac_init+0x30>)
 8002edc:	f7fe fb32 	bl	8001544 <decimal_to_string>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	4a06      	ldr	r2, [pc, #24]	; (8002efc <rf24_mac_init+0x34>)
 8002ee4:	4906      	ldr	r1, [pc, #24]	; (8002f00 <rf24_mac_init+0x38>)
 8002ee6:	4807      	ldr	r0, [pc, #28]	; (8002f04 <rf24_mac_init+0x3c>)
 8002ee8:	f7fe fa3e 	bl	8001368 <rf24_printf>

	rf24_mac_print_timings();
 8002eec:	f000 fd88 	bl	8003a00 <rf24_mac_print_timings>
	rf24_mac_blacklist_add(&mac_addr_142);
	//rf24_mac_blacklist_add(&mac_addr_226);
	//rf24_mac_blacklist_add(&mac_addr_238);
	//rf24_mac_blacklist_add(&mac_addr_126);
	rf24_mac_blacklist_add(&mac_addr_38);*/
}
 8002ef0:	bf00      	nop
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	08003515 	.word	0x08003515
 8002ef8:	200007c0 	.word	0x200007c0
 8002efc:	08008c1c 	.word	0x08008c1c
 8002f00:	08008c28 	.word	0x08008c28
 8002f04:	08008c2c 	.word	0x08008c2c

08002f08 <rf24_mac_build_address>:

void rf24_mac_build_address()
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
	// Read md5 hashed UUID from stm32 UC
	uint8_t* uuid_md5hashed = rf24_stm32f1xx_get_uuid_md5hashed();
 8002f0e:	f002 fb89 	bl	8005624 <rf24_stm32f1xx_get_uuid_md5hashed>
 8002f12:	6038      	str	r0, [r7, #0]

	// Take first 6 byte of md5 hashed UUID as MAC address
	for(int i=0; i<6; i++) mac_addr.bytes[i] = uuid_md5hashed[i];
 8002f14:	2300      	movs	r3, #0
 8002f16:	607b      	str	r3, [r7, #4]
 8002f18:	e00b      	b.n	8002f32 <rf24_mac_build_address+0x2a>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	4413      	add	r3, r2
 8002f20:	7819      	ldrb	r1, [r3, #0]
 8002f22:	4a07      	ldr	r2, [pc, #28]	; (8002f40 <rf24_mac_build_address+0x38>)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4413      	add	r3, r2
 8002f28:	460a      	mov	r2, r1
 8002f2a:	701a      	strb	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	607b      	str	r3, [r7, #4]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b05      	cmp	r3, #5
 8002f36:	ddf0      	ble.n	8002f1a <rf24_mac_build_address+0x12>
}
 8002f38:	bf00      	nop
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	200007c0 	.word	0x200007c0

08002f44 <rf24_mac_addr_equal>:

bool rf24_mac_addr_equal(rf24_mac_addr *mac_addr1, rf24_mac_addr *mac_addr2)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
	for(int i = 0; i <= 5; i++)
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	e00e      	b.n	8002f72 <rf24_mac_addr_equal+0x2e>
	{
		if (mac_addr1->bytes[i] != mac_addr2->bytes[i]) return false;
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	4413      	add	r3, r2
 8002f5a:	781a      	ldrb	r2, [r3, #0]
 8002f5c:	6839      	ldr	r1, [r7, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	440b      	add	r3, r1
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d001      	beq.n	8002f6c <rf24_mac_addr_equal+0x28>
 8002f68:	2300      	movs	r3, #0
 8002f6a:	e006      	b.n	8002f7a <rf24_mac_addr_equal+0x36>
	for(int i = 0; i <= 5; i++)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2b05      	cmp	r3, #5
 8002f76:	dded      	ble.n	8002f54 <rf24_mac_addr_equal+0x10>
	}

	return true;
 8002f78:	2301      	movs	r3, #1
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc80      	pop	{r7}
 8002f82:	4770      	bx	lr

08002f84 <rf24_mac_transmission_is_active>:

bool rf24_mac_transmission_is_active()
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
	return ( (mac_transmission.state == INITIALIZED) || (mac_transmission.state == ACTIVE) );
 8002f88:	4b08      	ldr	r3, [pc, #32]	; (8002fac <rf24_mac_transmission_is_active+0x28>)
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d003      	beq.n	8002f98 <rf24_mac_transmission_is_active+0x14>
 8002f90:	4b06      	ldr	r3, [pc, #24]	; (8002fac <rf24_mac_transmission_is_active+0x28>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d101      	bne.n	8002f9c <rf24_mac_transmission_is_active+0x18>
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e000      	b.n	8002f9e <rf24_mac_transmission_is_active+0x1a>
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	b2db      	uxtb	r3, r3
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr
 8002fac:	200007c8 	.word	0x200007c8

08002fb0 <rf24_mac_set_transmission_state>:
{
	return mac_transmission.state;
}

void rf24_mac_set_transmission_state(rf24_mac_transmission_state state)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	71fb      	strb	r3, [r7, #7]
	mac_transmission.state = state;
 8002fba:	4a0c      	ldr	r2, [pc, #48]	; (8002fec <rf24_mac_set_transmission_state+0x3c>)
 8002fbc:	79fb      	ldrb	r3, [r7, #7]
 8002fbe:	7013      	strb	r3, [r2, #0]

	if(mac_transmission.state == INITIALIZED)
 8002fc0:	4b0a      	ldr	r3, [pc, #40]	; (8002fec <rf24_mac_set_transmission_state+0x3c>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d102      	bne.n	8002fce <rf24_mac_set_transmission_state+0x1e>
		rf24_stm32f1xx_set_led_cycle(T_LED_CYCLE_TX_INITIALIZED_MS);
 8002fc8:	2064      	movs	r0, #100	; 0x64
 8002fca:	f002 fcdd 	bl	8005988 <rf24_stm32f1xx_set_led_cycle>

	if(mac_transmission.state == ACTIVE)
 8002fce:	4b07      	ldr	r3, [pc, #28]	; (8002fec <rf24_mac_set_transmission_state+0x3c>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d102      	bne.n	8002fdc <rf24_mac_set_transmission_state+0x2c>
		rf24_stm32f1xx_set_led_cycle(T_LED_CYCLE_TX_ACTIVE_MS);
 8002fd6:	2064      	movs	r0, #100	; 0x64
 8002fd8:	f002 fcd6 	bl	8005988 <rf24_stm32f1xx_set_led_cycle>

	rf24_stm32f1xx_set_led_cycle(T_LED_CYCLE_TX_IDLE_MS);
 8002fdc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002fe0:	f002 fcd2 	bl	8005988 <rf24_stm32f1xx_set_led_cycle>
}
 8002fe4:	bf00      	nop
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	200007c8 	.word	0x200007c8

08002ff0 <rf24_mac_get_transmission>:

rf24_mac_transmission* rf24_mac_get_transmission()
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
	return &mac_transmission;
 8002ff4:	4b02      	ldr	r3, [pc, #8]	; (8003000 <rf24_mac_get_transmission+0x10>)
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bc80      	pop	{r7}
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	200007c8 	.word	0x200007c8

08003004 <rf24_mac_get_address>:

rf24_mac_addr* rf24_mac_get_address()
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
	return &mac_addr;
 8003008:	4b02      	ldr	r3, [pc, #8]	; (8003014 <rf24_mac_get_address+0x10>)
}
 800300a:	4618      	mov	r0, r3
 800300c:	46bd      	mov	sp, r7
 800300e:	bc80      	pop	{r7}
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	200007c0 	.word	0x200007c0

08003018 <rf24_mac_get_broadcast_address>:

rf24_mac_addr* rf24_mac_get_broadcast_address()
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
	return &mac_addr_broadcast;
 800301c:	4b02      	ldr	r3, [pc, #8]	; (8003028 <rf24_mac_get_broadcast_address+0x10>)
}
 800301e:	4618      	mov	r0, r3
 8003020:	46bd      	mov	sp, r7
 8003022:	bc80      	pop	{r7}
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	200003d4 	.word	0x200003d4

0800302c <rf24_mac_frame_to_tx_data>:

void rf24_mac_frame_to_tx_data(rf24_mac_frame *mac_frame, rf24_module_tx_data *tx_data)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
	// Copy MAC frame (struct) into PAYLOAD (byte array)
	memcpy(tx_data->payload, (uint8_t*) mac_frame , 32);
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	2220      	movs	r2, #32
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	4618      	mov	r0, r3
 800303e:	f003 fe50 	bl	8006ce2 <memcpy>

	// PAYLOAD of nRF24L01 has a fixed 32 bit frame
	tx_data->length = 32;
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	2220      	movs	r2, #32
 8003046:	f883 2020 	strb.w	r2, [r3, #32]
}
 800304a:	bf00      	nop
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
	...

08003054 <rf24_mac_process_transmission>:
{
	mac_frame = (rf24_mac_frame*) rx_data->payload;
}

void rf24_mac_process_transmission()
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af04      	add	r7, sp, #16
	// Transmission has not transferred bytes left?
	if(mac_transmission.payload_index < mac_transmission.payload_length)
 800305a:	4b29      	ldr	r3, [pc, #164]	; (8003100 <rf24_mac_process_transmission+0xac>)
 800305c:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8003060:	4b27      	ldr	r3, [pc, #156]	; (8003100 <rf24_mac_process_transmission+0xac>)
 8003062:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003066:	429a      	cmp	r2, r3
 8003068:	d229      	bcs.n	80030be <rf24_mac_process_transmission+0x6a>
	{
		// Reset attempts (each frame can be retransmitted 15 times)
		mac_transmission.attempts = 0;
 800306a:	4b25      	ldr	r3, [pc, #148]	; (8003100 <rf24_mac_process_transmission+0xac>)
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

		// Increase frame count
		mac_transmission.frame_count++;
 8003072:	4b23      	ldr	r3, [pc, #140]	; (8003100 <rf24_mac_process_transmission+0xac>)
 8003074:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8003078:	3301      	adds	r3, #1
 800307a:	b2da      	uxtb	r2, r3
 800307c:	4b20      	ldr	r3, [pc, #128]	; (8003100 <rf24_mac_process_transmission+0xac>)
 800307e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

		// Create a "send mac frame" task, wait a SIFS before transmission
		struct rf24_task *task = rf24_worker_build_task(send_mac_frame, 1, T_SIFS_US, false);
 8003082:	2300      	movs	r3, #0
 8003084:	22c8      	movs	r2, #200	; 0xc8
 8003086:	2101      	movs	r1, #1
 8003088:	2009      	movs	r0, #9
 800308a:	f002 f833 	bl	80050f4 <rf24_worker_build_task>
 800308e:	6078      	str	r0, [r7, #4]

		// Assemble next data frame
		rf24_mac_payload_to_data_frame(&mac_transmission, &task->data.mac.mac_frame);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	330c      	adds	r3, #12
 8003094:	4619      	mov	r1, r3
 8003096:	481a      	ldr	r0, [pc, #104]	; (8003100 <rf24_mac_process_transmission+0xac>)
 8003098:	f000 f954 	bl	8003344 <rf24_mac_payload_to_data_frame>

		// Bind send mac frame function to task
		rf24_worker_attach(task, rf24_mac_send_mac_frame);
 800309c:	4919      	ldr	r1, [pc, #100]	; (8003104 <rf24_mac_process_transmission+0xb0>)
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f002 f80a 	bl	80050b8 <rf24_worker_attach>

		// Create a "wait for ack" task
		task = rf24_worker_build_task(wait_for_ack, 1, T_ACK_TIMEOUT_US, false);
 80030a4:	2300      	movs	r3, #0
 80030a6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80030aa:	2101      	movs	r1, #1
 80030ac:	200a      	movs	r0, #10
 80030ae:	f002 f821 	bl	80050f4 <rf24_worker_build_task>
 80030b2:	6078      	str	r0, [r7, #4]
		rf24_worker_attach(task, rf24_mac_ack_timeout);
 80030b4:	4914      	ldr	r1, [pc, #80]	; (8003108 <rf24_mac_process_transmission+0xb4>)
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f001 fffe 	bl	80050b8 <rf24_worker_attach>
			rf24_mac_transmission_successfull();
		}

		rf24_mac_set_transmission_state(COMPLETED);
	}
}
 80030bc:	e01c      	b.n	80030f8 <rf24_mac_process_transmission+0xa4>
		if(mac_transmission.state != COMPLETED)
 80030be:	4b10      	ldr	r3, [pc, #64]	; (8003100 <rf24_mac_process_transmission+0xac>)
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	2b03      	cmp	r3, #3
 80030c4:	d015      	beq.n	80030f2 <rf24_mac_process_transmission+0x9e>
			rf24_debug(	MAC, TRANSMISSION, mac_transmission.frame_subtype, VOID, &mac_transmission.receiver,
 80030c6:	4b0e      	ldr	r3, [pc, #56]	; (8003100 <rf24_mac_process_transmission+0xac>)
 80030c8:	791a      	ldrb	r2, [r3, #4]
						"Transmission completed (%d frame/s, %d byte/s)\n\n", mac_transmission.frame_count, mac_transmission.payload_length);
 80030ca:	4b0d      	ldr	r3, [pc, #52]	; (8003100 <rf24_mac_process_transmission+0xac>)
 80030cc:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
			rf24_debug(	MAC, TRANSMISSION, mac_transmission.frame_subtype, VOID, &mac_transmission.receiver,
 80030d0:	4619      	mov	r1, r3
						"Transmission completed (%d frame/s, %d byte/s)\n\n", mac_transmission.frame_count, mac_transmission.payload_length);
 80030d2:	4b0b      	ldr	r3, [pc, #44]	; (8003100 <rf24_mac_process_transmission+0xac>)
 80030d4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
			rf24_debug(	MAC, TRANSMISSION, mac_transmission.frame_subtype, VOID, &mac_transmission.receiver,
 80030d8:	9303      	str	r3, [sp, #12]
 80030da:	9102      	str	r1, [sp, #8]
 80030dc:	4b0b      	ldr	r3, [pc, #44]	; (800310c <rf24_mac_process_transmission+0xb8>)
 80030de:	9301      	str	r3, [sp, #4]
 80030e0:	4b0b      	ldr	r3, [pc, #44]	; (8003110 <rf24_mac_process_transmission+0xbc>)
 80030e2:	9300      	str	r3, [sp, #0]
 80030e4:	2300      	movs	r3, #0
 80030e6:	2103      	movs	r1, #3
 80030e8:	2002      	movs	r0, #2
 80030ea:	f7fe f88d 	bl	8001208 <rf24_debug>
			rf24_mac_transmission_successfull();
 80030ee:	f7ff fe63 	bl	8002db8 <rf24_mac_transmission_successfull>
		rf24_mac_set_transmission_state(COMPLETED);
 80030f2:	2003      	movs	r0, #3
 80030f4:	f7ff ff5c 	bl	8002fb0 <rf24_mac_set_transmission_state>
}
 80030f8:	bf00      	nop
 80030fa:	3708      	adds	r7, #8
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	200007c8 	.word	0x200007c8
 8003104:	08003179 	.word	0x08003179
 8003108:	08002de1 	.word	0x08002de1
 800310c:	08008c3c 	.word	0x08008c3c
 8003110:	200007cd 	.word	0x200007cd

08003114 <rf24_mac_process_reception>:

void rf24_mac_process_reception()
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af04      	add	r7, sp, #16
	if(mac_transmission.frame_count >= mac_transmission.n_frames)
 800311a:	4b14      	ldr	r3, [pc, #80]	; (800316c <rf24_mac_process_reception+0x58>)
 800311c:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8003120:	4b12      	ldr	r3, [pc, #72]	; (800316c <rf24_mac_process_reception+0x58>)
 8003122:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003126:	429a      	cmp	r2, r3
 8003128:	d31c      	bcc.n	8003164 <rf24_mac_process_reception+0x50>
	{
		if(mac_transmission.state != COMPLETED)
 800312a:	4b10      	ldr	r3, [pc, #64]	; (800316c <rf24_mac_process_reception+0x58>)
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	2b03      	cmp	r3, #3
 8003130:	d015      	beq.n	800315e <rf24_mac_process_reception+0x4a>
		{
			rf24_debug(	MAC, RECEPTION, mac_transmission.frame_subtype, VOID, &mac_transmission.transmitter,
 8003132:	4b0e      	ldr	r3, [pc, #56]	; (800316c <rf24_mac_process_reception+0x58>)
 8003134:	791a      	ldrb	r2, [r3, #4]
						"Reception completed (%d frame/s, %d byte/s)\n\n", mac_transmission.frame_count, mac_transmission.payload_length);
 8003136:	4b0d      	ldr	r3, [pc, #52]	; (800316c <rf24_mac_process_reception+0x58>)
 8003138:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
			rf24_debug(	MAC, RECEPTION, mac_transmission.frame_subtype, VOID, &mac_transmission.transmitter,
 800313c:	4619      	mov	r1, r3
						"Reception completed (%d frame/s, %d byte/s)\n\n", mac_transmission.frame_count, mac_transmission.payload_length);
 800313e:	4b0b      	ldr	r3, [pc, #44]	; (800316c <rf24_mac_process_reception+0x58>)
 8003140:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
			rf24_debug(	MAC, RECEPTION, mac_transmission.frame_subtype, VOID, &mac_transmission.transmitter,
 8003144:	9303      	str	r3, [sp, #12]
 8003146:	9102      	str	r1, [sp, #8]
 8003148:	4b09      	ldr	r3, [pc, #36]	; (8003170 <rf24_mac_process_reception+0x5c>)
 800314a:	9301      	str	r3, [sp, #4]
 800314c:	4b09      	ldr	r3, [pc, #36]	; (8003174 <rf24_mac_process_reception+0x60>)
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	2300      	movs	r3, #0
 8003152:	2104      	movs	r1, #4
 8003154:	2002      	movs	r0, #2
 8003156:	f7fe f857 	bl	8001208 <rf24_debug>

			rf24_mac_reception_successfull();
 800315a:	f7ff fe17 	bl	8002d8c <rf24_mac_reception_successfull>
		}

		rf24_mac_set_transmission_state(COMPLETED);
 800315e:	2003      	movs	r0, #3
 8003160:	f7ff ff26 	bl	8002fb0 <rf24_mac_set_transmission_state>
	}
}
 8003164:	bf00      	nop
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	200007c8 	.word	0x200007c8
 8003170:	08008c70 	.word	0x08008c70
 8003174:	200007d3 	.word	0x200007d3

08003178 <rf24_mac_send_mac_frame>:

void rf24_mac_send_mac_frame()
{
 8003178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800317a:	b099      	sub	sp, #100	; 0x64
 800317c:	af06      	add	r7, sp, #24
	// Create TX data container
	rf24_module_tx_data tx_data;

	// Collect mac_frame from task
	rf24_mac_frame mac_frame = rf24_worker_current_task()->data.mac.mac_frame;
 800317e:	f002 f831 	bl	80051e4 <rf24_worker_current_task>
 8003182:	4603      	mov	r3, r0
 8003184:	1d3c      	adds	r4, r7, #4
 8003186:	f103 050c 	add.w	r5, r3, #12
 800318a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800318c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800318e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003192:	c407      	stmia	r4!, {r0, r1, r2}
 8003194:	8023      	strh	r3, [r4, #0]
 8003196:	3402      	adds	r4, #2
 8003198:	0c1b      	lsrs	r3, r3, #16
 800319a:	7023      	strb	r3, [r4, #0]

	// Covert MAC frame into TX data
	rf24_mac_frame_to_tx_data(&mac_frame, &tx_data);
 800319c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80031a0:	1d3b      	adds	r3, r7, #4
 80031a2:	4611      	mov	r1, r2
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff ff41 	bl	800302c <rf24_mac_frame_to_tx_data>

	// Transmit MAC frame (TX data)
	rf24_module_transmit(&tx_data);
 80031aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7ff f82e 	bl	8002210 <rf24_module_transmit>

	// Transmission (BROADCAST) is COMPLETED, when mac_frame was transmitted
	switch(mac_transmission.communication_type){
 80031b4:	4b25      	ldr	r3, [pc, #148]	; (800324c <rf24_mac_send_mac_frame+0xd4>)
 80031b6:	789b      	ldrb	r3, [r3, #2]
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d000      	beq.n	80031be <rf24_mac_send_mac_frame+0x46>
		case BROADCAST:
			rf24_mac_set_transmission_state(COMPLETED);
			rf24_mac_transmission_successfull();
			break;
		default:
			break;
 80031bc:	e005      	b.n	80031ca <rf24_mac_send_mac_frame+0x52>
			rf24_mac_set_transmission_state(COMPLETED);
 80031be:	2003      	movs	r0, #3
 80031c0:	f7ff fef6 	bl	8002fb0 <rf24_mac_set_transmission_state>
			rf24_mac_transmission_successfull();
 80031c4:	f7ff fdf8 	bl	8002db8 <rf24_mac_transmission_successfull>
			break;
 80031c8:	bf00      	nop
	}

	if(mac_frame.frame_control.type != CONTROL)
 80031ca:	793b      	ldrb	r3, [r7, #4]
 80031cc:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b08      	cmp	r3, #8
 80031d4:	d035      	beq.n	8003242 <rf24_mac_send_mac_frame+0xca>
	{
		if(mac_frame.frame_control.type == DATA)
 80031d6:	793b      	ldrb	r3, [r7, #4]
 80031d8:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b0c      	cmp	r3, #12
 80031e0:	d11d      	bne.n	800321e <rf24_mac_send_mac_frame+0xa6>
			rf24_debug(	MAC, TRANSMIT, mac_transmission.frame_subtype, VOID, &mac_transmission.receiver,
 80031e2:	4b1a      	ldr	r3, [pc, #104]	; (800324c <rf24_mac_send_mac_frame+0xd4>)
 80031e4:	791c      	ldrb	r4, [r3, #4]
						"(%d/%d) \"%s\"\n", mac_frame.id, mac_transmission.n_frames,
 80031e6:	7d3b      	ldrb	r3, [r7, #20]
			rf24_debug(	MAC, TRANSMIT, mac_transmission.frame_subtype, VOID, &mac_transmission.receiver,
 80031e8:	461d      	mov	r5, r3
						"(%d/%d) \"%s\"\n", mac_frame.id, mac_transmission.n_frames,
 80031ea:	4b18      	ldr	r3, [pc, #96]	; (800324c <rf24_mac_send_mac_frame+0xd4>)
 80031ec:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
			rf24_debug(	MAC, TRANSMIT, mac_transmission.frame_subtype, VOID, &mac_transmission.receiver,
 80031f0:	461e      	mov	r6, r3
 80031f2:	7d79      	ldrb	r1, [r7, #21]
 80031f4:	1d3b      	adds	r3, r7, #4
 80031f6:	3312      	adds	r3, #18
 80031f8:	2220      	movs	r2, #32
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fe f9a2 	bl	8001544 <decimal_to_string>
 8003200:	4603      	mov	r3, r0
 8003202:	9304      	str	r3, [sp, #16]
 8003204:	9603      	str	r6, [sp, #12]
 8003206:	9502      	str	r5, [sp, #8]
 8003208:	4b11      	ldr	r3, [pc, #68]	; (8003250 <rf24_mac_send_mac_frame+0xd8>)
 800320a:	9301      	str	r3, [sp, #4]
 800320c:	4b11      	ldr	r3, [pc, #68]	; (8003254 <rf24_mac_send_mac_frame+0xdc>)
 800320e:	9300      	str	r3, [sp, #0]
 8003210:	2300      	movs	r3, #0
 8003212:	4622      	mov	r2, r4
 8003214:	2101      	movs	r1, #1
 8003216:	2002      	movs	r0, #2
 8003218:	f7fd fff6 	bl	8001208 <rf24_debug>
						decimal_to_string(mac_frame.data.payload, mac_frame.data.header.length, ' '));
		else rf24_debug(MAC, TRANSMIT, mac_transmission.frame_subtype, VOID, &mac_transmission.receiver,
						"(%d/%d)\n", mac_frame.id, mac_transmission.n_frames);
	}
}
 800321c:	e011      	b.n	8003242 <rf24_mac_send_mac_frame+0xca>
		else rf24_debug(MAC, TRANSMIT, mac_transmission.frame_subtype, VOID, &mac_transmission.receiver,
 800321e:	4b0b      	ldr	r3, [pc, #44]	; (800324c <rf24_mac_send_mac_frame+0xd4>)
 8003220:	791a      	ldrb	r2, [r3, #4]
						"(%d/%d)\n", mac_frame.id, mac_transmission.n_frames);
 8003222:	7d3b      	ldrb	r3, [r7, #20]
		else rf24_debug(MAC, TRANSMIT, mac_transmission.frame_subtype, VOID, &mac_transmission.receiver,
 8003224:	4619      	mov	r1, r3
						"(%d/%d)\n", mac_frame.id, mac_transmission.n_frames);
 8003226:	4b09      	ldr	r3, [pc, #36]	; (800324c <rf24_mac_send_mac_frame+0xd4>)
 8003228:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
		else rf24_debug(MAC, TRANSMIT, mac_transmission.frame_subtype, VOID, &mac_transmission.receiver,
 800322c:	9303      	str	r3, [sp, #12]
 800322e:	9102      	str	r1, [sp, #8]
 8003230:	4b09      	ldr	r3, [pc, #36]	; (8003258 <rf24_mac_send_mac_frame+0xe0>)
 8003232:	9301      	str	r3, [sp, #4]
 8003234:	4b07      	ldr	r3, [pc, #28]	; (8003254 <rf24_mac_send_mac_frame+0xdc>)
 8003236:	9300      	str	r3, [sp, #0]
 8003238:	2300      	movs	r3, #0
 800323a:	2101      	movs	r1, #1
 800323c:	2002      	movs	r0, #2
 800323e:	f7fd ffe3 	bl	8001208 <rf24_debug>
}
 8003242:	bf00      	nop
 8003244:	374c      	adds	r7, #76	; 0x4c
 8003246:	46bd      	mov	sp, r7
 8003248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800324a:	bf00      	nop
 800324c:	200007c8 	.word	0x200007c8
 8003250:	08008bb4 	.word	0x08008bb4
 8003254:	200007cd 	.word	0x200007cd
 8003258:	08008ba8 	.word	0x08008ba8

0800325c <rf24_mac_send_ack>:

void rf24_mac_send_ack(rf24_mac_frame *mac_frame)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b088      	sub	sp, #32
 8003260:	af04      	add	r7, sp, #16
 8003262:	6078      	str	r0, [r7, #4]
	// Create send ACK task
	struct rf24_task *task = rf24_worker_build_task(send_ack, 1, T_SIFS_US, false);
 8003264:	2300      	movs	r3, #0
 8003266:	22c8      	movs	r2, #200	; 0xc8
 8003268:	2101      	movs	r1, #1
 800326a:	2007      	movs	r0, #7
 800326c:	f001 ff42 	bl	80050f4 <rf24_worker_build_task>
 8003270:	60f8      	str	r0, [r7, #12]

	task->data.mac.mac_frame.frame_control.type = CONTROL;
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	7b13      	ldrb	r3, [r2, #12]
 8003276:	2102      	movs	r1, #2
 8003278:	f361 0385 	bfi	r3, r1, #2, #4
 800327c:	7313      	strb	r3, [r2, #12]
	task->data.mac.mac_frame.frame_control.subtype = CONTROL_ACK;
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	8993      	ldrh	r3, [r2, #12]
 8003282:	2105      	movs	r1, #5
 8003284:	f361 1389 	bfi	r3, r1, #6, #4
 8003288:	8193      	strh	r3, [r2, #12]
	task->data.mac.mac_frame.transmitter = mac_addr;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	4a29      	ldr	r2, [pc, #164]	; (8003334 <rf24_mac_send_ack+0xd8>)
 800328e:	3316      	adds	r3, #22
 8003290:	6811      	ldr	r1, [r2, #0]
 8003292:	6019      	str	r1, [r3, #0]
 8003294:	8892      	ldrh	r2, [r2, #4]
 8003296:	809a      	strh	r2, [r3, #4]
	task->data.mac.mac_frame.receiver = mac_frame->transmitter;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	3310      	adds	r3, #16
 800329e:	320a      	adds	r2, #10
 80032a0:	6810      	ldr	r0, [r2, #0]
 80032a2:	6018      	str	r0, [r3, #0]
 80032a4:	8892      	ldrh	r2, [r2, #4]
 80032a6:	809a      	strh	r2, [r3, #4]
	task->data.mac.mac_frame.duration = T_NAV_ACK_MS;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	81da      	strh	r2, [r3, #14]
	task->data.mac.mac_frame.ack.type = mac_frame->frame_control.type;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	f3c3 0383 	ubfx	r3, r3, #2, #4
 80032b6:	b2d9      	uxtb	r1, r3
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	7f53      	ldrb	r3, [r2, #29]
 80032bc:	f361 0303 	bfi	r3, r1, #0, #4
 80032c0:	7753      	strb	r3, [r2, #29]
	task->data.mac.mac_frame.ack.subtype = mac_frame->frame_control.subtype;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	781a      	ldrb	r2, [r3, #0]
 80032c6:	0992      	lsrs	r2, r2, #6
 80032c8:	b2d2      	uxtb	r2, r2
 80032ca:	785b      	ldrb	r3, [r3, #1]
 80032cc:	f003 0303 	and.w	r3, r3, #3
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4313      	orrs	r3, r2
 80032d4:	b2d9      	uxtb	r1, r3
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	7f53      	ldrb	r3, [r2, #29]
 80032da:	f361 1307 	bfi	r3, r1, #4, #4
 80032de:	7753      	strb	r3, [r2, #29]
	task->data.mac.mac_frame.ack.id = mac_frame->id;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	7c1a      	ldrb	r2, [r3, #16]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	779a      	strb	r2, [r3, #30]

	// Bind send MAC frame function to task
	rf24_worker_push(task, rf24_mac_send_mac_frame);
 80032e8:	4913      	ldr	r1, [pc, #76]	; (8003338 <rf24_mac_send_ack+0xdc>)
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f001 fef3 	bl	80050d6 <rf24_worker_push>

	rf24_debug(	MAC, TRANSMIT, CONTROL_ACK, mac_frame->frame_control.subtype, &mac_frame->transmitter,
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	781a      	ldrb	r2, [r3, #0]
 80032f4:	0992      	lsrs	r2, r2, #6
 80032f6:	b2d2      	uxtb	r2, r2
 80032f8:	785b      	ldrb	r3, [r3, #1]
 80032fa:	f003 0303 	and.w	r3, r3, #3
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4313      	orrs	r3, r2
 8003302:	b2db      	uxtb	r3, r3
 8003304:	4618      	mov	r0, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	330a      	adds	r3, #10
				"(%d/%d)\n", mac_frame->id, mac_transmission.n_frames);
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	7c12      	ldrb	r2, [r2, #16]
	rf24_debug(	MAC, TRANSMIT, CONTROL_ACK, mac_frame->frame_control.subtype, &mac_frame->transmitter,
 800330e:	4611      	mov	r1, r2
				"(%d/%d)\n", mac_frame->id, mac_transmission.n_frames);
 8003310:	4a0a      	ldr	r2, [pc, #40]	; (800333c <rf24_mac_send_ack+0xe0>)
 8003312:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
	rf24_debug(	MAC, TRANSMIT, CONTROL_ACK, mac_frame->frame_control.subtype, &mac_frame->transmitter,
 8003316:	9203      	str	r2, [sp, #12]
 8003318:	9102      	str	r1, [sp, #8]
 800331a:	4a09      	ldr	r2, [pc, #36]	; (8003340 <rf24_mac_send_ack+0xe4>)
 800331c:	9201      	str	r2, [sp, #4]
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	4603      	mov	r3, r0
 8003322:	2205      	movs	r2, #5
 8003324:	2101      	movs	r1, #1
 8003326:	2002      	movs	r0, #2
 8003328:	f7fd ff6e 	bl	8001208 <rf24_debug>
}
 800332c:	bf00      	nop
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	200007c0 	.word	0x200007c0
 8003338:	08003179 	.word	0x08003179
 800333c:	200007c8 	.word	0x200007c8
 8003340:	08008ba8 	.word	0x08008ba8

08003344 <rf24_mac_payload_to_data_frame>:

void rf24_mac_payload_to_data_frame(rf24_mac_transmission* transmission, rf24_mac_frame* mac_frame)
{
 8003344:	b5b0      	push	{r4, r5, r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
	// Calculate remaining bytes to transfer
	uint8_t bytes_to_transfer = transmission->payload_length - transmission->payload_index;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	73fb      	strb	r3, [r7, #15]

	if( !(bytes_to_transfer > 0) ) return;
 800335e:	7bfb      	ldrb	r3, [r7, #15]
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 8095 	beq.w	8003490 <rf24_mac_payload_to_data_frame+0x14c>

	mac_frame->frame_control.type = transmission->frame_type;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	78db      	ldrb	r3, [r3, #3]
 800336a:	f003 030f 	and.w	r3, r3, #15
 800336e:	b2d9      	uxtb	r1, r3
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	7813      	ldrb	r3, [r2, #0]
 8003374:	f361 0385 	bfi	r3, r1, #2, #4
 8003378:	7013      	strb	r3, [r2, #0]
	mac_frame->frame_control.subtype = transmission->frame_subtype;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	791b      	ldrb	r3, [r3, #4]
 800337e:	f003 030f 	and.w	r3, r3, #15
 8003382:	b2da      	uxtb	r2, r3
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	f002 0103 	and.w	r1, r2, #3
 800338a:	018c      	lsls	r4, r1, #6
 800338c:	7819      	ldrb	r1, [r3, #0]
 800338e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003392:	4608      	mov	r0, r1
 8003394:	4621      	mov	r1, r4
 8003396:	4301      	orrs	r1, r0
 8003398:	7019      	strb	r1, [r3, #0]
 800339a:	0892      	lsrs	r2, r2, #2
 800339c:	b2d2      	uxtb	r2, r2
 800339e:	f002 0203 	and.w	r2, r2, #3
 80033a2:	f002 0003 	and.w	r0, r2, #3
 80033a6:	785a      	ldrb	r2, [r3, #1]
 80033a8:	f022 0203 	bic.w	r2, r2, #3
 80033ac:	4611      	mov	r1, r2
 80033ae:	4602      	mov	r2, r0
 80033b0:	430a      	orrs	r2, r1
 80033b2:	705a      	strb	r2, [r3, #1]
	mac_frame->transmitter = mac_addr;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	4a38      	ldr	r2, [pc, #224]	; (8003498 <rf24_mac_payload_to_data_frame+0x154>)
 80033b8:	330a      	adds	r3, #10
 80033ba:	6811      	ldr	r1, [r2, #0]
 80033bc:	6019      	str	r1, [r3, #0]
 80033be:	8892      	ldrh	r2, [r2, #4]
 80033c0:	809a      	strh	r2, [r3, #4]
	mac_frame->receiver = transmission->receiver;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	3304      	adds	r3, #4
 80033c8:	3205      	adds	r2, #5
 80033ca:	6811      	ldr	r1, [r2, #0]
 80033cc:	6019      	str	r1, [r3, #0]
 80033ce:	8892      	ldrh	r2, [r2, #4]
 80033d0:	809a      	strh	r2, [r3, #4]
	mac_frame->duration = T_NAV_FRAG_MS;
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	2200      	movs	r2, #0
 80033d6:	709a      	strb	r2, [r3, #2]
 80033d8:	2200      	movs	r2, #0
 80033da:	70da      	strb	r2, [r3, #3]
	mac_frame->id = transmission->frame_count;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	741a      	strb	r2, [r3, #16]

	// More than MAC_FRAME_PAYLOAD_LENGTH bytes to transfer?
	if(bytes_to_transfer >= MAC_FRAME_PAYLOAD_LENGTH)
 80033e6:	7bfb      	ldrb	r3, [r7, #15]
 80033e8:	2b0c      	cmp	r3, #12
 80033ea:	d91d      	bls.n	8003428 <rf24_mac_payload_to_data_frame+0xe4>
	{
		// Inform receiver more frames to come
		mac_frame->frame_control.more_data = true;
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	7853      	ldrb	r3, [r2, #1]
 80033f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033f4:	7053      	strb	r3, [r2, #1]
		// Add PAYLOAD length to data header
		mac_frame->data.header.length = MAC_FRAME_PAYLOAD_LENGTH;
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	220d      	movs	r2, #13
 80033fa:	745a      	strb	r2, [r3, #17]

		// Copy PAYLOAD data into MAC frame
		memcpy(mac_frame->data.payload, &transmission->payload[transmission->payload_index], MAC_FRAME_PAYLOAD_LENGTH);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	f103 0012 	add.w	r0, r3, #18
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	f892 2035 	ldrb.w	r2, [r2, #53]	; 0x35
 800340c:	4413      	add	r3, r2
 800340e:	220d      	movs	r2, #13
 8003410:	4619      	mov	r1, r3
 8003412:	f003 fc66 	bl	8006ce2 <memcpy>

		transmission->payload_index += MAC_FRAME_PAYLOAD_LENGTH;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800341c:	330d      	adds	r3, #13
 800341e:	b2da      	uxtb	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003426:	e01d      	b.n	8003464 <rf24_mac_payload_to_data_frame+0x120>
	}
	else
	{
		// Inform receiver last MAC frame
		mac_frame->frame_control.more_data = false;
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	7853      	ldrb	r3, [r2, #1]
 800342c:	f36f 13c7 	bfc	r3, #7, #1
 8003430:	7053      	strb	r3, [r2, #1]
		// Add remaining PAYLOAD length to data header
		mac_frame->data.header.length = bytes_to_transfer;
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	7bfa      	ldrb	r2, [r7, #15]
 8003436:	745a      	strb	r2, [r3, #17]

		// Copy remaining bytes of PAYLOAD into MAC frame
		memcpy(mac_frame->data.payload, &transmission->payload[transmission->payload_index], bytes_to_transfer);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	f103 0012 	add.w	r0, r3, #18
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	f892 2035 	ldrb.w	r2, [r2, #53]	; 0x35
 8003448:	4413      	add	r3, r2
 800344a:	7bfa      	ldrb	r2, [r7, #15]
 800344c:	4619      	mov	r1, r3
 800344e:	f003 fc48 	bl	8006ce2 <memcpy>

		// -> index = length -> transmission completed
		transmission->payload_index += bytes_to_transfer;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8003458:	7bfb      	ldrb	r3, [r7, #15]
 800345a:	4413      	add	r3, r2
 800345c:	b2da      	uxtb	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	}

	// Store a local copy for retransmission
	transmission->mac_frame = *mac_frame;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	3311      	adds	r3, #17
 800346a:	6814      	ldr	r4, [r2, #0]
 800346c:	6850      	ldr	r0, [r2, #4]
 800346e:	6891      	ldr	r1, [r2, #8]
 8003470:	68d5      	ldr	r5, [r2, #12]
 8003472:	601c      	str	r4, [r3, #0]
 8003474:	6058      	str	r0, [r3, #4]
 8003476:	6099      	str	r1, [r3, #8]
 8003478:	60dd      	str	r5, [r3, #12]
 800347a:	6914      	ldr	r4, [r2, #16]
 800347c:	6950      	ldr	r0, [r2, #20]
 800347e:	6991      	ldr	r1, [r2, #24]
 8003480:	611c      	str	r4, [r3, #16]
 8003482:	6158      	str	r0, [r3, #20]
 8003484:	6199      	str	r1, [r3, #24]
 8003486:	8b91      	ldrh	r1, [r2, #28]
 8003488:	7f92      	ldrb	r2, [r2, #30]
 800348a:	8399      	strh	r1, [r3, #28]
 800348c:	779a      	strb	r2, [r3, #30]
 800348e:	e000      	b.n	8003492 <rf24_mac_payload_to_data_frame+0x14e>
	if( !(bytes_to_transfer > 0) ) return;
 8003490:	bf00      	nop
}
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bdb0      	pop	{r4, r5, r7, pc}
 8003498:	200007c0 	.word	0x200007c0

0800349c <rf24_mac_frame_to_payload>:

void rf24_mac_frame_to_payload(rf24_mac_frame* mac_frame, rf24_mac_transmission* transmission)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
	// Packet is a new frame?
	if(mac_frame->id > transmission->frame_count)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	7c1a      	ldrb	r2, [r3, #16]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d92b      	bls.n	800350c <rf24_mac_frame_to_payload+0x70>
	{
		switch(mac_frame->frame_control.subtype)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	781a      	ldrb	r2, [r3, #0]
 80034b8:	0992      	lsrs	r2, r2, #6
 80034ba:	b2d2      	uxtb	r2, r2
 80034bc:	785b      	ldrb	r3, [r3, #1]
 80034be:	f003 0303 	and.w	r3, r3, #3
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4313      	orrs	r3, r2
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	3b06      	subs	r3, #6
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d818      	bhi.n	8003500 <rf24_mac_frame_to_payload+0x64>
		{
			case DATA_DATA: case DATA_TOPOLOGY:
			{
				memcpy(	&transmission->payload[transmission->payload_index],
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	f892 2035 	ldrb.w	r2, [r2, #53]	; 0x35
 80034d8:	1898      	adds	r0, r3, r2
						mac_frame->data.payload,
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f103 0112 	add.w	r1, r3, #18
						mac_frame->data.header.length);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	7c5b      	ldrb	r3, [r3, #17]
				memcpy(	&transmission->payload[transmission->payload_index],
 80034e4:	461a      	mov	r2, r3
 80034e6:	f003 fbfc 	bl	8006ce2 <memcpy>

				transmission->payload_index += mac_frame->data.header.length;
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	7c5b      	ldrb	r3, [r3, #17]
 80034f4:	4413      	add	r3, r2
 80034f6:	b2da      	uxtb	r2, r3
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

				break;
 80034fe:	e000      	b.n	8003502 <rf24_mac_frame_to_payload+0x66>
			}
			default: break;
 8003500:	bf00      	nop
		}

		transmission->frame_count = mac_frame->id;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	7c1a      	ldrb	r2, [r3, #16]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	}
}
 800350c:	bf00      	nop
 800350e:	3708      	adds	r7, #8
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <rf24_mac_setup_reception>:

void rf24_mac_setup_reception(rf24_mac_frame *mac_frame)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
	// Check, if RTS frame contains any information of following data
	switch(mac_frame->rts.type)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	7c5b      	ldrb	r3, [r3, #17]
 8003520:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b03      	cmp	r3, #3
 8003528:	d000      	beq.n	800352c <rf24_mac_setup_reception+0x18>
			}
			else mac_transmission.n_frames = 1;

			break;
		}
		default: break;
 800352a:	e034      	b.n	8003596 <rf24_mac_setup_reception+0x82>
			if(mac_frame->rts.n_bytes_payload > 0)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	8a5b      	ldrh	r3, [r3, #18]
 8003530:	b29b      	uxth	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d02a      	beq.n	800358c <rf24_mac_setup_reception+0x78>
				uint8_t n_frames = mac_frame->rts.n_bytes_payload / MAC_FRAME_PAYLOAD_LENGTH;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	8a5b      	ldrh	r3, [r3, #18]
 800353a:	b29b      	uxth	r3, r3
 800353c:	4a35      	ldr	r2, [pc, #212]	; (8003614 <rf24_mac_setup_reception+0x100>)
 800353e:	fba2 2303 	umull	r2, r3, r2, r3
 8003542:	089b      	lsrs	r3, r3, #2
 8003544:	b29b      	uxth	r3, r3
 8003546:	73fb      	strb	r3, [r7, #15]
				if(mac_frame->rts.n_bytes_payload % MAC_FRAME_PAYLOAD_LENGTH > 0) n_frames++;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	8a5b      	ldrh	r3, [r3, #18]
 800354c:	b299      	uxth	r1, r3
 800354e:	4b31      	ldr	r3, [pc, #196]	; (8003614 <rf24_mac_setup_reception+0x100>)
 8003550:	fba3 2301 	umull	r2, r3, r3, r1
 8003554:	089a      	lsrs	r2, r3, #2
 8003556:	4613      	mov	r3, r2
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	4413      	add	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4413      	add	r3, r2
 8003560:	1acb      	subs	r3, r1, r3
 8003562:	b29b      	uxth	r3, r3
 8003564:	2b00      	cmp	r3, #0
 8003566:	d002      	beq.n	800356e <rf24_mac_setup_reception+0x5a>
 8003568:	7bfb      	ldrb	r3, [r7, #15]
 800356a:	3301      	adds	r3, #1
 800356c:	73fb      	strb	r3, [r7, #15]
				mac_transmission.n_frames = n_frames;
 800356e:	4a2a      	ldr	r2, [pc, #168]	; (8003618 <rf24_mac_setup_reception+0x104>)
 8003570:	7bfb      	ldrb	r3, [r7, #15]
 8003572:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
				mac_transmission.payload = (uint8_t*) malloc(mac_frame->rts.n_bytes_payload * sizeof(uint8_t));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	8a5b      	ldrh	r3, [r3, #18]
 800357a:	b29b      	uxth	r3, r3
 800357c:	4618      	mov	r0, r3
 800357e:	f003 fb91 	bl	8006ca4 <malloc>
 8003582:	4603      	mov	r3, r0
 8003584:	461a      	mov	r2, r3
 8003586:	4b24      	ldr	r3, [pc, #144]	; (8003618 <rf24_mac_setup_reception+0x104>)
 8003588:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 800358a:	e003      	b.n	8003594 <rf24_mac_setup_reception+0x80>
			else mac_transmission.n_frames = 1;
 800358c:	4b22      	ldr	r3, [pc, #136]	; (8003618 <rf24_mac_setup_reception+0x104>)
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
			break;
 8003594:	bf00      	nop
	}

	// Initialize mac_transmission for reception based on the given RTS meta information
	mac_transmission.transmission_type = reception;
 8003596:	4b20      	ldr	r3, [pc, #128]	; (8003618 <rf24_mac_setup_reception+0x104>)
 8003598:	2201      	movs	r2, #1
 800359a:	705a      	strb	r2, [r3, #1]
	mac_transmission.frame_type = mac_frame->rts.type;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	7c5b      	ldrb	r3, [r3, #17]
 80035a0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	461a      	mov	r2, r3
 80035a8:	4b1b      	ldr	r3, [pc, #108]	; (8003618 <rf24_mac_setup_reception+0x104>)
 80035aa:	70da      	strb	r2, [r3, #3]
	mac_transmission.frame_subtype = mac_frame->rts.subtype;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	7c5b      	ldrb	r3, [r3, #17]
 80035b0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	461a      	mov	r2, r3
 80035b8:	4b17      	ldr	r3, [pc, #92]	; (8003618 <rf24_mac_setup_reception+0x104>)
 80035ba:	711a      	strb	r2, [r3, #4]
	mac_transmission.frame_count = 0;
 80035bc:	4b16      	ldr	r3, [pc, #88]	; (8003618 <rf24_mac_setup_reception+0x104>)
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	mac_transmission.transmitter = mac_frame->transmitter;
 80035c4:	4b14      	ldr	r3, [pc, #80]	; (8003618 <rf24_mac_setup_reception+0x104>)
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	330b      	adds	r3, #11
 80035ca:	320a      	adds	r2, #10
 80035cc:	6811      	ldr	r1, [r2, #0]
 80035ce:	6019      	str	r1, [r3, #0]
 80035d0:	8892      	ldrh	r2, [r2, #4]
 80035d2:	809a      	strh	r2, [r3, #4]
	mac_transmission.receiver = *rf24_mac_get_address();
 80035d4:	f7ff fd16 	bl	8003004 <rf24_mac_get_address>
 80035d8:	4602      	mov	r2, r0
 80035da:	4b0f      	ldr	r3, [pc, #60]	; (8003618 <rf24_mac_setup_reception+0x104>)
 80035dc:	3305      	adds	r3, #5
 80035de:	6811      	ldr	r1, [r2, #0]
 80035e0:	6019      	str	r1, [r3, #0]
 80035e2:	8892      	ldrh	r2, [r2, #4]
 80035e4:	809a      	strh	r2, [r3, #4]
	mac_transmission.payload_length = mac_frame->rts.n_bytes_payload;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	8a5b      	ldrh	r3, [r3, #18]
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	b2da      	uxtb	r2, r3
 80035ee:	4b0a      	ldr	r3, [pc, #40]	; (8003618 <rf24_mac_setup_reception+0x104>)
 80035f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	mac_transmission.payload_index = 0;
 80035f4:	4b08      	ldr	r3, [pc, #32]	; (8003618 <rf24_mac_setup_reception+0x104>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	mac_transmission.attempts = 0;
 80035fc:	4b06      	ldr	r3, [pc, #24]	; (8003618 <rf24_mac_setup_reception+0x104>)
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	// Set transmission to state INITIALIZED
	rf24_mac_set_transmission_state(INITIALIZED);
 8003604:	2000      	movs	r0, #0
 8003606:	f7ff fcd3 	bl	8002fb0 <rf24_mac_set_transmission_state>
}
 800360a:	bf00      	nop
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	4ec4ec4f 	.word	0x4ec4ec4f
 8003618:	200007c8 	.word	0x200007c8

0800361c <rf24_mac_setup_transmission>:
	rf24_mac_communication_type communication_type,
	rf24_mac_frame_type frame_type,
	rf24_mac_frame_subtype frame_subtype,
	rf24_mac_addr *receiver,
	uint8_t *payload,
	uint8_t payload_length){
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	603b      	str	r3, [r7, #0]
 8003624:	4603      	mov	r3, r0
 8003626:	71fb      	strb	r3, [r7, #7]
 8003628:	460b      	mov	r3, r1
 800362a:	71bb      	strb	r3, [r7, #6]
 800362c:	4613      	mov	r3, r2
 800362e:	717b      	strb	r3, [r7, #5]

	// Setup MAC transmission
	mac_transmission.transmission_type = transmission;
 8003630:	4b35      	ldr	r3, [pc, #212]	; (8003708 <rf24_mac_setup_transmission+0xec>)
 8003632:	2200      	movs	r2, #0
 8003634:	705a      	strb	r2, [r3, #1]
	mac_transmission.communication_type = communication_type;
 8003636:	4a34      	ldr	r2, [pc, #208]	; (8003708 <rf24_mac_setup_transmission+0xec>)
 8003638:	79fb      	ldrb	r3, [r7, #7]
 800363a:	7093      	strb	r3, [r2, #2]
	mac_transmission.frame_type = frame_type;
 800363c:	4a32      	ldr	r2, [pc, #200]	; (8003708 <rf24_mac_setup_transmission+0xec>)
 800363e:	79bb      	ldrb	r3, [r7, #6]
 8003640:	70d3      	strb	r3, [r2, #3]
	mac_transmission.frame_subtype = frame_subtype;
 8003642:	4a31      	ldr	r2, [pc, #196]	; (8003708 <rf24_mac_setup_transmission+0xec>)
 8003644:	797b      	ldrb	r3, [r7, #5]
 8003646:	7113      	strb	r3, [r2, #4]
	mac_transmission.frame_count = 0;
 8003648:	4b2f      	ldr	r3, [pc, #188]	; (8003708 <rf24_mac_setup_transmission+0xec>)
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	mac_transmission.transmitter = *rf24_mac_get_address();
 8003650:	f7ff fcd8 	bl	8003004 <rf24_mac_get_address>
 8003654:	4602      	mov	r2, r0
 8003656:	4b2c      	ldr	r3, [pc, #176]	; (8003708 <rf24_mac_setup_transmission+0xec>)
 8003658:	330b      	adds	r3, #11
 800365a:	6811      	ldr	r1, [r2, #0]
 800365c:	6019      	str	r1, [r3, #0]
 800365e:	8892      	ldrh	r2, [r2, #4]
 8003660:	809a      	strh	r2, [r3, #4]
	mac_transmission.receiver = *receiver;
 8003662:	4b29      	ldr	r3, [pc, #164]	; (8003708 <rf24_mac_setup_transmission+0xec>)
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	3305      	adds	r3, #5
 8003668:	6811      	ldr	r1, [r2, #0]
 800366a:	6019      	str	r1, [r3, #0]
 800366c:	8892      	ldrh	r2, [r2, #4]
 800366e:	809a      	strh	r2, [r3, #4]
	mac_transmission.payload_length = payload_length;
 8003670:	4a25      	ldr	r2, [pc, #148]	; (8003708 <rf24_mac_setup_transmission+0xec>)
 8003672:	7f3b      	ldrb	r3, [r7, #28]
 8003674:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
	mac_transmission.payload_index = 0;
 8003678:	4b23      	ldr	r3, [pc, #140]	; (8003708 <rf24_mac_setup_transmission+0xec>)
 800367a:	2200      	movs	r2, #0
 800367c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	mac_transmission.attempts = 0;
 8003680:	4b21      	ldr	r3, [pc, #132]	; (8003708 <rf24_mac_setup_transmission+0xec>)
 8003682:	2200      	movs	r2, #0
 8003684:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	if(payload_length > 0)
 8003688:	7f3b      	ldrb	r3, [r7, #28]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d02f      	beq.n	80036ee <rf24_mac_setup_transmission+0xd2>
	{
		// Calculate number of frames needed for transmission
		uint8_t n_frames = payload_length / MAC_FRAME_PAYLOAD_LENGTH;
 800368e:	7f3b      	ldrb	r3, [r7, #28]
 8003690:	4a1e      	ldr	r2, [pc, #120]	; (800370c <rf24_mac_setup_transmission+0xf0>)
 8003692:	fba2 2303 	umull	r2, r3, r2, r3
 8003696:	089b      	lsrs	r3, r3, #2
 8003698:	73fb      	strb	r3, [r7, #15]
		if(payload_length % MAC_FRAME_PAYLOAD_LENGTH > 0) n_frames++;
 800369a:	7f39      	ldrb	r1, [r7, #28]
 800369c:	4b1b      	ldr	r3, [pc, #108]	; (800370c <rf24_mac_setup_transmission+0xf0>)
 800369e:	fba3 2301 	umull	r2, r3, r3, r1
 80036a2:	089a      	lsrs	r2, r3, #2
 80036a4:	4613      	mov	r3, r2
 80036a6:	005b      	lsls	r3, r3, #1
 80036a8:	4413      	add	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	1acb      	subs	r3, r1, r3
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d002      	beq.n	80036bc <rf24_mac_setup_transmission+0xa0>
 80036b6:	7bfb      	ldrb	r3, [r7, #15]
 80036b8:	3301      	adds	r3, #1
 80036ba:	73fb      	strb	r3, [r7, #15]
		mac_transmission.n_frames = n_frames;
 80036bc:	4a12      	ldr	r2, [pc, #72]	; (8003708 <rf24_mac_setup_transmission+0xec>)
 80036be:	7bfb      	ldrb	r3, [r7, #15]
 80036c0:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36

		// Free PAYLOAD (of former transmission)
		free(mac_transmission.payload);
 80036c4:	4b10      	ldr	r3, [pc, #64]	; (8003708 <rf24_mac_setup_transmission+0xec>)
 80036c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c8:	4618      	mov	r0, r3
 80036ca:	f003 faf3 	bl	8006cb4 <free>

		// Allocate memory for PAYLOAD
		mac_transmission.payload = (uint8_t*) malloc(payload_length * sizeof(uint8_t));
 80036ce:	7f3b      	ldrb	r3, [r7, #28]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f003 fae7 	bl	8006ca4 <malloc>
 80036d6:	4603      	mov	r3, r0
 80036d8:	461a      	mov	r2, r3
 80036da:	4b0b      	ldr	r3, [pc, #44]	; (8003708 <rf24_mac_setup_transmission+0xec>)
 80036dc:	631a      	str	r2, [r3, #48]	; 0x30

		// Copy PAYLOAD to MAC transmission
		memcpy(mac_transmission.payload, payload, payload_length);
 80036de:	4b0a      	ldr	r3, [pc, #40]	; (8003708 <rf24_mac_setup_transmission+0xec>)
 80036e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e2:	7f3a      	ldrb	r2, [r7, #28]
 80036e4:	69b9      	ldr	r1, [r7, #24]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f003 fafb 	bl	8006ce2 <memcpy>
 80036ec:	e003      	b.n	80036f6 <rf24_mac_setup_transmission+0xda>
	}
	else mac_transmission.n_frames = 1;
 80036ee:	4b06      	ldr	r3, [pc, #24]	; (8003708 <rf24_mac_setup_transmission+0xec>)
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	// Set transmission to state INITIALIZED
	rf24_mac_set_transmission_state(INITIALIZED);
 80036f6:	2000      	movs	r0, #0
 80036f8:	f7ff fc5a 	bl	8002fb0 <rf24_mac_set_transmission_state>

	return &mac_transmission;
 80036fc:	4b02      	ldr	r3, [pc, #8]	; (8003708 <rf24_mac_setup_transmission+0xec>)
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	200007c8 	.word	0x200007c8
 800370c:	4ec4ec4f 	.word	0x4ec4ec4f

08003710 <rf24_mac_start_transmission>:

void rf24_mac_start_transmission()
{
 8003710:	b5b0      	push	{r4, r5, r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
	mac_transmission.attempts++;
 8003716:	4b2a      	ldr	r3, [pc, #168]	; (80037c0 <rf24_mac_start_transmission+0xb0>)
 8003718:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800371c:	3301      	adds	r3, #1
 800371e:	b2da      	uxtb	r2, r3
 8003720:	4b27      	ldr	r3, [pc, #156]	; (80037c0 <rf24_mac_start_transmission+0xb0>)
 8003722:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	mac_transmission.frame_count++;
 8003726:	4b26      	ldr	r3, [pc, #152]	; (80037c0 <rf24_mac_start_transmission+0xb0>)
 8003728:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800372c:	3301      	adds	r3, #1
 800372e:	b2da      	uxtb	r2, r3
 8003730:	4b23      	ldr	r3, [pc, #140]	; (80037c0 <rf24_mac_start_transmission+0xb0>)
 8003732:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

	//1)______________________________________________________________________________
	// Build "send_mac_frame" task
	struct rf24_task *task = rf24_worker_build_task(send_mac_frame, 1, T_SIFS_US, false);
 8003736:	2300      	movs	r3, #0
 8003738:	22c8      	movs	r2, #200	; 0xc8
 800373a:	2101      	movs	r1, #1
 800373c:	2009      	movs	r0, #9
 800373e:	f001 fcd9 	bl	80050f4 <rf24_worker_build_task>
 8003742:	6078      	str	r0, [r7, #4]

	// In case transmission has payload, convert payload into mac_frame
	switch(mac_transmission.frame_type)
 8003744:	4b1e      	ldr	r3, [pc, #120]	; (80037c0 <rf24_mac_start_transmission+0xb0>)
 8003746:	78db      	ldrb	r3, [r3, #3]
 8003748:	2b03      	cmp	r3, #3
 800374a:	d106      	bne.n	800375a <rf24_mac_start_transmission+0x4a>
	{
		// If transmission is of type DATA, convert PAYLOAD into DATA_DATA frames
		case DATA:
			rf24_mac_payload_to_data_frame(&mac_transmission, &task->data.mac.mac_frame);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	330c      	adds	r3, #12
 8003750:	4619      	mov	r1, r3
 8003752:	481b      	ldr	r0, [pc, #108]	; (80037c0 <rf24_mac_start_transmission+0xb0>)
 8003754:	f7ff fdf6 	bl	8003344 <rf24_mac_payload_to_data_frame>
			break;
 8003758:	e014      	b.n	8003784 <rf24_mac_start_transmission+0x74>
		// Otherwise take given MAC frame and proceed
		default:
			task->data.mac.mac_frame = mac_transmission.mac_frame;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a18      	ldr	r2, [pc, #96]	; (80037c0 <rf24_mac_start_transmission+0xb0>)
 800375e:	f103 040c 	add.w	r4, r3, #12
 8003762:	f102 0511 	add.w	r5, r2, #17
 8003766:	6828      	ldr	r0, [r5, #0]
 8003768:	6869      	ldr	r1, [r5, #4]
 800376a:	68aa      	ldr	r2, [r5, #8]
 800376c:	68eb      	ldr	r3, [r5, #12]
 800376e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003770:	6928      	ldr	r0, [r5, #16]
 8003772:	6969      	ldr	r1, [r5, #20]
 8003774:	69aa      	ldr	r2, [r5, #24]
 8003776:	c407      	stmia	r4!, {r0, r1, r2}
 8003778:	8bab      	ldrh	r3, [r5, #28]
 800377a:	7faa      	ldrb	r2, [r5, #30]
 800377c:	8023      	strh	r3, [r4, #0]
 800377e:	4613      	mov	r3, r2
 8003780:	70a3      	strb	r3, [r4, #2]
			break;
 8003782:	bf00      	nop
	}

	// Attach "send_mac_frame" task to task pipe
	rf24_worker_attach(task, rf24_mac_send_mac_frame);
 8003784:	490f      	ldr	r1, [pc, #60]	; (80037c4 <rf24_mac_start_transmission+0xb4>)
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f001 fc96 	bl	80050b8 <rf24_worker_attach>

	// Notice transmission ACTIVE
	rf24_mac_set_transmission_state(ACTIVE);
 800378c:	2001      	movs	r0, #1
 800378e:	f7ff fc0f 	bl	8002fb0 <rf24_mac_set_transmission_state>

	//2)______________________________________________________________________________
	// In case transmission is UNICAST, attach "wait_for_ack" task to task pipe
	switch(mac_transmission.communication_type)
 8003792:	4b0b      	ldr	r3, [pc, #44]	; (80037c0 <rf24_mac_start_transmission+0xb0>)
 8003794:	789b      	ldrb	r3, [r3, #2]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d000      	beq.n	800379c <rf24_mac_start_transmission+0x8c>
			task = rf24_worker_build_task(wait_for_ack, 1, T_ACK_TIMEOUT_US, false);
			// Attach to task pipe
			rf24_worker_attach(task, rf24_mac_ack_timeout);
			break;
		default:
			break;
 800379a:	e00c      	b.n	80037b6 <rf24_mac_start_transmission+0xa6>
			task = rf24_worker_build_task(wait_for_ack, 1, T_ACK_TIMEOUT_US, false);
 800379c:	2300      	movs	r3, #0
 800379e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80037a2:	2101      	movs	r1, #1
 80037a4:	200a      	movs	r0, #10
 80037a6:	f001 fca5 	bl	80050f4 <rf24_worker_build_task>
 80037aa:	6078      	str	r0, [r7, #4]
			rf24_worker_attach(task, rf24_mac_ack_timeout);
 80037ac:	4906      	ldr	r1, [pc, #24]	; (80037c8 <rf24_mac_start_transmission+0xb8>)
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f001 fc82 	bl	80050b8 <rf24_worker_attach>
			break;
 80037b4:	bf00      	nop
	}
}
 80037b6:	bf00      	nop
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bdb0      	pop	{r4, r5, r7, pc}
 80037be:	bf00      	nop
 80037c0:	200007c8 	.word	0x200007c8
 80037c4:	08003179 	.word	0x08003179
 80037c8:	08002de1 	.word	0x08002de1

080037cc <rf24_mac_transfer_frame>:

void rf24_mac_transfer_frame(rf24_mac_communication_type communication_type, rf24_mac_frame *mac_frame)
{
 80037cc:	b5b0      	push	{r4, r5, r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af02      	add	r7, sp, #8
 80037d2:	4603      	mov	r3, r0
 80037d4:	6039      	str	r1, [r7, #0]
 80037d6:	71fb      	strb	r3, [r7, #7]
	// In case transmitter is not already set
	mac_frame->transmitter = mac_addr;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	4a21      	ldr	r2, [pc, #132]	; (8003860 <rf24_mac_transfer_frame+0x94>)
 80037dc:	330a      	adds	r3, #10
 80037de:	6811      	ldr	r1, [r2, #0]
 80037e0:	6019      	str	r1, [r3, #0]
 80037e2:	8892      	ldrh	r2, [r2, #4]
 80037e4:	809a      	strh	r2, [r3, #4]
	mac_frame->id = 1;
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2201      	movs	r2, #1
 80037ea:	741a      	strb	r2, [r3, #16]
	// 1)_________________________________________________________
	// Setup a MAC transmission

	rf24_mac_setup_transmission(
		communication_type,					/* UNICAST/BROADCAST*/
		mac_frame->frame_control.type,		/* TOPOLOGY/DATA/..*/
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	f3c3 0383 	ubfx	r3, r3, #2, #4
 80037f4:	b2db      	uxtb	r3, r3
	rf24_mac_setup_transmission(
 80037f6:	4619      	mov	r1, r3
		mac_frame->frame_control.subtype,	/* DATA/DATA_TOPOLOGY/..*/
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	781a      	ldrb	r2, [r3, #0]
 80037fc:	0992      	lsrs	r2, r2, #6
 80037fe:	b2d2      	uxtb	r2, r2
 8003800:	785b      	ldrb	r3, [r3, #1]
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	4313      	orrs	r3, r2
 800380a:	b2db      	uxtb	r3, r3
	rf24_mac_setup_transmission(
 800380c:	461c      	mov	r4, r3
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	1d1a      	adds	r2, r3, #4
 8003812:	79f8      	ldrb	r0, [r7, #7]
 8003814:	2300      	movs	r3, #0
 8003816:	9301      	str	r3, [sp, #4]
 8003818:	2300      	movs	r3, #0
 800381a:	9300      	str	r3, [sp, #0]
 800381c:	4613      	mov	r3, r2
 800381e:	4622      	mov	r2, r4
 8003820:	f7ff fefc 	bl	800361c <rf24_mac_setup_transmission>
		NULL, 								/* PAYLOAD*/
		0 									/* PAYLOAD_LENGTH */);

	// 2)_________________________________________________________
	// Copy MAC frame
	mac_transmission.mac_frame = *mac_frame;
 8003824:	4b0f      	ldr	r3, [pc, #60]	; (8003864 <rf24_mac_transfer_frame+0x98>)
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	3311      	adds	r3, #17
 800382a:	6814      	ldr	r4, [r2, #0]
 800382c:	6850      	ldr	r0, [r2, #4]
 800382e:	6891      	ldr	r1, [r2, #8]
 8003830:	68d5      	ldr	r5, [r2, #12]
 8003832:	601c      	str	r4, [r3, #0]
 8003834:	6058      	str	r0, [r3, #4]
 8003836:	6099      	str	r1, [r3, #8]
 8003838:	60dd      	str	r5, [r3, #12]
 800383a:	6914      	ldr	r4, [r2, #16]
 800383c:	6950      	ldr	r0, [r2, #20]
 800383e:	6991      	ldr	r1, [r2, #24]
 8003840:	611c      	str	r4, [r3, #16]
 8003842:	6158      	str	r0, [r3, #20]
 8003844:	6199      	str	r1, [r3, #24]
 8003846:	8b91      	ldrh	r1, [r2, #28]
 8003848:	7f92      	ldrb	r2, [r2, #30]
 800384a:	8399      	strh	r1, [r3, #28]
 800384c:	779a      	strb	r2, [r3, #30]

	// 3)_________________________________________________________
	// Get access to medium (CSMA/CA)
	rf24_csma_ca_access_medium(&mac_transmission, 0, rf24_mac_start_transmission);
 800384e:	4a06      	ldr	r2, [pc, #24]	; (8003868 <rf24_mac_transfer_frame+0x9c>)
 8003850:	2100      	movs	r1, #0
 8003852:	4804      	ldr	r0, [pc, #16]	; (8003864 <rf24_mac_transfer_frame+0x98>)
 8003854:	f7ff f878 	bl	8002948 <rf24_csma_ca_access_medium>
}
 8003858:	bf00      	nop
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bdb0      	pop	{r4, r5, r7, pc}
 8003860:	200007c0 	.word	0x200007c0
 8003864:	200007c8 	.word	0x200007c8
 8003868:	08003711 	.word	0x08003711

0800386c <rf24_mac_transfer_data>:
void rf24_mac_transfer_data(
	rf24_mac_communication_type communication_type,
	rf24_mac_addr *receiver,
	rf24_mac_frame_subtype mac_frame_subtype,
	uint8_t *payload,
	uint8_t length){
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af02      	add	r7, sp, #8
 8003872:	60b9      	str	r1, [r7, #8]
 8003874:	607b      	str	r3, [r7, #4]
 8003876:	4603      	mov	r3, r0
 8003878:	73fb      	strb	r3, [r7, #15]
 800387a:	4613      	mov	r3, r2
 800387c:	73bb      	strb	r3, [r7, #14]

	// 1)_________________________________________________________
	// Setup a new MAC transmission

	rf24_mac_setup_transmission(
 800387e:	7bba      	ldrb	r2, [r7, #14]
 8003880:	7bf8      	ldrb	r0, [r7, #15]
 8003882:	7e3b      	ldrb	r3, [r7, #24]
 8003884:	9301      	str	r3, [sp, #4]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	2103      	movs	r1, #3
 800388e:	f7ff fec5 	bl	800361c <rf24_mac_setup_transmission>
			length);

	// 2)_________________________________________________________
	// Get access to medium (CSMA/CA)

	rf24_csma_ca_access_medium(&mac_transmission, 0, rf24_mac_start_transmission);
 8003892:	4a04      	ldr	r2, [pc, #16]	; (80038a4 <rf24_mac_transfer_data+0x38>)
 8003894:	2100      	movs	r1, #0
 8003896:	4804      	ldr	r0, [pc, #16]	; (80038a8 <rf24_mac_transfer_data+0x3c>)
 8003898:	f7ff f856 	bl	8002948 <rf24_csma_ca_access_medium>
}
 800389c:	bf00      	nop
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	08003711 	.word	0x08003711
 80038a8:	200007c8 	.word	0x200007c8

080038ac <rf24_mac_print_payload>:

void rf24_mac_print_payload(rf24_mac_transmission *transmission)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < transmission->payload_length; i++)
 80038b4:	2300      	movs	r3, #0
 80038b6:	73fb      	strb	r3, [r7, #15]
 80038b8:	e00b      	b.n	80038d2 <rf24_mac_print_payload+0x26>
	{
		rf24_printf("%d ",transmission->payload[i]);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038be:	7bfb      	ldrb	r3, [r7, #15]
 80038c0:	4413      	add	r3, r2
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	4619      	mov	r1, r3
 80038c6:	4809      	ldr	r0, [pc, #36]	; (80038ec <rf24_mac_print_payload+0x40>)
 80038c8:	f7fd fd4e 	bl	8001368 <rf24_printf>
	for (i = 0; i < transmission->payload_length; i++)
 80038cc:	7bfb      	ldrb	r3, [r7, #15]
 80038ce:	3301      	adds	r3, #1
 80038d0:	73fb      	strb	r3, [r7, #15]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80038d8:	7bfa      	ldrb	r2, [r7, #15]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d3ed      	bcc.n	80038ba <rf24_mac_print_payload+0xe>
	}

	rf24_printf("\n");
 80038de:	4804      	ldr	r0, [pc, #16]	; (80038f0 <rf24_mac_print_payload+0x44>)
 80038e0:	f7fd fd42 	bl	8001368 <rf24_printf>

}
 80038e4:	bf00      	nop
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	08008ca0 	.word	0x08008ca0
 80038f0:	08008ca4 	.word	0x08008ca4

080038f4 <rf24_mac_print_frame>:

void rf24_mac_print_frame(rf24_mac_frame *mac_frame)
{
 80038f4:	b5b0      	push	{r4, r5, r7, lr}
 80038f6:	b088      	sub	sp, #32
 80038f8:	af04      	add	r7, sp, #16
 80038fa:	6078      	str	r0, [r7, #4]
	rf24_printf("%d:%d:%d:%d:%d:%d",
		mac_frame->transmitter.bytes[0],
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	7a9b      	ldrb	r3, [r3, #10]
	rf24_printf("%d:%d:%d:%d:%d:%d",
 8003900:	4618      	mov	r0, r3
		mac_frame->transmitter.bytes[1],
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	7adb      	ldrb	r3, [r3, #11]
	rf24_printf("%d:%d:%d:%d:%d:%d",
 8003906:	461c      	mov	r4, r3
		mac_frame->transmitter.bytes[2],
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	7b1b      	ldrb	r3, [r3, #12]
	rf24_printf("%d:%d:%d:%d:%d:%d",
 800390c:	461d      	mov	r5, r3
		mac_frame->transmitter.bytes[3],
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	7b5b      	ldrb	r3, [r3, #13]
	rf24_printf("%d:%d:%d:%d:%d:%d",
 8003912:	461a      	mov	r2, r3
		mac_frame->transmitter.bytes[4],
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	7b9b      	ldrb	r3, [r3, #14]
	rf24_printf("%d:%d:%d:%d:%d:%d",
 8003918:	4619      	mov	r1, r3
		mac_frame->transmitter.bytes[5]);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	7bdb      	ldrb	r3, [r3, #15]
	rf24_printf("%d:%d:%d:%d:%d:%d",
 800391e:	9302      	str	r3, [sp, #8]
 8003920:	9101      	str	r1, [sp, #4]
 8003922:	9200      	str	r2, [sp, #0]
 8003924:	462b      	mov	r3, r5
 8003926:	4622      	mov	r2, r4
 8003928:	4601      	mov	r1, r0
 800392a:	482e      	ldr	r0, [pc, #184]	; (80039e4 <rf24_mac_print_frame+0xf0>)
 800392c:	f7fd fd1c 	bl	8001368 <rf24_printf>

	rf24_printf(" %d:%d:%d:%d:%d:%d",
		mac_frame->receiver.bytes[0],
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	791b      	ldrb	r3, [r3, #4]
	rf24_printf(" %d:%d:%d:%d:%d:%d",
 8003934:	4618      	mov	r0, r3
		mac_frame->receiver.bytes[1],
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	795b      	ldrb	r3, [r3, #5]
	rf24_printf(" %d:%d:%d:%d:%d:%d",
 800393a:	461c      	mov	r4, r3
		mac_frame->receiver.bytes[2],
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	799b      	ldrb	r3, [r3, #6]
	rf24_printf(" %d:%d:%d:%d:%d:%d",
 8003940:	461d      	mov	r5, r3
		mac_frame->receiver.bytes[3],
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	79db      	ldrb	r3, [r3, #7]
	rf24_printf(" %d:%d:%d:%d:%d:%d",
 8003946:	461a      	mov	r2, r3
		mac_frame->receiver.bytes[4],
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	7a1b      	ldrb	r3, [r3, #8]
	rf24_printf(" %d:%d:%d:%d:%d:%d",
 800394c:	4619      	mov	r1, r3
		mac_frame->receiver.bytes[5]);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	7a5b      	ldrb	r3, [r3, #9]
	rf24_printf(" %d:%d:%d:%d:%d:%d",
 8003952:	9302      	str	r3, [sp, #8]
 8003954:	9101      	str	r1, [sp, #4]
 8003956:	9200      	str	r2, [sp, #0]
 8003958:	462b      	mov	r3, r5
 800395a:	4622      	mov	r2, r4
 800395c:	4601      	mov	r1, r0
 800395e:	4822      	ldr	r0, [pc, #136]	; (80039e8 <rf24_mac_print_frame+0xf4>)
 8003960:	f7fd fd02 	bl	8001368 <rf24_printf>

	rf24_printf(" %-14s %-14s",
				rf24_mac_frame_type_string[mac_frame->frame_control.type],
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800396c:	b2db      	uxtb	r3, r3
 800396e:	461a      	mov	r2, r3
	rf24_printf(" %-14s %-14s",
 8003970:	4b1e      	ldr	r3, [pc, #120]	; (80039ec <rf24_mac_print_frame+0xf8>)
 8003972:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
				rf24_mac_frame_subtype_string_short[mac_frame->frame_control.subtype]);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	781a      	ldrb	r2, [r3, #0]
 800397a:	0992      	lsrs	r2, r2, #6
 800397c:	b2d2      	uxtb	r2, r2
 800397e:	785b      	ldrb	r3, [r3, #1]
 8003980:	f003 0303 	and.w	r3, r3, #3
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	4313      	orrs	r3, r2
 8003988:	b2db      	uxtb	r3, r3
 800398a:	461a      	mov	r2, r3
	rf24_printf(" %-14s %-14s",
 800398c:	4b18      	ldr	r3, [pc, #96]	; (80039f0 <rf24_mac_print_frame+0xfc>)
 800398e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003992:	461a      	mov	r2, r3
 8003994:	4817      	ldr	r0, [pc, #92]	; (80039f4 <rf24_mac_print_frame+0x100>)
 8003996:	f7fd fce7 	bl	8001368 <rf24_printf>

	switch(mac_frame->frame_control.type)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	f3c3 0383 	ubfx	r3, r3, #2, #4
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b03      	cmp	r3, #3
 80039a6:	d000      	beq.n	80039aa <rf24_mac_print_frame+0xb6>
		case DATA:
		{
			for(int i=0; i<mac_frame->data.header.length; i++) rf24_printf("%d ", mac_frame->data.payload[i]);
			break;
		}
		default: break;
 80039a8:	e015      	b.n	80039d6 <rf24_mac_print_frame+0xe2>
			for(int i=0; i<mac_frame->data.header.length; i++) rf24_printf("%d ", mac_frame->data.payload[i]);
 80039aa:	2300      	movs	r3, #0
 80039ac:	60fb      	str	r3, [r7, #12]
 80039ae:	e00b      	b.n	80039c8 <rf24_mac_print_frame+0xd4>
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	4413      	add	r3, r2
 80039b6:	3312      	adds	r3, #18
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	4619      	mov	r1, r3
 80039bc:	480e      	ldr	r0, [pc, #56]	; (80039f8 <rf24_mac_print_frame+0x104>)
 80039be:	f7fd fcd3 	bl	8001368 <rf24_printf>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	3301      	adds	r3, #1
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	7c5b      	ldrb	r3, [r3, #17]
 80039cc:	461a      	mov	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	4293      	cmp	r3, r2
 80039d2:	dbed      	blt.n	80039b0 <rf24_mac_print_frame+0xbc>
			break;
 80039d4:	bf00      	nop
	}

	rf24_printf("\n");
 80039d6:	4809      	ldr	r0, [pc, #36]	; (80039fc <rf24_mac_print_frame+0x108>)
 80039d8:	f7fd fcc6 	bl	8001368 <rf24_printf>
}
 80039dc:	bf00      	nop
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bdb0      	pop	{r4, r5, r7, pc}
 80039e4:	08008ca8 	.word	0x08008ca8
 80039e8:	08008cbc 	.word	0x08008cbc
 80039ec:	2000033c 	.word	0x2000033c
 80039f0:	20000380 	.word	0x20000380
 80039f4:	08008cd0 	.word	0x08008cd0
 80039f8:	08008ca0 	.word	0x08008ca0
 80039fc:	08008ca4 	.word	0x08008ca4

08003a00 <rf24_mac_print_timings>:

void rf24_mac_print_timings()
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af06      	add	r7, sp, #24
	rf24_debug(MAC, INFO, VOID, VOID, NULL, "%-25s %dus\n", "T_PROCESSING_US", T_PROCESSING_US);
 8003a06:	23c8      	movs	r3, #200	; 0xc8
 8003a08:	9303      	str	r3, [sp, #12]
 8003a0a:	4b53      	ldr	r3, [pc, #332]	; (8003b58 <rf24_mac_print_timings+0x158>)
 8003a0c:	9302      	str	r3, [sp, #8]
 8003a0e:	4b53      	ldr	r3, [pc, #332]	; (8003b5c <rf24_mac_print_timings+0x15c>)
 8003a10:	9301      	str	r3, [sp, #4]
 8003a12:	2300      	movs	r3, #0
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	2300      	movs	r3, #0
 8003a18:	2200      	movs	r2, #0
 8003a1a:	2106      	movs	r1, #6
 8003a1c:	2002      	movs	r0, #2
 8003a1e:	f7fd fbf3 	bl	8001208 <rf24_debug>
	rf24_debug(MAC, INFO, VOID, VOID, NULL, "%-25s %dmsm %dus\n", "T_SLOT_US", T_SLOT_MS, T_SLOT_US);
 8003a22:	2332      	movs	r3, #50	; 0x32
 8003a24:	9304      	str	r3, [sp, #16]
 8003a26:	2300      	movs	r3, #0
 8003a28:	9303      	str	r3, [sp, #12]
 8003a2a:	4b4d      	ldr	r3, [pc, #308]	; (8003b60 <rf24_mac_print_timings+0x160>)
 8003a2c:	9302      	str	r3, [sp, #8]
 8003a2e:	4b4d      	ldr	r3, [pc, #308]	; (8003b64 <rf24_mac_print_timings+0x164>)
 8003a30:	9301      	str	r3, [sp, #4]
 8003a32:	2300      	movs	r3, #0
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	2300      	movs	r3, #0
 8003a38:	2200      	movs	r2, #0
 8003a3a:	2106      	movs	r1, #6
 8003a3c:	2002      	movs	r0, #2
 8003a3e:	f7fd fbe3 	bl	8001208 <rf24_debug>
	rf24_debug(MAC, INFO, VOID, VOID, NULL, "%-25s %dms, %dus\n", "T_SIFS_US", T_SIFS_MS, T_SIFS_US);
 8003a42:	23c8      	movs	r3, #200	; 0xc8
 8003a44:	9304      	str	r3, [sp, #16]
 8003a46:	2300      	movs	r3, #0
 8003a48:	9303      	str	r3, [sp, #12]
 8003a4a:	4b47      	ldr	r3, [pc, #284]	; (8003b68 <rf24_mac_print_timings+0x168>)
 8003a4c:	9302      	str	r3, [sp, #8]
 8003a4e:	4b47      	ldr	r3, [pc, #284]	; (8003b6c <rf24_mac_print_timings+0x16c>)
 8003a50:	9301      	str	r3, [sp, #4]
 8003a52:	2300      	movs	r3, #0
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	2300      	movs	r3, #0
 8003a58:	2200      	movs	r2, #0
 8003a5a:	2106      	movs	r1, #6
 8003a5c:	2002      	movs	r0, #2
 8003a5e:	f7fd fbd3 	bl	8001208 <rf24_debug>
	rf24_debug(MAC, INFO, VOID, VOID, NULL, "%-25s %dms, %dus\n", "T_DIFS_US", T_DIFS_MS, T_DIFS_US);
 8003a62:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003a66:	9304      	str	r3, [sp, #16]
 8003a68:	2364      	movs	r3, #100	; 0x64
 8003a6a:	9303      	str	r3, [sp, #12]
 8003a6c:	4b40      	ldr	r3, [pc, #256]	; (8003b70 <rf24_mac_print_timings+0x170>)
 8003a6e:	9302      	str	r3, [sp, #8]
 8003a70:	4b3e      	ldr	r3, [pc, #248]	; (8003b6c <rf24_mac_print_timings+0x16c>)
 8003a72:	9301      	str	r3, [sp, #4]
 8003a74:	2300      	movs	r3, #0
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	2300      	movs	r3, #0
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	2106      	movs	r1, #6
 8003a7e:	2002      	movs	r0, #2
 8003a80:	f7fd fbc2 	bl	8001208 <rf24_debug>
	rf24_debug(MAC, INFO, VOID, VOID, NULL, "%-25s %dms, %dus\n", "T_NAV_RTS_US", T_NAV_RTS_MS, T_NAV_RTS_US);
 8003a84:	f240 23ee 	movw	r3, #750	; 0x2ee
 8003a88:	9304      	str	r3, [sp, #16]
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	9303      	str	r3, [sp, #12]
 8003a8e:	4b39      	ldr	r3, [pc, #228]	; (8003b74 <rf24_mac_print_timings+0x174>)
 8003a90:	9302      	str	r3, [sp, #8]
 8003a92:	4b36      	ldr	r3, [pc, #216]	; (8003b6c <rf24_mac_print_timings+0x16c>)
 8003a94:	9301      	str	r3, [sp, #4]
 8003a96:	2300      	movs	r3, #0
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	2106      	movs	r1, #6
 8003aa0:	2002      	movs	r0, #2
 8003aa2:	f7fd fbb1 	bl	8001208 <rf24_debug>
	rf24_debug(MAC, INFO, VOID, VOID, NULL, "%-25s %dms, %dus\n", "T_NAV_CTS_US", T_NAV_CTS_MS, T_NAV_CTS_US);
 8003aa6:	f240 23ee 	movw	r3, #750	; 0x2ee
 8003aaa:	9304      	str	r3, [sp, #16]
 8003aac:	2300      	movs	r3, #0
 8003aae:	9303      	str	r3, [sp, #12]
 8003ab0:	4b31      	ldr	r3, [pc, #196]	; (8003b78 <rf24_mac_print_timings+0x178>)
 8003ab2:	9302      	str	r3, [sp, #8]
 8003ab4:	4b2d      	ldr	r3, [pc, #180]	; (8003b6c <rf24_mac_print_timings+0x16c>)
 8003ab6:	9301      	str	r3, [sp, #4]
 8003ab8:	2300      	movs	r3, #0
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	2300      	movs	r3, #0
 8003abe:	2200      	movs	r2, #0
 8003ac0:	2106      	movs	r1, #6
 8003ac2:	2002      	movs	r0, #2
 8003ac4:	f7fd fba0 	bl	8001208 <rf24_debug>
	rf24_debug(MAC, INFO, VOID, VOID, NULL, "%-25s %dms, %dus\n", "T_NAV_FRAG_US", T_NAV_FRAG_MS, T_NAV_FRAG_US);
 8003ac8:	f240 23ee 	movw	r3, #750	; 0x2ee
 8003acc:	9304      	str	r3, [sp, #16]
 8003ace:	2300      	movs	r3, #0
 8003ad0:	9303      	str	r3, [sp, #12]
 8003ad2:	4b2a      	ldr	r3, [pc, #168]	; (8003b7c <rf24_mac_print_timings+0x17c>)
 8003ad4:	9302      	str	r3, [sp, #8]
 8003ad6:	4b25      	ldr	r3, [pc, #148]	; (8003b6c <rf24_mac_print_timings+0x16c>)
 8003ad8:	9301      	str	r3, [sp, #4]
 8003ada:	2300      	movs	r3, #0
 8003adc:	9300      	str	r3, [sp, #0]
 8003ade:	2300      	movs	r3, #0
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	2106      	movs	r1, #6
 8003ae4:	2002      	movs	r0, #2
 8003ae6:	f7fd fb8f 	bl	8001208 <rf24_debug>
	rf24_debug(MAC, INFO, VOID, VOID, NULL, "%-25s %dms, %dus\n", "T_NAV_ACK_US", T_NAV_ACK_MS, T_NAV_ACK_US);
 8003aea:	f240 23ee 	movw	r3, #750	; 0x2ee
 8003aee:	9304      	str	r3, [sp, #16]
 8003af0:	2300      	movs	r3, #0
 8003af2:	9303      	str	r3, [sp, #12]
 8003af4:	4b22      	ldr	r3, [pc, #136]	; (8003b80 <rf24_mac_print_timings+0x180>)
 8003af6:	9302      	str	r3, [sp, #8]
 8003af8:	4b1c      	ldr	r3, [pc, #112]	; (8003b6c <rf24_mac_print_timings+0x16c>)
 8003afa:	9301      	str	r3, [sp, #4]
 8003afc:	2300      	movs	r3, #0
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	2300      	movs	r3, #0
 8003b02:	2200      	movs	r2, #0
 8003b04:	2106      	movs	r1, #6
 8003b06:	2002      	movs	r0, #2
 8003b08:	f7fd fb7e 	bl	8001208 <rf24_debug>
	rf24_debug(MAC, INFO, VOID, VOID, NULL, "%-25s %dms, %dus\n", "T_CTS_TIMEOUT_US", T_CTS_TIMEOUT_MS, T_CTS_TIMEOUT_US);
 8003b0c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003b10:	9304      	str	r3, [sp, #16]
 8003b12:	2300      	movs	r3, #0
 8003b14:	9303      	str	r3, [sp, #12]
 8003b16:	4b1b      	ldr	r3, [pc, #108]	; (8003b84 <rf24_mac_print_timings+0x184>)
 8003b18:	9302      	str	r3, [sp, #8]
 8003b1a:	4b14      	ldr	r3, [pc, #80]	; (8003b6c <rf24_mac_print_timings+0x16c>)
 8003b1c:	9301      	str	r3, [sp, #4]
 8003b1e:	2300      	movs	r3, #0
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	2300      	movs	r3, #0
 8003b24:	2200      	movs	r2, #0
 8003b26:	2106      	movs	r1, #6
 8003b28:	2002      	movs	r0, #2
 8003b2a:	f7fd fb6d 	bl	8001208 <rf24_debug>
	rf24_debug(MAC, INFO, VOID, VOID, NULL, "%-25s %dms, %dus\n", "T_ACK_TIMEOUT_US", T_ACK_TIMEOUT_MS, T_ACK_TIMEOUT_US);
 8003b2e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003b32:	9304      	str	r3, [sp, #16]
 8003b34:	2300      	movs	r3, #0
 8003b36:	9303      	str	r3, [sp, #12]
 8003b38:	4b13      	ldr	r3, [pc, #76]	; (8003b88 <rf24_mac_print_timings+0x188>)
 8003b3a:	9302      	str	r3, [sp, #8]
 8003b3c:	4b0b      	ldr	r3, [pc, #44]	; (8003b6c <rf24_mac_print_timings+0x16c>)
 8003b3e:	9301      	str	r3, [sp, #4]
 8003b40:	2300      	movs	r3, #0
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	2300      	movs	r3, #0
 8003b46:	2200      	movs	r2, #0
 8003b48:	2106      	movs	r1, #6
 8003b4a:	2002      	movs	r0, #2
 8003b4c:	f7fd fb5c 	bl	8001208 <rf24_debug>
}
 8003b50:	bf00      	nop
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	08008ce0 	.word	0x08008ce0
 8003b5c:	08008cf0 	.word	0x08008cf0
 8003b60:	08008cfc 	.word	0x08008cfc
 8003b64:	08008d08 	.word	0x08008d08
 8003b68:	08008d1c 	.word	0x08008d1c
 8003b6c:	08008d28 	.word	0x08008d28
 8003b70:	08008d3c 	.word	0x08008d3c
 8003b74:	08008d48 	.word	0x08008d48
 8003b78:	08008d58 	.word	0x08008d58
 8003b7c:	08008d68 	.word	0x08008d68
 8003b80:	08008d78 	.word	0x08008d78
 8003b84:	08008d88 	.word	0x08008d88
 8003b88:	08008d9c 	.word	0x08008d9c

08003b8c <rf24_mac_print_transmission>:

void rf24_mac_print_transmission()
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af04      	add	r7, sp, #16
	rf24_debug(MAC, INFO, VOID, VOID, NULL, "%-25s %s\n", "state", rf24_mac_transmission_states_string[mac_transmission.state]);
 8003b92:	4b67      	ldr	r3, [pc, #412]	; (8003d30 <rf24_mac_print_transmission+0x1a4>)
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	461a      	mov	r2, r3
 8003b98:	4b66      	ldr	r3, [pc, #408]	; (8003d34 <rf24_mac_print_transmission+0x1a8>)
 8003b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b9e:	9303      	str	r3, [sp, #12]
 8003ba0:	4b65      	ldr	r3, [pc, #404]	; (8003d38 <rf24_mac_print_transmission+0x1ac>)
 8003ba2:	9302      	str	r3, [sp, #8]
 8003ba4:	4b65      	ldr	r3, [pc, #404]	; (8003d3c <rf24_mac_print_transmission+0x1b0>)
 8003ba6:	9301      	str	r3, [sp, #4]
 8003ba8:	2300      	movs	r3, #0
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	2300      	movs	r3, #0
 8003bae:	2200      	movs	r2, #0
 8003bb0:	2106      	movs	r1, #6
 8003bb2:	2002      	movs	r0, #2
 8003bb4:	f7fd fb28 	bl	8001208 <rf24_debug>
	rf24_debug(MAC, INFO, VOID, VOID, NULL, "%-25s %s\n", "transmission_type", rf24_mac_transmission_type_string[mac_transmission.transmission_type]);
 8003bb8:	4b5d      	ldr	r3, [pc, #372]	; (8003d30 <rf24_mac_print_transmission+0x1a4>)
 8003bba:	785b      	ldrb	r3, [r3, #1]
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	4b60      	ldr	r3, [pc, #384]	; (8003d40 <rf24_mac_print_transmission+0x1b4>)
 8003bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bc4:	9303      	str	r3, [sp, #12]
 8003bc6:	4b5f      	ldr	r3, [pc, #380]	; (8003d44 <rf24_mac_print_transmission+0x1b8>)
 8003bc8:	9302      	str	r3, [sp, #8]
 8003bca:	4b5c      	ldr	r3, [pc, #368]	; (8003d3c <rf24_mac_print_transmission+0x1b0>)
 8003bcc:	9301      	str	r3, [sp, #4]
 8003bce:	2300      	movs	r3, #0
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	2106      	movs	r1, #6
 8003bd8:	2002      	movs	r0, #2
 8003bda:	f7fd fb15 	bl	8001208 <rf24_debug>
	rf24_debug(MAC, INFO, VOID, VOID, NULL, "%-25s %s\n", "communication_type", rf24_mac_communication_type_string[mac_transmission.communication_type]);
 8003bde:	4b54      	ldr	r3, [pc, #336]	; (8003d30 <rf24_mac_print_transmission+0x1a4>)
 8003be0:	789b      	ldrb	r3, [r3, #2]
 8003be2:	461a      	mov	r2, r3
 8003be4:	4b58      	ldr	r3, [pc, #352]	; (8003d48 <rf24_mac_print_transmission+0x1bc>)
 8003be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bea:	9303      	str	r3, [sp, #12]
 8003bec:	4b57      	ldr	r3, [pc, #348]	; (8003d4c <rf24_mac_print_transmission+0x1c0>)
 8003bee:	9302      	str	r3, [sp, #8]
 8003bf0:	4b52      	ldr	r3, [pc, #328]	; (8003d3c <rf24_mac_print_transmission+0x1b0>)
 8003bf2:	9301      	str	r3, [sp, #4]
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	2106      	movs	r1, #6
 8003bfe:	2002      	movs	r0, #2
 8003c00:	f7fd fb02 	bl	8001208 <rf24_debug>
	rf24_debug(MAC, INFO, VOID, VOID, NULL, "%-25s %s\n", "frame_type", rf24_mac_frame_type_string[mac_transmission.frame_type]);
 8003c04:	4b4a      	ldr	r3, [pc, #296]	; (8003d30 <rf24_mac_print_transmission+0x1a4>)
 8003c06:	78db      	ldrb	r3, [r3, #3]
 8003c08:	461a      	mov	r2, r3
 8003c0a:	4b51      	ldr	r3, [pc, #324]	; (8003d50 <rf24_mac_print_transmission+0x1c4>)
 8003c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c10:	9303      	str	r3, [sp, #12]
 8003c12:	4b50      	ldr	r3, [pc, #320]	; (8003d54 <rf24_mac_print_transmission+0x1c8>)
 8003c14:	9302      	str	r3, [sp, #8]
 8003c16:	4b49      	ldr	r3, [pc, #292]	; (8003d3c <rf24_mac_print_transmission+0x1b0>)
 8003c18:	9301      	str	r3, [sp, #4]
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	2300      	movs	r3, #0
 8003c20:	2200      	movs	r2, #0
 8003c22:	2106      	movs	r1, #6
 8003c24:	2002      	movs	r0, #2
 8003c26:	f7fd faef 	bl	8001208 <rf24_debug>
	rf24_debug(MAC, INFO, VOID, VOID, NULL, "%-25s %s\n", "frame_subtype", rf24_mac_frame_subtype_string[mac_transmission.frame_subtype]);
 8003c2a:	4b41      	ldr	r3, [pc, #260]	; (8003d30 <rf24_mac_print_transmission+0x1a4>)
 8003c2c:	791b      	ldrb	r3, [r3, #4]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	4b49      	ldr	r3, [pc, #292]	; (8003d58 <rf24_mac_print_transmission+0x1cc>)
 8003c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c36:	9303      	str	r3, [sp, #12]
 8003c38:	4b48      	ldr	r3, [pc, #288]	; (8003d5c <rf24_mac_print_transmission+0x1d0>)
 8003c3a:	9302      	str	r3, [sp, #8]
 8003c3c:	4b3f      	ldr	r3, [pc, #252]	; (8003d3c <rf24_mac_print_transmission+0x1b0>)
 8003c3e:	9301      	str	r3, [sp, #4]
 8003c40:	2300      	movs	r3, #0
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	2300      	movs	r3, #0
 8003c46:	2200      	movs	r2, #0
 8003c48:	2106      	movs	r1, #6
 8003c4a:	2002      	movs	r0, #2
 8003c4c:	f7fd fadc 	bl	8001208 <rf24_debug>
	rf24_debug(MAC, INFO, VOID, VOID, NULL, "%-25s %s\n", "transmitter", decimal_to_string(mac_transmission.transmitter.bytes, 6, ':'));
 8003c50:	223a      	movs	r2, #58	; 0x3a
 8003c52:	2106      	movs	r1, #6
 8003c54:	4842      	ldr	r0, [pc, #264]	; (8003d60 <rf24_mac_print_transmission+0x1d4>)
 8003c56:	f7fd fc75 	bl	8001544 <decimal_to_string>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	9303      	str	r3, [sp, #12]
 8003c5e:	4b41      	ldr	r3, [pc, #260]	; (8003d64 <rf24_mac_print_transmission+0x1d8>)
 8003c60:	9302      	str	r3, [sp, #8]
 8003c62:	4b36      	ldr	r3, [pc, #216]	; (8003d3c <rf24_mac_print_transmission+0x1b0>)
 8003c64:	9301      	str	r3, [sp, #4]
 8003c66:	2300      	movs	r3, #0
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	2106      	movs	r1, #6
 8003c70:	2002      	movs	r0, #2
 8003c72:	f7fd fac9 	bl	8001208 <rf24_debug>
	rf24_debug(MAC, INFO, VOID, VOID, NULL, "%-25s %s\n", "receiver", decimal_to_string(mac_transmission.receiver.bytes, 6, ':'));
 8003c76:	223a      	movs	r2, #58	; 0x3a
 8003c78:	2106      	movs	r1, #6
 8003c7a:	483b      	ldr	r0, [pc, #236]	; (8003d68 <rf24_mac_print_transmission+0x1dc>)
 8003c7c:	f7fd fc62 	bl	8001544 <decimal_to_string>
 8003c80:	4603      	mov	r3, r0
 8003c82:	9303      	str	r3, [sp, #12]
 8003c84:	4b39      	ldr	r3, [pc, #228]	; (8003d6c <rf24_mac_print_transmission+0x1e0>)
 8003c86:	9302      	str	r3, [sp, #8]
 8003c88:	4b2c      	ldr	r3, [pc, #176]	; (8003d3c <rf24_mac_print_transmission+0x1b0>)
 8003c8a:	9301      	str	r3, [sp, #4]
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	9300      	str	r3, [sp, #0]
 8003c90:	2300      	movs	r3, #0
 8003c92:	2200      	movs	r2, #0
 8003c94:	2106      	movs	r1, #6
 8003c96:	2002      	movs	r0, #2
 8003c98:	f7fd fab6 	bl	8001208 <rf24_debug>
	rf24_debug(MAC, INFO, VOID, VOID, NULL, "%-25s %d\n", "length", mac_transmission.payload_length);
 8003c9c:	4b24      	ldr	r3, [pc, #144]	; (8003d30 <rf24_mac_print_transmission+0x1a4>)
 8003c9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ca2:	9303      	str	r3, [sp, #12]
 8003ca4:	4b32      	ldr	r3, [pc, #200]	; (8003d70 <rf24_mac_print_transmission+0x1e4>)
 8003ca6:	9302      	str	r3, [sp, #8]
 8003ca8:	4b32      	ldr	r3, [pc, #200]	; (8003d74 <rf24_mac_print_transmission+0x1e8>)
 8003caa:	9301      	str	r3, [sp, #4]
 8003cac:	2300      	movs	r3, #0
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	2106      	movs	r1, #6
 8003cb6:	2002      	movs	r0, #2
 8003cb8:	f7fd faa6 	bl	8001208 <rf24_debug>
	rf24_debug(MAC, INFO, VOID, VOID, NULL, "%-25s %d\n", "index", mac_transmission.payload_index);
 8003cbc:	4b1c      	ldr	r3, [pc, #112]	; (8003d30 <rf24_mac_print_transmission+0x1a4>)
 8003cbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cc2:	9303      	str	r3, [sp, #12]
 8003cc4:	4b2c      	ldr	r3, [pc, #176]	; (8003d78 <rf24_mac_print_transmission+0x1ec>)
 8003cc6:	9302      	str	r3, [sp, #8]
 8003cc8:	4b2a      	ldr	r3, [pc, #168]	; (8003d74 <rf24_mac_print_transmission+0x1e8>)
 8003cca:	9301      	str	r3, [sp, #4]
 8003ccc:	2300      	movs	r3, #0
 8003cce:	9300      	str	r3, [sp, #0]
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	2106      	movs	r1, #6
 8003cd6:	2002      	movs	r0, #2
 8003cd8:	f7fd fa96 	bl	8001208 <rf24_debug>
	rf24_debug(MAC, INFO, VOID, VOID, NULL, "%-25s %d\n", "frame_count", mac_transmission.frame_count);
 8003cdc:	4b14      	ldr	r3, [pc, #80]	; (8003d30 <rf24_mac_print_transmission+0x1a4>)
 8003cde:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8003ce2:	9303      	str	r3, [sp, #12]
 8003ce4:	4b25      	ldr	r3, [pc, #148]	; (8003d7c <rf24_mac_print_transmission+0x1f0>)
 8003ce6:	9302      	str	r3, [sp, #8]
 8003ce8:	4b22      	ldr	r3, [pc, #136]	; (8003d74 <rf24_mac_print_transmission+0x1e8>)
 8003cea:	9301      	str	r3, [sp, #4]
 8003cec:	2300      	movs	r3, #0
 8003cee:	9300      	str	r3, [sp, #0]
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	2106      	movs	r1, #6
 8003cf6:	2002      	movs	r0, #2
 8003cf8:	f7fd fa86 	bl	8001208 <rf24_debug>
	rf24_debug(MAC, INFO, VOID, VOID, NULL, "%-25s %d\n", "attempts", mac_transmission.attempts);
 8003cfc:	4b0c      	ldr	r3, [pc, #48]	; (8003d30 <rf24_mac_print_transmission+0x1a4>)
 8003cfe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d02:	9303      	str	r3, [sp, #12]
 8003d04:	4b1e      	ldr	r3, [pc, #120]	; (8003d80 <rf24_mac_print_transmission+0x1f4>)
 8003d06:	9302      	str	r3, [sp, #8]
 8003d08:	4b1a      	ldr	r3, [pc, #104]	; (8003d74 <rf24_mac_print_transmission+0x1e8>)
 8003d0a:	9301      	str	r3, [sp, #4]
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	9300      	str	r3, [sp, #0]
 8003d10:	2300      	movs	r3, #0
 8003d12:	2200      	movs	r2, #0
 8003d14:	2106      	movs	r1, #6
 8003d16:	2002      	movs	r0, #2
 8003d18:	f7fd fa76 	bl	8001208 <rf24_debug>

	rf24_mac_print_frame(&mac_transmission.mac_frame);
 8003d1c:	4819      	ldr	r0, [pc, #100]	; (8003d84 <rf24_mac_print_transmission+0x1f8>)
 8003d1e:	f7ff fde9 	bl	80038f4 <rf24_mac_print_frame>
	rf24_mac_print_payload(&mac_transmission);
 8003d22:	4803      	ldr	r0, [pc, #12]	; (8003d30 <rf24_mac_print_transmission+0x1a4>)
 8003d24:	f7ff fdc2 	bl	80038ac <rf24_mac_print_payload>
}
 8003d28:	bf00      	nop
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	200007c8 	.word	0x200007c8
 8003d34:	200003c0 	.word	0x200003c0
 8003d38:	08008db0 	.word	0x08008db0
 8003d3c:	08008db8 	.word	0x08008db8
 8003d40:	200003ac 	.word	0x200003ac
 8003d44:	08008dc4 	.word	0x08008dc4
 8003d48:	200003b4 	.word	0x200003b4
 8003d4c:	08008dd8 	.word	0x08008dd8
 8003d50:	2000033c 	.word	0x2000033c
 8003d54:	08008dec 	.word	0x08008dec
 8003d58:	20000354 	.word	0x20000354
 8003d5c:	08008df8 	.word	0x08008df8
 8003d60:	200007d3 	.word	0x200007d3
 8003d64:	08008e08 	.word	0x08008e08
 8003d68:	200007cd 	.word	0x200007cd
 8003d6c:	08008e14 	.word	0x08008e14
 8003d70:	08008e20 	.word	0x08008e20
 8003d74:	08008e28 	.word	0x08008e28
 8003d78:	08008e34 	.word	0x08008e34
 8003d7c:	08008e3c 	.word	0x08008e3c
 8003d80:	08008e48 	.word	0x08008e48
 8003d84:	200007d9 	.word	0x200007d9

08003d88 <rf24_mac_ping_timeout_handler>:


void rf24_mac_ping_timeout_handler()
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0
	ping.requests->t_response_us = 0;
 8003d8c:	4b09      	ldr	r3, [pc, #36]	; (8003db4 <rf24_mac_ping_timeout_handler+0x2c>)
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	2200      	movs	r2, #0
 8003d92:	605a      	str	r2, [r3, #4]
	ping.requests->state = PACKAGE_LOST;
 8003d94:	4b07      	ldr	r3, [pc, #28]	; (8003db4 <rf24_mac_ping_timeout_handler+0x2c>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	2202      	movs	r2, #2
 8003d9a:	705a      	strb	r2, [r3, #1]

	rf24_printf("%-10s %s", "ping", "ping %d timed out or got lost\n", ping.requests->id);
 8003d9c:	4b05      	ldr	r3, [pc, #20]	; (8003db4 <rf24_mac_ping_timeout_handler+0x2c>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	4a05      	ldr	r2, [pc, #20]	; (8003db8 <rf24_mac_ping_timeout_handler+0x30>)
 8003da4:	4905      	ldr	r1, [pc, #20]	; (8003dbc <rf24_mac_ping_timeout_handler+0x34>)
 8003da6:	4806      	ldr	r0, [pc, #24]	; (8003dc0 <rf24_mac_ping_timeout_handler+0x38>)
 8003da8:	f7fd fade 	bl	8001368 <rf24_printf>

	rf24_mac_process_ping();
 8003dac:	f000 f88e 	bl	8003ecc <rf24_mac_process_ping>
}
 8003db0:	bf00      	nop
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	200007b4 	.word	0x200007b4
 8003db8:	08008e54 	.word	0x08008e54
 8003dbc:	08008b78 	.word	0x08008b78
 8003dc0:	08008e74 	.word	0x08008e74

08003dc4 <rf24_mac_send_ping>:

void rf24_mac_send_ping()
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
	// Create a task to send ping request
	struct rf24_task *task = rf24_worker_build_task(send_ping, 1, 0, true);
 8003dca:	2301      	movs	r3, #1
 8003dcc:	2200      	movs	r2, #0
 8003dce:	2101      	movs	r1, #1
 8003dd0:	200d      	movs	r0, #13
 8003dd2:	f001 f98f 	bl	80050f4 <rf24_worker_build_task>
 8003dd6:	6078      	str	r0, [r7, #4]
	task->data.mac.mac_frame.id = ping.index;
 8003dd8:	4b1a      	ldr	r3, [pc, #104]	; (8003e44 <rf24_mac_send_ping+0x80>)
 8003dda:	79da      	ldrb	r2, [r3, #7]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	771a      	strb	r2, [r3, #28]
	task->data.mac.mac_frame.frame_control.type = PING;
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	7b13      	ldrb	r3, [r2, #12]
 8003de4:	2105      	movs	r1, #5
 8003de6:	f361 0385 	bfi	r3, r1, #2, #4
 8003dea:	7313      	strb	r3, [r2, #12]
	task->data.mac.mac_frame.frame_control.subtype = PING_REQUEST;
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	8993      	ldrh	r3, [r2, #12]
 8003df0:	2109      	movs	r1, #9
 8003df2:	f361 1389 	bfi	r3, r1, #6, #4
 8003df6:	8193      	strh	r3, [r2, #12]
	task->data.mac.mac_frame.transmitter = *rf24_mac_get_address();
 8003df8:	f7ff f904 	bl	8003004 <rf24_mac_get_address>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	3316      	adds	r3, #22
 8003e02:	6811      	ldr	r1, [r2, #0]
 8003e04:	6019      	str	r1, [r3, #0]
 8003e06:	8892      	ldrh	r2, [r2, #4]
 8003e08:	809a      	strh	r2, [r3, #4]
	task->data.mac.mac_frame.receiver = ping.receiver;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a0d      	ldr	r2, [pc, #52]	; (8003e44 <rf24_mac_send_ping+0x80>)
 8003e0e:	3310      	adds	r3, #16
 8003e10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e14:	6018      	str	r0, [r3, #0]
 8003e16:	3304      	adds	r3, #4
 8003e18:	8019      	strh	r1, [r3, #0]
	task->data.mac.mac_frame.duration = 0;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	81da      	strh	r2, [r3, #14]

	// Start stop watch
	rf24_worker_start_timer(stopwatch, ms, 100, rf24_mac_ping_timeout_handler);
 8003e20:	4b09      	ldr	r3, [pc, #36]	; (8003e48 <rf24_mac_send_ping+0x84>)
 8003e22:	2264      	movs	r2, #100	; 0x64
 8003e24:	2101      	movs	r1, #1
 8003e26:	2000      	movs	r0, #0
 8003e28:	f001 fa2c 	bl	8005284 <rf24_worker_start_timer>

	// Bind send MAC frame function to task (sends ping immediately)
	rf24_worker_push(task, rf24_mac_send_mac_frame);
 8003e2c:	4907      	ldr	r1, [pc, #28]	; (8003e4c <rf24_mac_send_ping+0x88>)
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f001 f951 	bl	80050d6 <rf24_worker_push>

	ping.requests->state = REQUEST_TRANSMITTED;
 8003e34:	4b03      	ldr	r3, [pc, #12]	; (8003e44 <rf24_mac_send_ping+0x80>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	705a      	strb	r2, [r3, #1]
}
 8003e3c:	bf00      	nop
 8003e3e:	3708      	adds	r7, #8
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	200007b4 	.word	0x200007b4
 8003e48:	08003d89 	.word	0x08003d89
 8003e4c:	08003179 	.word	0x08003179

08003e50 <rf24_mac_start_ping>:

void rf24_mac_start_ping(rf24_mac_addr *receiver, uint8_t pings)
{
 8003e50:	b590      	push	{r4, r7, lr}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	460b      	mov	r3, r1
 8003e5a:	70fb      	strb	r3, [r7, #3]
	ping.receiver = *receiver;
 8003e5c:	4b18      	ldr	r3, [pc, #96]	; (8003ec0 <rf24_mac_start_ping+0x70>)
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	6810      	ldr	r0, [r2, #0]
 8003e62:	6018      	str	r0, [r3, #0]
 8003e64:	8892      	ldrh	r2, [r2, #4]
 8003e66:	809a      	strh	r2, [r3, #4]
	ping.count = pings;
 8003e68:	4a15      	ldr	r2, [pc, #84]	; (8003ec0 <rf24_mac_start_ping+0x70>)
 8003e6a:	78fb      	ldrb	r3, [r7, #3]
 8003e6c:	7193      	strb	r3, [r2, #6]
	ping.index = 1;
 8003e6e:	4b14      	ldr	r3, [pc, #80]	; (8003ec0 <rf24_mac_start_ping+0x70>)
 8003e70:	2201      	movs	r2, #1
 8003e72:	71da      	strb	r2, [r3, #7]

	ping.requests = (struct rf24_mac_ping_request*) malloc(sizeof(struct rf24_mac_ping_request));
 8003e74:	200c      	movs	r0, #12
 8003e76:	f002 ff15 	bl	8006ca4 <malloc>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	4b10      	ldr	r3, [pc, #64]	; (8003ec0 <rf24_mac_start_ping+0x70>)
 8003e80:	609a      	str	r2, [r3, #8]
	ping.requests->id = ping.index;
 8003e82:	4b0f      	ldr	r3, [pc, #60]	; (8003ec0 <rf24_mac_start_ping+0x70>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	4a0e      	ldr	r2, [pc, #56]	; (8003ec0 <rf24_mac_start_ping+0x70>)
 8003e88:	79d2      	ldrb	r2, [r2, #7]
 8003e8a:	701a      	strb	r2, [r3, #0]
	ping.requests->next = NULL;
 8003e8c:	4b0c      	ldr	r3, [pc, #48]	; (8003ec0 <rf24_mac_start_ping+0x70>)
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	2200      	movs	r2, #0
 8003e92:	609a      	str	r2, [r3, #8]

	rf24_printf("%-10s send %d pings to %s\n", "ping", ping.count, decimal_to_string(receiver->bytes, 6, ':'));
 8003e94:	4b0a      	ldr	r3, [pc, #40]	; (8003ec0 <rf24_mac_start_ping+0x70>)
 8003e96:	799b      	ldrb	r3, [r3, #6]
 8003e98:	461c      	mov	r4, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	223a      	movs	r2, #58	; 0x3a
 8003e9e:	2106      	movs	r1, #6
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7fd fb4f 	bl	8001544 <decimal_to_string>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	4622      	mov	r2, r4
 8003eaa:	4906      	ldr	r1, [pc, #24]	; (8003ec4 <rf24_mac_start_ping+0x74>)
 8003eac:	4806      	ldr	r0, [pc, #24]	; (8003ec8 <rf24_mac_start_ping+0x78>)
 8003eae:	f7fd fa5b 	bl	8001368 <rf24_printf>

	rf24_mac_send_ping();
 8003eb2:	f7ff ff87 	bl	8003dc4 <rf24_mac_send_ping>
}
 8003eb6:	bf00      	nop
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd90      	pop	{r4, r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	200007b4 	.word	0x200007b4
 8003ec4:	08008b78 	.word	0x08008b78
 8003ec8:	08008e80 	.word	0x08008e80

08003ecc <rf24_mac_process_ping>:

void rf24_mac_process_ping()
{
 8003ecc:	b590      	push	{r4, r7, lr}
 8003ece:	b08b      	sub	sp, #44	; 0x2c
 8003ed0:	af04      	add	r7, sp, #16
	if(ping.index < ping.count)
 8003ed2:	4b29      	ldr	r3, [pc, #164]	; (8003f78 <rf24_mac_process_ping+0xac>)
 8003ed4:	79da      	ldrb	r2, [r3, #7]
 8003ed6:	4b28      	ldr	r3, [pc, #160]	; (8003f78 <rf24_mac_process_ping+0xac>)
 8003ed8:	799b      	ldrb	r3, [r3, #6]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d21b      	bcs.n	8003f16 <rf24_mac_process_ping+0x4a>
	{
		ping.index++;
 8003ede:	4b26      	ldr	r3, [pc, #152]	; (8003f78 <rf24_mac_process_ping+0xac>)
 8003ee0:	79db      	ldrb	r3, [r3, #7]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	b2da      	uxtb	r2, r3
 8003ee6:	4b24      	ldr	r3, [pc, #144]	; (8003f78 <rf24_mac_process_ping+0xac>)
 8003ee8:	71da      	strb	r2, [r3, #7]

		struct rf24_mac_ping_request* ping_request = ping.requests;
 8003eea:	4b23      	ldr	r3, [pc, #140]	; (8003f78 <rf24_mac_process_ping+0xac>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	60bb      	str	r3, [r7, #8]
		ping.requests = (struct rf24_mac_ping_request*) malloc(sizeof(struct rf24_mac_ping_request));
 8003ef0:	200c      	movs	r0, #12
 8003ef2:	f002 fed7 	bl	8006ca4 <malloc>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	461a      	mov	r2, r3
 8003efa:	4b1f      	ldr	r3, [pc, #124]	; (8003f78 <rf24_mac_process_ping+0xac>)
 8003efc:	609a      	str	r2, [r3, #8]
		ping.requests->next = ping_request;
 8003efe:	4b1e      	ldr	r3, [pc, #120]	; (8003f78 <rf24_mac_process_ping+0xac>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	68ba      	ldr	r2, [r7, #8]
 8003f04:	609a      	str	r2, [r3, #8]
		ping.requests->id = ping.index;
 8003f06:	4b1c      	ldr	r3, [pc, #112]	; (8003f78 <rf24_mac_process_ping+0xac>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	4a1b      	ldr	r2, [pc, #108]	; (8003f78 <rf24_mac_process_ping+0xac>)
 8003f0c:	79d2      	ldrb	r2, [r2, #7]
 8003f0e:	701a      	strb	r2, [r3, #0]

		rf24_mac_send_ping();
 8003f10:	f7ff ff58 	bl	8003dc4 <rf24_mac_send_ping>

		rf24_timespan timespan = rf24_worker_us_to_timespan(sum_t_response_us);

		rf24_printf("%-10s %d/%d packages received, average response time %ds %dms %dus \n", "ping", n_successfull_replies, ping.count, timespan.s, timespan.ms, timespan.us);
	}
}
 8003f14:	e02b      	b.n	8003f6e <rf24_mac_process_ping+0xa2>
		struct rf24_mac_ping_request *request = ping.requests;
 8003f16:	4b18      	ldr	r3, [pc, #96]	; (8003f78 <rf24_mac_process_ping+0xac>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	617b      	str	r3, [r7, #20]
		uint8_t n_successfull_replies = 0;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	74fb      	strb	r3, [r7, #19]
		uint32_t sum_t_response_us = 0;
 8003f20:	2300      	movs	r3, #0
 8003f22:	60fb      	str	r3, [r7, #12]
		while(request != NULL)
 8003f24:	e00c      	b.n	8003f40 <rf24_mac_process_ping+0x74>
			if(request->state == REPLY_RECEIVED)
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	785b      	ldrb	r3, [r3, #1]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d105      	bne.n	8003f3a <rf24_mac_process_ping+0x6e>
				n_successfull_replies++;
 8003f2e:	7cfb      	ldrb	r3, [r7, #19]
 8003f30:	3301      	adds	r3, #1
 8003f32:	74fb      	strb	r3, [r7, #19]
				sum_t_response_us = request->t_response_us;
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	60fb      	str	r3, [r7, #12]
			request = request->next;
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	617b      	str	r3, [r7, #20]
		while(request != NULL)
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1ef      	bne.n	8003f26 <rf24_mac_process_ping+0x5a>
		rf24_timespan timespan = rf24_worker_us_to_timespan(sum_t_response_us);
 8003f46:	463b      	mov	r3, r7
 8003f48:	68f9      	ldr	r1, [r7, #12]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f001 fa44 	bl	80053d8 <rf24_worker_us_to_timespan>
		rf24_printf("%-10s %d/%d packages received, average response time %ds %dms %dus \n", "ping", n_successfull_replies, ping.count, timespan.s, timespan.ms, timespan.us);
 8003f50:	7cfa      	ldrb	r2, [r7, #19]
 8003f52:	4b09      	ldr	r3, [pc, #36]	; (8003f78 <rf24_mac_process_ping+0xac>)
 8003f54:	799b      	ldrb	r3, [r3, #6]
 8003f56:	461c      	mov	r4, r3
 8003f58:	783b      	ldrb	r3, [r7, #0]
 8003f5a:	8879      	ldrh	r1, [r7, #2]
 8003f5c:	88b8      	ldrh	r0, [r7, #4]
 8003f5e:	9002      	str	r0, [sp, #8]
 8003f60:	9101      	str	r1, [sp, #4]
 8003f62:	9300      	str	r3, [sp, #0]
 8003f64:	4623      	mov	r3, r4
 8003f66:	4905      	ldr	r1, [pc, #20]	; (8003f7c <rf24_mac_process_ping+0xb0>)
 8003f68:	4805      	ldr	r0, [pc, #20]	; (8003f80 <rf24_mac_process_ping+0xb4>)
 8003f6a:	f7fd f9fd 	bl	8001368 <rf24_printf>
}
 8003f6e:	bf00      	nop
 8003f70:	371c      	adds	r7, #28
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd90      	pop	{r4, r7, pc}
 8003f76:	bf00      	nop
 8003f78:	200007b4 	.word	0x200007b4
 8003f7c:	08008b78 	.word	0x08008b78
 8003f80:	08008e9c 	.word	0x08008e9c

08003f84 <rf24_network_transfer_trm>:

static const char 					*rf24_neighbor_link_states_string[] = { "AVAILABLE", "CONNECTED", "TIMED_OUT", "NO_LINK",};
static const char 					*rf24_neighbor_relation_string[] = { "SUCCESSOR", "PREDECESSOR", "NEIGHBOR" };

void rf24_network_transfer_trm(rf24_mac_addr receiver)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b08a      	sub	sp, #40	; 0x28
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	463b      	mov	r3, r7
 8003f8c:	e883 0003 	stmia.w	r3, {r0, r1}
	// Build a NAM frame
	rf24_mac_frame mac_frame;
	mac_frame.frame_control.type = TOPOLOGY;
 8003f90:	7a3b      	ldrb	r3, [r7, #8]
 8003f92:	2204      	movs	r2, #4
 8003f94:	f362 0385 	bfi	r3, r2, #2, #4
 8003f98:	723b      	strb	r3, [r7, #8]
	mac_frame.frame_control.subtype = TOPOLOGY_REPLY_MESSAGE;
 8003f9a:	893b      	ldrh	r3, [r7, #8]
 8003f9c:	2202      	movs	r2, #2
 8003f9e:	f362 1389 	bfi	r3, r2, #6, #4
 8003fa2:	813b      	strh	r3, [r7, #8]
	mac_frame.transmitter = *rf24_mac_get_address();
 8003fa4:	f7ff f82e 	bl	8003004 <rf24_mac_get_address>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	f107 0312 	add.w	r3, r7, #18
 8003fae:	6811      	ldr	r1, [r2, #0]
 8003fb0:	6019      	str	r1, [r3, #0]
 8003fb2:	8892      	ldrh	r2, [r2, #4]
 8003fb4:	809a      	strh	r2, [r3, #4]
	mac_frame.receiver = receiver;
 8003fb6:	f107 030c 	add.w	r3, r7, #12
 8003fba:	463a      	mov	r2, r7
 8003fbc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fc0:	6018      	str	r0, [r3, #0]
 8003fc2:	3304      	adds	r3, #4
 8003fc4:	8019      	strh	r1, [r3, #0]
	mac_frame.duration = T_NAV_FRAG_MS;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	817b      	strh	r3, [r7, #10]
	mac_frame.id = 1;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	763b      	strb	r3, [r7, #24]
	mac_frame.topology.successor = false;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	76fb      	strb	r3, [r7, #27]

	if(rf24_mac_addr_equal(&predecessor->mac_addr, &receiver)) mac_frame.topology.successor = true;
 8003fd2:	4b0b      	ldr	r3, [pc, #44]	; (8004000 <rf24_network_transfer_trm+0x7c>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	463b      	mov	r3, r7
 8003fda:	4619      	mov	r1, r3
 8003fdc:	4610      	mov	r0, r2
 8003fde:	f7fe ffb1 	bl	8002f44 <rf24_mac_addr_equal>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <rf24_network_transfer_trm+0x68>
 8003fe8:	2301      	movs	r3, #1
 8003fea:	76fb      	strb	r3, [r7, #27]

	// Transfer TRM (CSMA/CA)
	rf24_mac_transfer_frame(UNICAST, &mac_frame);
 8003fec:	f107 0308 	add.w	r3, r7, #8
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	2000      	movs	r0, #0
 8003ff4:	f7ff fbea 	bl	80037cc <rf24_mac_transfer_frame>
}
 8003ff8:	bf00      	nop
 8003ffa:	3728      	adds	r7, #40	; 0x28
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	20000824 	.word	0x20000824

08004004 <rf24_network_mark_as_controller>:

void rf24_network_mark_as_controller()
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af02      	add	r7, sp, #8
	controller = true;
 800400a:	4b08      	ldr	r3, [pc, #32]	; (800402c <rf24_network_mark_as_controller+0x28>)
 800400c:	2201      	movs	r2, #1
 800400e:	701a      	strb	r2, [r3, #0]
	rf24_debug(NETWORK, INFO, VOID, VOID, NULL, "Node has been classified as CONTROLLER\n");
 8004010:	4b07      	ldr	r3, [pc, #28]	; (8004030 <rf24_network_mark_as_controller+0x2c>)
 8004012:	9301      	str	r3, [sp, #4]
 8004014:	2300      	movs	r3, #0
 8004016:	9300      	str	r3, [sp, #0]
 8004018:	2300      	movs	r3, #0
 800401a:	2200      	movs	r2, #0
 800401c:	2106      	movs	r1, #6
 800401e:	2004      	movs	r0, #4
 8004020:	f7fd f8f2 	bl	8001208 <rf24_debug>

}
 8004024:	bf00      	nop
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	20000689 	.word	0x20000689
 8004030:	08009310 	.word	0x08009310

08004034 <rf24_network_mark_as_node>:

void rf24_network_mark_as_node()
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af02      	add	r7, sp, #8
	controller = false;
 800403a:	4b08      	ldr	r3, [pc, #32]	; (800405c <rf24_network_mark_as_node+0x28>)
 800403c:	2200      	movs	r2, #0
 800403e:	701a      	strb	r2, [r3, #0]
	rf24_debug(NETWORK, INFO, VOID, VOID, NULL, "Node has been classified as NETWORK NODE\n");
 8004040:	4b07      	ldr	r3, [pc, #28]	; (8004060 <rf24_network_mark_as_node+0x2c>)
 8004042:	9301      	str	r3, [sp, #4]
 8004044:	2300      	movs	r3, #0
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	2300      	movs	r3, #0
 800404a:	2200      	movs	r2, #0
 800404c:	2106      	movs	r1, #6
 800404e:	2004      	movs	r0, #4
 8004050:	f7fd f8da 	bl	8001208 <rf24_debug>
}
 8004054:	bf00      	nop
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	20000689 	.word	0x20000689
 8004060:	08009338 	.word	0x08009338

08004064 <rf24_network_get_topology>:
{
	return &network_flags;
}

struct rf24_topology* rf24_network_get_topology()
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
	return topology;
 8004068:	4b02      	ldr	r3, [pc, #8]	; (8004074 <rf24_network_get_topology+0x10>)
 800406a:	681b      	ldr	r3, [r3, #0]
}
 800406c:	4618      	mov	r0, r3
 800406e:	46bd      	mov	sp, r7
 8004070:	bc80      	pop	{r7}
 8004072:	4770      	bx	lr
 8004074:	20000698 	.word	0x20000698

08004078 <rf24_network_get_neighbors>:

struct rf24_neighbor* rf24_network_get_neighbors()
{
 8004078:	b480      	push	{r7}
 800407a:	af00      	add	r7, sp, #0
	return neighbors;
 800407c:	4b02      	ldr	r3, [pc, #8]	; (8004088 <rf24_network_get_neighbors+0x10>)
 800407e:	681b      	ldr	r3, [r3, #0]
}
 8004080:	4618      	mov	r0, r3
 8004082:	46bd      	mov	sp, r7
 8004084:	bc80      	pop	{r7}
 8004086:	4770      	bx	lr
 8004088:	20000690 	.word	0x20000690

0800408c <rf24_network_frame_received_handler>:

void rf24_network_frame_received_handler(rf24_mac_frame *mac_frame)
{
 800408c:	b590      	push	{r4, r7, lr}
 800408e:	b089      	sub	sp, #36	; 0x24
 8004090:	af04      	add	r7, sp, #16
 8004092:	6078      	str	r0, [r7, #4]
	switch(mac_frame->frame_control.subtype)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	781a      	ldrb	r2, [r3, #0]
 8004098:	0992      	lsrs	r2, r2, #6
 800409a:	b2d2      	uxtb	r2, r2
 800409c:	785b      	ldrb	r3, [r3, #1]
 800409e:	f003 0303 	and.w	r3, r3, #3
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4313      	orrs	r3, r2
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d000      	beq.n	80040ae <rf24_network_frame_received_handler+0x22>
				}
			}
			break;
		}
	}
}
 80040ac:	e0dc      	b.n	8004268 <rf24_network_frame_received_handler+0x1dc>
			if(mac_frame->topology.id != rf24_network_get_topology_cycle_id() && !controller)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	7c5c      	ldrb	r4, [r3, #17]
 80040b2:	f000 fb59 	bl	8004768 <rf24_network_get_topology_cycle_id>
 80040b6:	4603      	mov	r3, r0
 80040b8:	429c      	cmp	r4, r3
 80040ba:	d03a      	beq.n	8004132 <rf24_network_frame_received_handler+0xa6>
 80040bc:	4b6c      	ldr	r3, [pc, #432]	; (8004270 <rf24_network_frame_received_handler+0x1e4>)
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	f083 0301 	eor.w	r3, r3, #1
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d033      	beq.n	8004132 <rf24_network_frame_received_handler+0xa6>
				rf24_network_reset();
 80040ca:	f000 fab7 	bl	800463c <rf24_network_reset>
				rf24_module_flush_tx();
 80040ce:	f7fd ff61 	bl	8001f94 <rf24_module_flush_tx>
				rf24_module_flush_rx();
 80040d2:	f7fd ff6a 	bl	8001faa <rf24_module_flush_rx>
				rf24_network_mark_as_node();
 80040d6:	f7ff ffad 	bl	8004034 <rf24_network_mark_as_node>
				rf24_network_set_topology_cycle_id(mac_frame->topology.id);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	7c5b      	ldrb	r3, [r3, #17]
 80040de:	4618      	mov	r0, r3
 80040e0:	f000 fb4c 	bl	800477c <rf24_network_set_topology_cycle_id>
				rf24_network_set_hopcount(mac_frame->topology.hop_count + 1);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	7c9b      	ldrb	r3, [r3, #18]
 80040e8:	3301      	adds	r3, #1
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	4618      	mov	r0, r3
 80040ee:	f000 fb55 	bl	800479c <rf24_network_set_hopcount>
				predecessor = rf24_network_add_neighbor(&mac_frame->transmitter, 0, PREDECESSOR, AVAILABLE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f103 000a 	add.w	r0, r3, #10
 80040f8:	2300      	movs	r3, #0
 80040fa:	2201      	movs	r2, #1
 80040fc:	2100      	movs	r1, #0
 80040fe:	f000 fb5d 	bl	80047bc <rf24_network_add_neighbor>
 8004102:	4602      	mov	r2, r0
 8004104:	4b5b      	ldr	r3, [pc, #364]	; (8004274 <rf24_network_frame_received_handler+0x1e8>)
 8004106:	601a      	str	r2, [r3, #0]
				rf24_debug(	NETWORK, RECEIVE, TOPOLOGY_NEIGHBOR_UPDATE_MESSAGE, VOID, &mac_frame->transmitter,
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	330a      	adds	r3, #10
							mac_frame->topology.id, mac_frame->topology.hop_count);
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	7c52      	ldrb	r2, [r2, #17]
				rf24_debug(	NETWORK, RECEIVE, TOPOLOGY_NEIGHBOR_UPDATE_MESSAGE, VOID, &mac_frame->transmitter,
 8004110:	4611      	mov	r1, r2
							mac_frame->topology.id, mac_frame->topology.hop_count);
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	7c92      	ldrb	r2, [r2, #18]
				rf24_debug(	NETWORK, RECEIVE, TOPOLOGY_NEIGHBOR_UPDATE_MESSAGE, VOID, &mac_frame->transmitter,
 8004116:	9203      	str	r2, [sp, #12]
 8004118:	9102      	str	r1, [sp, #8]
 800411a:	4a57      	ldr	r2, [pc, #348]	; (8004278 <rf24_network_frame_received_handler+0x1ec>)
 800411c:	9201      	str	r2, [sp, #4]
 800411e:	9300      	str	r3, [sp, #0]
 8004120:	2300      	movs	r3, #0
 8004122:	2201      	movs	r2, #1
 8004124:	2102      	movs	r1, #2
 8004126:	2004      	movs	r0, #4
 8004128:	f7fd f86e 	bl	8001208 <rf24_debug>
				rf24_network_broadcast_num();
 800412c:	f000 fad4 	bl	80046d8 <rf24_network_broadcast_num>
			break;
 8004130:	e099      	b.n	8004266 <rf24_network_frame_received_handler+0x1da>
				bool from_predecessor = rf24_mac_addr_equal(&mac_frame->transmitter, &predecessor->mac_addr);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f103 020a 	add.w	r2, r3, #10
 8004138:	4b4e      	ldr	r3, [pc, #312]	; (8004274 <rf24_network_frame_received_handler+0x1e8>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4619      	mov	r1, r3
 800413e:	4610      	mov	r0, r2
 8004140:	f7fe ff00 	bl	8002f44 <rf24_mac_addr_equal>
 8004144:	4603      	mov	r3, r0
 8004146:	73fb      	strb	r3, [r7, #15]
				bool addressed_to_me = rf24_mac_addr_equal(&mac_frame->receiver, rf24_mac_get_address());
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	1d1c      	adds	r4, r3, #4
 800414c:	f7fe ff5a 	bl	8003004 <rf24_mac_get_address>
 8004150:	4603      	mov	r3, r0
 8004152:	4619      	mov	r1, r3
 8004154:	4620      	mov	r0, r4
 8004156:	f7fe fef5 	bl	8002f44 <rf24_mac_addr_equal>
 800415a:	4603      	mov	r3, r0
 800415c:	73bb      	strb	r3, [r7, #14]
				if(addressed_to_me)
 800415e:	7bbb      	ldrb	r3, [r7, #14]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d060      	beq.n	8004226 <rf24_network_frame_received_handler+0x19a>
					rf24_network_add_neighbor(&mac_frame->transmitter, 0, SUCCESSOR, AVAILABLE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f103 000a 	add.w	r0, r3, #10
 800416a:	2300      	movs	r3, #0
 800416c:	2200      	movs	r2, #0
 800416e:	2100      	movs	r1, #0
 8004170:	f000 fb24 	bl	80047bc <rf24_network_add_neighbor>
					if(!rf24_mac_transmission_is_active())
 8004174:	f7fe ff06 	bl	8002f84 <rf24_mac_transmission_is_active>
 8004178:	4603      	mov	r3, r0
 800417a:	f083 0301 	eor.w	r3, r3, #1
 800417e:	b2db      	uxtb	r3, r3
 8004180:	2b00      	cmp	r3, #0
 8004182:	d03e      	beq.n	8004202 <rf24_network_frame_received_handler+0x176>
						if(predecessor->link_state == CONNECTED || controller)
 8004184:	4b3b      	ldr	r3, [pc, #236]	; (8004274 <rf24_network_frame_received_handler+0x1e8>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	799b      	ldrb	r3, [r3, #6]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d003      	beq.n	8004196 <rf24_network_frame_received_handler+0x10a>
 800418e:	4b38      	ldr	r3, [pc, #224]	; (8004270 <rf24_network_frame_received_handler+0x1e4>)
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d022      	beq.n	80041dc <rf24_network_frame_received_handler+0x150>
							rf24_debug(	NETWORK, RECEIVE, TOPOLOGY_NEIGHBOR_UPDATE_MESSAGE, VOID, &mac_frame->transmitter,
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	330a      	adds	r3, #10
										mac_frame->topology.id, mac_frame->topology.hop_count);
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	7c52      	ldrb	r2, [r2, #17]
							rf24_debug(	NETWORK, RECEIVE, TOPOLOGY_NEIGHBOR_UPDATE_MESSAGE, VOID, &mac_frame->transmitter,
 800419e:	4611      	mov	r1, r2
										mac_frame->topology.id, mac_frame->topology.hop_count);
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	7c92      	ldrb	r2, [r2, #18]
							rf24_debug(	NETWORK, RECEIVE, TOPOLOGY_NEIGHBOR_UPDATE_MESSAGE, VOID, &mac_frame->transmitter,
 80041a4:	9203      	str	r2, [sp, #12]
 80041a6:	9102      	str	r1, [sp, #8]
 80041a8:	4a34      	ldr	r2, [pc, #208]	; (800427c <rf24_network_frame_received_handler+0x1f0>)
 80041aa:	9201      	str	r2, [sp, #4]
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	2300      	movs	r3, #0
 80041b0:	2201      	movs	r2, #1
 80041b2:	2102      	movs	r1, #2
 80041b4:	2004      	movs	r0, #4
 80041b6:	f7fd f827 	bl	8001208 <rf24_debug>
							rf24_network_transfer_trm(mac_frame->transmitter);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f8d3 200a 	ldr.w	r2, [r3, #10]
 80041c0:	2100      	movs	r1, #0
 80041c2:	4611      	mov	r1, r2
 80041c4:	7b9a      	ldrb	r2, [r3, #14]
 80041c6:	7bdb      	ldrb	r3, [r3, #15]
 80041c8:	021b      	lsls	r3, r3, #8
 80041ca:	431a      	orrs	r2, r3
 80041cc:	2300      	movs	r3, #0
 80041ce:	f362 030f 	bfi	r3, r2, #0, #16
 80041d2:	4608      	mov	r0, r1
 80041d4:	4619      	mov	r1, r3
 80041d6:	f7ff fed5 	bl	8003f84 <rf24_network_transfer_trm>
 80041da:	e024      	b.n	8004226 <rf24_network_frame_received_handler+0x19a>
						else rf24_debug(NETWORK, RECEIVE, TOPOLOGY_NEIGHBOR_UPDATE_MESSAGE, VOID, &mac_frame->transmitter,
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	330a      	adds	r3, #10
										mac_frame->topology.id, mac_frame->topology.hop_count);
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	7c52      	ldrb	r2, [r2, #17]
						else rf24_debug(NETWORK, RECEIVE, TOPOLOGY_NEIGHBOR_UPDATE_MESSAGE, VOID, &mac_frame->transmitter,
 80041e4:	4611      	mov	r1, r2
										mac_frame->topology.id, mac_frame->topology.hop_count);
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	7c92      	ldrb	r2, [r2, #18]
						else rf24_debug(NETWORK, RECEIVE, TOPOLOGY_NEIGHBOR_UPDATE_MESSAGE, VOID, &mac_frame->transmitter,
 80041ea:	9203      	str	r2, [sp, #12]
 80041ec:	9102      	str	r1, [sp, #8]
 80041ee:	4a24      	ldr	r2, [pc, #144]	; (8004280 <rf24_network_frame_received_handler+0x1f4>)
 80041f0:	9201      	str	r2, [sp, #4]
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	2300      	movs	r3, #0
 80041f6:	2201      	movs	r2, #1
 80041f8:	2102      	movs	r1, #2
 80041fa:	2004      	movs	r0, #4
 80041fc:	f7fd f804 	bl	8001208 <rf24_debug>
 8004200:	e011      	b.n	8004226 <rf24_network_frame_received_handler+0x19a>
					else rf24_debug(NETWORK, RECEIVE, TOPOLOGY_NEIGHBOR_UPDATE_MESSAGE, VOID, &mac_frame->transmitter,
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	330a      	adds	r3, #10
									mac_frame->topology.id, mac_frame->topology.hop_count);
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	7c52      	ldrb	r2, [r2, #17]
					else rf24_debug(NETWORK, RECEIVE, TOPOLOGY_NEIGHBOR_UPDATE_MESSAGE, VOID, &mac_frame->transmitter,
 800420a:	4611      	mov	r1, r2
									mac_frame->topology.id, mac_frame->topology.hop_count);
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	7c92      	ldrb	r2, [r2, #18]
					else rf24_debug(NETWORK, RECEIVE, TOPOLOGY_NEIGHBOR_UPDATE_MESSAGE, VOID, &mac_frame->transmitter,
 8004210:	9203      	str	r2, [sp, #12]
 8004212:	9102      	str	r1, [sp, #8]
 8004214:	4a1b      	ldr	r2, [pc, #108]	; (8004284 <rf24_network_frame_received_handler+0x1f8>)
 8004216:	9201      	str	r2, [sp, #4]
 8004218:	9300      	str	r3, [sp, #0]
 800421a:	2300      	movs	r3, #0
 800421c:	2201      	movs	r2, #1
 800421e:	2102      	movs	r1, #2
 8004220:	2004      	movs	r0, #4
 8004222:	f7fc fff1 	bl	8001208 <rf24_debug>
				if(!addressed_to_me)
 8004226:	7bbb      	ldrb	r3, [r7, #14]
 8004228:	f083 0301 	eor.w	r3, r3, #1
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d019      	beq.n	8004266 <rf24_network_frame_received_handler+0x1da>
					rf24_network_add_neighbor(&mac_frame->transmitter, 0, NEIGHBOR, AVAILABLE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f103 000a 	add.w	r0, r3, #10
 8004238:	2300      	movs	r3, #0
 800423a:	2202      	movs	r2, #2
 800423c:	2100      	movs	r1, #0
 800423e:	f000 fabd 	bl	80047bc <rf24_network_add_neighbor>
					rf24_debug(	NETWORK, RECEIVE, TOPOLOGY_NEIGHBOR_UPDATE_MESSAGE, VOID, &mac_frame->transmitter,
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	330a      	adds	r3, #10
								mac_frame->topology.id, mac_frame->topology.hop_count);
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	7c52      	ldrb	r2, [r2, #17]
					rf24_debug(	NETWORK, RECEIVE, TOPOLOGY_NEIGHBOR_UPDATE_MESSAGE, VOID, &mac_frame->transmitter,
 800424a:	4611      	mov	r1, r2
								mac_frame->topology.id, mac_frame->topology.hop_count);
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	7c92      	ldrb	r2, [r2, #18]
					rf24_debug(	NETWORK, RECEIVE, TOPOLOGY_NEIGHBOR_UPDATE_MESSAGE, VOID, &mac_frame->transmitter,
 8004250:	9203      	str	r2, [sp, #12]
 8004252:	9102      	str	r1, [sp, #8]
 8004254:	4a0c      	ldr	r2, [pc, #48]	; (8004288 <rf24_network_frame_received_handler+0x1fc>)
 8004256:	9201      	str	r2, [sp, #4]
 8004258:	9300      	str	r3, [sp, #0]
 800425a:	2300      	movs	r3, #0
 800425c:	2201      	movs	r2, #1
 800425e:	2102      	movs	r1, #2
 8004260:	2004      	movs	r0, #4
 8004262:	f7fc ffd1 	bl	8001208 <rf24_debug>
			break;
 8004266:	bf00      	nop
}
 8004268:	bf00      	nop
 800426a:	3714      	adds	r7, #20
 800426c:	46bd      	mov	sp, r7
 800426e:	bd90      	pop	{r4, r7, pc}
 8004270:	20000689 	.word	0x20000689
 8004274:	20000824 	.word	0x20000824
 8004278:	08009364 	.word	0x08009364
 800427c:	080093a4 	.word	0x080093a4
 8004280:	080093e0 	.word	0x080093e0
 8004284:	08009428 	.word	0x08009428
 8004288:	08009470 	.word	0x08009470

0800428c <rf24_network_trm_timeout_handler>:

void rf24_network_trm_timeout_handler()
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af02      	add	r7, sp, #8
	if(!controller)
 8004292:	4b0e      	ldr	r3, [pc, #56]	; (80042cc <rf24_network_trm_timeout_handler+0x40>)
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	f083 0301 	eor.w	r3, r3, #1
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b00      	cmp	r3, #0
 800429e:	d012      	beq.n	80042c6 <rf24_network_trm_timeout_handler+0x3a>
	{
		if(rf24_mac_transmission_is_active())
 80042a0:	f7fe fe70 	bl	8002f84 <rf24_mac_transmission_is_active>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10c      	bne.n	80042c4 <rf24_network_trm_timeout_handler+0x38>
			//rf24_debug(CONTROLLER, TIMEOUT, VOID, VOID, NULL, "[TRM-Timeout] (I AM BUSY)\n");
			return;
		}
		else
		{
			rf24_debug(CONTROLLER, TIMEOUT, TOPOLOGY_REPLY_MESSAGE, VOID, NULL, "retransmit NUM\n");
 80042aa:	4b09      	ldr	r3, [pc, #36]	; (80042d0 <rf24_network_trm_timeout_handler+0x44>)
 80042ac:	9301      	str	r3, [sp, #4]
 80042ae:	2300      	movs	r3, #0
 80042b0:	9300      	str	r3, [sp, #0]
 80042b2:	2300      	movs	r3, #0
 80042b4:	2202      	movs	r2, #2
 80042b6:	2105      	movs	r1, #5
 80042b8:	2005      	movs	r0, #5
 80042ba:	f7fc ffa5 	bl	8001208 <rf24_debug>

			// Re-send NUM(-Reply) to predecessor
			rf24_network_broadcast_num();
 80042be:	f000 fa0b 	bl	80046d8 <rf24_network_broadcast_num>
 80042c2:	e000      	b.n	80042c6 <rf24_network_trm_timeout_handler+0x3a>
			return;
 80042c4:	bf00      	nop
		}
	}
}
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	20000689 	.word	0x20000689
 80042d0:	0800949c 	.word	0x0800949c

080042d4 <rf24_network_num_timeout_handler>:

void rf24_network_num_timeout_handler()
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af02      	add	r7, sp, #8
	uint8_t n_successors = rf24_network_count_successors();
 80042da:	f000 fb5d 	bl	8004998 <rf24_network_count_successors>
 80042de:	4603      	mov	r3, r0
 80042e0:	71fb      	strb	r3, [r7, #7]

	if(n_successors > 0)
 80042e2:	79fb      	ldrb	r3, [r7, #7]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00a      	beq.n	80042fe <rf24_network_num_timeout_handler+0x2a>
	{
		rf24_debug(NETWORK, TIMEOUT, TOPOLOGY_NEIGHBOR_UPDATE_MESSAGE, VOID, NULL, "wait for successor topology data\n");
 80042e8:	4b12      	ldr	r3, [pc, #72]	; (8004334 <rf24_network_num_timeout_handler+0x60>)
 80042ea:	9301      	str	r3, [sp, #4]
 80042ec:	2300      	movs	r3, #0
 80042ee:	9300      	str	r3, [sp, #0]
 80042f0:	2300      	movs	r3, #0
 80042f2:	2201      	movs	r2, #1
 80042f4:	2105      	movs	r1, #5
 80042f6:	2004      	movs	r0, #4
 80042f8:	f7fc ff86 	bl	8001208 <rf24_debug>
		{
			rf24_debug(NETWORK, TIMEOUT, TOPOLOGY_NEIGHBOR_UPDATE_MESSAGE, VOID, NULL, "identified as leaf, transfer topology\n");
			rf24_network_transfer_topology(&predecessor->mac_addr);
		}
	}
}
 80042fc:	e015      	b.n	800432a <rf24_network_num_timeout_handler+0x56>
		if(!controller)
 80042fe:	4b0e      	ldr	r3, [pc, #56]	; (8004338 <rf24_network_num_timeout_handler+0x64>)
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	f083 0301 	eor.w	r3, r3, #1
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00e      	beq.n	800432a <rf24_network_num_timeout_handler+0x56>
			rf24_debug(NETWORK, TIMEOUT, TOPOLOGY_NEIGHBOR_UPDATE_MESSAGE, VOID, NULL, "identified as leaf, transfer topology\n");
 800430c:	4b0b      	ldr	r3, [pc, #44]	; (800433c <rf24_network_num_timeout_handler+0x68>)
 800430e:	9301      	str	r3, [sp, #4]
 8004310:	2300      	movs	r3, #0
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	2300      	movs	r3, #0
 8004316:	2201      	movs	r2, #1
 8004318:	2105      	movs	r1, #5
 800431a:	2004      	movs	r0, #4
 800431c:	f7fc ff74 	bl	8001208 <rf24_debug>
			rf24_network_transfer_topology(&predecessor->mac_addr);
 8004320:	4b07      	ldr	r3, [pc, #28]	; (8004340 <rf24_network_num_timeout_handler+0x6c>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4618      	mov	r0, r3
 8004326:	f000 fd1b 	bl	8004d60 <rf24_network_transfer_topology>
}
 800432a:	bf00      	nop
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	080094ac 	.word	0x080094ac
 8004338:	20000689 	.word	0x20000689
 800433c:	080094d0 	.word	0x080094d0
 8004340:	20000824 	.word	0x20000824

08004344 <rf24_network_topology_timeout_handler>:

void rf24_network_topology_timeout_handler()
{
 8004344:	b480      	push	{r7}
 8004346:	af00      	add	r7, sp, #0

}
 8004348:	bf00      	nop
 800434a:	46bd      	mov	sp, r7
 800434c:	bc80      	pop	{r7}
 800434e:	4770      	bx	lr

08004350 <rf24_network_reception_successfull_handler>:

void rf24_network_reception_successfull_handler()
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b08a      	sub	sp, #40	; 0x28
 8004354:	af06      	add	r7, sp, #24
	switch(rf24_mac_get_transmission()->frame_subtype)
 8004356:	f7fe fe4b 	bl	8002ff0 <rf24_mac_get_transmission>
 800435a:	4603      	mov	r3, r0
 800435c:	791b      	ldrb	r3, [r3, #4]
 800435e:	2b02      	cmp	r3, #2
 8004360:	d002      	beq.n	8004368 <rf24_network_reception_successfull_handler+0x18>
 8004362:	2b07      	cmp	r3, #7
 8004364:	d041      	beq.n	80043ea <rf24_network_reception_successfull_handler+0x9a>
		case DATA_TOPOLOGY:
		{
			rf24_network_topology_received_handler();
			break;
		}
		default: break;
 8004366:	e044      	b.n	80043f2 <rf24_network_reception_successfull_handler+0xa2>
			bool from_predecessor = rf24_mac_addr_equal(&rf24_mac_get_transmission()->transmitter, &predecessor->mac_addr);
 8004368:	f7fe fe42 	bl	8002ff0 <rf24_mac_get_transmission>
 800436c:	4603      	mov	r3, r0
 800436e:	f103 020b 	add.w	r2, r3, #11
 8004372:	4b22      	ldr	r3, [pc, #136]	; (80043fc <rf24_network_reception_successfull_handler+0xac>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4619      	mov	r1, r3
 8004378:	4610      	mov	r0, r2
 800437a:	f7fe fde3 	bl	8002f44 <rf24_mac_addr_equal>
 800437e:	4603      	mov	r3, r0
 8004380:	73fb      	strb	r3, [r7, #15]
			if(from_predecessor)
 8004382:	7bfb      	ldrb	r3, [r7, #15]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d033      	beq.n	80043f0 <rf24_network_reception_successfull_handler+0xa0>
				predecessor->link_state = CONNECTED;
 8004388:	4b1c      	ldr	r3, [pc, #112]	; (80043fc <rf24_network_reception_successfull_handler+0xac>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2201      	movs	r2, #1
 800438e:	719a      	strb	r2, [r3, #6]
				rf24_worker_stop_timer(trm_timeout);
 8004390:	2001      	movs	r0, #1
 8004392:	f000 ffc3 	bl	800531c <rf24_worker_stop_timer>
				struct rf24_timer *timer = rf24_worker_get_timer(num_timeout);
 8004396:	2002      	movs	r0, #2
 8004398:	f000 fff4 	bl	8005384 <rf24_worker_get_timer>
 800439c:	60b8      	str	r0, [r7, #8]
				if(timer)
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d003      	beq.n	80043ac <rf24_network_reception_successfull_handler+0x5c>
					rf24_worker_reset_timer(num_timeout);
 80043a4:	2002      	movs	r0, #2
 80043a6:	f001 f80b 	bl	80053c0 <rf24_worker_reset_timer>
 80043aa:	e007      	b.n	80043bc <rf24_network_reception_successfull_handler+0x6c>
					timer = rf24_worker_start_timer(num_timeout, us, T_NUM_TIMEOUT_US, rf24_network_num_timeout_handler);
 80043ac:	4b14      	ldr	r3, [pc, #80]	; (8004400 <rf24_network_reception_successfull_handler+0xb0>)
 80043ae:	f240 424c 	movw	r2, #1100	; 0x44c
 80043b2:	2102      	movs	r1, #2
 80043b4:	2002      	movs	r0, #2
 80043b6:	f000 ff65 	bl	8005284 <rf24_worker_start_timer>
 80043ba:	60b8      	str	r0, [r7, #8]
				rf24_timespan timespan = rf24_worker_us_to_timespan(T_NUM_TIMEOUT_US);
 80043bc:	463b      	mov	r3, r7
 80043be:	f240 414c 	movw	r1, #1100	; 0x44c
 80043c2:	4618      	mov	r0, r3
 80043c4:	f001 f808 	bl	80053d8 <rf24_worker_us_to_timespan>
				rf24_debug(NETWORK, INFO, VOID, VOID, NULL, "NUM-Timeout started (%ds %dms %dus)\n", timespan.s, timespan.ms, timespan.us);
 80043c8:	783b      	ldrb	r3, [r7, #0]
 80043ca:	887a      	ldrh	r2, [r7, #2]
 80043cc:	88b9      	ldrh	r1, [r7, #4]
 80043ce:	9104      	str	r1, [sp, #16]
 80043d0:	9203      	str	r2, [sp, #12]
 80043d2:	9302      	str	r3, [sp, #8]
 80043d4:	4b0b      	ldr	r3, [pc, #44]	; (8004404 <rf24_network_reception_successfull_handler+0xb4>)
 80043d6:	9301      	str	r3, [sp, #4]
 80043d8:	2300      	movs	r3, #0
 80043da:	9300      	str	r3, [sp, #0]
 80043dc:	2300      	movs	r3, #0
 80043de:	2200      	movs	r2, #0
 80043e0:	2106      	movs	r1, #6
 80043e2:	2004      	movs	r0, #4
 80043e4:	f7fc ff10 	bl	8001208 <rf24_debug>
			break;
 80043e8:	e002      	b.n	80043f0 <rf24_network_reception_successfull_handler+0xa0>
			rf24_network_topology_received_handler();
 80043ea:	f000 f86d 	bl	80044c8 <rf24_network_topology_received_handler>
			break;
 80043ee:	e000      	b.n	80043f2 <rf24_network_reception_successfull_handler+0xa2>
			break;
 80043f0:	bf00      	nop
	}
}
 80043f2:	bf00      	nop
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	20000824 	.word	0x20000824
 8004400:	080042d5 	.word	0x080042d5
 8004404:	080094f8 	.word	0x080094f8

08004408 <rf24_network_transmission_successfull_handler>:

void rf24_network_transmission_successfull_handler()
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b088      	sub	sp, #32
 800440c:	af06      	add	r7, sp, #24
	switch(rf24_mac_get_transmission()->frame_subtype)
 800440e:	f7fe fdef 	bl	8002ff0 <rf24_mac_get_transmission>
 8004412:	4603      	mov	r3, r0
 8004414:	791b      	ldrb	r3, [r3, #4]
 8004416:	2b02      	cmp	r3, #2
 8004418:	d029      	beq.n	800446e <rf24_network_transmission_successfull_handler+0x66>
 800441a:	2b07      	cmp	r3, #7
 800441c:	d03b      	beq.n	8004496 <rf24_network_transmission_successfull_handler+0x8e>
 800441e:	2b01      	cmp	r3, #1
 8004420:	d000      	beq.n	8004424 <rf24_network_transmission_successfull_handler+0x1c>
			rf24_network_print_neighbors(rf24_network_get_neighbors());
			rf24_printf("%-10s %s", "", "---------------------------------------------------------\n");
			rf24_network_print_topology(rf24_network_get_topology());*/
			break;
		}
		default: break;
 8004422:	e03b      	b.n	800449c <rf24_network_transmission_successfull_handler+0x94>
			if(!controller)
 8004424:	4b1f      	ldr	r3, [pc, #124]	; (80044a4 <rf24_network_transmission_successfull_handler+0x9c>)
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	f083 0301 	eor.w	r3, r3, #1
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d033      	beq.n	800449a <rf24_network_transmission_successfull_handler+0x92>
				rf24_worker_start_timer(trm_timeout, us, T_TRM_TIMEOUT_US, rf24_network_trm_timeout_handler);
 8004432:	4b1d      	ldr	r3, [pc, #116]	; (80044a8 <rf24_network_transmission_successfull_handler+0xa0>)
 8004434:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004438:	2102      	movs	r1, #2
 800443a:	2001      	movs	r0, #1
 800443c:	f000 ff22 	bl	8005284 <rf24_worker_start_timer>
				rf24_timespan timespan = rf24_worker_us_to_timespan(T_TRM_TIMEOUT_US);
 8004440:	463b      	mov	r3, r7
 8004442:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004446:	4618      	mov	r0, r3
 8004448:	f000 ffc6 	bl	80053d8 <rf24_worker_us_to_timespan>
				rf24_debug(NETWORK, INFO, VOID, VOID, NULL, "TRM-Timeout started (%ds %dms %dus)\n", timespan.s, timespan.ms, timespan.us);
 800444c:	783b      	ldrb	r3, [r7, #0]
 800444e:	887a      	ldrh	r2, [r7, #2]
 8004450:	88b9      	ldrh	r1, [r7, #4]
 8004452:	9104      	str	r1, [sp, #16]
 8004454:	9203      	str	r2, [sp, #12]
 8004456:	9302      	str	r3, [sp, #8]
 8004458:	4b14      	ldr	r3, [pc, #80]	; (80044ac <rf24_network_transmission_successfull_handler+0xa4>)
 800445a:	9301      	str	r3, [sp, #4]
 800445c:	2300      	movs	r3, #0
 800445e:	9300      	str	r3, [sp, #0]
 8004460:	2300      	movs	r3, #0
 8004462:	2200      	movs	r2, #0
 8004464:	2106      	movs	r1, #6
 8004466:	2004      	movs	r0, #4
 8004468:	f7fc fece 	bl	8001208 <rf24_debug>
			break;
 800446c:	e015      	b.n	800449a <rf24_network_transmission_successfull_handler+0x92>
			rf24_network_set_neighbor_link_state(rf24_mac_get_transmission()->receiver, CONNECTED);
 800446e:	f7fe fdbf 	bl	8002ff0 <rf24_mac_get_transmission>
 8004472:	4603      	mov	r3, r0
 8004474:	f8d3 2005 	ldr.w	r2, [r3, #5]
 8004478:	2100      	movs	r1, #0
 800447a:	4611      	mov	r1, r2
 800447c:	7a5a      	ldrb	r2, [r3, #9]
 800447e:	7a9b      	ldrb	r3, [r3, #10]
 8004480:	021b      	lsls	r3, r3, #8
 8004482:	431a      	orrs	r2, r3
 8004484:	2300      	movs	r3, #0
 8004486:	f362 030f 	bfi	r3, r2, #0, #16
 800448a:	2201      	movs	r2, #1
 800448c:	4608      	mov	r0, r1
 800448e:	4619      	mov	r1, r3
 8004490:	f000 fa54 	bl	800493c <rf24_network_set_neighbor_link_state>
			break;
 8004494:	e002      	b.n	800449c <rf24_network_transmission_successfull_handler+0x94>
			break;
 8004496:	bf00      	nop
 8004498:	e000      	b.n	800449c <rf24_network_transmission_successfull_handler+0x94>
			break;
 800449a:	bf00      	nop
	}
}
 800449c:	bf00      	nop
 800449e:	3708      	adds	r7, #8
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	20000689 	.word	0x20000689
 80044a8:	0800428d 	.word	0x0800428d
 80044ac:	08009520 	.word	0x08009520

080044b0 <rf24_network_transmission_failed_handler>:

void rf24_network_transmission_failed_handler()
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0
	switch(rf24_mac_get_transmission()->frame_subtype)
 80044b4:	f7fe fd9c 	bl	8002ff0 <rf24_mac_get_transmission>
 80044b8:	4603      	mov	r3, r0
 80044ba:	791b      	ldrb	r3, [r3, #4]
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d000      	beq.n	80044c2 <rf24_network_transmission_failed_handler+0x12>
		case TOPOLOGY_REPLY_MESSAGE:
		{

			break;
		}
		default: break;
 80044c0:	e000      	b.n	80044c4 <rf24_network_transmission_failed_handler+0x14>
			break;
 80044c2:	bf00      	nop
	}
}
 80044c4:	bf00      	nop
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <rf24_network_topology_received_handler>:

void rf24_network_topology_received_handler()
{
 80044c8:	b590      	push	{r4, r7, lr}
 80044ca:	b08b      	sub	sp, #44	; 0x2c
 80044cc:	af04      	add	r7, sp, #16
	// Convert topology byte stream into topology struct and attach to local topology
	struct rf24_topology* successor_topology =
			rf24_network_rx_data_to_topology(rf24_mac_get_transmission()->payload, rf24_mac_get_transmission()->payload_length);
 80044ce:	f7fe fd8f 	bl	8002ff0 <rf24_mac_get_transmission>
 80044d2:	4603      	mov	r3, r0
 80044d4:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80044d6:	f7fe fd8b 	bl	8002ff0 <rf24_mac_get_transmission>
 80044da:	4603      	mov	r3, r0
 80044dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
	struct rf24_topology* successor_topology =
 80044e0:	4619      	mov	r1, r3
 80044e2:	4620      	mov	r0, r4
 80044e4:	f000 fb0c 	bl	8004b00 <rf24_network_rx_data_to_topology>
 80044e8:	6178      	str	r0, [r7, #20]

	// Add successor topology to local topology
	rf24_network_add_successor_topology(successor_topology);
 80044ea:	6978      	ldr	r0, [r7, #20]
 80044ec:	f000 fb84 	bl	8004bf8 <rf24_network_add_successor_topology>

	// Notice successor topology received
	struct rf24_neighbor* successor = rf24_network_get_neighbor(&successor_topology->neighbor->mac_addr);
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f000 fa01 	bl	80048fc <rf24_network_get_neighbor>
 80044fa:	6138      	str	r0, [r7, #16]

	if(successor)
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d006      	beq.n	8004510 <rf24_network_topology_received_handler+0x48>
	{
		successor->topology = topology;
 8004502:	4b32      	ldr	r3, [pc, #200]	; (80045cc <rf24_network_topology_received_handler+0x104>)
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	611a      	str	r2, [r3, #16]
		successor->topology_received = true;
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	2201      	movs	r2, #1
 800450e:	751a      	strb	r2, [r3, #20]
	}

	if(predecessor->link_state == CONNECTED || controller)
 8004510:	4b2f      	ldr	r3, [pc, #188]	; (80045d0 <rf24_network_topology_received_handler+0x108>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	799b      	ldrb	r3, [r3, #6]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d003      	beq.n	8004522 <rf24_network_topology_received_handler+0x5a>
 800451a:	4b2e      	ldr	r3, [pc, #184]	; (80045d4 <rf24_network_topology_received_handler+0x10c>)
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d04f      	beq.n	80045c2 <rf24_network_topology_received_handler+0xfa>
	{
		// Check if all successors transferred valid topologies
		bool topology_integrity = rf24_network_check_topology_integrity();
 8004522:	f000 fab1 	bl	8004a88 <rf24_network_check_topology_integrity>
 8004526:	4603      	mov	r3, r0
 8004528:	73fb      	strb	r3, [r7, #15]

		if(topology_integrity)
 800452a:	7bfb      	ldrb	r3, [r7, #15]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d048      	beq.n	80045c2 <rf24_network_topology_received_handler+0xfa>
		{
			if(!controller)
 8004530:	4b28      	ldr	r3, [pc, #160]	; (80045d4 <rf24_network_topology_received_handler+0x10c>)
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	f083 0301 	eor.w	r3, r3, #1
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d018      	beq.n	8004570 <rf24_network_topology_received_handler+0xa8>
			{
				rf24_debug(	NETWORK, INFO, VOID, VOID, NULL,
							"Sub-topologies complete, transfer topology to %s\n",
							decimal_to_string(predecessor->mac_addr.bytes, 6, ':'));
 800453e:	4b24      	ldr	r3, [pc, #144]	; (80045d0 <rf24_network_topology_received_handler+0x108>)
 8004540:	681b      	ldr	r3, [r3, #0]
				rf24_debug(	NETWORK, INFO, VOID, VOID, NULL,
 8004542:	223a      	movs	r2, #58	; 0x3a
 8004544:	2106      	movs	r1, #6
 8004546:	4618      	mov	r0, r3
 8004548:	f7fc fffc 	bl	8001544 <decimal_to_string>
 800454c:	4603      	mov	r3, r0
 800454e:	9302      	str	r3, [sp, #8]
 8004550:	4b21      	ldr	r3, [pc, #132]	; (80045d8 <rf24_network_topology_received_handler+0x110>)
 8004552:	9301      	str	r3, [sp, #4]
 8004554:	2300      	movs	r3, #0
 8004556:	9300      	str	r3, [sp, #0]
 8004558:	2300      	movs	r3, #0
 800455a:	2200      	movs	r2, #0
 800455c:	2106      	movs	r1, #6
 800455e:	2004      	movs	r0, #4
 8004560:	f7fc fe52 	bl	8001208 <rf24_debug>

				// Transfer topology to predecessor
				rf24_network_transfer_topology(&predecessor->mac_addr);
 8004564:	4b1a      	ldr	r3, [pc, #104]	; (80045d0 <rf24_network_topology_received_handler+0x108>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4618      	mov	r0, r3
 800456a:	f000 fbf9 	bl	8004d60 <rf24_network_transfer_topology>
				rf24_printf("%-10s %s", "", "---------------------------------------------------------\n");
				rf24_network_print_topology(rf24_network_get_topology());
			}
		}
	}
}
 800456e:	e028      	b.n	80045c2 <rf24_network_topology_received_handler+0xfa>
				uint32_t t_us_topology_timeout_remaining = rf24_worker_stop_timer(topology_timeout);
 8004570:	2003      	movs	r0, #3
 8004572:	f000 fed3 	bl	800531c <rf24_worker_stop_timer>
 8004576:	60b8      	str	r0, [r7, #8]
				rf24_timespan timespan = rf24_worker_us_to_timespan(t_us_topology_timeout_remaining);
 8004578:	463b      	mov	r3, r7
 800457a:	68b9      	ldr	r1, [r7, #8]
 800457c:	4618      	mov	r0, r3
 800457e:	f000 ff2b 	bl	80053d8 <rf24_worker_us_to_timespan>
				rf24_printf("%-10s Topology update cycle %d terminated after %ds %dms %dus\n\n", "controller", topology_cycle_id, timespan.s, timespan.ms, timespan.us);
 8004582:	4b16      	ldr	r3, [pc, #88]	; (80045dc <rf24_network_topology_received_handler+0x114>)
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	4619      	mov	r1, r3
 8004588:	783b      	ldrb	r3, [r7, #0]
 800458a:	4618      	mov	r0, r3
 800458c:	887b      	ldrh	r3, [r7, #2]
 800458e:	88ba      	ldrh	r2, [r7, #4]
 8004590:	9201      	str	r2, [sp, #4]
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	4603      	mov	r3, r0
 8004596:	460a      	mov	r2, r1
 8004598:	4911      	ldr	r1, [pc, #68]	; (80045e0 <rf24_network_topology_received_handler+0x118>)
 800459a:	4812      	ldr	r0, [pc, #72]	; (80045e4 <rf24_network_topology_received_handler+0x11c>)
 800459c:	f7fc fee4 	bl	8001368 <rf24_printf>
				rf24_network_print_neighbors(rf24_network_get_neighbors());
 80045a0:	f7ff fd6a 	bl	8004078 <rf24_network_get_neighbors>
 80045a4:	4603      	mov	r3, r0
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 fa14 	bl	80049d4 <rf24_network_print_neighbors>
				rf24_printf("%-10s %s", "", "---------------------------------------------------------\n");
 80045ac:	4a0e      	ldr	r2, [pc, #56]	; (80045e8 <rf24_network_topology_received_handler+0x120>)
 80045ae:	490f      	ldr	r1, [pc, #60]	; (80045ec <rf24_network_topology_received_handler+0x124>)
 80045b0:	480f      	ldr	r0, [pc, #60]	; (80045f0 <rf24_network_topology_received_handler+0x128>)
 80045b2:	f7fc fed9 	bl	8001368 <rf24_printf>
				rf24_network_print_topology(rf24_network_get_topology());
 80045b6:	f7ff fd55 	bl	8004064 <rf24_network_get_topology>
 80045ba:	4603      	mov	r3, r0
 80045bc:	4618      	mov	r0, r3
 80045be:	f000 fb6b 	bl	8004c98 <rf24_network_print_topology>
}
 80045c2:	bf00      	nop
 80045c4:	371c      	adds	r7, #28
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd90      	pop	{r4, r7, pc}
 80045ca:	bf00      	nop
 80045cc:	20000698 	.word	0x20000698
 80045d0:	20000824 	.word	0x20000824
 80045d4:	20000689 	.word	0x20000689
 80045d8:	08009548 	.word	0x08009548
 80045dc:	2000068a 	.word	0x2000068a
 80045e0:	0800957c 	.word	0x0800957c
 80045e4:	08009588 	.word	0x08009588
 80045e8:	080095c8 	.word	0x080095c8
 80045ec:	08009090 	.word	0x08009090
 80045f0:	08009604 	.word	0x08009604

080045f4 <rf24_network_init>:

void rf24_network_init()
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	af00      	add	r7, sp, #0
	rf24_module_init(115200);
 80045f8:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80045fc:	f7fd fd86 	bl	800210c <rf24_module_init>
	rf24_worker_init();
 8004600:	f000 fc42 	bl	8004e88 <rf24_worker_init>
	rf24_mac_init();
 8004604:	f7fe fc60 	bl	8002ec8 <rf24_mac_init>

	/*struct rf24_neighbor_collection* available_successors = rf24_network_collect_neighbors(SUCCESSOR, AVAILABLE);
	rf24_printf("available successors: %d \n", available_successors->length);

	rf24_network_print_neighbor_collection(available_successors);*/
}
 8004608:	bf00      	nop
 800460a:	bd80      	pop	{r7, pc}

0800460c <rf24_network_reset_topology>:

void rf24_network_reset_topology()
{
 800460c:	b580      	push	{r7, lr}
 800460e:	af00      	add	r7, sp, #0
	// Reset topology list
	free(topology);
 8004610:	4b07      	ldr	r3, [pc, #28]	; (8004630 <rf24_network_reset_topology+0x24>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4618      	mov	r0, r3
 8004616:	f002 fb4d 	bl	8006cb4 <free>
	topology = NULL;
 800461a:	4b05      	ldr	r3, [pc, #20]	; (8004630 <rf24_network_reset_topology+0x24>)
 800461c:	2200      	movs	r2, #0
 800461e:	601a      	str	r2, [r3, #0]

	topology_length = 0;
 8004620:	4b04      	ldr	r3, [pc, #16]	; (8004634 <rf24_network_reset_topology+0x28>)
 8004622:	2200      	movs	r2, #0
 8004624:	701a      	strb	r2, [r3, #0]
	topology_neighbors_length = 0;
 8004626:	4b04      	ldr	r3, [pc, #16]	; (8004638 <rf24_network_reset_topology+0x2c>)
 8004628:	2200      	movs	r2, #0
 800462a:	701a      	strb	r2, [r3, #0]
}
 800462c:	bf00      	nop
 800462e:	bd80      	pop	{r7, pc}
 8004630:	20000698 	.word	0x20000698
 8004634:	2000069c 	.word	0x2000069c
 8004638:	2000069d 	.word	0x2000069d

0800463c <rf24_network_reset>:

void rf24_network_reset()
{
 800463c:	b580      	push	{r7, lr}
 800463e:	af00      	add	r7, sp, #0
	predecessor = NULL;
 8004640:	4b09      	ldr	r3, [pc, #36]	; (8004668 <rf24_network_reset+0x2c>)
 8004642:	2200      	movs	r2, #0
 8004644:	601a      	str	r2, [r3, #0]
	topology_cycle_id = 0;
 8004646:	4b09      	ldr	r3, [pc, #36]	; (800466c <rf24_network_reset+0x30>)
 8004648:	2200      	movs	r2, #0
 800464a:	701a      	strb	r2, [r3, #0]
	hops_to_controller = 0;
 800464c:	4b08      	ldr	r3, [pc, #32]	; (8004670 <rf24_network_reset+0x34>)
 800464e:	2200      	movs	r2, #0
 8004650:	701a      	strb	r2, [r3, #0]

	memset(&network_flags, 0, sizeof(rf24_network_flags));
 8004652:	2204      	movs	r2, #4
 8004654:	2100      	movs	r1, #0
 8004656:	4807      	ldr	r0, [pc, #28]	; (8004674 <rf24_network_reset+0x38>)
 8004658:	f002 fb4e 	bl	8006cf8 <memset>

	rf24_network_reset_neighbors();
 800465c:	f000 f988 	bl	8004970 <rf24_network_reset_neighbors>
	rf24_network_reset_topology();
 8004660:	f7ff ffd4 	bl	800460c <rf24_network_reset_topology>
}
 8004664:	bf00      	nop
 8004666:	bd80      	pop	{r7, pc}
 8004668:	20000824 	.word	0x20000824
 800466c:	2000068a 	.word	0x2000068a
 8004670:	2000068b 	.word	0x2000068b
 8004674:	2000068c 	.word	0x2000068c

08004678 <rf24_network_start_topology_update>:

void rf24_network_start_topology_update()
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
	rf24_network_reset_neighbors();
 800467e:	f000 f977 	bl	8004970 <rf24_network_reset_neighbors>
	rf24_network_reset_topology();
 8004682:	f7ff ffc3 	bl	800460c <rf24_network_reset_topology>

	rf24_network_mark_as_controller();
 8004686:	f7ff fcbd 	bl	8004004 <rf24_network_mark_as_controller>

	rf24_network_set_topology_cycle_id(topology_cycle_id + 1);
 800468a:	4b11      	ldr	r3, [pc, #68]	; (80046d0 <rf24_network_start_topology_update+0x58>)
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	3301      	adds	r3, #1
 8004690:	b2db      	uxtb	r3, r3
 8004692:	4618      	mov	r0, r3
 8004694:	f000 f872 	bl	800477c <rf24_network_set_topology_cycle_id>

	rf24_module_flush_tx();
 8004698:	f7fd fc7c 	bl	8001f94 <rf24_module_flush_tx>
	rf24_module_flush_rx();
 800469c:	f7fd fc85 	bl	8001faa <rf24_module_flush_rx>

	rf24_network_broadcast_num();
 80046a0:	f000 f81a 	bl	80046d8 <rf24_network_broadcast_num>

	// Start topology timeout
	struct rf24_timer *topology_timeout_timer = rf24_worker_get_timer(topology_timeout);
 80046a4:	2003      	movs	r0, #3
 80046a6:	f000 fe6d 	bl	8005384 <rf24_worker_get_timer>
 80046aa:	6078      	str	r0, [r7, #4]

	if(topology_timeout_timer)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d003      	beq.n	80046ba <rf24_network_start_topology_update+0x42>
		rf24_worker_reset_timer(topology_timeout_timer);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 fe84 	bl	80053c0 <rf24_worker_reset_timer>
	else
		topology_timeout_timer = rf24_worker_start_timer(topology_timeout, s, 100, rf24_network_topology_timeout_handler);

	//rf24_debug_attach_timer(topology_timeout_timer);
}
 80046b8:	e006      	b.n	80046c8 <rf24_network_start_topology_update+0x50>
		topology_timeout_timer = rf24_worker_start_timer(topology_timeout, s, 100, rf24_network_topology_timeout_handler);
 80046ba:	4b06      	ldr	r3, [pc, #24]	; (80046d4 <rf24_network_start_topology_update+0x5c>)
 80046bc:	2264      	movs	r2, #100	; 0x64
 80046be:	2100      	movs	r1, #0
 80046c0:	2003      	movs	r0, #3
 80046c2:	f000 fddf 	bl	8005284 <rf24_worker_start_timer>
 80046c6:	6078      	str	r0, [r7, #4]
}
 80046c8:	bf00      	nop
 80046ca:	3708      	adds	r7, #8
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	2000068a 	.word	0x2000068a
 80046d4:	08004345 	.word	0x08004345

080046d8 <rf24_network_broadcast_num>:

void rf24_network_broadcast_num()
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b088      	sub	sp, #32
 80046dc:	af00      	add	r7, sp, #0
	rf24_mac_frame mac_frame;

	mac_frame.frame_control.type = TOPOLOGY;
 80046de:	783b      	ldrb	r3, [r7, #0]
 80046e0:	2204      	movs	r2, #4
 80046e2:	f362 0385 	bfi	r3, r2, #2, #4
 80046e6:	703b      	strb	r3, [r7, #0]
	mac_frame.frame_control.subtype = TOPOLOGY_NEIGHBOR_UPDATE_MESSAGE;
 80046e8:	883b      	ldrh	r3, [r7, #0]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f362 1389 	bfi	r3, r2, #6, #4
 80046f0:	803b      	strh	r3, [r7, #0]
	mac_frame.transmitter = *rf24_mac_get_address();
 80046f2:	f7fe fc87 	bl	8003004 <rf24_mac_get_address>
 80046f6:	4602      	mov	r2, r0
 80046f8:	f107 030a 	add.w	r3, r7, #10
 80046fc:	6811      	ldr	r1, [r2, #0]
 80046fe:	6019      	str	r1, [r3, #0]
 8004700:	8892      	ldrh	r2, [r2, #4]
 8004702:	809a      	strh	r2, [r3, #4]
	mac_frame.duration = 0;
 8004704:	2300      	movs	r3, #0
 8004706:	807b      	strh	r3, [r7, #2]
	mac_frame.topology.id = topology_cycle_id;
 8004708:	4b13      	ldr	r3, [pc, #76]	; (8004758 <rf24_network_broadcast_num+0x80>)
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	747b      	strb	r3, [r7, #17]
	mac_frame.topology.hop_count = hops_to_controller;
 800470e:	4b13      	ldr	r3, [pc, #76]	; (800475c <rf24_network_broadcast_num+0x84>)
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	74bb      	strb	r3, [r7, #18]

	if(controller)
 8004714:	4b12      	ldr	r3, [pc, #72]	; (8004760 <rf24_network_broadcast_num+0x88>)
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00c      	beq.n	8004736 <rf24_network_broadcast_num+0x5e>
	{
		mac_frame.receiver = *rf24_mac_get_broadcast_address();
 800471c:	f7fe fc7c 	bl	8003018 <rf24_mac_get_broadcast_address>
 8004720:	4602      	mov	r2, r0
 8004722:	1d3b      	adds	r3, r7, #4
 8004724:	6810      	ldr	r0, [r2, #0]
 8004726:	6018      	str	r0, [r3, #0]
 8004728:	8892      	ldrh	r2, [r2, #4]
 800472a:	809a      	strh	r2, [r3, #4]
		mac_frame.frame_control.from_distribution = true;
 800472c:	787b      	ldrb	r3, [r7, #1]
 800472e:	f043 0308 	orr.w	r3, r3, #8
 8004732:	707b      	strb	r3, [r7, #1]
 8004734:	e007      	b.n	8004746 <rf24_network_broadcast_num+0x6e>
	}
	else
	{
		mac_frame.receiver = predecessor->mac_addr;
 8004736:	4b0b      	ldr	r3, [pc, #44]	; (8004764 <rf24_network_broadcast_num+0x8c>)
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	1d3b      	adds	r3, r7, #4
 800473c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004740:	6018      	str	r0, [r3, #0]
 8004742:	3304      	adds	r3, #4
 8004744:	8019      	strh	r1, [r3, #0]
	}

	rf24_mac_transfer_frame(BROADCAST, &mac_frame);
 8004746:	463b      	mov	r3, r7
 8004748:	4619      	mov	r1, r3
 800474a:	2002      	movs	r0, #2
 800474c:	f7ff f83e 	bl	80037cc <rf24_mac_transfer_frame>
}
 8004750:	bf00      	nop
 8004752:	3720      	adds	r7, #32
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	2000068a 	.word	0x2000068a
 800475c:	2000068b 	.word	0x2000068b
 8004760:	20000689 	.word	0x20000689
 8004764:	20000824 	.word	0x20000824

08004768 <rf24_network_get_topology_cycle_id>:

uint8_t	rf24_network_get_topology_cycle_id()
{
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0
	return topology_cycle_id;
 800476c:	4b02      	ldr	r3, [pc, #8]	; (8004778 <rf24_network_get_topology_cycle_id+0x10>)
 800476e:	781b      	ldrb	r3, [r3, #0]
}
 8004770:	4618      	mov	r0, r3
 8004772:	46bd      	mov	sp, r7
 8004774:	bc80      	pop	{r7}
 8004776:	4770      	bx	lr
 8004778:	2000068a 	.word	0x2000068a

0800477c <rf24_network_set_topology_cycle_id>:

void rf24_network_set_topology_cycle_id(uint8_t cycle_id)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	4603      	mov	r3, r0
 8004784:	71fb      	strb	r3, [r7, #7]
	topology_cycle_id = cycle_id;
 8004786:	4a04      	ldr	r2, [pc, #16]	; (8004798 <rf24_network_set_topology_cycle_id+0x1c>)
 8004788:	79fb      	ldrb	r3, [r7, #7]
 800478a:	7013      	strb	r3, [r2, #0]
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	bc80      	pop	{r7}
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	2000068a 	.word	0x2000068a

0800479c <rf24_network_set_hopcount>:

void rf24_network_set_hopcount(uint8_t hopcount)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	4603      	mov	r3, r0
 80047a4:	71fb      	strb	r3, [r7, #7]
	hops_to_controller = hopcount;
 80047a6:	4a04      	ldr	r2, [pc, #16]	; (80047b8 <rf24_network_set_hopcount+0x1c>)
 80047a8:	79fb      	ldrb	r3, [r7, #7]
 80047aa:	7013      	strb	r3, [r2, #0]
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bc80      	pop	{r7}
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	2000068b 	.word	0x2000068b

080047bc <rf24_network_add_neighbor>:
{
	return hops_to_controller;
}

struct rf24_neighbor* rf24_network_add_neighbor(rf24_mac_addr *mac_addr_neighbor, uint32_t t_response_us, rf24_neighbor_relation relation, rf24_neighbor_link_state link_state)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b088      	sub	sp, #32
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	4611      	mov	r1, r2
 80047c8:	461a      	mov	r2, r3
 80047ca:	460b      	mov	r3, r1
 80047cc:	71fb      	strb	r3, [r7, #7]
 80047ce:	4613      	mov	r3, r2
 80047d0:	71bb      	strb	r3, [r7, #6]
	// Create a new node
	struct rf24_neighbor *new_node = (struct rf24_neighbor*) malloc(sizeof(struct rf24_neighbor));
 80047d2:	201c      	movs	r0, #28
 80047d4:	f002 fa66 	bl	8006ca4 <malloc>
 80047d8:	4603      	mov	r3, r0
 80047da:	61bb      	str	r3, [r7, #24]

	memcpy(new_node->mac_addr.bytes, mac_addr_neighbor->bytes, 6);
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	68f9      	ldr	r1, [r7, #12]
 80047e0:	2206      	movs	r2, #6
 80047e2:	4618      	mov	r0, r3
 80047e4:	f002 fa7d 	bl	8006ce2 <memcpy>
  	new_node->link_state = link_state;
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	79ba      	ldrb	r2, [r7, #6]
 80047ec:	719a      	strb	r2, [r3, #6]
  	new_node->relation = relation;
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	79fa      	ldrb	r2, [r7, #7]
 80047f2:	71da      	strb	r2, [r3, #7]
  	new_node->t_response_us = t_response_us;
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	68ba      	ldr	r2, [r7, #8]
 80047f8:	609a      	str	r2, [r3, #8]
  	new_node->t_last_updated_ms = 0;
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	2200      	movs	r2, #0
 80047fe:	819a      	strh	r2, [r3, #12]
  	new_node->hops_to_controller = 0;
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	2200      	movs	r2, #0
 8004804:	739a      	strb	r2, [r3, #14]
  	new_node->topology = NULL;
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	2200      	movs	r2, #0
 800480a:	611a      	str	r2, [r3, #16]
  	new_node->topology_received = false;
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	2200      	movs	r2, #0
 8004810:	751a      	strb	r2, [r3, #20]
  	new_node->next = NULL;
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	2200      	movs	r2, #0
 8004816:	619a      	str	r2, [r3, #24]

  	// List is empty, new node becomes head node
  	if(neighbors == NULL){
 8004818:	4b36      	ldr	r3, [pc, #216]	; (80048f4 <rf24_network_add_neighbor+0x138>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10a      	bne.n	8004836 <rf24_network_add_neighbor+0x7a>
  		neighbors = new_node;
 8004820:	4a34      	ldr	r2, [pc, #208]	; (80048f4 <rf24_network_add_neighbor+0x138>)
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	6013      	str	r3, [r2, #0]
  		neighbors_length++;
 8004826:	4b34      	ldr	r3, [pc, #208]	; (80048f8 <rf24_network_add_neighbor+0x13c>)
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	3301      	adds	r3, #1
 800482c:	b2da      	uxtb	r2, r3
 800482e:	4b32      	ldr	r3, [pc, #200]	; (80048f8 <rf24_network_add_neighbor+0x13c>)
 8004830:	701a      	strb	r2, [r3, #0]
  		return new_node;
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	e059      	b.n	80048ea <rf24_network_add_neighbor+0x12e>
  	}

  	// Start from the first node
  	struct rf24_neighbor *current_node = neighbors;
 8004836:	4b2f      	ldr	r3, [pc, #188]	; (80048f4 <rf24_network_add_neighbor+0x138>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	61fb      	str	r3, [r7, #28]

  	// Iterate over linked list
  	while(current_node != NULL)
 800483c:	e051      	b.n	80048e2 <rf24_network_add_neighbor+0x126>
  	{
  		// [1] Check if new node value (mac_addr) is lower than current node
  		int cmp_current = memcmp(new_node->mac_addr.bytes, current_node->mac_addr.bytes, 6);
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	69f9      	ldr	r1, [r7, #28]
 8004842:	2206      	movs	r2, #6
 8004844:	4618      	mov	r0, r3
 8004846:	f002 fa3d 	bl	8006cc4 <memcmp>
 800484a:	6178      	str	r0, [r7, #20]

  		if(cmp_current < 0){
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	2b00      	cmp	r3, #0
 8004850:	da0d      	bge.n	800486e <rf24_network_add_neighbor+0xb2>
  			// New node becomes head node
  			new_node->next = current_node;
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	69fa      	ldr	r2, [r7, #28]
 8004856:	619a      	str	r2, [r3, #24]
  			neighbors = new_node;
 8004858:	4a26      	ldr	r2, [pc, #152]	; (80048f4 <rf24_network_add_neighbor+0x138>)
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	6013      	str	r3, [r2, #0]
  			neighbors_length++;
 800485e:	4b26      	ldr	r3, [pc, #152]	; (80048f8 <rf24_network_add_neighbor+0x13c>)
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	3301      	adds	r3, #1
 8004864:	b2da      	uxtb	r2, r3
 8004866:	4b24      	ldr	r3, [pc, #144]	; (80048f8 <rf24_network_add_neighbor+0x13c>)
 8004868:	701a      	strb	r2, [r3, #0]
  			return new_node;
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	e03d      	b.n	80048ea <rf24_network_add_neighbor+0x12e>
  		}

  		// [2] Check if new node value (mac_addr) is equal
  		if(cmp_current == 0){
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d104      	bne.n	800487e <rf24_network_add_neighbor+0xc2>
  			// Node is already in list, therefore update metric
  			free(new_node);
 8004874:	69b8      	ldr	r0, [r7, #24]
 8004876:	f002 fa1d 	bl	8006cb4 <free>
  			return current_node;
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	e035      	b.n	80048ea <rf24_network_add_neighbor+0x12e>
  		}

  		// [3] check if current node is last node
  		if(cmp_current > 0 && current_node->next == NULL){
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	2b00      	cmp	r3, #0
 8004882:	dd0e      	ble.n	80048a2 <rf24_network_add_neighbor+0xe6>
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d10a      	bne.n	80048a2 <rf24_network_add_neighbor+0xe6>
  			// append new node at end of list
  			current_node->next = new_node;
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	619a      	str	r2, [r3, #24]
  			neighbors_length++;
 8004892:	4b19      	ldr	r3, [pc, #100]	; (80048f8 <rf24_network_add_neighbor+0x13c>)
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	3301      	adds	r3, #1
 8004898:	b2da      	uxtb	r2, r3
 800489a:	4b17      	ldr	r3, [pc, #92]	; (80048f8 <rf24_network_add_neighbor+0x13c>)
 800489c:	701a      	strb	r2, [r3, #0]
  			return new_node;
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	e023      	b.n	80048ea <rf24_network_add_neighbor+0x12e>
  		}

  		// [4] check if node value (mac_addr) is between two nodes
  		int cmp_next = memcmp(new_node->mac_addr.bytes, current_node->next->mac_addr.bytes, 6);
 80048a2:	69b8      	ldr	r0, [r7, #24]
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	2206      	movs	r2, #6
 80048aa:	4619      	mov	r1, r3
 80048ac:	f002 fa0a 	bl	8006cc4 <memcmp>
 80048b0:	6138      	str	r0, [r7, #16]

  		if(cmp_current > 0 && cmp_next < 0){
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	dd11      	ble.n	80048dc <rf24_network_add_neighbor+0x120>
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	da0e      	bge.n	80048dc <rf24_network_add_neighbor+0x120>
  			// append new node between current and next
  			new_node->next = current_node->next;
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	699a      	ldr	r2, [r3, #24]
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	619a      	str	r2, [r3, #24]
  			current_node->next = new_node;
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	619a      	str	r2, [r3, #24]
  			neighbors_length++;
 80048cc:	4b0a      	ldr	r3, [pc, #40]	; (80048f8 <rf24_network_add_neighbor+0x13c>)
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	3301      	adds	r3, #1
 80048d2:	b2da      	uxtb	r2, r3
 80048d4:	4b08      	ldr	r3, [pc, #32]	; (80048f8 <rf24_network_add_neighbor+0x13c>)
 80048d6:	701a      	strb	r2, [r3, #0]
  			return new_node;
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	e006      	b.n	80048ea <rf24_network_add_neighbor+0x12e>
  		}

  		// Goto next node
  		current_node = current_node->next;
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	61fb      	str	r3, [r7, #28]
  	while(current_node != NULL)
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1aa      	bne.n	800483e <rf24_network_add_neighbor+0x82>
  	}

  	return NULL;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3720      	adds	r7, #32
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	20000690 	.word	0x20000690
 80048f8:	20000694 	.word	0x20000694

080048fc <rf24_network_get_neighbor>:
			rf24_neighbor_link_states_string[collection->nodes[i]->link_state]);
	}
}

struct rf24_neighbor* rf24_network_get_neighbor(rf24_mac_addr *mac_addr)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
	// start from the first node
	struct rf24_neighbor *current_node = neighbors;
 8004904:	4b0c      	ldr	r3, [pc, #48]	; (8004938 <rf24_network_get_neighbor+0x3c>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	60fb      	str	r3, [r7, #12]

	// iterate over list
	while(current_node != NULL)
 800490a:	e00c      	b.n	8004926 <rf24_network_get_neighbor+0x2a>
	{
		if(rf24_mac_addr_equal(&current_node->mac_addr, mac_addr)) return current_node;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6879      	ldr	r1, [r7, #4]
 8004910:	4618      	mov	r0, r3
 8004912:	f7fe fb17 	bl	8002f44 <rf24_mac_addr_equal>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d001      	beq.n	8004920 <rf24_network_get_neighbor+0x24>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	e006      	b.n	800492e <rf24_network_get_neighbor+0x32>
		current_node = current_node->next;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	699b      	ldr	r3, [r3, #24]
 8004924:	60fb      	str	r3, [r7, #12]
	while(current_node != NULL)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1ef      	bne.n	800490c <rf24_network_get_neighbor+0x10>
	}

	return NULL;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	20000690 	.word	0x20000690

0800493c <rf24_network_set_neighbor_link_state>:

void rf24_network_set_neighbor_link_state(rf24_mac_addr mac_addr, rf24_neighbor_link_state link_state)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	f107 0308 	add.w	r3, r7, #8
 8004946:	e883 0003 	stmia.w	r3, {r0, r1}
 800494a:	4613      	mov	r3, r2
 800494c:	71fb      	strb	r3, [r7, #7]
	struct rf24_neighbor *neighbor = rf24_network_get_neighbor(&mac_addr);
 800494e:	f107 0308 	add.w	r3, r7, #8
 8004952:	4618      	mov	r0, r3
 8004954:	f7ff ffd2 	bl	80048fc <rf24_network_get_neighbor>
 8004958:	6178      	str	r0, [r7, #20]
	if(neighbor) neighbor->link_state = link_state;
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d002      	beq.n	8004966 <rf24_network_set_neighbor_link_state+0x2a>
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	79fa      	ldrb	r2, [r7, #7]
 8004964:	719a      	strb	r2, [r3, #6]
}
 8004966:	bf00      	nop
 8004968:	3718      	adds	r7, #24
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
	...

08004970 <rf24_network_reset_neighbors>:
	else
		return NO_LINK;
}

void rf24_network_reset_neighbors()
{
 8004970:	b580      	push	{r7, lr}
 8004972:	af00      	add	r7, sp, #0
	free(neighbors);
 8004974:	4b06      	ldr	r3, [pc, #24]	; (8004990 <rf24_network_reset_neighbors+0x20>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4618      	mov	r0, r3
 800497a:	f002 f99b 	bl	8006cb4 <free>
	neighbors = NULL;
 800497e:	4b04      	ldr	r3, [pc, #16]	; (8004990 <rf24_network_reset_neighbors+0x20>)
 8004980:	2200      	movs	r2, #0
 8004982:	601a      	str	r2, [r3, #0]
	neighbors_length = 0;
 8004984:	4b03      	ldr	r3, [pc, #12]	; (8004994 <rf24_network_reset_neighbors+0x24>)
 8004986:	2200      	movs	r2, #0
 8004988:	701a      	strb	r2, [r3, #0]
}
 800498a:	bf00      	nop
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	20000690 	.word	0x20000690
 8004994:	20000694 	.word	0x20000694

08004998 <rf24_network_count_successors>:

uint8_t rf24_network_count_successors()
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
	struct rf24_neighbor *current_node = neighbors;
 800499e:	4b0c      	ldr	r3, [pc, #48]	; (80049d0 <rf24_network_count_successors+0x38>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	607b      	str	r3, [r7, #4]
	uint8_t count = 0;
 80049a4:	2300      	movs	r3, #0
 80049a6:	70fb      	strb	r3, [r7, #3]

	while(current_node != NULL)
 80049a8:	e009      	b.n	80049be <rf24_network_count_successors+0x26>
	{
		if(current_node->relation == SUCCESSOR) count++;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	79db      	ldrb	r3, [r3, #7]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d102      	bne.n	80049b8 <rf24_network_count_successors+0x20>
 80049b2:	78fb      	ldrb	r3, [r7, #3]
 80049b4:	3301      	adds	r3, #1
 80049b6:	70fb      	strb	r3, [r7, #3]
		current_node = current_node->next;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	607b      	str	r3, [r7, #4]
	while(current_node != NULL)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1f2      	bne.n	80049aa <rf24_network_count_successors+0x12>
	}

	return count;
 80049c4:	78fb      	ldrb	r3, [r7, #3]
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bc80      	pop	{r7}
 80049ce:	4770      	bx	lr
 80049d0:	20000690 	.word	0x20000690

080049d4 <rf24_network_print_neighbors>:

void rf24_network_print_neighbors(struct rf24_neighbor *neighbors)
{
 80049d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049d8:	b08c      	sub	sp, #48	; 0x30
 80049da:	af08      	add	r7, sp, #32
 80049dc:	6078      	str	r0, [r7, #4]
	if(neighbors_length > 0)
 80049de:	4b24      	ldr	r3, [pc, #144]	; (8004a70 <rf24_network_print_neighbors+0x9c>)
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d03a      	beq.n	8004a5c <rf24_network_print_neighbors+0x88>
	{
		// Start from the first node
		struct rf24_neighbor *current_node = neighbors;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	60fb      	str	r3, [r7, #12]
		uint8_t index = 1;
 80049ea:	2301      	movs	r3, #1
 80049ec:	72fb      	strb	r3, [r7, #11]

		// Iterate over list
		while(current_node != NULL)
 80049ee:	e031      	b.n	8004a54 <rf24_network_print_neighbors+0x80>
		{
			rf24_printf("%-10s %d: %d:%d:%d:%d:%d:%d (rel: %s, link: %s)\n", "network",
				index++,
 80049f0:	7afb      	ldrb	r3, [r7, #11]
 80049f2:	1c5a      	adds	r2, r3, #1
 80049f4:	72fa      	strb	r2, [r7, #11]
			rf24_printf("%-10s %d: %d:%d:%d:%d:%d:%d (rel: %s, link: %s)\n", "network",
 80049f6:	469e      	mov	lr, r3
				current_node->mac_addr.bytes[0],
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	781b      	ldrb	r3, [r3, #0]
			rf24_printf("%-10s %d: %d:%d:%d:%d:%d:%d (rel: %s, link: %s)\n", "network",
 80049fc:	4698      	mov	r8, r3
				current_node->mac_addr.bytes[1],
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	785b      	ldrb	r3, [r3, #1]
			rf24_printf("%-10s %d: %d:%d:%d:%d:%d:%d (rel: %s, link: %s)\n", "network",
 8004a02:	4619      	mov	r1, r3
				current_node->mac_addr.bytes[2],
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	789b      	ldrb	r3, [r3, #2]
			rf24_printf("%-10s %d: %d:%d:%d:%d:%d:%d (rel: %s, link: %s)\n", "network",
 8004a08:	4618      	mov	r0, r3
				current_node->mac_addr.bytes[3],
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	78db      	ldrb	r3, [r3, #3]
			rf24_printf("%-10s %d: %d:%d:%d:%d:%d:%d (rel: %s, link: %s)\n", "network",
 8004a0e:	461c      	mov	r4, r3
				current_node->mac_addr.bytes[4],
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	791b      	ldrb	r3, [r3, #4]
			rf24_printf("%-10s %d: %d:%d:%d:%d:%d:%d (rel: %s, link: %s)\n", "network",
 8004a14:	461d      	mov	r5, r3
				current_node->mac_addr.bytes[5],
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	795b      	ldrb	r3, [r3, #5]
			rf24_printf("%-10s %d: %d:%d:%d:%d:%d:%d (rel: %s, link: %s)\n", "network",
 8004a1a:	461e      	mov	r6, r3
				rf24_neighbor_relation_string[current_node->relation],
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	79db      	ldrb	r3, [r3, #7]
 8004a20:	461a      	mov	r2, r3
			rf24_printf("%-10s %d: %d:%d:%d:%d:%d:%d (rel: %s, link: %s)\n", "network",
 8004a22:	4b14      	ldr	r3, [pc, #80]	; (8004a74 <rf24_network_print_neighbors+0xa0>)
 8004a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
				rf24_neighbor_link_states_string[current_node->link_state]);
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	7992      	ldrb	r2, [r2, #6]
 8004a2c:	4694      	mov	ip, r2
			rf24_printf("%-10s %d: %d:%d:%d:%d:%d:%d (rel: %s, link: %s)\n", "network",
 8004a2e:	4a12      	ldr	r2, [pc, #72]	; (8004a78 <rf24_network_print_neighbors+0xa4>)
 8004a30:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8004a34:	9206      	str	r2, [sp, #24]
 8004a36:	9305      	str	r3, [sp, #20]
 8004a38:	9604      	str	r6, [sp, #16]
 8004a3a:	9503      	str	r5, [sp, #12]
 8004a3c:	9402      	str	r4, [sp, #8]
 8004a3e:	9001      	str	r0, [sp, #4]
 8004a40:	9100      	str	r1, [sp, #0]
 8004a42:	4643      	mov	r3, r8
 8004a44:	4672      	mov	r2, lr
 8004a46:	490d      	ldr	r1, [pc, #52]	; (8004a7c <rf24_network_print_neighbors+0xa8>)
 8004a48:	480d      	ldr	r0, [pc, #52]	; (8004a80 <rf24_network_print_neighbors+0xac>)
 8004a4a:	f7fc fc8d 	bl	8001368 <rf24_printf>

			current_node = current_node->next;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	60fb      	str	r3, [r7, #12]
		while(current_node != NULL)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1ca      	bne.n	80049f0 <rf24_network_print_neighbors+0x1c>
		}
	}
	else rf24_printf("%-10s no neighbors available\n", "network");
}
 8004a5a:	e003      	b.n	8004a64 <rf24_network_print_neighbors+0x90>
	else rf24_printf("%-10s no neighbors available\n", "network");
 8004a5c:	4907      	ldr	r1, [pc, #28]	; (8004a7c <rf24_network_print_neighbors+0xa8>)
 8004a5e:	4809      	ldr	r0, [pc, #36]	; (8004a84 <rf24_network_print_neighbors+0xb0>)
 8004a60:	f7fc fc82 	bl	8001368 <rf24_printf>
}
 8004a64:	bf00      	nop
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a6e:	bf00      	nop
 8004a70:	20000694 	.word	0x20000694
 8004a74:	200003ec 	.word	0x200003ec
 8004a78:	200003dc 	.word	0x200003dc
 8004a7c:	08009644 	.word	0x08009644
 8004a80:	0800964c 	.word	0x0800964c
 8004a84:	08009680 	.word	0x08009680

08004a88 <rf24_network_check_topology_integrity>:


bool rf24_network_check_topology_integrity()
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
	if(neighbors_length > 0)
 8004a8e:	4b11      	ldr	r3, [pc, #68]	; (8004ad4 <rf24_network_check_topology_integrity+0x4c>)
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d018      	beq.n	8004ac8 <rf24_network_check_topology_integrity+0x40>
	{
		struct rf24_neighbor *current_neighbor = rf24_network_get_neighbors();
 8004a96:	f7ff faef 	bl	8004078 <rf24_network_get_neighbors>
 8004a9a:	6078      	str	r0, [r7, #4]

		// Iterate over neighbors
		while(current_neighbor != NULL)
 8004a9c:	e00f      	b.n	8004abe <rf24_network_check_topology_integrity+0x36>
		{
			if(current_neighbor->relation == SUCCESSOR && !current_neighbor->topology_received) return false;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	79db      	ldrb	r3, [r3, #7]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d108      	bne.n	8004ab8 <rf24_network_check_topology_integrity+0x30>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	7d1b      	ldrb	r3, [r3, #20]
 8004aaa:	f083 0301 	eor.w	r3, r3, #1
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d001      	beq.n	8004ab8 <rf24_network_check_topology_integrity+0x30>
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	e008      	b.n	8004aca <rf24_network_check_topology_integrity+0x42>
			current_neighbor = current_neighbor->next;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	607b      	str	r3, [r7, #4]
		while(current_neighbor != NULL)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1ec      	bne.n	8004a9e <rf24_network_check_topology_integrity+0x16>
		}

		return true;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e000      	b.n	8004aca <rf24_network_check_topology_integrity+0x42>
	}

	return false;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3708      	adds	r7, #8
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	20000694 	.word	0x20000694

08004ad8 <rf24_network_topology_get_last>:

struct rf24_topology* rf24_network_topology_get_last()
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
	struct rf24_topology *current_topology = rf24_network_get_topology();
 8004ade:	f7ff fac1 	bl	8004064 <rf24_network_get_topology>
 8004ae2:	6078      	str	r0, [r7, #4]

	while(current_topology->next != NULL) current_topology = current_topology->next;
 8004ae4:	e002      	b.n	8004aec <rf24_network_topology_get_last+0x14>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	607b      	str	r3, [r7, #4]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1f8      	bne.n	8004ae6 <rf24_network_topology_get_last+0xe>

	return current_topology;
 8004af4:	687b      	ldr	r3, [r7, #4]
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
	...

08004b00 <rf24_network_rx_data_to_topology>:
{

}

struct rf24_topology* rf24_network_rx_data_to_topology(uint8_t *rx_data, uint8_t length)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b088      	sub	sp, #32
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	460b      	mov	r3, r1
 8004b0a:	70fb      	strb	r3, [r7, #3]
	// Initialize a topology to hold sub topology
	struct rf24_topology *sub_topology = (struct rf24_topology*) malloc(sizeof(struct rf24_topology));
 8004b0c:	2008      	movs	r0, #8
 8004b0e:	f002 f8c9 	bl	8006ca4 <malloc>
 8004b12:	4603      	mov	r3, r0
 8004b14:	613b      	str	r3, [r7, #16]
	sub_topology->neighbor = NULL;
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	601a      	str	r2, [r3, #0]
	sub_topology->next = NULL;
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	605a      	str	r2, [r3, #4]

	topology_length++;
 8004b22:	4b33      	ldr	r3, [pc, #204]	; (8004bf0 <rf24_network_rx_data_to_topology+0xf0>)
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	3301      	adds	r3, #1
 8004b28:	b2da      	uxtb	r2, r3
 8004b2a:	4b31      	ldr	r3, [pc, #196]	; (8004bf0 <rf24_network_rx_data_to_topology+0xf0>)
 8004b2c:	701a      	strb	r2, [r3, #0]

	uint8_t index = 0;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	77fb      	strb	r3, [r7, #31]
	struct rf24_topology *current_topology = sub_topology;
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	61bb      	str	r3, [r7, #24]

	while(index < length)
 8004b36:	e04e      	b.n	8004bd6 <rf24_network_rx_data_to_topology+0xd6>
	{
		if(rx_data[index] == 0x1C)
 8004b38:	7ffb      	ldrb	r3, [r7, #31]
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	2b1c      	cmp	r3, #28
 8004b42:	d119      	bne.n	8004b78 <rf24_network_rx_data_to_topology+0x78>
		{
			// Create a new topology
			struct rf24_topology *new_topology = (struct rf24_topology*) malloc(sizeof(struct rf24_topology));
 8004b44:	2008      	movs	r0, #8
 8004b46:	f002 f8ad 	bl	8006ca4 <malloc>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	60bb      	str	r3, [r7, #8]
			new_topology->neighbor = NULL;
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	2200      	movs	r2, #0
 8004b52:	601a      	str	r2, [r3, #0]
			new_topology->next = NULL;
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	2200      	movs	r2, #0
 8004b58:	605a      	str	r2, [r3, #4]

			// Attach new topology
			current_topology->next = new_topology;
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	68ba      	ldr	r2, [r7, #8]
 8004b5e:	605a      	str	r2, [r3, #4]
			current_topology = new_topology;
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	61bb      	str	r3, [r7, #24]

			topology_length++;
 8004b64:	4b22      	ldr	r3, [pc, #136]	; (8004bf0 <rf24_network_rx_data_to_topology+0xf0>)
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	b2da      	uxtb	r2, r3
 8004b6c:	4b20      	ldr	r3, [pc, #128]	; (8004bf0 <rf24_network_rx_data_to_topology+0xf0>)
 8004b6e:	701a      	strb	r2, [r3, #0]
			index++;
 8004b70:	7ffb      	ldrb	r3, [r7, #31]
 8004b72:	3301      	adds	r3, #1
 8004b74:	77fb      	strb	r3, [r7, #31]
 8004b76:	e02e      	b.n	8004bd6 <rf24_network_rx_data_to_topology+0xd6>
		}
		else
		{
			// Create a new neighbor
			struct rf24_neighbor *new_neighbor = (struct rf24_neighbor*) malloc(sizeof(struct rf24_neighbor));
 8004b78:	201c      	movs	r0, #28
 8004b7a:	f002 f893 	bl	8006ca4 <malloc>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	60fb      	str	r3, [r7, #12]
			new_neighbor->next = NULL;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	619a      	str	r2, [r3, #24]

			// Copy MAC address
			memcpy(&new_neighbor->mac_addr, &rx_data[index], 6);
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	7ffb      	ldrb	r3, [r7, #31]
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	4413      	add	r3, r2
 8004b90:	2206      	movs	r2, #6
 8004b92:	4619      	mov	r1, r3
 8004b94:	f002 f8a5 	bl	8006ce2 <memcpy>

			// If current topology is empty, insert new neighbor at head
			if(current_topology->neighbor == NULL) current_topology->neighbor = new_neighbor;
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d103      	bne.n	8004ba8 <rf24_network_rx_data_to_topology+0xa8>
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	601a      	str	r2, [r3, #0]
 8004ba6:	e00d      	b.n	8004bc4 <rf24_network_rx_data_to_topology+0xc4>
			else
			{
				struct rf24_neighbor *current_neighbor = current_topology->neighbor;
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	617b      	str	r3, [r7, #20]

				// Goto end of neighbor list
				while(current_neighbor->next != NULL) current_neighbor = current_neighbor->next;
 8004bae:	e002      	b.n	8004bb6 <rf24_network_rx_data_to_topology+0xb6>
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	617b      	str	r3, [r7, #20]
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d1f8      	bne.n	8004bb0 <rf24_network_rx_data_to_topology+0xb0>

				// Attach new neighbor to and of neighbor list
				current_neighbor->next = new_neighbor;
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	619a      	str	r2, [r3, #24]
			}

			topology_neighbors_length++;
 8004bc4:	4b0b      	ldr	r3, [pc, #44]	; (8004bf4 <rf24_network_rx_data_to_topology+0xf4>)
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	3301      	adds	r3, #1
 8004bca:	b2da      	uxtb	r2, r3
 8004bcc:	4b09      	ldr	r3, [pc, #36]	; (8004bf4 <rf24_network_rx_data_to_topology+0xf4>)
 8004bce:	701a      	strb	r2, [r3, #0]
			index += 6;
 8004bd0:	7ffb      	ldrb	r3, [r7, #31]
 8004bd2:	3306      	adds	r3, #6
 8004bd4:	77fb      	strb	r3, [r7, #31]
	while(index < length)
 8004bd6:	7ffa      	ldrb	r2, [r7, #31]
 8004bd8:	78fb      	ldrb	r3, [r7, #3]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d3ac      	bcc.n	8004b38 <rf24_network_rx_data_to_topology+0x38>
		}
	}

	// Close sub topology
	current_topology->next = NULL;
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	2200      	movs	r2, #0
 8004be2:	605a      	str	r2, [r3, #4]

	return sub_topology;
 8004be4:	693b      	ldr	r3, [r7, #16]
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3720      	adds	r7, #32
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	2000069c 	.word	0x2000069c
 8004bf4:	2000069d 	.word	0x2000069d

08004bf8 <rf24_network_add_successor_topology>:

void rf24_network_add_successor_topology(struct rf24_topology* successor_topology)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
	if(topology == NULL)
 8004c00:	4b08      	ldr	r3, [pc, #32]	; (8004c24 <rf24_network_add_successor_topology+0x2c>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d103      	bne.n	8004c10 <rf24_network_add_successor_topology+0x18>
		topology = successor_topology;
 8004c08:	4a06      	ldr	r2, [pc, #24]	; (8004c24 <rf24_network_add_successor_topology+0x2c>)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6013      	str	r3, [r2, #0]
	else
		rf24_network_topology_get_last()->next = successor_topology;
}
 8004c0e:	e004      	b.n	8004c1a <rf24_network_add_successor_topology+0x22>
		rf24_network_topology_get_last()->next = successor_topology;
 8004c10:	f7ff ff62 	bl	8004ad8 <rf24_network_topology_get_last>
 8004c14:	4602      	mov	r2, r0
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6053      	str	r3, [r2, #4]
}
 8004c1a:	bf00      	nop
 8004c1c:	3708      	adds	r7, #8
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	20000698 	.word	0x20000698

08004c28 <rf24_network_topology_to_tx_data>:

void rf24_network_topology_to_tx_data(struct rf24_topology *topology, uint8_t *tx_data, uint8_t length)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b088      	sub	sp, #32
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	4613      	mov	r3, r2
 8004c34:	71fb      	strb	r3, [r7, #7]
	uint8_t index = 0;
 8004c36:	2300      	movs	r3, #0
 8004c38:	77fb      	strb	r3, [r7, #31]

	struct rf24_topology *current_topology = topology;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	61bb      	str	r3, [r7, #24]

	while(current_topology != NULL)
 8004c3e:	e023      	b.n	8004c88 <rf24_network_topology_to_tx_data+0x60>
	{
		struct rf24_neighbor *current_neighbor = current_topology->neighbor;
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	617b      	str	r3, [r7, #20]

		while(current_neighbor != NULL)
 8004c46:	e00d      	b.n	8004c64 <rf24_network_topology_to_tx_data+0x3c>
		{
			// Copy MAC address of current node into rx_data array
			memcpy(&tx_data[index], &current_neighbor->mac_addr, 6);
 8004c48:	7ffb      	ldrb	r3, [r7, #31]
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	6979      	ldr	r1, [r7, #20]
 8004c50:	2206      	movs	r2, #6
 8004c52:	4618      	mov	r0, r3
 8004c54:	f002 f845 	bl	8006ce2 <memcpy>
			// Increment index
			index += 6;
 8004c58:	7ffb      	ldrb	r3, [r7, #31]
 8004c5a:	3306      	adds	r3, #6
 8004c5c:	77fb      	strb	r3, [r7, #31]
			// Next neighbor
			current_neighbor = current_neighbor->next;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	617b      	str	r3, [r7, #20]
		while(current_neighbor != NULL)
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1ee      	bne.n	8004c48 <rf24_network_topology_to_tx_data+0x20>
		}

		// Insert ASCII file separator(s) between topologies
		if(index < length) tx_data[index++] = 0x1C;
 8004c6a:	7ffa      	ldrb	r2, [r7, #31]
 8004c6c:	79fb      	ldrb	r3, [r7, #7]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d207      	bcs.n	8004c82 <rf24_network_topology_to_tx_data+0x5a>
 8004c72:	7ffb      	ldrb	r3, [r7, #31]
 8004c74:	1c5a      	adds	r2, r3, #1
 8004c76:	77fa      	strb	r2, [r7, #31]
 8004c78:	461a      	mov	r2, r3
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	221c      	movs	r2, #28
 8004c80:	701a      	strb	r2, [r3, #0]
		// Next topology
		current_topology = current_topology->next;
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	61bb      	str	r3, [r7, #24]
	while(current_topology != NULL)
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1d8      	bne.n	8004c40 <rf24_network_topology_to_tx_data+0x18>
	}
}
 8004c8e:	bf00      	nop
 8004c90:	3720      	adds	r7, #32
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
	...

08004c98 <rf24_network_print_topology>:

void rf24_network_print_topology(struct rf24_topology *topology)
{
 8004c98:	b5b0      	push	{r4, r5, r7, lr}
 8004c9a:	b08a      	sub	sp, #40	; 0x28
 8004c9c:	af04      	add	r7, sp, #16
 8004c9e:	6078      	str	r0, [r7, #4]
	bool head = true;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	75fb      	strb	r3, [r7, #23]
	uint8_t topology_count = 1;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	75bb      	strb	r3, [r7, #22]
	uint8_t neighbor_count = 0;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	757b      	strb	r3, [r7, #21]

	//rf24_printf("%-10s %d topology/ies with %d neighbor/s \n", "topology", topology_length, topology_neighbors_length);

	struct rf24_topology *current_topology = topology;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	613b      	str	r3, [r7, #16]

	while(current_topology != NULL)
 8004cb0:	e045      	b.n	8004d3e <rf24_network_print_topology+0xa6>
	{
		struct rf24_neighbor *current_neighbor = current_topology->neighbor;
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	60fb      	str	r3, [r7, #12]
		neighbor_count = 0;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	757b      	strb	r3, [r7, #21]

		while(current_neighbor != NULL)
 8004cbc:	e034      	b.n	8004d28 <rf24_network_print_topology+0x90>
		{
			if(!head) rf24_printf("%-13s %d: ", "", neighbor_count);
 8004cbe:	7dfb      	ldrb	r3, [r7, #23]
 8004cc0:	f083 0301 	eor.w	r3, r3, #1
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d006      	beq.n	8004cd8 <rf24_network_print_topology+0x40>
 8004cca:	7d7b      	ldrb	r3, [r7, #21]
 8004ccc:	461a      	mov	r2, r3
 8004cce:	491f      	ldr	r1, [pc, #124]	; (8004d4c <rf24_network_print_topology+0xb4>)
 8004cd0:	481f      	ldr	r0, [pc, #124]	; (8004d50 <rf24_network_print_topology+0xb8>)
 8004cd2:	f7fc fb49 	bl	8001368 <rf24_printf>
 8004cd6:	e005      	b.n	8004ce4 <rf24_network_print_topology+0x4c>
			else rf24_printf("%-10s %d: ", "topology", topology_count);
 8004cd8:	7dbb      	ldrb	r3, [r7, #22]
 8004cda:	461a      	mov	r2, r3
 8004cdc:	491d      	ldr	r1, [pc, #116]	; (8004d54 <rf24_network_print_topology+0xbc>)
 8004cde:	481e      	ldr	r0, [pc, #120]	; (8004d58 <rf24_network_print_topology+0xc0>)
 8004ce0:	f7fc fb42 	bl	8001368 <rf24_printf>

			head = false;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	75fb      	strb	r3, [r7, #23]

			rf24_printf("%d:%d:%d:%d:%d:%d\n",
				current_neighbor->mac_addr.bytes[0],
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	781b      	ldrb	r3, [r3, #0]
			rf24_printf("%d:%d:%d:%d:%d:%d\n",
 8004cec:	4618      	mov	r0, r3
				current_neighbor->mac_addr.bytes[1],
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	785b      	ldrb	r3, [r3, #1]
			rf24_printf("%d:%d:%d:%d:%d:%d\n",
 8004cf2:	461c      	mov	r4, r3
				current_neighbor->mac_addr.bytes[2],
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	789b      	ldrb	r3, [r3, #2]
			rf24_printf("%d:%d:%d:%d:%d:%d\n",
 8004cf8:	461d      	mov	r5, r3
				current_neighbor->mac_addr.bytes[3],
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	78db      	ldrb	r3, [r3, #3]
			rf24_printf("%d:%d:%d:%d:%d:%d\n",
 8004cfe:	461a      	mov	r2, r3
				current_neighbor->mac_addr.bytes[4],
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	791b      	ldrb	r3, [r3, #4]
			rf24_printf("%d:%d:%d:%d:%d:%d\n",
 8004d04:	4619      	mov	r1, r3
				current_neighbor->mac_addr.bytes[5]);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	795b      	ldrb	r3, [r3, #5]
			rf24_printf("%d:%d:%d:%d:%d:%d\n",
 8004d0a:	9302      	str	r3, [sp, #8]
 8004d0c:	9101      	str	r1, [sp, #4]
 8004d0e:	9200      	str	r2, [sp, #0]
 8004d10:	462b      	mov	r3, r5
 8004d12:	4622      	mov	r2, r4
 8004d14:	4601      	mov	r1, r0
 8004d16:	4811      	ldr	r0, [pc, #68]	; (8004d5c <rf24_network_print_topology+0xc4>)
 8004d18:	f7fc fb26 	bl	8001368 <rf24_printf>

			current_neighbor = current_neighbor->next;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	60fb      	str	r3, [r7, #12]
			neighbor_count++;
 8004d22:	7d7b      	ldrb	r3, [r7, #21]
 8004d24:	3301      	adds	r3, #1
 8004d26:	757b      	strb	r3, [r7, #21]
		while(current_neighbor != NULL)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1c7      	bne.n	8004cbe <rf24_network_print_topology+0x26>
		}

		current_topology = current_topology->next;
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	613b      	str	r3, [r7, #16]
		topology_count++;
 8004d34:	7dbb      	ldrb	r3, [r7, #22]
 8004d36:	3301      	adds	r3, #1
 8004d38:	75bb      	strb	r3, [r7, #22]
		head = true;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	75fb      	strb	r3, [r7, #23]
	while(current_topology != NULL)
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1b6      	bne.n	8004cb2 <rf24_network_print_topology+0x1a>
	}
}
 8004d44:	bf00      	nop
 8004d46:	3718      	adds	r7, #24
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bdb0      	pop	{r4, r5, r7, pc}
 8004d4c:	08009090 	.word	0x08009090
 8004d50:	080096a0 	.word	0x080096a0
 8004d54:	080096ac 	.word	0x080096ac
 8004d58:	080096b8 	.word	0x080096b8
 8004d5c:	080096c4 	.word	0x080096c4

08004d60 <rf24_network_transfer_topology>:

void rf24_network_transfer_topology(rf24_mac_addr *receiver)
{
 8004d60:	b5b0      	push	{r4, r5, r7, lr}
 8004d62:	b08a      	sub	sp, #40	; 0x28
 8004d64:	af02      	add	r7, sp, #8
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	466b      	mov	r3, sp
 8004d6a:	461d      	mov	r5, r3
	// (1) 	Insert myself (as a neighbor node) at head position of neighbors list
	//_____________________________________________________________________________________________________

	struct rf24_neighbor *new_neighbor = (struct rf24_neighbor*) malloc(sizeof(struct rf24_neighbor));
 8004d6c:	201c      	movs	r0, #28
 8004d6e:	f001 ff99 	bl	8006ca4 <malloc>
 8004d72:	4603      	mov	r3, r0
 8004d74:	61bb      	str	r3, [r7, #24]

	new_neighbor->mac_addr = *rf24_mac_get_address();
 8004d76:	f7fe f945 	bl	8003004 <rf24_mac_get_address>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	6810      	ldr	r0, [r2, #0]
 8004d80:	6018      	str	r0, [r3, #0]
 8004d82:	8892      	ldrh	r2, [r2, #4]
 8004d84:	809a      	strh	r2, [r3, #4]

	new_neighbor->next = neighbors;
 8004d86:	4b3b      	ldr	r3, [pc, #236]	; (8004e74 <rf24_network_transfer_topology+0x114>)
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	619a      	str	r2, [r3, #24]
	neighbors = new_neighbor;
 8004d8e:	4a39      	ldr	r2, [pc, #228]	; (8004e74 <rf24_network_transfer_topology+0x114>)
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	6013      	str	r3, [r2, #0]

	neighbors_length++;
 8004d94:	4b38      	ldr	r3, [pc, #224]	; (8004e78 <rf24_network_transfer_topology+0x118>)
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	3301      	adds	r3, #1
 8004d9a:	b2da      	uxtb	r2, r3
 8004d9c:	4b36      	ldr	r3, [pc, #216]	; (8004e78 <rf24_network_transfer_topology+0x118>)
 8004d9e:	701a      	strb	r2, [r3, #0]

	// (2) Insert my neighbors into topology at head position (before topologies of successors)
	//_____________________________________________________________________________________________________

	struct rf24_topology *new_topology = (struct rf24_topology*) malloc(sizeof(struct rf24_topology));
 8004da0:	2008      	movs	r0, #8
 8004da2:	f001 ff7f 	bl	8006ca4 <malloc>
 8004da6:	4603      	mov	r3, r0
 8004da8:	617b      	str	r3, [r7, #20]

	new_topology->neighbor = neighbors;
 8004daa:	4b32      	ldr	r3, [pc, #200]	; (8004e74 <rf24_network_transfer_topology+0x114>)
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	601a      	str	r2, [r3, #0]
	new_topology->next = topology;
 8004db2:	4b32      	ldr	r3, [pc, #200]	; (8004e7c <rf24_network_transfer_topology+0x11c>)
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	605a      	str	r2, [r3, #4]
	topology = new_topology;
 8004dba:	4a30      	ldr	r2, [pc, #192]	; (8004e7c <rf24_network_transfer_topology+0x11c>)
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	6013      	str	r3, [r2, #0]

	topology_length++;
 8004dc0:	4b2f      	ldr	r3, [pc, #188]	; (8004e80 <rf24_network_transfer_topology+0x120>)
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	b2da      	uxtb	r2, r3
 8004dc8:	4b2d      	ldr	r3, [pc, #180]	; (8004e80 <rf24_network_transfer_topology+0x120>)
 8004dca:	701a      	strb	r2, [r3, #0]
	topology_neighbors_length += neighbors_length;
 8004dcc:	4b2d      	ldr	r3, [pc, #180]	; (8004e84 <rf24_network_transfer_topology+0x124>)
 8004dce:	781a      	ldrb	r2, [r3, #0]
 8004dd0:	4b29      	ldr	r3, [pc, #164]	; (8004e78 <rf24_network_transfer_topology+0x118>)
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	b2da      	uxtb	r2, r3
 8004dd8:	4b2a      	ldr	r3, [pc, #168]	; (8004e84 <rf24_network_transfer_topology+0x124>)
 8004dda:	701a      	strb	r2, [r3, #0]

	// (3) Covert topology into byte stream
	//_____________________________________________________________________________________________________

	// Calc amount of separator symbols needed
	uint8_t n_separators = 0;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	77fb      	strb	r3, [r7, #31]
	if(topology_length > 0) n_separators = topology_length - 1;
 8004de0:	4b27      	ldr	r3, [pc, #156]	; (8004e80 <rf24_network_transfer_topology+0x120>)
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d003      	beq.n	8004df0 <rf24_network_transfer_topology+0x90>
 8004de8:	4b25      	ldr	r3, [pc, #148]	; (8004e80 <rf24_network_transfer_topology+0x120>)
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	3b01      	subs	r3, #1
 8004dee:	77fb      	strb	r3, [r7, #31]

	// Overall neighbors in (all) topologies * 6 bytes for each MAC address */
	uint8_t tx_data_length = topology_neighbors_length * 6 + n_separators;
 8004df0:	4b24      	ldr	r3, [pc, #144]	; (8004e84 <rf24_network_transfer_topology+0x124>)
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	461a      	mov	r2, r3
 8004df6:	0052      	lsls	r2, r2, #1
 8004df8:	4413      	add	r3, r2
 8004dfa:	005b      	lsls	r3, r3, #1
 8004dfc:	b2da      	uxtb	r2, r3
 8004dfe:	7ffb      	ldrb	r3, [r7, #31]
 8004e00:	4413      	add	r3, r2
 8004e02:	74fb      	strb	r3, [r7, #19]

	uint8_t tx_data[tx_data_length];
 8004e04:	7cf8      	ldrb	r0, [r7, #19]
 8004e06:	4603      	mov	r3, r0
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	60fb      	str	r3, [r7, #12]
 8004e0c:	b2c1      	uxtb	r1, r0
 8004e0e:	f04f 0200 	mov.w	r2, #0
 8004e12:	f04f 0300 	mov.w	r3, #0
 8004e16:	f04f 0400 	mov.w	r4, #0
 8004e1a:	00d4      	lsls	r4, r2, #3
 8004e1c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8004e20:	00cb      	lsls	r3, r1, #3
 8004e22:	b2c1      	uxtb	r1, r0
 8004e24:	f04f 0200 	mov.w	r2, #0
 8004e28:	f04f 0300 	mov.w	r3, #0
 8004e2c:	f04f 0400 	mov.w	r4, #0
 8004e30:	00d4      	lsls	r4, r2, #3
 8004e32:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8004e36:	00cb      	lsls	r3, r1, #3
 8004e38:	4603      	mov	r3, r0
 8004e3a:	3307      	adds	r3, #7
 8004e3c:	08db      	lsrs	r3, r3, #3
 8004e3e:	00db      	lsls	r3, r3, #3
 8004e40:	ebad 0d03 	sub.w	sp, sp, r3
 8004e44:	ab02      	add	r3, sp, #8
 8004e46:	3300      	adds	r3, #0
 8004e48:	60bb      	str	r3, [r7, #8]
	rf24_network_topology_to_tx_data(topology, tx_data, tx_data_length);
 8004e4a:	4b0c      	ldr	r3, [pc, #48]	; (8004e7c <rf24_network_transfer_topology+0x11c>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68b9      	ldr	r1, [r7, #8]
 8004e50:	7cfa      	ldrb	r2, [r7, #19]
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7ff fee8 	bl	8004c28 <rf24_network_topology_to_tx_data>

	// (4) Transfer topology to predecessor
	//_____________________________________________________________________________________________________

	rf24_mac_transfer_data(UNICAST, receiver, DATA_TOPOLOGY, tx_data, tx_data_length);
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	7cfb      	ldrb	r3, [r7, #19]
 8004e5c:	9300      	str	r3, [sp, #0]
 8004e5e:	4613      	mov	r3, r2
 8004e60:	2207      	movs	r2, #7
 8004e62:	6879      	ldr	r1, [r7, #4]
 8004e64:	2000      	movs	r0, #0
 8004e66:	f7fe fd01 	bl	800386c <rf24_mac_transfer_data>
 8004e6a:	46ad      	mov	sp, r5
}
 8004e6c:	bf00      	nop
 8004e6e:	3720      	adds	r7, #32
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bdb0      	pop	{r4, r5, r7, pc}
 8004e74:	20000690 	.word	0x20000690
 8004e78:	20000694 	.word	0x20000694
 8004e7c:	20000698 	.word	0x20000698
 8004e80:	2000069c 	.word	0x2000069c
 8004e84:	2000069d 	.word	0x2000069d

08004e88 <rf24_worker_init>:
struct rf24_cyclic_task *rf24_cyclic_tasks = NULL;

bool recorder = false;

void rf24_worker_init()
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
	// attach callback function to rf24 module to notify tx transmitted event

	rf24_module_attach_notify_data_transmitted(rf24_worker_data_transmitted_handler);
 8004e8c:	4808      	ldr	r0, [pc, #32]	; (8004eb0 <rf24_worker_init+0x28>)
 8004e8e:	f7fd fa07 	bl	80022a0 <rf24_module_attach_notify_data_transmitted>

	// attach callback function to rf24 module to notify rx received event

	rf24_module_attach_notify_data_received(rf24_worker_data_received_handler);
 8004e92:	4808      	ldr	r0, [pc, #32]	; (8004eb4 <rf24_worker_init+0x2c>)
 8004e94:	f7fd f9f6 	bl	8002284 <rf24_module_attach_notify_data_received>

	rf24_stm32f1xx_set_timer_interrupt_us(2, TASK_CYCLE_US, rf24_worker_process_tasks);
 8004e98:	4a07      	ldr	r2, [pc, #28]	; (8004eb8 <rf24_worker_init+0x30>)
 8004e9a:	210a      	movs	r1, #10
 8004e9c:	2002      	movs	r0, #2
 8004e9e:	f000 fcbf 	bl	8005820 <rf24_stm32f1xx_set_timer_interrupt_us>

	rf24_stm32f1xx_set_timer_interrupt_us(3, TIMER_CYCLE_US, rf24_worker_process_timers);
 8004ea2:	4a06      	ldr	r2, [pc, #24]	; (8004ebc <rf24_worker_init+0x34>)
 8004ea4:	210a      	movs	r1, #10
 8004ea6:	2003      	movs	r0, #3
 8004ea8:	f000 fcba 	bl	8005820 <rf24_stm32f1xx_set_timer_interrupt_us>

	//rf24_stm32f1xx_set_timer_interrupt_ms(3, 20*CYCLIC_TASK_CYCLE_MS, rf24_worker_process_cyclic_tasks);
}
 8004eac:	bf00      	nop
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	08004ed9 	.word	0x08004ed9
 8004eb4:	08004ee5 	.word	0x08004ee5
 8004eb8:	08004ff9 	.word	0x08004ff9
 8004ebc:	08004f75 	.word	0x08004f75

08004ec0 <rf24_worker_record>:

void rf24_worker_record()
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	af00      	add	r7, sp, #0
	recorder = true;
 8004ec4:	4b03      	ldr	r3, [pc, #12]	; (8004ed4 <rf24_worker_record+0x14>)
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	701a      	strb	r2, [r3, #0]
}
 8004eca:	bf00      	nop
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bc80      	pop	{r7}
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	200006a8 	.word	0x200006a8

08004ed8 <rf24_worker_data_transmitted_handler>:

void rf24_worker_data_transmitted_handler()
{
 8004ed8:	b480      	push	{r7}
 8004eda:	af00      	add	r7, sp, #0

}
 8004edc:	bf00      	nop
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bc80      	pop	{r7}
 8004ee2:	4770      	bx	lr

08004ee4 <rf24_worker_data_received_handler>:

void rf24_worker_data_received_handler(rf24_module_rx_data *rx_data)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
	// cast rx_data (byte array) to mac frame (struct)
	rf24_mac_frame *mac_frame = (rf24_mac_frame*) rx_data->payload;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	613b      	str	r3, [r7, #16]

	#ifdef RF24_DEBUG

		if(recorder){
 8004ef0:	4b1f      	ldr	r3, [pc, #124]	; (8004f70 <rf24_worker_data_received_handler+0x8c>)
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d003      	beq.n	8004f00 <rf24_worker_data_received_handler+0x1c>
			rf24_mac_print_frame(mac_frame);
 8004ef8:	6938      	ldr	r0, [r7, #16]
 8004efa:	f7fe fcfb 	bl	80038f4 <rf24_mac_print_frame>
			return;
 8004efe:	e033      	b.n	8004f68 <rf24_worker_data_received_handler+0x84>
		}

		rf24_mac_addr* blacklist = rf24_mac_get_blacklist();
 8004f00:	f7fd fd9a 	bl	8002a38 <rf24_mac_get_blacklist>
 8004f04:	60f8      	str	r0, [r7, #12]

		for (int i=0; i < rf24_mac_get_blacklist_length(); i++)
 8004f06:	2300      	movs	r3, #0
 8004f08:	617b      	str	r3, [r7, #20]
 8004f0a:	e013      	b.n	8004f34 <rf24_worker_data_received_handler+0x50>
			if(rf24_mac_addr_equal(&mac_frame->transmitter, &blacklist[i])) return;
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	f103 000a 	add.w	r0, r3, #10
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	4613      	mov	r3, r2
 8004f16:	005b      	lsls	r3, r3, #1
 8004f18:	4413      	add	r3, r2
 8004f1a:	005b      	lsls	r3, r3, #1
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	4413      	add	r3, r2
 8004f22:	4619      	mov	r1, r3
 8004f24:	f7fe f80e 	bl	8002f44 <rf24_mac_addr_equal>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d11b      	bne.n	8004f66 <rf24_worker_data_received_handler+0x82>
		for (int i=0; i < rf24_mac_get_blacklist_length(); i++)
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	3301      	adds	r3, #1
 8004f32:	617b      	str	r3, [r7, #20]
 8004f34:	f7fd fd8a 	bl	8002a4c <rf24_mac_get_blacklist_length>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	dbe4      	blt.n	8004f0c <rf24_worker_data_received_handler+0x28>

	#endif

	// if frame is csma ca control message call csma ca frame handler
	switch(mac_frame->frame_control.type)
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b04      	cmp	r3, #4
 8004f4e:	d103      	bne.n	8004f58 <rf24_worker_data_received_handler+0x74>
	{
		case TOPOLOGY:
			rf24_network_frame_received_handler(mac_frame);
 8004f50:	6938      	ldr	r0, [r7, #16]
 8004f52:	f7ff f89b 	bl	800408c <rf24_network_frame_received_handler>
			break;
 8004f56:	bf00      	nop
	}

	// Call CSMA/CA frame received handler
	rf24_csma_ca_frame_received_handler(mac_frame);
 8004f58:	6938      	ldr	r0, [r7, #16]
 8004f5a:	f7fd f9f3 	bl	8002344 <rf24_csma_ca_frame_received_handler>

	// Call MAC frame received handler
	rf24_mac_frame_received_handler(mac_frame);
 8004f5e:	6938      	ldr	r0, [r7, #16]
 8004f60:	f7fd fdb0 	bl	8002ac4 <rf24_mac_frame_received_handler>
 8004f64:	e000      	b.n	8004f68 <rf24_worker_data_received_handler+0x84>
			if(rf24_mac_addr_equal(&mac_frame->transmitter, &blacklist[i])) return;
 8004f66:	bf00      	nop
}
 8004f68:	3718      	adds	r7, #24
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	200006a8 	.word	0x200006a8

08004f74 <rf24_worker_process_timers>:

void rf24_worker_process_timers()
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
	if(rf24_timers == NULL) return;
 8004f7a:	4b1e      	ldr	r3, [pc, #120]	; (8004ff4 <rf24_worker_process_timers+0x80>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d034      	beq.n	8004fec <rf24_worker_process_timers+0x78>

	// start from beginning
	struct rf24_timer *current_timer = rf24_timers;
 8004f82:	4b1c      	ldr	r3, [pc, #112]	; (8004ff4 <rf24_worker_process_timers+0x80>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	607b      	str	r3, [r7, #4]
	struct rf24_timer *predecessor = NULL;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	603b      	str	r3, [r7, #0]

	// iterate over linked list (timers)
	while(current_timer != NULL)
 8004f8c:	e02a      	b.n	8004fe4 <rf24_worker_process_timers+0x70>
	{
		if(current_timer->t_count_us < current_timer->t_us)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	689a      	ldr	r2, [r3, #8]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d213      	bcs.n	8004fc2 <rf24_worker_process_timers+0x4e>
		{
			// update wait state
			current_timer->t_count_us += TIMER_CYCLE_US;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f103 020a 	add.w	r2, r3, #10
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	609a      	str	r2, [r3, #8]

			if(current_timer->t_count_us >= current_timer->t_us)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	689a      	ldr	r2, [r3, #8]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d313      	bcc.n	8004fda <rf24_worker_process_timers+0x66>
			{
				// call attached callback function
				if(current_timer->fct_ptr_timeout) current_timer->fct_ptr_timeout();
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00f      	beq.n	8004fda <rf24_worker_process_timers+0x66>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	4798      	blx	r3
 8004fc0:	e00b      	b.n	8004fda <rf24_worker_process_timers+0x66>
			}
		}
		else
		{
			//remove timer
			if(predecessor)
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d004      	beq.n	8004fd2 <rf24_worker_process_timers+0x5e>
				predecessor->next_timer = current_timer->next_timer;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	691a      	ldr	r2, [r3, #16]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	611a      	str	r2, [r3, #16]
 8004fd0:	e003      	b.n	8004fda <rf24_worker_process_timers+0x66>
			else
				rf24_timers = current_timer->next_timer;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	4a07      	ldr	r2, [pc, #28]	; (8004ff4 <rf24_worker_process_timers+0x80>)
 8004fd8:	6013      	str	r3, [r2, #0]
		}

		predecessor = current_timer;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	603b      	str	r3, [r7, #0]
		current_timer = current_timer->next_timer;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	607b      	str	r3, [r7, #4]
	while(current_timer != NULL)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1d1      	bne.n	8004f8e <rf24_worker_process_timers+0x1a>
 8004fea:	e000      	b.n	8004fee <rf24_worker_process_timers+0x7a>
	if(rf24_timers == NULL) return;
 8004fec:	bf00      	nop
	}
}
 8004fee:	3708      	adds	r7, #8
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	200006a0 	.word	0x200006a0

08004ff8 <rf24_worker_process_tasks>:

void rf24_worker_process_tasks()
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	af00      	add	r7, sp, #0
	// tasks available?
	if(rf24_tasks == NULL) return;
 8004ffc:	4b19      	ldr	r3, [pc, #100]	; (8005064 <rf24_worker_process_tasks+0x6c>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d02d      	beq.n	8005060 <rf24_worker_process_tasks+0x68>
		}
		else return;
	}*/

	// as long as counter is less than repeat - process current task
	if(rf24_tasks->cycle_count < rf24_tasks->cycles)
 8005004:	4b17      	ldr	r3, [pc, #92]	; (8005064 <rf24_worker_process_tasks+0x6c>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	789a      	ldrb	r2, [r3, #2]
 800500a:	4b16      	ldr	r3, [pc, #88]	; (8005064 <rf24_worker_process_tasks+0x6c>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	785b      	ldrb	r3, [r3, #1]
 8005010:	429a      	cmp	r2, r3
 8005012:	d222      	bcs.n	800505a <rf24_worker_process_tasks+0x62>
	{
		// add us
		rf24_tasks->t_cycle_count_us += TASK_CYCLE_US;
 8005014:	4b13      	ldr	r3, [pc, #76]	; (8005064 <rf24_worker_process_tasks+0x6c>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	689a      	ldr	r2, [r3, #8]
 800501a:	4b12      	ldr	r3, [pc, #72]	; (8005064 <rf24_worker_process_tasks+0x6c>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	320a      	adds	r2, #10
 8005020:	609a      	str	r2, [r3, #8]

		// one cycle past?
		if(rf24_tasks->t_cycle_count_us >= rf24_tasks->t_cycle_us)
 8005022:	4b10      	ldr	r3, [pc, #64]	; (8005064 <rf24_worker_process_tasks+0x6c>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689a      	ldr	r2, [r3, #8]
 8005028:	4b0e      	ldr	r3, [pc, #56]	; (8005064 <rf24_worker_process_tasks+0x6c>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	429a      	cmp	r2, r3
 8005030:	d317      	bcc.n	8005062 <rf24_worker_process_tasks+0x6a>
		{
			// one cycle past - reset t_wait_count
			rf24_tasks->t_cycle_count_us = 0;
 8005032:	4b0c      	ldr	r3, [pc, #48]	; (8005064 <rf24_worker_process_tasks+0x6c>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2200      	movs	r2, #0
 8005038:	609a      	str	r2, [r3, #8]

			// increment counter
			rf24_tasks->cycle_count++;
 800503a:	4b0a      	ldr	r3, [pc, #40]	; (8005064 <rf24_worker_process_tasks+0x6c>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	789a      	ldrb	r2, [r3, #2]
 8005040:	3201      	adds	r2, #1
 8005042:	b2d2      	uxtb	r2, r2
 8005044:	709a      	strb	r2, [r3, #2]

			//call task function
			if(rf24_tasks->fct_ptr_execution) rf24_tasks->fct_ptr_execution();
 8005046:	4b07      	ldr	r3, [pc, #28]	; (8005064 <rf24_worker_process_tasks+0x6c>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504c:	2b00      	cmp	r3, #0
 800504e:	d008      	beq.n	8005062 <rf24_worker_process_tasks+0x6a>
 8005050:	4b04      	ldr	r3, [pc, #16]	; (8005064 <rf24_worker_process_tasks+0x6c>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005056:	4798      	blx	r3
 8005058:	e003      	b.n	8005062 <rf24_worker_process_tasks+0x6a>
				rf24_tasks->t_cycle_count_us/1000,
				rf24_tasks->t_cycle_us/1000);*/

		//rf24_worker_print_tasks();

		rf24_worker_pop_task();
 800505a:	f000 f8cd 	bl	80051f8 <rf24_worker_pop_task>
 800505e:	e000      	b.n	8005062 <rf24_worker_process_tasks+0x6a>
	if(rf24_tasks == NULL) return;
 8005060:	bf00      	nop
	}
}
 8005062:	bd80      	pop	{r7, pc}
 8005064:	200006a4 	.word	0x200006a4

08005068 <rf24_worker_attach_wait>:
	task->precondition = false;
	task->fct_ptr_precondition = fct_ptr_precondition;
}

void rf24_worker_attach_wait(rf24_task_names task, uint32_t t_cycle_us)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	4603      	mov	r3, r0
 8005070:	6039      	str	r1, [r7, #0]
 8005072:	71fb      	strb	r3, [r7, #7]
	rf24_worker_attach_task(rf24_worker_build_task(task, 1, t_cycle_us, false));
 8005074:	79f8      	ldrb	r0, [r7, #7]
 8005076:	2300      	movs	r3, #0
 8005078:	683a      	ldr	r2, [r7, #0]
 800507a:	2101      	movs	r1, #1
 800507c:	f000 f83a 	bl	80050f4 <rf24_worker_build_task>
 8005080:	4603      	mov	r3, r0
 8005082:	4618      	mov	r0, r3
 8005084:	f000 f874 	bl	8005170 <rf24_worker_attach_task>
}
 8005088:	bf00      	nop
 800508a:	3708      	adds	r7, #8
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <rf24_worker_push_wait>:

void rf24_worker_push_wait(rf24_task_names task, uint32_t t_cycle_us)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	4603      	mov	r3, r0
 8005098:	6039      	str	r1, [r7, #0]
 800509a:	71fb      	strb	r3, [r7, #7]
	rf24_worker_push_task(rf24_worker_build_task(task, 1, t_cycle_us, false));
 800509c:	79f8      	ldrb	r0, [r7, #7]
 800509e:	2300      	movs	r3, #0
 80050a0:	683a      	ldr	r2, [r7, #0]
 80050a2:	2101      	movs	r1, #1
 80050a4:	f000 f826 	bl	80050f4 <rf24_worker_build_task>
 80050a8:	4603      	mov	r3, r0
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 f880 	bl	80051b0 <rf24_worker_push_task>
}
 80050b0:	bf00      	nop
 80050b2:	3708      	adds	r7, #8
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <rf24_worker_attach>:

void rf24_worker_attach(struct rf24_task* task, rf24_worker_fct_ptr fct_ptr_execution)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
	task->fct_ptr_execution = fct_ptr_execution;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	683a      	ldr	r2, [r7, #0]
 80050c6:	631a      	str	r2, [r3, #48]	; 0x30
	rf24_worker_attach_task(task);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 f851 	bl	8005170 <rf24_worker_attach_task>
}
 80050ce:	bf00      	nop
 80050d0:	3708      	adds	r7, #8
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <rf24_worker_push>:

void rf24_worker_push(struct rf24_task* task, rf24_worker_fct_ptr fct_ptr_execution)
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b082      	sub	sp, #8
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
 80050de:	6039      	str	r1, [r7, #0]
	task->fct_ptr_execution = fct_ptr_execution;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	683a      	ldr	r2, [r7, #0]
 80050e4:	631a      	str	r2, [r3, #48]	; 0x30
	rf24_worker_push_task(task);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f862 	bl	80051b0 <rf24_worker_push_task>
}
 80050ec:	bf00      	nop
 80050ee:	3708      	adds	r7, #8
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <rf24_worker_build_task>:
	// insert new node at the end
	current_task->next_task = new_cyclic_task;
}

struct rf24_task* rf24_worker_build_task(rf24_task_names task, uint8_t cycles, uint32_t t_cycle_us, bool immediate)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	603a      	str	r2, [r7, #0]
 80050fc:	461a      	mov	r2, r3
 80050fe:	4603      	mov	r3, r0
 8005100:	71fb      	strb	r3, [r7, #7]
 8005102:	460b      	mov	r3, r1
 8005104:	71bb      	strb	r3, [r7, #6]
 8005106:	4613      	mov	r3, r2
 8005108:	717b      	strb	r3, [r7, #5]
	struct rf24_task *new_task = (struct rf24_task*) malloc(sizeof(struct rf24_task));
 800510a:	2038      	movs	r0, #56	; 0x38
 800510c:	f001 fdca 	bl	8006ca4 <malloc>
 8005110:	4603      	mov	r3, r0
 8005112:	60fb      	str	r3, [r7, #12]

	if(new_task == NULL)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <rf24_worker_build_task+0x2a>
	{
		return NULL;
 800511a:	2300      	movs	r3, #0
 800511c:	e024      	b.n	8005168 <rf24_worker_build_task+0x74>
	}

	new_task->task = task;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	79fa      	ldrb	r2, [r7, #7]
 8005122:	701a      	strb	r2, [r3, #0]
	new_task->cycle_count = 0;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	709a      	strb	r2, [r3, #2]
	new_task->cycles = cycles;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	79ba      	ldrb	r2, [r7, #6]
 800512e:	705a      	strb	r2, [r3, #1]
	new_task->t_cycle_us = t_cycle_us;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	683a      	ldr	r2, [r7, #0]
 8005134:	605a      	str	r2, [r3, #4]
	new_task->precondition = true;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	new_task->fct_ptr_precondition = NULL;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	62da      	str	r2, [r3, #44]	; 0x2c
	new_task->fct_ptr_execution = NULL;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	631a      	str	r2, [r3, #48]	; 0x30

	new_task->next_task = NULL;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	635a      	str	r2, [r3, #52]	; 0x34

	// if task has to be executed immediate, set cycle counter to cycle time
	if(immediate)
 8005150:	797b      	ldrb	r3, [r7, #5]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d004      	beq.n	8005160 <rf24_worker_build_task+0x6c>
		new_task->t_cycle_count_us = new_task->t_cycle_us;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	685a      	ldr	r2, [r3, #4]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	609a      	str	r2, [r3, #8]
 800515e:	e002      	b.n	8005166 <rf24_worker_build_task+0x72>
	else
		new_task->t_cycle_count_us = 0;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	609a      	str	r2, [r3, #8]

	return new_task;
 8005166:	68fb      	ldr	r3, [r7, #12]
}
 8005168:	4618      	mov	r0, r3
 800516a:	3710      	adds	r7, #16
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <rf24_worker_attach_task>:

void rf24_worker_attach_task(struct rf24_task *new_task)
{
 8005170:	b480      	push	{r7}
 8005172:	b085      	sub	sp, #20
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
	// if list is empty, new task becomes head node
	if(rf24_tasks == NULL)
 8005178:	4b0c      	ldr	r3, [pc, #48]	; (80051ac <rf24_worker_attach_task+0x3c>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d103      	bne.n	8005188 <rf24_worker_attach_task+0x18>
	{
		rf24_tasks = new_task;
 8005180:	4a0a      	ldr	r2, [pc, #40]	; (80051ac <rf24_worker_attach_task+0x3c>)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6013      	str	r3, [r2, #0]
		return;
 8005186:	e00d      	b.n	80051a4 <rf24_worker_attach_task+0x34>
	}

	// start from beginning
	struct rf24_task *current_task = rf24_tasks;
 8005188:	4b08      	ldr	r3, [pc, #32]	; (80051ac <rf24_worker_attach_task+0x3c>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	60fb      	str	r3, [r7, #12]

	// iterate to end of list
	while(current_task->next_task != NULL) current_task = current_task->next_task;
 800518e:	e002      	b.n	8005196 <rf24_worker_attach_task+0x26>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005194:	60fb      	str	r3, [r7, #12]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1f8      	bne.n	8005190 <rf24_worker_attach_task+0x20>

	// insert new node at the end
	current_task->next_task = new_task;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80051a4:	3714      	adds	r7, #20
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bc80      	pop	{r7}
 80051aa:	4770      	bx	lr
 80051ac:	200006a4 	.word	0x200006a4

080051b0 <rf24_worker_push_task>:

void rf24_worker_push_task(struct rf24_task *new_task)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
	// If list is empty, new task becomes head node
	if(rf24_tasks == NULL)
 80051b8:	4b09      	ldr	r3, [pc, #36]	; (80051e0 <rf24_worker_push_task+0x30>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d103      	bne.n	80051c8 <rf24_worker_push_task+0x18>
	{
		rf24_tasks = new_task;
 80051c0:	4a07      	ldr	r2, [pc, #28]	; (80051e0 <rf24_worker_push_task+0x30>)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6013      	str	r3, [r2, #0]
		return;
 80051c6:	e006      	b.n	80051d6 <rf24_worker_push_task+0x26>
	}

	// Otherwise insert new task at beginning of list

	// (1) Former head node becomes next node of new task
	new_task->next_task = rf24_tasks;
 80051c8:	4b05      	ldr	r3, [pc, #20]	; (80051e0 <rf24_worker_push_task+0x30>)
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	635a      	str	r2, [r3, #52]	; 0x34

	// (2) New task becomes new head node
	rf24_tasks = new_task;
 80051d0:	4a03      	ldr	r2, [pc, #12]	; (80051e0 <rf24_worker_push_task+0x30>)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6013      	str	r3, [r2, #0]

}
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	bc80      	pop	{r7}
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	200006a4 	.word	0x200006a4

080051e4 <rf24_worker_current_task>:

struct rf24_task* rf24_worker_current_task()
{
 80051e4:	b480      	push	{r7}
 80051e6:	af00      	add	r7, sp, #0
	return rf24_tasks;
 80051e8:	4b02      	ldr	r3, [pc, #8]	; (80051f4 <rf24_worker_current_task+0x10>)
 80051ea:	681b      	ldr	r3, [r3, #0]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bc80      	pop	{r7}
 80051f2:	4770      	bx	lr
 80051f4:	200006a4 	.word	0x200006a4

080051f8 <rf24_worker_pop_task>:
{
	return rf24_tasks == NULL;
}

struct rf24_task* rf24_worker_pop_task()
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
	// save a reference to current task
	struct rf24_task *current_task = rf24_tasks;
 80051fe:	4b08      	ldr	r3, [pc, #32]	; (8005220 <rf24_worker_pop_task+0x28>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	607b      	str	r3, [r7, #4]

	// remove first (current) task -> 2nd task becomes new head node
	rf24_tasks = rf24_tasks->next_task;
 8005204:	4b06      	ldr	r3, [pc, #24]	; (8005220 <rf24_worker_pop_task+0x28>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800520a:	4a05      	ldr	r2, [pc, #20]	; (8005220 <rf24_worker_pop_task+0x28>)
 800520c:	6013      	str	r3, [r2, #0]

	//free current task
	free(current_task);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f001 fd50 	bl	8006cb4 <free>
}
 8005214:	bf00      	nop
 8005216:	4618      	mov	r0, r3
 8005218:	3708      	adds	r7, #8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	200006a4 	.word	0x200006a4

08005224 <rf24_worker_reset_tasks>:

void rf24_worker_reset_tasks()
{
 8005224:	b580      	push	{r7, lr}
 8005226:	af00      	add	r7, sp, #0
	free(rf24_tasks);
 8005228:	4b04      	ldr	r3, [pc, #16]	; (800523c <rf24_worker_reset_tasks+0x18>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4618      	mov	r0, r3
 800522e:	f001 fd41 	bl	8006cb4 <free>
	rf24_tasks = NULL;
 8005232:	4b02      	ldr	r3, [pc, #8]	; (800523c <rf24_worker_reset_tasks+0x18>)
 8005234:	2200      	movs	r2, #0
 8005236:	601a      	str	r2, [r3, #0]
}
 8005238:	bf00      	nop
 800523a:	bd80      	pop	{r7, pc}
 800523c:	200006a4 	.word	0x200006a4

08005240 <rf24_worker_print_tasks>:

void rf24_worker_print_tasks()
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
	// start from the first node
	struct rf24_task *current_task = rf24_tasks;
 8005246:	4b0c      	ldr	r3, [pc, #48]	; (8005278 <rf24_worker_print_tasks+0x38>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	607b      	str	r3, [r7, #4]

	// iterate over list
	while(current_task != NULL)
 800524c:	e00c      	b.n	8005268 <rf24_worker_print_tasks+0x28>
	{
		rf24_printf("%s", rf24_task_names_string[current_task->task]);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	461a      	mov	r2, r3
 8005254:	4b09      	ldr	r3, [pc, #36]	; (800527c <rf24_worker_print_tasks+0x3c>)
 8005256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800525a:	4619      	mov	r1, r3
 800525c:	4808      	ldr	r0, [pc, #32]	; (8005280 <rf24_worker_print_tasks+0x40>)
 800525e:	f7fc f883 	bl	8001368 <rf24_printf>
		current_task = current_task->next_task;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005266:	607b      	str	r3, [r7, #4]
	while(current_task != NULL)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1ef      	bne.n	800524e <rf24_worker_print_tasks+0xe>
	}
}
 800526e:	bf00      	nop
 8005270:	3708      	adds	r7, #8
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	200006a4 	.word	0x200006a4
 800527c:	200003f8 	.word	0x200003f8
 8005280:	08009ad8 	.word	0x08009ad8

08005284 <rf24_worker_start_timer>:

struct rf24_timer* rf24_worker_start_timer(rf24_timer_names name, rf24_timer_units unit, uint32_t duration, rf24_worker_fct_ptr fct_ptr_timeout)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b086      	sub	sp, #24
 8005288:	af00      	add	r7, sp, #0
 800528a:	60ba      	str	r2, [r7, #8]
 800528c:	607b      	str	r3, [r7, #4]
 800528e:	4603      	mov	r3, r0
 8005290:	73fb      	strb	r3, [r7, #15]
 8005292:	460b      	mov	r3, r1
 8005294:	73bb      	strb	r3, [r7, #14]
	struct rf24_timer *new_timer = (struct rf24_timer*) malloc(sizeof(struct rf24_timer));
 8005296:	2014      	movs	r0, #20
 8005298:	f001 fd04 	bl	8006ca4 <malloc>
 800529c:	4603      	mov	r3, r0
 800529e:	617b      	str	r3, [r7, #20]

	new_timer->name = name;
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	7bfa      	ldrb	r2, [r7, #15]
 80052a4:	701a      	strb	r2, [r3, #0]
	new_timer->t_count_us = 0;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	2200      	movs	r2, #0
 80052aa:	609a      	str	r2, [r3, #8]
	new_timer->fct_ptr_timeout = fct_ptr_timeout;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	60da      	str	r2, [r3, #12]
	new_timer->next_timer = NULL;
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	2200      	movs	r2, #0
 80052b6:	611a      	str	r2, [r3, #16]

	switch(unit)
 80052b8:	7bbb      	ldrb	r3, [r7, #14]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d00a      	beq.n	80052d4 <rf24_worker_start_timer+0x50>
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d010      	beq.n	80052e4 <rf24_worker_start_timer+0x60>
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d112      	bne.n	80052ec <rf24_worker_start_timer+0x68>
	{
		case s: new_timer->t_us = duration * 1000000; break;
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	4a12      	ldr	r2, [pc, #72]	; (8005314 <rf24_worker_start_timer+0x90>)
 80052ca:	fb02 f203 	mul.w	r2, r2, r3
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	605a      	str	r2, [r3, #4]
 80052d2:	e00b      	b.n	80052ec <rf24_worker_start_timer+0x68>
		case ms: new_timer->t_us = duration * 1000; break;
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80052da:	fb02 f203 	mul.w	r2, r2, r3
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	605a      	str	r2, [r3, #4]
 80052e2:	e003      	b.n	80052ec <rf24_worker_start_timer+0x68>
		case us: new_timer->t_us = duration; break;
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	68ba      	ldr	r2, [r7, #8]
 80052e8:	605a      	str	r2, [r3, #4]
 80052ea:	bf00      	nop
	}

	if(rf24_timers == NULL)
 80052ec:	4b0a      	ldr	r3, [pc, #40]	; (8005318 <rf24_worker_start_timer+0x94>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d103      	bne.n	80052fc <rf24_worker_start_timer+0x78>
	{
		rf24_timers = new_timer;
 80052f4:	4a08      	ldr	r2, [pc, #32]	; (8005318 <rf24_worker_start_timer+0x94>)
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	6013      	str	r3, [r2, #0]
 80052fa:	e006      	b.n	800530a <rf24_worker_start_timer+0x86>
	}
	else
	{
		new_timer->next_timer = rf24_timers;
 80052fc:	4b06      	ldr	r3, [pc, #24]	; (8005318 <rf24_worker_start_timer+0x94>)
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	611a      	str	r2, [r3, #16]
		rf24_timers = new_timer;
 8005304:	4a04      	ldr	r2, [pc, #16]	; (8005318 <rf24_worker_start_timer+0x94>)
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	6013      	str	r3, [r2, #0]
	}

	return new_timer;
 800530a:	697b      	ldr	r3, [r7, #20]
}
 800530c:	4618      	mov	r0, r3
 800530e:	3718      	adds	r7, #24
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	000f4240 	.word	0x000f4240
 8005318:	200006a0 	.word	0x200006a0

0800531c <rf24_worker_stop_timer>:

uint32_t rf24_worker_stop_timer(rf24_timer_names timer_name)
{
 800531c:	b480      	push	{r7}
 800531e:	b087      	sub	sp, #28
 8005320:	af00      	add	r7, sp, #0
 8005322:	4603      	mov	r3, r0
 8005324:	71fb      	strb	r3, [r7, #7]
	// Start from the first node
	struct rf24_timer *current_timer = rf24_timers;
 8005326:	4b16      	ldr	r3, [pc, #88]	; (8005380 <rf24_worker_stop_timer+0x64>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	617b      	str	r3, [r7, #20]
	struct rf24_timer *predecessor = NULL;
 800532c:	2300      	movs	r3, #0
 800532e:	613b      	str	r3, [r7, #16]
	uint32_t t_us_remaining = 0;
 8005330:	2300      	movs	r3, #0
 8005332:	60fb      	str	r3, [r7, #12]

	// Iterate over list
	while(current_timer != NULL)
 8005334:	e01a      	b.n	800536c <rf24_worker_stop_timer+0x50>
	{
		if(current_timer->name == timer_name)
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	79fa      	ldrb	r2, [r7, #7]
 800533c:	429a      	cmp	r2, r3
 800533e:	d110      	bne.n	8005362 <rf24_worker_stop_timer+0x46>
		{
			t_us_remaining = current_timer->t_count_us;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	60fb      	str	r3, [r7, #12]

			if(predecessor)
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d004      	beq.n	8005356 <rf24_worker_stop_timer+0x3a>
				predecessor->next_timer = current_timer->next_timer;
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	691a      	ldr	r2, [r3, #16]
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	611a      	str	r2, [r3, #16]
 8005354:	e003      	b.n	800535e <rf24_worker_stop_timer+0x42>
			else
				rf24_timers = current_timer->next_timer;
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	4a09      	ldr	r2, [pc, #36]	; (8005380 <rf24_worker_stop_timer+0x64>)
 800535c:	6013      	str	r3, [r2, #0]

			return t_us_remaining;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	e008      	b.n	8005374 <rf24_worker_stop_timer+0x58>
		}

		predecessor = current_timer;
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	613b      	str	r3, [r7, #16]
		current_timer = current_timer->next_timer;
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	617b      	str	r3, [r7, #20]
	while(current_timer != NULL)
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1e1      	bne.n	8005336 <rf24_worker_stop_timer+0x1a>
	}

	return t_us_remaining;
 8005372:	68fb      	ldr	r3, [r7, #12]
}
 8005374:	4618      	mov	r0, r3
 8005376:	371c      	adds	r7, #28
 8005378:	46bd      	mov	sp, r7
 800537a:	bc80      	pop	{r7}
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	200006a0 	.word	0x200006a0

08005384 <rf24_worker_get_timer>:

struct rf24_timer* rf24_worker_get_timer(rf24_timer_names timer_name)
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	4603      	mov	r3, r0
 800538c:	71fb      	strb	r3, [r7, #7]
	struct rf24_timer *current_timer = rf24_timers;
 800538e:	4b0b      	ldr	r3, [pc, #44]	; (80053bc <rf24_worker_get_timer+0x38>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	60fb      	str	r3, [r7, #12]

	while(current_timer != NULL){
 8005394:	e009      	b.n	80053aa <rf24_worker_get_timer+0x26>
		if(current_timer->name == timer_name) return current_timer;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	79fa      	ldrb	r2, [r7, #7]
 800539c:	429a      	cmp	r2, r3
 800539e:	d101      	bne.n	80053a4 <rf24_worker_get_timer+0x20>
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	e006      	b.n	80053b2 <rf24_worker_get_timer+0x2e>
		current_timer = current_timer->next_timer;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	60fb      	str	r3, [r7, #12]
	while(current_timer != NULL){
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1f2      	bne.n	8005396 <rf24_worker_get_timer+0x12>
	}

	return NULL;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3714      	adds	r7, #20
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bc80      	pop	{r7}
 80053ba:	4770      	bx	lr
 80053bc:	200006a0 	.word	0x200006a0

080053c0 <rf24_worker_reset_timer>:

void rf24_worker_reset_timer(struct rf24_timer* timer)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
	timer->t_count_us = 0;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	609a      	str	r2, [r3, #8]
}
 80053ce:	bf00      	nop
 80053d0:	370c      	adds	r7, #12
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bc80      	pop	{r7}
 80053d6:	4770      	bx	lr

080053d8 <rf24_worker_us_to_timespan>:

rf24_timespan rf24_worker_us_to_timespan(uint32_t us)
{
 80053d8:	b480      	push	{r7}
 80053da:	b087      	sub	sp, #28
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
	rf24_timespan timespan;

	uint32_t remaining_us = us;
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	617b      	str	r3, [r7, #20]

	timespan.s = remaining_us / 1000000;
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	4a18      	ldr	r2, [pc, #96]	; (800544c <rf24_worker_us_to_timespan+0x74>)
 80053ea:	fba2 2303 	umull	r2, r3, r2, r3
 80053ee:	0c9b      	lsrs	r3, r3, #18
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	733b      	strb	r3, [r7, #12]
	remaining_us = remaining_us % 1000000;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	4a15      	ldr	r2, [pc, #84]	; (800544c <rf24_worker_us_to_timespan+0x74>)
 80053f8:	fba2 1203 	umull	r1, r2, r2, r3
 80053fc:	0c92      	lsrs	r2, r2, #18
 80053fe:	4914      	ldr	r1, [pc, #80]	; (8005450 <rf24_worker_us_to_timespan+0x78>)
 8005400:	fb01 f202 	mul.w	r2, r1, r2
 8005404:	1a9b      	subs	r3, r3, r2
 8005406:	617b      	str	r3, [r7, #20]
	timespan.ms = remaining_us / 1000;
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	4a12      	ldr	r2, [pc, #72]	; (8005454 <rf24_worker_us_to_timespan+0x7c>)
 800540c:	fba2 2303 	umull	r2, r3, r2, r3
 8005410:	099b      	lsrs	r3, r3, #6
 8005412:	b29b      	uxth	r3, r3
 8005414:	81fb      	strh	r3, [r7, #14]
	remaining_us = remaining_us % 1000;
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	4a0e      	ldr	r2, [pc, #56]	; (8005454 <rf24_worker_us_to_timespan+0x7c>)
 800541a:	fba2 1203 	umull	r1, r2, r2, r3
 800541e:	0992      	lsrs	r2, r2, #6
 8005420:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005424:	fb01 f202 	mul.w	r2, r1, r2
 8005428:	1a9b      	subs	r3, r3, r2
 800542a:	617b      	str	r3, [r7, #20]
	timespan.us = remaining_us;
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	b29b      	uxth	r3, r3
 8005430:	823b      	strh	r3, [r7, #16]

	return timespan;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	461a      	mov	r2, r3
 8005436:	f107 030c 	add.w	r3, r7, #12
 800543a:	6818      	ldr	r0, [r3, #0]
 800543c:	6010      	str	r0, [r2, #0]
 800543e:	889b      	ldrh	r3, [r3, #4]
 8005440:	8093      	strh	r3, [r2, #4]
}
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	371c      	adds	r7, #28
 8005446:	46bd      	mov	sp, r7
 8005448:	bc80      	pop	{r7}
 800544a:	4770      	bx	lr
 800544c:	431bde83 	.word	0x431bde83
 8005450:	000f4240 	.word	0x000f4240
 8005454:	10624dd3 	.word	0x10624dd3

08005458 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	4603      	mov	r3, r0
 8005460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005466:	2b00      	cmp	r3, #0
 8005468:	db0b      	blt.n	8005482 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800546a:	79fb      	ldrb	r3, [r7, #7]
 800546c:	f003 021f 	and.w	r2, r3, #31
 8005470:	4906      	ldr	r1, [pc, #24]	; (800548c <__NVIC_EnableIRQ+0x34>)
 8005472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005476:	095b      	lsrs	r3, r3, #5
 8005478:	2001      	movs	r0, #1
 800547a:	fa00 f202 	lsl.w	r2, r0, r2
 800547e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005482:	bf00      	nop
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	bc80      	pop	{r7}
 800548a:	4770      	bx	lr
 800548c:	e000e100 	.word	0xe000e100

08005490 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	4603      	mov	r3, r0
 8005498:	6039      	str	r1, [r7, #0]
 800549a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800549c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	db0a      	blt.n	80054ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	b2da      	uxtb	r2, r3
 80054a8:	490c      	ldr	r1, [pc, #48]	; (80054dc <__NVIC_SetPriority+0x4c>)
 80054aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ae:	0112      	lsls	r2, r2, #4
 80054b0:	b2d2      	uxtb	r2, r2
 80054b2:	440b      	add	r3, r1
 80054b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054b8:	e00a      	b.n	80054d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	b2da      	uxtb	r2, r3
 80054be:	4908      	ldr	r1, [pc, #32]	; (80054e0 <__NVIC_SetPriority+0x50>)
 80054c0:	79fb      	ldrb	r3, [r7, #7]
 80054c2:	f003 030f 	and.w	r3, r3, #15
 80054c6:	3b04      	subs	r3, #4
 80054c8:	0112      	lsls	r2, r2, #4
 80054ca:	b2d2      	uxtb	r2, r2
 80054cc:	440b      	add	r3, r1
 80054ce:	761a      	strb	r2, [r3, #24]
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bc80      	pop	{r7}
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	e000e100 	.word	0xe000e100
 80054e0:	e000ed00 	.word	0xe000ed00

080054e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	3b01      	subs	r3, #1
 80054f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054f4:	d301      	bcc.n	80054fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80054f6:	2301      	movs	r3, #1
 80054f8:	e00f      	b.n	800551a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80054fa:	4a0a      	ldr	r2, [pc, #40]	; (8005524 <SysTick_Config+0x40>)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	3b01      	subs	r3, #1
 8005500:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005502:	210f      	movs	r1, #15
 8005504:	f04f 30ff 	mov.w	r0, #4294967295
 8005508:	f7ff ffc2 	bl	8005490 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800550c:	4b05      	ldr	r3, [pc, #20]	; (8005524 <SysTick_Config+0x40>)
 800550e:	2200      	movs	r2, #0
 8005510:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005512:	4b04      	ldr	r3, [pc, #16]	; (8005524 <SysTick_Config+0x40>)
 8005514:	2207      	movs	r2, #7
 8005516:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3708      	adds	r7, #8
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	e000e010 	.word	0xe000e010

08005528 <SysTick_Handler>:

volatile rf24_stm32f1xx_pin_state led_pin_state = low;
volatile rf24_stm32f1xx_event_cycle event_cycles[5];


void SysTick_Handler(void){}
 8005528:	b480      	push	{r7}
 800552a:	af00      	add	r7, sp, #0
 800552c:	bf00      	nop
 800552e:	46bd      	mov	sp, r7
 8005530:	bc80      	pop	{r7}
 8005532:	4770      	bx	lr

08005534 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR2)
 8005538:	4b06      	ldr	r3, [pc, #24]	; (8005554 <EXTI2_IRQHandler+0x20>)
 800553a:	695b      	ldr	r3, [r3, #20]
 800553c:	f003 0304 	and.w	r3, r3, #4
 8005540:	2b00      	cmp	r3, #0
 8005542:	d004      	beq.n	800554e <EXTI2_IRQHandler+0x1a>
	{
		// clear pending bit
		EXTI->PR = EXTI_PR_PR2;
 8005544:	4b03      	ldr	r3, [pc, #12]	; (8005554 <EXTI2_IRQHandler+0x20>)
 8005546:	2204      	movs	r2, #4
 8005548:	615a      	str	r2, [r3, #20]

		rf24_module_irq_handler();
 800554a:	f7fc feb7 	bl	80022bc <rf24_module_irq_handler>
	}
}
 800554e:	bf00      	nop
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	40010400 	.word	0x40010400

08005558 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
	if(TIM2->SR & TIM_SR_UIF)
 800555e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	f003 0301 	and.w	r3, r3, #1
 8005568:	2b00      	cmp	r3, #0
 800556a:	d043      	beq.n	80055f4 <TIM2_IRQHandler+0x9c>
	{
		// clear pending bit
		TIM2->SR &= ~(TIM_SR_UIF);
 800556c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005576:	f023 0301 	bic.w	r3, r3, #1
 800557a:	6113      	str	r3, [r2, #16]

		for(uint8_t i=0; i<5; i++)
 800557c:	2300      	movs	r3, #0
 800557e:	71fb      	strb	r3, [r7, #7]
 8005580:	e035      	b.n	80055ee <TIM2_IRQHandler+0x96>
		{
			if(event_cycles[i].enable){
 8005582:	79fb      	ldrb	r3, [r7, #7]
 8005584:	4a1d      	ldr	r2, [pc, #116]	; (80055fc <TIM2_IRQHandler+0xa4>)
 8005586:	011b      	lsls	r3, r3, #4
 8005588:	4413      	add	r3, r2
 800558a:	330c      	adds	r3, #12
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	b2db      	uxtb	r3, r3
 8005590:	2b00      	cmp	r3, #0
 8005592:	d029      	beq.n	80055e8 <TIM2_IRQHandler+0x90>

				event_cycles[i].tick+= RF24_STM32F1XX_TIMER2_TICK_US;
 8005594:	79fb      	ldrb	r3, [r7, #7]
 8005596:	4a19      	ldr	r2, [pc, #100]	; (80055fc <TIM2_IRQHandler+0xa4>)
 8005598:	011b      	lsls	r3, r3, #4
 800559a:	4413      	add	r3, r2
 800559c:	3308      	adds	r3, #8
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	2332      	movs	r3, #50	; 0x32
 80055a2:	4619      	mov	r1, r3
 80055a4:	79fb      	ldrb	r3, [r7, #7]
 80055a6:	440a      	add	r2, r1
 80055a8:	4914      	ldr	r1, [pc, #80]	; (80055fc <TIM2_IRQHandler+0xa4>)
 80055aa:	011b      	lsls	r3, r3, #4
 80055ac:	440b      	add	r3, r1
 80055ae:	3308      	adds	r3, #8
 80055b0:	601a      	str	r2, [r3, #0]

				if(event_cycles[i].tick >= event_cycles[i].us){
 80055b2:	79fb      	ldrb	r3, [r7, #7]
 80055b4:	4a11      	ldr	r2, [pc, #68]	; (80055fc <TIM2_IRQHandler+0xa4>)
 80055b6:	011b      	lsls	r3, r3, #4
 80055b8:	4413      	add	r3, r2
 80055ba:	3308      	adds	r3, #8
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	79fb      	ldrb	r3, [r7, #7]
 80055c0:	490e      	ldr	r1, [pc, #56]	; (80055fc <TIM2_IRQHandler+0xa4>)
 80055c2:	011b      	lsls	r3, r3, #4
 80055c4:	440b      	add	r3, r1
 80055c6:	3304      	adds	r3, #4
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d30c      	bcc.n	80055e8 <TIM2_IRQHandler+0x90>
					event_cycles[i].tick = 0;
 80055ce:	79fb      	ldrb	r3, [r7, #7]
 80055d0:	4a0a      	ldr	r2, [pc, #40]	; (80055fc <TIM2_IRQHandler+0xa4>)
 80055d2:	011b      	lsls	r3, r3, #4
 80055d4:	4413      	add	r3, r2
 80055d6:	3308      	adds	r3, #8
 80055d8:	2200      	movs	r2, #0
 80055da:	601a      	str	r2, [r3, #0]
					event_cycles[i].fct_ptr();
 80055dc:	79fb      	ldrb	r3, [r7, #7]
 80055de:	4a07      	ldr	r2, [pc, #28]	; (80055fc <TIM2_IRQHandler+0xa4>)
 80055e0:	011b      	lsls	r3, r3, #4
 80055e2:	4413      	add	r3, r2
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4798      	blx	r3
		for(uint8_t i=0; i<5; i++)
 80055e8:	79fb      	ldrb	r3, [r7, #7]
 80055ea:	3301      	adds	r3, #1
 80055ec:	71fb      	strb	r3, [r7, #7]
 80055ee:	79fb      	ldrb	r3, [r7, #7]
 80055f0:	2b04      	cmp	r3, #4
 80055f2:	d9c6      	bls.n	8005582 <TIM2_IRQHandler+0x2a>
				}
			}
		}
	}
}
 80055f4:	bf00      	nop
 80055f6:	3708      	adds	r7, #8
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	20000830 	.word	0x20000830

08005600 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8005600:	b480      	push	{r7}
 8005602:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR13)
 8005604:	4b06      	ldr	r3, [pc, #24]	; (8005620 <EXTI15_10_IRQHandler+0x20>)
 8005606:	695b      	ldr	r3, [r3, #20]
 8005608:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d003      	beq.n	8005618 <EXTI15_10_IRQHandler+0x18>
	{
		// clear pending bit
		EXTI->PR = EXTI_PR_PR13;
 8005610:	4b03      	ldr	r3, [pc, #12]	; (8005620 <EXTI15_10_IRQHandler+0x20>)
 8005612:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005616:	615a      	str	r2, [r3, #20]
	}
}
 8005618:	bf00      	nop
 800561a:	46bd      	mov	sp, r7
 800561c:	bc80      	pop	{r7}
 800561e:	4770      	bx	lr
 8005620:	40010400 	.word	0x40010400

08005624 <rf24_stm32f1xx_get_uuid_md5hashed>:
void rf24_stm32f1xx_start_stopwatch() { TIM3->EGR |= 0x0001; }

uint32_t rf24_stm32f1xx_stop_stopwatch() { return TIM3->CNT; }

uint8_t* rf24_stm32f1xx_get_uuid_md5hashed()
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b098      	sub	sp, #96	; 0x60
 8005628:	af00      	add	r7, sp, #0
	// Read UUID from stm32f1xx memory, stored under address 0x1FFFF7E8
	uint8_t* uuid = (uint8_t*) 0x1FFFF7E8;
 800562a:	4b12      	ldr	r3, [pc, #72]	; (8005674 <rf24_stm32f1xx_get_uuid_md5hashed+0x50>)
 800562c:	65fb      	str	r3, [r7, #92]	; 0x5c

	// Generate md5 hash of unique device id
	MD5_CTX context;
	MD5Init(&context);
 800562e:	1d3b      	adds	r3, r7, #4
 8005630:	4618      	mov	r0, r3
 8005632:	f7fb fcff 	bl	8001034 <MD5Init>
	MD5Update(&context, uuid, 12);
 8005636:	1d3b      	adds	r3, r7, #4
 8005638:	220c      	movs	r2, #12
 800563a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800563c:	4618      	mov	r0, r3
 800563e:	f7fb fd1d 	bl	800107c <MD5Update>
	MD5Final(rf24_stm32f1xx_uuid_md5hashed, &context);
 8005642:	1d3b      	adds	r3, r7, #4
 8005644:	4619      	mov	r1, r3
 8005646:	480c      	ldr	r0, [pc, #48]	; (8005678 <rf24_stm32f1xx_get_uuid_md5hashed+0x54>)
 8005648:	f7fb fd80 	bl	800114c <MD5Final>

	// Specify as LOCALY ADMINISTRATED address
	rf24_stm32f1xx_uuid_md5hashed[0] |= 0x2;
 800564c:	4b0a      	ldr	r3, [pc, #40]	; (8005678 <rf24_stm32f1xx_get_uuid_md5hashed+0x54>)
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	f043 0302 	orr.w	r3, r3, #2
 8005654:	b2da      	uxtb	r2, r3
 8005656:	4b08      	ldr	r3, [pc, #32]	; (8005678 <rf24_stm32f1xx_get_uuid_md5hashed+0x54>)
 8005658:	701a      	strb	r2, [r3, #0]

	// Specify as UNICAST address
	rf24_stm32f1xx_uuid_md5hashed[0] &= ~0x1;
 800565a:	4b07      	ldr	r3, [pc, #28]	; (8005678 <rf24_stm32f1xx_get_uuid_md5hashed+0x54>)
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	f023 0301 	bic.w	r3, r3, #1
 8005662:	b2da      	uxtb	r2, r3
 8005664:	4b04      	ldr	r3, [pc, #16]	; (8005678 <rf24_stm32f1xx_get_uuid_md5hashed+0x54>)
 8005666:	701a      	strb	r2, [r3, #0]

	return rf24_stm32f1xx_uuid_md5hashed;
 8005668:	4b03      	ldr	r3, [pc, #12]	; (8005678 <rf24_stm32f1xx_get_uuid_md5hashed+0x54>)
}
 800566a:	4618      	mov	r0, r3
 800566c:	3760      	adds	r7, #96	; 0x60
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	1ffff7e8 	.word	0x1ffff7e8
 8005678:	20000708 	.word	0x20000708

0800567c <rf24_stm32f1xx_set_system_clock_72Mhz>:

    return rf24_stm32f1xx_uuid;
}

void rf24_stm32f1xx_set_system_clock_72Mhz(void)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	af00      	add	r7, sp, #0
    // conf system clock : 72MHz using HSE 8MHz crystal w/ PLL X 9 (8MHz x 9 = 72MHz)
    FLASH->ACR      |= FLASH_ACR_LATENCY_2; 	// Two wait states, per datasheet
 8005680:	4b25      	ldr	r3, [pc, #148]	; (8005718 <rf24_stm32f1xx_set_system_clock_72Mhz+0x9c>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a24      	ldr	r2, [pc, #144]	; (8005718 <rf24_stm32f1xx_set_system_clock_72Mhz+0x9c>)
 8005686:	f043 0304 	orr.w	r3, r3, #4
 800568a:	6013      	str	r3, [r2, #0]
    RCC->CFGR       |= RCC_CFGR_PPRE1_2;    	// prescale AHB1 = HCLK/2
 800568c:	4b23      	ldr	r3, [pc, #140]	; (800571c <rf24_stm32f1xx_set_system_clock_72Mhz+0xa0>)
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	4a22      	ldr	r2, [pc, #136]	; (800571c <rf24_stm32f1xx_set_system_clock_72Mhz+0xa0>)
 8005692:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005696:	6053      	str	r3, [r2, #4]
    RCC->CR         |= RCC_CR_HSEON;        	// enable HSE clock
 8005698:	4b20      	ldr	r3, [pc, #128]	; (800571c <rf24_stm32f1xx_set_system_clock_72Mhz+0xa0>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a1f      	ldr	r2, [pc, #124]	; (800571c <rf24_stm32f1xx_set_system_clock_72Mhz+0xa0>)
 800569e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056a2:	6013      	str	r3, [r2, #0]
    while( !(RCC->CR & RCC_CR_HSERDY) );    	// wait for the HSEREADY flag
 80056a4:	bf00      	nop
 80056a6:	4b1d      	ldr	r3, [pc, #116]	; (800571c <rf24_stm32f1xx_set_system_clock_72Mhz+0xa0>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d0f9      	beq.n	80056a6 <rf24_stm32f1xx_set_system_clock_72Mhz+0x2a>

    RCC->CFGR       |= RCC_CFGR_PLLSRC;     	// set PLL source to HSE
 80056b2:	4b1a      	ldr	r3, [pc, #104]	; (800571c <rf24_stm32f1xx_set_system_clock_72Mhz+0xa0>)
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	4a19      	ldr	r2, [pc, #100]	; (800571c <rf24_stm32f1xx_set_system_clock_72Mhz+0xa0>)
 80056b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056bc:	6053      	str	r3, [r2, #4]
    RCC->CFGR       |= RCC_CFGR_PLLMULL9;   	// multiply by 9
 80056be:	4b17      	ldr	r3, [pc, #92]	; (800571c <rf24_stm32f1xx_set_system_clock_72Mhz+0xa0>)
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	4a16      	ldr	r2, [pc, #88]	; (800571c <rf24_stm32f1xx_set_system_clock_72Mhz+0xa0>)
 80056c4:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 80056c8:	6053      	str	r3, [r2, #4]
    RCC->CR         |= RCC_CR_PLLON;        	// enable the PLL
 80056ca:	4b14      	ldr	r3, [pc, #80]	; (800571c <rf24_stm32f1xx_set_system_clock_72Mhz+0xa0>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a13      	ldr	r2, [pc, #76]	; (800571c <rf24_stm32f1xx_set_system_clock_72Mhz+0xa0>)
 80056d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056d4:	6013      	str	r3, [r2, #0]
    while( !(RCC->CR & RCC_CR_PLLRDY) );    	// wait for the PLLRDY flag
 80056d6:	bf00      	nop
 80056d8:	4b10      	ldr	r3, [pc, #64]	; (800571c <rf24_stm32f1xx_set_system_clock_72Mhz+0xa0>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d0f9      	beq.n	80056d8 <rf24_stm32f1xx_set_system_clock_72Mhz+0x5c>

    RCC->CFGR       |= RCC_CFGR_SW_PLL;     	// set clock source to pll
 80056e4:	4b0d      	ldr	r3, [pc, #52]	; (800571c <rf24_stm32f1xx_set_system_clock_72Mhz+0xa0>)
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	4a0c      	ldr	r2, [pc, #48]	; (800571c <rf24_stm32f1xx_set_system_clock_72Mhz+0xa0>)
 80056ea:	f043 0302 	orr.w	r3, r3, #2
 80056ee:	6053      	str	r3, [r2, #4]

    while( !(RCC->CFGR & RCC_CFGR_SWS_PLL) );    // wait for PLL to be CLK
 80056f0:	bf00      	nop
 80056f2:	4b0a      	ldr	r3, [pc, #40]	; (800571c <rf24_stm32f1xx_set_system_clock_72Mhz+0xa0>)
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	f003 0308 	and.w	r3, r3, #8
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d0f9      	beq.n	80056f2 <rf24_stm32f1xx_set_system_clock_72Mhz+0x76>

    SystemCoreClockUpdate();                	// calculate the SYSCLOCK value
 80056fe:	f7fa fd71 	bl	80001e4 <SystemCoreClockUpdate>
    SysTick_Config(SystemCoreClock/1000);		// Generate interrupt each 1 ms
 8005702:	4b07      	ldr	r3, [pc, #28]	; (8005720 <rf24_stm32f1xx_set_system_clock_72Mhz+0xa4>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a07      	ldr	r2, [pc, #28]	; (8005724 <rf24_stm32f1xx_set_system_clock_72Mhz+0xa8>)
 8005708:	fba2 2303 	umull	r2, r3, r2, r3
 800570c:	099b      	lsrs	r3, r3, #6
 800570e:	4618      	mov	r0, r3
 8005710:	f7ff fee8 	bl	80054e4 <SysTick_Config>
}
 8005714:	bf00      	nop
 8005716:	bd80      	pop	{r7, pc}
 8005718:	40022000 	.word	0x40022000
 800571c:	40021000 	.word	0x40021000
 8005720:	20000000 	.word	0x20000000
 8005724:	10624dd3 	.word	0x10624dd3

08005728 <rf24_stm32f1xx_init_tim2>:

void rf24_stm32f1xx_init_tim2(uint32_t interrupt_cycle_us){
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]

	// Enable the TIM2 clock
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8005730:	4b22      	ldr	r3, [pc, #136]	; (80057bc <rf24_stm32f1xx_init_tim2+0x94>)
 8005732:	69db      	ldr	r3, [r3, #28]
 8005734:	4a21      	ldr	r2, [pc, #132]	; (80057bc <rf24_stm32f1xx_init_tim2+0x94>)
 8005736:	f043 0301 	orr.w	r3, r3, #1
 800573a:	61d3      	str	r3, [r2, #28]

	// Start by making sure the timer's counter is off
	TIM2->CR1 &= ~(TIM_CR1_CEN);
 800573c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005746:	f023 0301 	bic.w	r3, r3, #1
 800574a:	6013      	str	r3, [r2, #0]

	// Next, reset the peripheral. (This is where a HAL can help)
	RCC->APB1RSTR |=  (RCC_APB1RSTR_TIM2RST);
 800574c:	4b1b      	ldr	r3, [pc, #108]	; (80057bc <rf24_stm32f1xx_init_tim2+0x94>)
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	4a1a      	ldr	r2, [pc, #104]	; (80057bc <rf24_stm32f1xx_init_tim2+0x94>)
 8005752:	f043 0301 	orr.w	r3, r3, #1
 8005756:	6113      	str	r3, [r2, #16]
	RCC->APB1RSTR &= ~(RCC_APB1RSTR_TIM2RST);
 8005758:	4b18      	ldr	r3, [pc, #96]	; (80057bc <rf24_stm32f1xx_init_tim2+0x94>)
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	4a17      	ldr	r2, [pc, #92]	; (80057bc <rf24_stm32f1xx_init_tim2+0x94>)
 800575e:	f023 0301 	bic.w	r3, r3, #1
 8005762:	6113      	str	r3, [r2, #16]

	// Set the timer to PRESCALER/AUTOREALOD timing registers
	TIM2->PSC = 71; // 71+1 = 72/72 = 1Mhz
 8005764:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005768:	2247      	movs	r2, #71	; 0x47
 800576a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = interrupt_cycle_us;
 800576c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	62d3      	str	r3, [r2, #44]	; 0x2c

	// Send an update event to reset the timer and apply settings
	TIM2->EGR  |= TIM_EGR_UG;
 8005774:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800577e:	f043 0301 	orr.w	r3, r3, #1
 8005782:	6153      	str	r3, [r2, #20]

	// Enable the hardware interrupt
	TIM2->DIER |= TIM_DIER_UIE;
 8005784:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800578e:	f043 0301 	orr.w	r3, r3, #1
 8005792:	60d3      	str	r3, [r2, #12]

	// Enable the NVIC interrupt for TIM2
	NVIC_SetPriority(TIM2_IRQn, 0x00);
 8005794:	2100      	movs	r1, #0
 8005796:	201c      	movs	r0, #28
 8005798:	f7ff fe7a 	bl	8005490 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn);
 800579c:	201c      	movs	r0, #28
 800579e:	f7ff fe5b 	bl	8005458 <__NVIC_EnableIRQ>

	// Enable the timer
	TIM2->CR1  |= TIM_CR1_CEN;
 80057a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80057ac:	f043 0301 	orr.w	r3, r3, #1
 80057b0:	6013      	str	r3, [r2, #0]
}
 80057b2:	bf00      	nop
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	40021000 	.word	0x40021000

080057c0 <rf24_stm32f1xx_set_timer_interrupt_ms>:

void rf24_stm32f1xx_set_timer_interrupt_ms(uint8_t index, uint16_t ms, fct_ptr fct_ptr)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	4603      	mov	r3, r0
 80057c8:	603a      	str	r2, [r7, #0]
 80057ca:	71fb      	strb	r3, [r7, #7]
 80057cc:	460b      	mov	r3, r1
 80057ce:	80bb      	strh	r3, [r7, #4]
	event_cycles[index].fct_ptr = fct_ptr;
 80057d0:	79fb      	ldrb	r3, [r7, #7]
 80057d2:	4a12      	ldr	r2, [pc, #72]	; (800581c <rf24_stm32f1xx_set_timer_interrupt_ms+0x5c>)
 80057d4:	011b      	lsls	r3, r3, #4
 80057d6:	4413      	add	r3, r2
 80057d8:	683a      	ldr	r2, [r7, #0]
 80057da:	601a      	str	r2, [r3, #0]
	event_cycles[index].us = ms * 1000;
 80057dc:	88bb      	ldrh	r3, [r7, #4]
 80057de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80057e2:	fb02 f203 	mul.w	r2, r2, r3
 80057e6:	79fb      	ldrb	r3, [r7, #7]
 80057e8:	4611      	mov	r1, r2
 80057ea:	4a0c      	ldr	r2, [pc, #48]	; (800581c <rf24_stm32f1xx_set_timer_interrupt_ms+0x5c>)
 80057ec:	011b      	lsls	r3, r3, #4
 80057ee:	4413      	add	r3, r2
 80057f0:	3304      	adds	r3, #4
 80057f2:	6019      	str	r1, [r3, #0]
	event_cycles[index].tick = 0;
 80057f4:	79fb      	ldrb	r3, [r7, #7]
 80057f6:	4a09      	ldr	r2, [pc, #36]	; (800581c <rf24_stm32f1xx_set_timer_interrupt_ms+0x5c>)
 80057f8:	011b      	lsls	r3, r3, #4
 80057fa:	4413      	add	r3, r2
 80057fc:	3308      	adds	r3, #8
 80057fe:	2200      	movs	r2, #0
 8005800:	601a      	str	r2, [r3, #0]
	event_cycles[index].enable = true;
 8005802:	79fb      	ldrb	r3, [r7, #7]
 8005804:	4a05      	ldr	r2, [pc, #20]	; (800581c <rf24_stm32f1xx_set_timer_interrupt_ms+0x5c>)
 8005806:	011b      	lsls	r3, r3, #4
 8005808:	4413      	add	r3, r2
 800580a:	330c      	adds	r3, #12
 800580c:	2201      	movs	r2, #1
 800580e:	701a      	strb	r2, [r3, #0]
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	bc80      	pop	{r7}
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	20000830 	.word	0x20000830

08005820 <rf24_stm32f1xx_set_timer_interrupt_us>:

void rf24_stm32f1xx_set_timer_interrupt_us(uint8_t index, uint16_t us, fct_ptr fct_ptr)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	4603      	mov	r3, r0
 8005828:	603a      	str	r2, [r7, #0]
 800582a:	71fb      	strb	r3, [r7, #7]
 800582c:	460b      	mov	r3, r1
 800582e:	80bb      	strh	r3, [r7, #4]
	event_cycles[index].fct_ptr = fct_ptr;
 8005830:	79fb      	ldrb	r3, [r7, #7]
 8005832:	4a0f      	ldr	r2, [pc, #60]	; (8005870 <rf24_stm32f1xx_set_timer_interrupt_us+0x50>)
 8005834:	011b      	lsls	r3, r3, #4
 8005836:	4413      	add	r3, r2
 8005838:	683a      	ldr	r2, [r7, #0]
 800583a:	601a      	str	r2, [r3, #0]
	event_cycles[index].us = us;
 800583c:	79fb      	ldrb	r3, [r7, #7]
 800583e:	88ba      	ldrh	r2, [r7, #4]
 8005840:	490b      	ldr	r1, [pc, #44]	; (8005870 <rf24_stm32f1xx_set_timer_interrupt_us+0x50>)
 8005842:	011b      	lsls	r3, r3, #4
 8005844:	440b      	add	r3, r1
 8005846:	3304      	adds	r3, #4
 8005848:	601a      	str	r2, [r3, #0]
	event_cycles[index].tick = 0;
 800584a:	79fb      	ldrb	r3, [r7, #7]
 800584c:	4a08      	ldr	r2, [pc, #32]	; (8005870 <rf24_stm32f1xx_set_timer_interrupt_us+0x50>)
 800584e:	011b      	lsls	r3, r3, #4
 8005850:	4413      	add	r3, r2
 8005852:	3308      	adds	r3, #8
 8005854:	2200      	movs	r2, #0
 8005856:	601a      	str	r2, [r3, #0]
	event_cycles[index].enable = true;
 8005858:	79fb      	ldrb	r3, [r7, #7]
 800585a:	4a05      	ldr	r2, [pc, #20]	; (8005870 <rf24_stm32f1xx_set_timer_interrupt_us+0x50>)
 800585c:	011b      	lsls	r3, r3, #4
 800585e:	4413      	add	r3, r2
 8005860:	330c      	adds	r3, #12
 8005862:	2201      	movs	r2, #1
 8005864:	701a      	strb	r2, [r3, #0]
}
 8005866:	bf00      	nop
 8005868:	370c      	adds	r7, #12
 800586a:	46bd      	mov	sp, r7
 800586c:	bc80      	pop	{r7}
 800586e:	4770      	bx	lr
 8005870:	20000830 	.word	0x20000830

08005874 <rf24_stm32f1xx_init_tim3>:


void rf24_stm32f1xx_init_tim3()
{
 8005874:	b480      	push	{r7}
 8005876:	af00      	add	r7, sp, #0

	RCC->APB1ENR |= (1 << 1);	// enable clock for that module for TIM3. Bit1 in RCC APB1ENR register
 8005878:	4b0c      	ldr	r3, [pc, #48]	; (80058ac <rf24_stm32f1xx_init_tim3+0x38>)
 800587a:	69db      	ldr	r3, [r3, #28]
 800587c:	4a0b      	ldr	r2, [pc, #44]	; (80058ac <rf24_stm32f1xx_init_tim3+0x38>)
 800587e:	f043 0302 	orr.w	r3, r3, #2
 8005882:	61d3      	str	r3, [r2, #28]

	TIM3->CR1 = 0x0000;			// reset CR1 just in case
 8005884:	4b0a      	ldr	r3, [pc, #40]	; (80058b0 <rf24_stm32f1xx_init_tim3+0x3c>)
 8005886:	2200      	movs	r2, #0
 8005888:	601a      	str	r2, [r3, #0]

	// fCK_PSC / (PSC[15:0] + 1)
	TIM3->PSC = 71;				// 72 Mhz / 71 + 1 = 1 Mhz timer clock speed
 800588a:	4b09      	ldr	r3, [pc, #36]	; (80058b0 <rf24_stm32f1xx_init_tim3+0x3c>)
 800588c:	2247      	movs	r2, #71	; 0x47
 800588e:	629a      	str	r2, [r3, #40]	; 0x28

	// This is set to max value (0xFFFF) since we manually check if the value reach to 1000 in the delay_ms function
	TIM3->ARR = 0xFFFF;
 8005890:	4b07      	ldr	r3, [pc, #28]	; (80058b0 <rf24_stm32f1xx_init_tim3+0x3c>)
 8005892:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005896:	62da      	str	r2, [r3, #44]	; 0x2c

	// Finally enable TIM3 module
	TIM3->CR1 |= (1 << 0);
 8005898:	4b05      	ldr	r3, [pc, #20]	; (80058b0 <rf24_stm32f1xx_init_tim3+0x3c>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a04      	ldr	r2, [pc, #16]	; (80058b0 <rf24_stm32f1xx_init_tim3+0x3c>)
 800589e:	f043 0301 	orr.w	r3, r3, #1
 80058a2:	6013      	str	r3, [r2, #0]
}
 80058a4:	bf00      	nop
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bc80      	pop	{r7}
 80058aa:	4770      	bx	lr
 80058ac:	40021000 	.word	0x40021000
 80058b0:	40000400 	.word	0x40000400

080058b4 <rf24_stm32f1xx_get_tim3_count>:

uint32_t rf24_stm32f1xx_get_tim3_count()
{
 80058b4:	b480      	push	{r7}
 80058b6:	af00      	add	r7, sp, #0
	return TIM3->CNT;
 80058b8:	4b02      	ldr	r3, [pc, #8]	; (80058c4 <rf24_stm32f1xx_get_tim3_count+0x10>)
 80058ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80058bc:	4618      	mov	r0, r3
 80058be:	46bd      	mov	sp, r7
 80058c0:	bc80      	pop	{r7}
 80058c2:	4770      	bx	lr
 80058c4:	40000400 	.word	0x40000400

080058c8 <delay_ms>:

void delay_ms(volatile uint32_t ms)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
	for(ms; ms>0; ms--)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	e00e      	b.n	80058f2 <delay_ms+0x2a>
	{
		TIM3->EGR |= 0x0001;
 80058d4:	4b0b      	ldr	r3, [pc, #44]	; (8005904 <delay_ms+0x3c>)
 80058d6:	695b      	ldr	r3, [r3, #20]
 80058d8:	4a0a      	ldr	r2, [pc, #40]	; (8005904 <delay_ms+0x3c>)
 80058da:	f043 0301 	orr.w	r3, r3, #1
 80058de:	6153      	str	r3, [r2, #20]
 		while(TIM3->CNT < 1000);
 80058e0:	bf00      	nop
 80058e2:	4b08      	ldr	r3, [pc, #32]	; (8005904 <delay_ms+0x3c>)
 80058e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058ea:	d3fa      	bcc.n	80058e2 <delay_ms+0x1a>
	for(ms; ms>0; ms--)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	3b01      	subs	r3, #1
 80058f0:	607b      	str	r3, [r7, #4]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1ed      	bne.n	80058d4 <delay_ms+0xc>
	}
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bc80      	pop	{r7}
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop
 8005904:	40000400 	.word	0x40000400

08005908 <delay_us>:

void delay_us(volatile uint32_t us)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
	TIM3->EGR |= 0x0001;
 8005910:	4b08      	ldr	r3, [pc, #32]	; (8005934 <delay_us+0x2c>)
 8005912:	695b      	ldr	r3, [r3, #20]
 8005914:	4a07      	ldr	r2, [pc, #28]	; (8005934 <delay_us+0x2c>)
 8005916:	f043 0301 	orr.w	r3, r3, #1
 800591a:	6153      	str	r3, [r2, #20]
 	while(TIM3->CNT < us);
 800591c:	bf00      	nop
 800591e:	4b05      	ldr	r3, [pc, #20]	; (8005934 <delay_us+0x2c>)
 8005920:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	429a      	cmp	r2, r3
 8005926:	d3fa      	bcc.n	800591e <delay_us+0x16>
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	bc80      	pop	{r7}
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	40000400 	.word	0x40000400

08005938 <rf24_stm32f1xx_init_led>:

void rf24_stm32f1xx_init_led(uint16_t update_cycle_ms)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
 800593e:	4603      	mov	r3, r0
 8005940:	80fb      	strh	r3, [r7, #6]
    RCC->APB2ENR    |= RCC_APB2ENR_IOPCEN;                      // enable clock
 8005942:	4b0e      	ldr	r3, [pc, #56]	; (800597c <rf24_stm32f1xx_init_led+0x44>)
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	4a0d      	ldr	r2, [pc, #52]	; (800597c <rf24_stm32f1xx_init_led+0x44>)
 8005948:	f043 0310 	orr.w	r3, r3, #16
 800594c:	6193      	str	r3, [r2, #24]
    GPIOC->CRH      &=  ~(GPIO_CRH_MODE13 | GPIO_CRH_CNF13);    // reset PC13
 800594e:	4b0c      	ldr	r3, [pc, #48]	; (8005980 <rf24_stm32f1xx_init_led+0x48>)
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	4a0b      	ldr	r2, [pc, #44]	; (8005980 <rf24_stm32f1xx_init_led+0x48>)
 8005954:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005958:	6053      	str	r3, [r2, #4]
    GPIOC->CRH      |= (GPIO_CRH_MODE13_1 | GPIO_CRH_MODE13_0); // config PC13
 800595a:	4b09      	ldr	r3, [pc, #36]	; (8005980 <rf24_stm32f1xx_init_led+0x48>)
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	4a08      	ldr	r2, [pc, #32]	; (8005980 <rf24_stm32f1xx_init_led+0x48>)
 8005960:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005964:	6053      	str	r3, [r2, #4]

    rf24_stm32f1xx_set_timer_interrupt_ms(0, update_cycle_ms, rf24_stm32f1xx_led_toggle);
 8005966:	88fb      	ldrh	r3, [r7, #6]
 8005968:	4a06      	ldr	r2, [pc, #24]	; (8005984 <rf24_stm32f1xx_init_led+0x4c>)
 800596a:	4619      	mov	r1, r3
 800596c:	2000      	movs	r0, #0
 800596e:	f7ff ff27 	bl	80057c0 <rf24_stm32f1xx_set_timer_interrupt_ms>
}
 8005972:	bf00      	nop
 8005974:	3708      	adds	r7, #8
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	40021000 	.word	0x40021000
 8005980:	40011000 	.word	0x40011000
 8005984:	080059e1 	.word	0x080059e1

08005988 <rf24_stm32f1xx_set_led_cycle>:

void rf24_stm32f1xx_set_led_cycle(uint16_t update_cycle_ms)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	4603      	mov	r3, r0
 8005990:	80fb      	strh	r3, [r7, #6]
	event_cycles[0].us = update_cycle_ms * 1000;
 8005992:	88fb      	ldrh	r3, [r7, #6]
 8005994:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005998:	fb02 f303 	mul.w	r3, r2, r3
 800599c:	461a      	mov	r2, r3
 800599e:	4b03      	ldr	r3, [pc, #12]	; (80059ac <rf24_stm32f1xx_set_led_cycle+0x24>)
 80059a0:	605a      	str	r2, [r3, #4]
}
 80059a2:	bf00      	nop
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bc80      	pop	{r7}
 80059aa:	4770      	bx	lr
 80059ac:	20000830 	.word	0x20000830

080059b0 <rf24_stm32f1xx_led_on>:

void rf24_stm32f1xx_led_on()
{
 80059b0:	b480      	push	{r7}
 80059b2:	af00      	add	r7, sp, #0
	GPIOC->BSRR = GPIO_BSRR_BS13;
 80059b4:	4b03      	ldr	r3, [pc, #12]	; (80059c4 <rf24_stm32f1xx_led_on+0x14>)
 80059b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80059ba:	611a      	str	r2, [r3, #16]
}
 80059bc:	bf00      	nop
 80059be:	46bd      	mov	sp, r7
 80059c0:	bc80      	pop	{r7}
 80059c2:	4770      	bx	lr
 80059c4:	40011000 	.word	0x40011000

080059c8 <rf24_stm32f1xx_led_off>:

void rf24_stm32f1xx_led_off()
{
 80059c8:	b480      	push	{r7}
 80059ca:	af00      	add	r7, sp, #0
	GPIOC->BSRR = GPIO_BSRR_BR13;
 80059cc:	4b03      	ldr	r3, [pc, #12]	; (80059dc <rf24_stm32f1xx_led_off+0x14>)
 80059ce:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80059d2:	611a      	str	r2, [r3, #16]
}
 80059d4:	bf00      	nop
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bc80      	pop	{r7}
 80059da:	4770      	bx	lr
 80059dc:	40011000 	.word	0x40011000

080059e0 <rf24_stm32f1xx_led_toggle>:

void rf24_stm32f1xx_led_toggle()
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	af00      	add	r7, sp, #0
	if(led_pin_state){
 80059e4:	4b08      	ldr	r3, [pc, #32]	; (8005a08 <rf24_stm32f1xx_led_toggle+0x28>)
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d005      	beq.n	80059fa <rf24_stm32f1xx_led_toggle+0x1a>
		rf24_stm32f1xx_led_off();
 80059ee:	f7ff ffeb 	bl	80059c8 <rf24_stm32f1xx_led_off>
		led_pin_state = low;
 80059f2:	4b05      	ldr	r3, [pc, #20]	; (8005a08 <rf24_stm32f1xx_led_toggle+0x28>)
 80059f4:	2200      	movs	r2, #0
 80059f6:	701a      	strb	r2, [r3, #0]
	{
		rf24_stm32f1xx_led_on();
		led_pin_state = high;
	}

}
 80059f8:	e004      	b.n	8005a04 <rf24_stm32f1xx_led_toggle+0x24>
		rf24_stm32f1xx_led_on();
 80059fa:	f7ff ffd9 	bl	80059b0 <rf24_stm32f1xx_led_on>
		led_pin_state = high;
 80059fe:	4b02      	ldr	r3, [pc, #8]	; (8005a08 <rf24_stm32f1xx_led_toggle+0x28>)
 8005a00:	2201      	movs	r2, #1
 8005a02:	701a      	strb	r2, [r3, #0]
}
 8005a04:	bf00      	nop
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	200006a9 	.word	0x200006a9

08005a0c <rf24_stm32f1xx_init_ce>:

void rf24_stm32f1xx_init_ce(void)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	af00      	add	r7, sp, #0
    RCC->APB2ENR    |= RCC_APB2ENR_IOPAEN;
 8005a10:	4b0a      	ldr	r3, [pc, #40]	; (8005a3c <rf24_stm32f1xx_init_ce+0x30>)
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	4a09      	ldr	r2, [pc, #36]	; (8005a3c <rf24_stm32f1xx_init_ce+0x30>)
 8005a16:	f043 0304 	orr.w	r3, r3, #4
 8005a1a:	6193      	str	r3, [r2, #24]
    GPIOA->CRL      &=  ~(GPIO_CRL_MODE3 | GPIO_CRL_CNF3);
 8005a1c:	4b08      	ldr	r3, [pc, #32]	; (8005a40 <rf24_stm32f1xx_init_ce+0x34>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a07      	ldr	r2, [pc, #28]	; (8005a40 <rf24_stm32f1xx_init_ce+0x34>)
 8005a22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a26:	6013      	str	r3, [r2, #0]
    GPIOA->CRL      |= (GPIO_CRL_MODE3_1 | GPIO_CRL_MODE3_0);
 8005a28:	4b05      	ldr	r3, [pc, #20]	; (8005a40 <rf24_stm32f1xx_init_ce+0x34>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a04      	ldr	r2, [pc, #16]	; (8005a40 <rf24_stm32f1xx_init_ce+0x34>)
 8005a2e:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8005a32:	6013      	str	r3, [r2, #0]
}
 8005a34:	bf00      	nop
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bc80      	pop	{r7}
 8005a3a:	4770      	bx	lr
 8005a3c:	40021000 	.word	0x40021000
 8005a40:	40010800 	.word	0x40010800

08005a44 <rf24_stm32f1xx_ce_high>:

void rf24_stm32f1xx_ce_high()
{
 8005a44:	b480      	push	{r7}
 8005a46:	af00      	add	r7, sp, #0
	// Set PA3 high
	GPIOA->BSRR = GPIO_BSRR_BS3;
 8005a48:	4b03      	ldr	r3, [pc, #12]	; (8005a58 <rf24_stm32f1xx_ce_high+0x14>)
 8005a4a:	2208      	movs	r2, #8
 8005a4c:	611a      	str	r2, [r3, #16]
}
 8005a4e:	bf00      	nop
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bc80      	pop	{r7}
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	40010800 	.word	0x40010800

08005a5c <rf24_stm32f1xx_ce_low>:

void rf24_stm32f1xx_ce_low()
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	af00      	add	r7, sp, #0
	// Set PA3 low
	GPIOA->BSRR = GPIO_BSRR_BR3;
 8005a60:	4b03      	ldr	r3, [pc, #12]	; (8005a70 <rf24_stm32f1xx_ce_low+0x14>)
 8005a62:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005a66:	611a      	str	r2, [r3, #16]
}
 8005a68:	bf00      	nop
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bc80      	pop	{r7}
 8005a6e:	4770      	bx	lr
 8005a70:	40010800 	.word	0x40010800

08005a74 <rf24_stm32f1xx_irq_init>:
	// Enable EXTI15_10_IRQn from NVIC
	NVIC_EnableIRQ(EXTI15_10_IRQn);
}

void rf24_stm32f1xx_irq_init()
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	af00      	add	r7, sp, #0
	// Reset PA2
	GPIOA->CRL &= ~(GPIO_CRL_MODE2 | GPIO_CRL_CNF2);
 8005a78:	4b24      	ldr	r3, [pc, #144]	; (8005b0c <rf24_stm32f1xx_irq_init+0x98>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a23      	ldr	r2, [pc, #140]	; (8005b0c <rf24_stm32f1xx_irq_init+0x98>)
 8005a7e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005a82:	6013      	str	r3, [r2, #0]

	// Set PA2 input pull up (CNF13_1=1, CNF13_0=0, MODE13_1=0, MODE13_0=0, ODR13=1)
	GPIOA->CRL |= GPIO_CRL_CNF2_1;
 8005a84:	4b21      	ldr	r3, [pc, #132]	; (8005b0c <rf24_stm32f1xx_irq_init+0x98>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a20      	ldr	r2, [pc, #128]	; (8005b0c <rf24_stm32f1xx_irq_init+0x98>)
 8005a8a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005a8e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(GPIO_CRL_CNF2_0);
 8005a90:	4b1e      	ldr	r3, [pc, #120]	; (8005b0c <rf24_stm32f1xx_irq_init+0x98>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a1d      	ldr	r2, [pc, #116]	; (8005b0c <rf24_stm32f1xx_irq_init+0x98>)
 8005a96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a9a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(GPIO_CRL_MODE2_1 | GPIO_CRL_MODE2_0);
 8005a9c:	4b1b      	ldr	r3, [pc, #108]	; (8005b0c <rf24_stm32f1xx_irq_init+0x98>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a1a      	ldr	r2, [pc, #104]	; (8005b0c <rf24_stm32f1xx_irq_init+0x98>)
 8005aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aa6:	6013      	str	r3, [r2, #0]
	GPIOA->ODR |= GPIO_ODR_ODR2;
 8005aa8:	4b18      	ldr	r3, [pc, #96]	; (8005b0c <rf24_stm32f1xx_irq_init+0x98>)
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	4a17      	ldr	r2, [pc, #92]	; (8005b0c <rf24_stm32f1xx_irq_init+0x98>)
 8005aae:	f043 0304 	orr.w	r3, r3, #4
 8005ab2:	60d3      	str	r3, [r2, #12]

	// Enable clock port a
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8005ab4:	4b16      	ldr	r3, [pc, #88]	; (8005b10 <rf24_stm32f1xx_irq_init+0x9c>)
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	4a15      	ldr	r2, [pc, #84]	; (8005b10 <rf24_stm32f1xx_irq_init+0x9c>)
 8005aba:	f043 0304 	orr.w	r3, r3, #4
 8005abe:	6193      	str	r3, [r2, #24]

	// Enable clock alternate function
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 8005ac0:	4b13      	ldr	r3, [pc, #76]	; (8005b10 <rf24_stm32f1xx_irq_init+0x9c>)
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	4a12      	ldr	r2, [pc, #72]	; (8005b10 <rf24_stm32f1xx_irq_init+0x9c>)
 8005ac6:	f043 0301 	orr.w	r3, r3, #1
 8005aca:	6193      	str	r3, [r2, #24]

	// Map PA2 to EXTI0
	AFIO->EXTICR[0] |= AFIO_EXTICR1_EXTI2_PA;
 8005acc:	4b11      	ldr	r3, [pc, #68]	; (8005b14 <rf24_stm32f1xx_irq_init+0xa0>)
 8005ace:	4a11      	ldr	r2, [pc, #68]	; (8005b14 <rf24_stm32f1xx_irq_init+0xa0>)
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	6093      	str	r3, [r2, #8]

	// Interrupt request from line 2 is not masked => enabled
	EXTI->IMR |= EXTI_IMR_MR2; //(1 << 2);
 8005ad4:	4b10      	ldr	r3, [pc, #64]	; (8005b18 <rf24_stm32f1xx_irq_init+0xa4>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a0f      	ldr	r2, [pc, #60]	; (8005b18 <rf24_stm32f1xx_irq_init+0xa4>)
 8005ada:	f043 0304 	orr.w	r3, r3, #4
 8005ade:	6013      	str	r3, [r2, #0]

	// Enable falling edge trigger
	EXTI->FTSR |= EXTI_FTSR_TR2; //(1 << 2);
 8005ae0:	4b0d      	ldr	r3, [pc, #52]	; (8005b18 <rf24_stm32f1xx_irq_init+0xa4>)
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	4a0c      	ldr	r2, [pc, #48]	; (8005b18 <rf24_stm32f1xx_irq_init+0xa4>)
 8005ae6:	f043 0304 	orr.w	r3, r3, #4
 8005aea:	60d3      	str	r3, [r2, #12]
	// Disable rising edge trigger
	EXTI->RTSR &= ~(EXTI_RTSR_TR2); //(1 << 2);
 8005aec:	4b0a      	ldr	r3, [pc, #40]	; (8005b18 <rf24_stm32f1xx_irq_init+0xa4>)
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	4a09      	ldr	r2, [pc, #36]	; (8005b18 <rf24_stm32f1xx_irq_init+0xa4>)
 8005af2:	f023 0304 	bic.w	r3, r3, #4
 8005af6:	6093      	str	r3, [r2, #8]

	// Set EXTI2 to priority level 1
	NVIC_SetPriority(EXTI2_IRQn, 0x10);
 8005af8:	2110      	movs	r1, #16
 8005afa:	2008      	movs	r0, #8
 8005afc:	f7ff fcc8 	bl	8005490 <__NVIC_SetPriority>

	// Enable EXT2 IRQ from NVIC
	NVIC_EnableIRQ(EXTI2_IRQn);
 8005b00:	2008      	movs	r0, #8
 8005b02:	f7ff fca9 	bl	8005458 <__NVIC_EnableIRQ>
}
 8005b06:	bf00      	nop
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	40010800 	.word	0x40010800
 8005b10:	40021000 	.word	0x40021000
 8005b14:	40010000 	.word	0x40010000
 8005b18:	40010400 	.word	0x40010400

08005b1c <rf24_stm32f1xx_init>:

void rf24_stm32f1xx_init()
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	af00      	add	r7, sp, #0
	rf24_stm32f1xx_set_system_clock_72Mhz();
 8005b20:	f7ff fdac 	bl	800567c <rf24_stm32f1xx_set_system_clock_72Mhz>
	rf24_stm32f1xx_init_tim2(RF24_STM32F1XX_TIMER2_TICK_US);
 8005b24:	2332      	movs	r3, #50	; 0x32
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7ff fdfe 	bl	8005728 <rf24_stm32f1xx_init_tim2>
	rf24_stm32f1xx_init_tim3();
 8005b2c:	f7ff fea2 	bl	8005874 <rf24_stm32f1xx_init_tim3>
	rf24_stm32f1xx_init_led(1000);
 8005b30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005b34:	f7ff ff00 	bl	8005938 <rf24_stm32f1xx_init_led>
	rf24_stm32f1xx_init_ce();
 8005b38:	f7ff ff68 	bl	8005a0c <rf24_stm32f1xx_init_ce>
	rf24_stm32f1xx_ce_low();
 8005b3c:	f7ff ff8e 	bl	8005a5c <rf24_stm32f1xx_ce_low>
	rf24_stm32f1xx_irq_init();
 8005b40:	f7ff ff98 	bl	8005a74 <rf24_stm32f1xx_irq_init>
}
 8005b44:	bf00      	nop
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <rf24_stm32f1xx_spi_init>:
#include "rf24_stm32f1xx_spi.h"

void rf24_stm32f1xx_spi_init(void)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
    RCC->APB2ENR    |= RCC_APB2ENR_IOPAEN;  // Enable GPIOA clock
 8005b4e:	4b2e      	ldr	r3, [pc, #184]	; (8005c08 <rf24_stm32f1xx_spi_init+0xc0>)
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	4a2d      	ldr	r2, [pc, #180]	; (8005c08 <rf24_stm32f1xx_spi_init+0xc0>)
 8005b54:	f043 0304 	orr.w	r3, r3, #4
 8005b58:	6193      	str	r3, [r2, #24]
    RCC->APB2ENR    |= RCC_APB2ENR_SPI1EN;  // Enable SPI1 clock
 8005b5a:	4b2b      	ldr	r3, [pc, #172]	; (8005c08 <rf24_stm32f1xx_spi_init+0xc0>)
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	4a2a      	ldr	r2, [pc, #168]	; (8005c08 <rf24_stm32f1xx_spi_init+0xc0>)
 8005b60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005b64:	6193      	str	r3, [r2, #24]

    // Reset PA4, PA5, PA, PA7 MODE and CNF to 0b00
    GPIOA->CRL &=	~(	(GPIO_CRL_MODE4 | GPIO_CRL_CNF4) |
 8005b66:	4b29      	ldr	r3, [pc, #164]	; (8005c0c <rf24_stm32f1xx_spi_init+0xc4>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a28      	ldr	r2, [pc, #160]	; (8005c0c <rf24_stm32f1xx_spi_init+0xc4>)
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	6013      	str	r3, [r2, #0]
    					(GPIO_CRL_MODE5 | GPIO_CRL_CNF5) |
						(GPIO_CRL_MODE6 | GPIO_CRL_CNF6) |
						(GPIO_CRL_MODE7 | GPIO_CRL_CNF7)	);

    // Init Pin PA4 NSS  - Mode = 11 (50Mhz) - CNF = 0b00
    GPIOA->CRL |= GPIO_CRL_MODE4_1 | GPIO_CRL_MODE4_0;
 8005b70:	4b26      	ldr	r3, [pc, #152]	; (8005c0c <rf24_stm32f1xx_spi_init+0xc4>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a25      	ldr	r2, [pc, #148]	; (8005c0c <rf24_stm32f1xx_spi_init+0xc4>)
 8005b76:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8005b7a:	6013      	str	r3, [r2, #0]

    // Init Pin PA5 SCK  - Mode = 11 (50Mhz) - CNF = 0b10 (Alt Function PP)
    GPIOA->CRL |= GPIO_CRL_MODE5_1 | GPIO_CRL_MODE5_0 | GPIO_CRL_CNF5_1;
 8005b7c:	4b23      	ldr	r3, [pc, #140]	; (8005c0c <rf24_stm32f1xx_spi_init+0xc4>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a22      	ldr	r2, [pc, #136]	; (8005c0c <rf24_stm32f1xx_spi_init+0xc4>)
 8005b82:	f443 0330 	orr.w	r3, r3, #11534336	; 0xb00000
 8005b86:	6013      	str	r3, [r2, #0]

    // Init Pin PA6 MISO - Mode = 11 (50Mhz) - CNF = 0b10 (Alt Function PP)
    GPIOA->CRL |= GPIO_CRL_MODE6_1 | GPIO_CRL_MODE6_0 | GPIO_CRL_CNF6_1;
 8005b88:	4b20      	ldr	r3, [pc, #128]	; (8005c0c <rf24_stm32f1xx_spi_init+0xc4>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a1f      	ldr	r2, [pc, #124]	; (8005c0c <rf24_stm32f1xx_spi_init+0xc4>)
 8005b8e:	f043 6330 	orr.w	r3, r3, #184549376	; 0xb000000
 8005b92:	6013      	str	r3, [r2, #0]

    // Init Pin PA7 MOSI - Mode = 11 (50Mhz) - CNF = 0b10 (Alt Function PP)
    GPIOA->CRL |= GPIO_CRL_MODE7_1 | GPIO_CRL_MODE7_0 | GPIO_CRL_CNF7_1;
 8005b94:	4b1d      	ldr	r3, [pc, #116]	; (8005c0c <rf24_stm32f1xx_spi_init+0xc4>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a1c      	ldr	r2, [pc, #112]	; (8005c0c <rf24_stm32f1xx_spi_init+0xc4>)
 8005b9a:	f043 4330 	orr.w	r3, r3, #2952790016	; 0xb0000000
 8005b9e:	6013      	str	r3, [r2, #0]

    // Set the SS (CSN) pin high
    GPIOA->BSRR = GPIO_BSRR_BS4;
 8005ba0:	4b1a      	ldr	r3, [pc, #104]	; (8005c0c <rf24_stm32f1xx_spi_init+0xc4>)
 8005ba2:	2210      	movs	r2, #16
 8005ba4:	611a      	str	r2, [r3, #16]

    // 1. __________________________________________________________________________
    // Configuring the SPI in master mode (Source: ST RM0008 Reference manual)

    uint32_t spi_config = 0;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	607b      	str	r3, [r7, #4]

    spi_config |= SPI_CR1_SPE;				// Enable SPI Interface
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bb0:	607b      	str	r3, [r7, #4]

    // 1.1 Select the BR[2:0] bits to define the serial clock baud rate (see SPI_CR1 register).
    spi_config |= SPI_CR1_BR_2;				// SPI-Baudrate = F_PCLK/32
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f043 0320 	orr.w	r3, r3, #32
 8005bb8:	607b      	str	r3, [r7, #4]

    // 1.2 Select the CPOL and CPHA bits to define one of the four relationships between the data transfer and the serial clock (see Figure 240).
    spi_config &= ~(SPI_CR1_CPHA);			// SPI clock to 0 when idle
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f023 0301 	bic.w	r3, r3, #1
 8005bc0:	607b      	str	r3, [r7, #4]
    //spi_config |= SPI_CR1_CPHA;			// SPI clock to 1 when idle
    spi_config &= ~(SPI_CR1_CPOL);			// First clock transition is the first data capture edge
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f023 0302 	bic.w	r3, r3, #2
 8005bc8:	607b      	str	r3, [r7, #4]
    //spi_config |= SPI_CR1_CPOL;			// Second clock transition is the first data capture edge

    // 1.3 Set the DFF bit to define 8- or 16-bit data frame format
    //spi_config |= SPI_CR1_DFF; 			// 16-bit data frame
    spi_config &= ~(SPI_CR1_DFF);			// 8-bit data frame
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bd0:	607b      	str	r3, [r7, #4]

    // 1.4 Configure the LSBFIRST bit in the SPI_CR1 register to define the frame format.
    //spi_config |= SPI_CR1_LSBFIRST; 		// LSB transmitted first
    spi_config &= ~(SPI_CR1_LSBFIRST);		// MSB transmitted first
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bd8:	607b      	str	r3, [r7, #4]

    // 1.5 If the NSS pin is required in input mode, in hardware mode, connect the NSS pin to a high-level signal during the complete byte transmit sequence. In NSS software mode,
	//		set the SSM and SSI bits in the SPI_CR1 register. If the NSS pin is required in output mode, the SSOE bit only should be set.
    spi_config |= SPI_CR1_SSM;				// Software slave management enabled
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005be0:	607b      	str	r3, [r7, #4]
    spi_config |= SPI_CR1_SSI;				// Internal slave select
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005be8:	607b      	str	r3, [r7, #4]

    // 1.6 The MSTR and SPE bits must be set (they remain set only if the NSS pin is connected to a high-level signal)
    spi_config |= SPI_CR1_MSTR;				// Configure as Master
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f043 0304 	orr.w	r3, r3, #4
 8005bf0:	607b      	str	r3, [r7, #4]

    SPI1->CR1  |= spi_config;
 8005bf2:	4b07      	ldr	r3, [pc, #28]	; (8005c10 <rf24_stm32f1xx_spi_init+0xc8>)
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	4906      	ldr	r1, [pc, #24]	; (8005c10 <rf24_stm32f1xx_spi_init+0xc8>)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	600b      	str	r3, [r1, #0]
}
 8005bfe:	bf00      	nop
 8005c00:	370c      	adds	r7, #12
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bc80      	pop	{r7}
 8005c06:	4770      	bx	lr
 8005c08:	40021000 	.word	0x40021000
 8005c0c:	40010800 	.word	0x40010800
 8005c10:	40013000 	.word	0x40013000

08005c14 <rf24_stm32f1xx_spi_csn_low>:

void rf24_stm32f1xx_spi_csn_low(){
 8005c14:	b480      	push	{r7}
 8005c16:	af00      	add	r7, sp, #0
	GPIOA->BSRR = GPIO_BSRR_BR4;
 8005c18:	4b03      	ldr	r3, [pc, #12]	; (8005c28 <rf24_stm32f1xx_spi_csn_low+0x14>)
 8005c1a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005c1e:	611a      	str	r2, [r3, #16]
}
 8005c20:	bf00      	nop
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bc80      	pop	{r7}
 8005c26:	4770      	bx	lr
 8005c28:	40010800 	.word	0x40010800

08005c2c <rf24_stm32f1xx_spi_csn_high>:

void rf24_stm32f1xx_spi_csn_high(){
 8005c2c:	b480      	push	{r7}
 8005c2e:	af00      	add	r7, sp, #0
	GPIOA->BSRR = GPIO_BSRR_BS4;
 8005c30:	4b03      	ldr	r3, [pc, #12]	; (8005c40 <rf24_stm32f1xx_spi_csn_high+0x14>)
 8005c32:	2210      	movs	r2, #16
 8005c34:	611a      	str	r2, [r3, #16]
}
 8005c36:	bf00      	nop
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bc80      	pop	{r7}
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	40010800 	.word	0x40010800

08005c44 <rf24_stm32f1xx_spi_shift_byte>:

uint8_t rf24_stm32f1xx_spi_shift_byte(uint8_t data){
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	71fb      	strb	r3, [r7, #7]
	//while (!(SPI1->SR & SPI_SR_TXE)){};
	*(uint8_t*)&(SPI1->DR) = data;
 8005c4e:	4a09      	ldr	r2, [pc, #36]	; (8005c74 <rf24_stm32f1xx_spi_shift_byte+0x30>)
 8005c50:	79fb      	ldrb	r3, [r7, #7]
 8005c52:	7013      	strb	r3, [r2, #0]
	while(!(SPI1->SR & SPI_SR_RXNE)){};
 8005c54:	bf00      	nop
 8005c56:	4b08      	ldr	r3, [pc, #32]	; (8005c78 <rf24_stm32f1xx_spi_shift_byte+0x34>)
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f003 0301 	and.w	r3, r3, #1
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d0f9      	beq.n	8005c56 <rf24_stm32f1xx_spi_shift_byte+0x12>
	return SPI1->DR;
 8005c62:	4b05      	ldr	r3, [pc, #20]	; (8005c78 <rf24_stm32f1xx_spi_shift_byte+0x34>)
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	b2db      	uxtb	r3, r3
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bc80      	pop	{r7}
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	4001300c 	.word	0x4001300c
 8005c78:	40013000 	.word	0x40013000

08005c7c <__NVIC_EnableIRQ>:
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	4603      	mov	r3, r0
 8005c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	db0b      	blt.n	8005ca6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c8e:	79fb      	ldrb	r3, [r7, #7]
 8005c90:	f003 021f 	and.w	r2, r3, #31
 8005c94:	4906      	ldr	r1, [pc, #24]	; (8005cb0 <__NVIC_EnableIRQ+0x34>)
 8005c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c9a:	095b      	lsrs	r3, r3, #5
 8005c9c:	2001      	movs	r0, #1
 8005c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8005ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005ca6:	bf00      	nop
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bc80      	pop	{r7}
 8005cae:	4770      	bx	lr
 8005cb0:	e000e100 	.word	0xe000e100

08005cb4 <rf24_stm32f1xx_usart_init>:

volatile rf24_stm32f1xx_usart_state_t  usart_state = usart_idle;
volatile rf24_stm32f1xx_usart_rx_buffer_t uart_buffer = { {0}, 0, 0 };

void rf24_stm32f1xx_usart_init(uint32_t baudrate)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
	// enable GPIOA clock
    RCC->APB2ENR    |= RCC_APB2ENR_IOPAEN;
 8005cbc:	4b1e      	ldr	r3, [pc, #120]	; (8005d38 <rf24_stm32f1xx_usart_init+0x84>)
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	4a1d      	ldr	r2, [pc, #116]	; (8005d38 <rf24_stm32f1xx_usart_init+0x84>)
 8005cc2:	f043 0304 	orr.w	r3, r3, #4
 8005cc6:	6193      	str	r3, [r2, #24]
    // enable USART1 clock
    RCC->APB2ENR    |= RCC_APB2ENR_USART1EN;
 8005cc8:	4b1b      	ldr	r3, [pc, #108]	; (8005d38 <rf24_stm32f1xx_usart_init+0x84>)
 8005cca:	699b      	ldr	r3, [r3, #24]
 8005ccc:	4a1a      	ldr	r2, [pc, #104]	; (8005d38 <rf24_stm32f1xx_usart_init+0x84>)
 8005cce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005cd2:	6193      	str	r3, [r2, #24]

    // reset PA9
    GPIOA->CRH &= ~(GPIO_CRH_CNF9  | GPIO_CRH_MODE9);
 8005cd4:	4b19      	ldr	r3, [pc, #100]	; (8005d3c <rf24_stm32f1xx_usart_init+0x88>)
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	4a18      	ldr	r2, [pc, #96]	; (8005d3c <rf24_stm32f1xx_usart_init+0x88>)
 8005cda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cde:	6053      	str	r3, [r2, #4]
    // reset PA10
    GPIOA->CRH &= ~(GPIO_CRH_CNF10 | GPIO_CRH_MODE10);
 8005ce0:	4b16      	ldr	r3, [pc, #88]	; (8005d3c <rf24_stm32f1xx_usart_init+0x88>)
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	4a15      	ldr	r2, [pc, #84]	; (8005d3c <rf24_stm32f1xx_usart_init+0x88>)
 8005ce6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005cea:	6053      	str	r3, [r2, #4]

    // 0b11 50MHz output
    GPIOA->CRH |= GPIO_CRH_MODE9_1 | GPIO_CRH_MODE9_0;
 8005cec:	4b13      	ldr	r3, [pc, #76]	; (8005d3c <rf24_stm32f1xx_usart_init+0x88>)
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	4a12      	ldr	r2, [pc, #72]	; (8005d3c <rf24_stm32f1xx_usart_init+0x88>)
 8005cf2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8005cf6:	6053      	str	r3, [r2, #4]
    // PA9: output @ 50MHz - alt-function push-pull
    GPIOA->CRH |= GPIO_CRH_CNF9_1;
 8005cf8:	4b10      	ldr	r3, [pc, #64]	; (8005d3c <rf24_stm32f1xx_usart_init+0x88>)
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	4a0f      	ldr	r2, [pc, #60]	; (8005d3c <rf24_stm32f1xx_usart_init+0x88>)
 8005cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d02:	6053      	str	r3, [r2, #4]
    // PA10 rx - mode = 0b00 (input) - CNF = 0b01 (input floating)
    GPIOA->CRH |= GPIO_CRH_CNF10_0;
 8005d04:	4b0d      	ldr	r3, [pc, #52]	; (8005d3c <rf24_stm32f1xx_usart_init+0x88>)
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	4a0c      	ldr	r2, [pc, #48]	; (8005d3c <rf24_stm32f1xx_usart_init+0x88>)
 8005d0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d0e:	6053      	str	r3, [r2, #4]

    // configure USART1 registers
    uint32_t baud = (uint32_t)(SystemCoreClock/baudrate);
 8005d10:	4b0b      	ldr	r3, [pc, #44]	; (8005d40 <rf24_stm32f1xx_usart_init+0x8c>)
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d1a:	60fb      	str	r3, [r7, #12]
    USART1->BRR  = baud;
 8005d1c:	4a09      	ldr	r2, [pc, #36]	; (8005d44 <rf24_stm32f1xx_usart_init+0x90>)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6093      	str	r3, [r2, #8]
    USART1->CR1 = USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE | USART_CR1_UE;
 8005d22:	4b08      	ldr	r3, [pc, #32]	; (8005d44 <rf24_stm32f1xx_usart_init+0x90>)
 8005d24:	f242 022c 	movw	r2, #8236	; 0x202c
 8005d28:	60da      	str	r2, [r3, #12]

    // configure NVIC
    NVIC_EnableIRQ(USART1_IRQn);
 8005d2a:	2025      	movs	r0, #37	; 0x25
 8005d2c:	f7ff ffa6 	bl	8005c7c <__NVIC_EnableIRQ>
}
 8005d30:	bf00      	nop
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	40021000 	.word	0x40021000
 8005d3c:	40010800 	.word	0x40010800
 8005d40:	20000000 	.word	0x20000000
 8005d44:	40013800 	.word	0x40013800

08005d48 <rf24_stm32f1xx_usart_write_byte>:

void rf24_stm32f1xx_usart_write_byte(uint8_t byte)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	4603      	mov	r3, r0
 8005d50:	71fb      	strb	r3, [r7, #7]
	if(byte == '\n') rf24_stm32f1xx_usart_write_byte('\r');
 8005d52:	79fb      	ldrb	r3, [r7, #7]
 8005d54:	2b0a      	cmp	r3, #10
 8005d56:	d102      	bne.n	8005d5e <rf24_stm32f1xx_usart_write_byte+0x16>
 8005d58:	200d      	movs	r0, #13
 8005d5a:	f7ff fff5 	bl	8005d48 <rf24_stm32f1xx_usart_write_byte>

    USART1->DR = (int)(byte);
 8005d5e:	4a07      	ldr	r2, [pc, #28]	; (8005d7c <rf24_stm32f1xx_usart_write_byte+0x34>)
 8005d60:	79fb      	ldrb	r3, [r7, #7]
 8005d62:	6053      	str	r3, [r2, #4]
    while (!(USART1->SR & USART_SR_TXE));
 8005d64:	bf00      	nop
 8005d66:	4b05      	ldr	r3, [pc, #20]	; (8005d7c <rf24_stm32f1xx_usart_write_byte+0x34>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d0f9      	beq.n	8005d66 <rf24_stm32f1xx_usart_write_byte+0x1e>
}
 8005d72:	bf00      	nop
 8005d74:	3708      	adds	r7, #8
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	40013800 	.word	0x40013800

08005d80 <rf24_stm32f1xx_usart_write_str>:

int rf24_stm32f1xx_usart_write_str(char *str)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
    int count = 0;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	60fb      	str	r3, [r7, #12]

    while(*str){
 8005d8c:	e00a      	b.n	8005da4 <rf24_stm32f1xx_usart_write_str+0x24>
    	rf24_stm32f1xx_usart_write_byte(*str);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7ff ffd8 	bl	8005d48 <rf24_stm32f1xx_usart_write_byte>
        str++;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	607b      	str	r3, [r7, #4]
        count++;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	3301      	adds	r3, #1
 8005da2:	60fb      	str	r3, [r7, #12]
    while(*str){
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d1f0      	bne.n	8005d8e <rf24_stm32f1xx_usart_write_str+0xe>
    }

    return count;
 8005dac:	68fb      	ldr	r3, [r7, #12]
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3710      	adds	r7, #16
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <rf24_stm32f1xx_usart_write_line>:

int rf24_stm32f1xx_usart_write_line(char *str)
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b084      	sub	sp, #16
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
    int count = 0;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	60fb      	str	r3, [r7, #12]
    count = rf24_stm32f1xx_usart_write_str(str);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f7ff ffdc 	bl	8005d80 <rf24_stm32f1xx_usart_write_str>
 8005dc8:	60f8      	str	r0, [r7, #12]
    rf24_stm32f1xx_usart_write_byte('\n');
 8005dca:	200a      	movs	r0, #10
 8005dcc:	f7ff ffbc 	bl	8005d48 <rf24_stm32f1xx_usart_write_byte>
    return(count);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
	...

08005ddc <rf24_stm32f1xx_usart_buffer_char>:

void rf24_stm32f1xx_usart_buffer_char(uint8_t c)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	4603      	mov	r3, r0
 8005de4:	71fb      	strb	r3, [r7, #7]
    int i = (uart_buffer.head_pos + 1) % USART_BUFFER_SIZE;
 8005de6:	4b11      	ldr	r3, [pc, #68]	; (8005e2c <rf24_stm32f1xx_usart_buffer_char+0x50>)
 8005de8:	7c1b      	ldrb	r3, [r3, #16]
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	3301      	adds	r3, #1
 8005dee:	425a      	negs	r2, r3
 8005df0:	f003 030f 	and.w	r3, r3, #15
 8005df4:	f002 020f 	and.w	r2, r2, #15
 8005df8:	bf58      	it	pl
 8005dfa:	4253      	negpl	r3, r2
 8005dfc:	60fb      	str	r3, [r7, #12]

    if (i != uart_buffer.tail_pos)
 8005dfe:	4b0b      	ldr	r3, [pc, #44]	; (8005e2c <rf24_stm32f1xx_usart_buffer_char+0x50>)
 8005e00:	7c5b      	ldrb	r3, [r3, #17]
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	461a      	mov	r2, r3
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d00a      	beq.n	8005e22 <rf24_stm32f1xx_usart_buffer_char+0x46>
    {
        uart_buffer.buffer[uart_buffer.head_pos] = c;
 8005e0c:	4b07      	ldr	r3, [pc, #28]	; (8005e2c <rf24_stm32f1xx_usart_buffer_char+0x50>)
 8005e0e:	7c1b      	ldrb	r3, [r3, #16]
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	4619      	mov	r1, r3
 8005e14:	4a05      	ldr	r2, [pc, #20]	; (8005e2c <rf24_stm32f1xx_usart_buffer_char+0x50>)
 8005e16:	79fb      	ldrb	r3, [r7, #7]
 8005e18:	5453      	strb	r3, [r2, r1]
        uart_buffer.head_pos = i;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	b2da      	uxtb	r2, r3
 8005e1e:	4b03      	ldr	r3, [pc, #12]	; (8005e2c <rf24_stm32f1xx_usart_buffer_char+0x50>)
 8005e20:	741a      	strb	r2, [r3, #16]
    }
}
 8005e22:	bf00      	nop
 8005e24:	3714      	adds	r7, #20
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bc80      	pop	{r7}
 8005e2a:	4770      	bx	lr
 8005e2c:	200006ac 	.word	0x200006ac

08005e30 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
    if(USART1->SR & USART_SR_ORE)
 8005e36:	4b0d      	ldr	r3, [pc, #52]	; (8005e6c <USART1_IRQHandler+0x3c>)
 8005e38:	681b      	ldr	r3, [r3, #0]
    {
        // process overrun error if needed
    }

    uint8_t in_char = (USART1->DR & 0xFF);
 8005e3a:	4b0c      	ldr	r3, [pc, #48]	; (8005e6c <USART1_IRQHandler+0x3c>)
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	71fb      	strb	r3, [r7, #7]

    // if input is escape, send clear screen command
    if(in_char == '\x1B')
 8005e40:	79fb      	ldrb	r3, [r7, #7]
 8005e42:	2b1b      	cmp	r3, #27
 8005e44:	d106      	bne.n	8005e54 <USART1_IRQHandler+0x24>
    {
    	rf24_stm32f1xx_usart_write_str("---------------------------------------------------------");
 8005e46:	480a      	ldr	r0, [pc, #40]	; (8005e70 <USART1_IRQHandler+0x40>)
 8005e48:	f7ff ff9a 	bl	8005d80 <rf24_stm32f1xx_usart_write_str>
    	rf24_stm32f1xx_usart_write_str("\033c");
 8005e4c:	4809      	ldr	r0, [pc, #36]	; (8005e74 <USART1_IRQHandler+0x44>)
 8005e4e:	f7ff ff97 	bl	8005d80 <rf24_stm32f1xx_usart_write_str>
    	return;
 8005e52:	e007      	b.n	8005e64 <USART1_IRQHandler+0x34>
    }

    rf24_stm32f1xx_usart_buffer_char(in_char);
 8005e54:	79fb      	ldrb	r3, [r7, #7]
 8005e56:	4618      	mov	r0, r3
 8005e58:	f7ff ffc0 	bl	8005ddc <rf24_stm32f1xx_usart_buffer_char>
    rf24_urci_putc(in_char);
 8005e5c:	79fb      	ldrb	r3, [r7, #7]
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f000 fdac 	bl	80069bc <rf24_urci_putc>
}
 8005e64:	3708      	adds	r7, #8
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	40013800 	.word	0x40013800
 8005e70:	08009c68 	.word	0x08009c68
 8005e74:	08009ca4 	.word	0x08009ca4

08005e78 <rf24_urci_ping>:
		.fct_ptr_set_string = rf24_urci_ping },

};

void rf24_urci_ping(char* str)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
	rf24_mac_addr mac_addr;
	rf24_urci_string_to_bytes(str, ".,:;", mac_addr.bytes, 6);
 8005e80:	f107 0208 	add.w	r2, r7, #8
 8005e84:	2306      	movs	r3, #6
 8005e86:	4907      	ldr	r1, [pc, #28]	; (8005ea4 <rf24_urci_ping+0x2c>)
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 fe37 	bl	8006afc <rf24_urci_string_to_bytes>

	rf24_mac_start_ping(&mac_addr, 5);
 8005e8e:	f107 0308 	add.w	r3, r7, #8
 8005e92:	2105      	movs	r1, #5
 8005e94:	4618      	mov	r0, r3
 8005e96:	f7fd ffdb 	bl	8003e50 <rf24_mac_start_ping>
}
 8005e9a:	bf00      	nop
 8005e9c:	3710      	adds	r7, #16
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	0800a4dc 	.word	0x0800a4dc

08005ea8 <rf24_urci_print_mac_address>:

void rf24_urci_print_mac_address()
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	af00      	add	r7, sp, #0
	rf24_printf("%-10s mac-address: %s\n", "mac", decimal_to_string(rf24_mac_get_address()->bytes, 6, ':'));
 8005eac:	f7fd f8aa 	bl	8003004 <rf24_mac_get_address>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	223a      	movs	r2, #58	; 0x3a
 8005eb4:	2106      	movs	r1, #6
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7fb fb44 	bl	8001544 <decimal_to_string>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	4902      	ldr	r1, [pc, #8]	; (8005ecc <rf24_urci_print_mac_address+0x24>)
 8005ec2:	4803      	ldr	r0, [pc, #12]	; (8005ed0 <rf24_urci_print_mac_address+0x28>)
 8005ec4:	f7fb fa50 	bl	8001368 <rf24_printf>
}
 8005ec8:	bf00      	nop
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	0800a4e4 	.word	0x0800a4e4
 8005ed0:	0800a4e8 	.word	0x0800a4e8

08005ed4 <rf24_urci_print_register>:

void rf24_urci_print_register(char* str){
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]

	for(int i=0; i<sizeof(rf24_module_register_names); i++)
 8005edc:	2300      	movs	r3, #0
 8005ede:	60fb      	str	r3, [r7, #12]
 8005ee0:	e01b      	b.n	8005f1a <rf24_urci_print_register+0x46>
	{
		if(strcmp(rf24_module_register_names[i], str) == 0)
 8005ee2:	4a11      	ldr	r2, [pc, #68]	; (8005f28 <rf24_urci_print_register+0x54>)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eea:	6879      	ldr	r1, [r7, #4]
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7fa f92d 	bl	800014c <strcmp>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d10d      	bne.n	8005f14 <rf24_urci_print_register+0x40>
		{
			// get register_address vom register mnemonic enumeration
			uint8_t register_address = (rf24_module_register_mnemonics) i;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	72fb      	strb	r3, [r7, #11]

			// read register value and write it to usart
			rf24_stm32f1xx_usart_write_line(decimal_to_binary(rf24_module_read_register(register_address)));
 8005efc:	7afb      	ldrb	r3, [r7, #11]
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7fb fb94 	bl	800162c <rf24_module_read_register>
 8005f04:	4603      	mov	r3, r0
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7fb fb5a 	bl	80015c0 <decimal_to_binary>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7ff ff51 	bl	8005db6 <rf24_stm32f1xx_usart_write_line>
	for(int i=0; i<sizeof(rf24_module_register_names); i++)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	3301      	adds	r3, #1
 8005f18:	60fb      	str	r3, [r7, #12]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2b67      	cmp	r3, #103	; 0x67
 8005f1e:	d9e0      	bls.n	8005ee2 <rf24_urci_print_register+0xe>
		}
	}
}
 8005f20:	bf00      	nop
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	2000042c 	.word	0x2000042c

08005f2c <rf24_urci_blacklist_mac_address>:

	rf24_mac_transfer_frame(UNICAST, &mac_frame);
}*/

void rf24_urci_blacklist_mac_address(char* str)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
	rf24_mac_addr mac_addr;
	rf24_urci_string_to_bytes(str, ".,:;", mac_addr.bytes, 6);
 8005f34:	f107 0208 	add.w	r2, r7, #8
 8005f38:	2306      	movs	r3, #6
 8005f3a:	4906      	ldr	r1, [pc, #24]	; (8005f54 <rf24_urci_blacklist_mac_address+0x28>)
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 fddd 	bl	8006afc <rf24_urci_string_to_bytes>

	rf24_mac_blacklist_add(&mac_addr);
 8005f42:	f107 0308 	add.w	r3, r7, #8
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7fc fd8a 	bl	8002a60 <rf24_mac_blacklist_add>
}
 8005f4c:	bf00      	nop
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	0800a4dc 	.word	0x0800a4dc

08005f58 <rf24_urci_transfer_trm>:
	rf24_mac_frame_to_tx_data(&mac_frame, &tx_data);
	rf24_module_transmit(&tx_data);
}

void rf24_urci_transfer_trm(char* str)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b08c      	sub	sp, #48	; 0x30
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
	rf24_mac_addr receiver;
	rf24_urci_string_to_bytes(str, ".,:;", receiver.bytes, 6);
 8005f60:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005f64:	2306      	movs	r3, #6
 8005f66:	4917      	ldr	r1, [pc, #92]	; (8005fc4 <rf24_urci_transfer_trm+0x6c>)
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 fdc7 	bl	8006afc <rf24_urci_string_to_bytes>

	// Build a TRM frame
	rf24_mac_frame mac_frame;
	mac_frame.frame_control.type = TOPOLOGY;
 8005f6e:	7a3b      	ldrb	r3, [r7, #8]
 8005f70:	2204      	movs	r2, #4
 8005f72:	f362 0385 	bfi	r3, r2, #2, #4
 8005f76:	723b      	strb	r3, [r7, #8]
	mac_frame.frame_control.subtype = TOPOLOGY_REPLY_MESSAGE;
 8005f78:	893b      	ldrh	r3, [r7, #8]
 8005f7a:	2202      	movs	r2, #2
 8005f7c:	f362 1389 	bfi	r3, r2, #6, #4
 8005f80:	813b      	strh	r3, [r7, #8]
	mac_frame.transmitter = *rf24_mac_get_address();
 8005f82:	f7fd f83f 	bl	8003004 <rf24_mac_get_address>
 8005f86:	4602      	mov	r2, r0
 8005f88:	f107 0312 	add.w	r3, r7, #18
 8005f8c:	6811      	ldr	r1, [r2, #0]
 8005f8e:	6019      	str	r1, [r3, #0]
 8005f90:	8892      	ldrh	r2, [r2, #4]
 8005f92:	809a      	strh	r2, [r3, #4]
	mac_frame.receiver = receiver;
 8005f94:	f107 030c 	add.w	r3, r7, #12
 8005f98:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005f9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005fa0:	6018      	str	r0, [r3, #0]
 8005fa2:	3304      	adds	r3, #4
 8005fa4:	8019      	strh	r1, [r3, #0]
	mac_frame.duration = T_NAV_FRAG_MS;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	817b      	strh	r3, [r7, #10]
	mac_frame.topology.successor = false;
 8005faa:	2300      	movs	r3, #0
 8005fac:	76fb      	strb	r3, [r7, #27]

	// Transfer TRM (CSMA/CA)
	rf24_mac_transfer_frame(UNICAST, &mac_frame);
 8005fae:	f107 0308 	add.w	r3, r7, #8
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	2000      	movs	r0, #0
 8005fb6:	f7fd fc09 	bl	80037cc <rf24_mac_transfer_frame>
}
 8005fba:	bf00      	nop
 8005fbc:	3730      	adds	r7, #48	; 0x30
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	0800a4dc 	.word	0x0800a4dc

08005fc8 <rf24_urci_print_topology>:

void rf24_urci_print_topology()
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	af00      	add	r7, sp, #0
	rf24_network_print_topology(rf24_network_get_topology());
 8005fcc:	f7fe f84a 	bl	8004064 <rf24_network_get_topology>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7fe fe60 	bl	8004c98 <rf24_network_print_topology>
}
 8005fd8:	bf00      	nop
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <rf24_urci_print_neighbors>:

void rf24_urci_print_neighbors()
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	af00      	add	r7, sp, #0
	rf24_network_print_neighbors(rf24_network_get_neighbors());
 8005fe0:	f7fe f84a 	bl	8004078 <rf24_network_get_neighbors>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7fe fcf4 	bl	80049d4 <rf24_network_print_neighbors>
}
 8005fec:	bf00      	nop
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <rf24_urci_transfer_test_topology>:

void rf24_urci_transfer_test_topology(char* str)
{
 8005ff0:	b5b0      	push	{r4, r5, r7, lr}
 8005ff2:	b0a6      	sub	sp, #152	; 0x98
 8005ff4:	af02      	add	r7, sp, #8
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	466b      	mov	r3, sp
 8005ffa:	461d      	mov	r5, r3
	rf24_mac_addr receiver;
	rf24_urci_string_to_bytes(str, ".,:;", receiver.bytes, 6);
 8005ffc:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8006000:	2306      	movs	r3, #6
 8006002:	4943      	ldr	r1, [pc, #268]	; (8006110 <rf24_urci_transfer_test_topology+0x120>)
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 fd79 	bl	8006afc <rf24_urci_string_to_bytes>

	struct rf24_topology topology;

	struct rf24_neighbor n1;
	rf24_mac_addr adr1 = { .bytes = { 1, 2, 3, 4, 5, 6 } };
 800600a:	4a42      	ldr	r2, [pc, #264]	; (8006114 <rf24_urci_transfer_test_topology+0x124>)
 800600c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006010:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006014:	6018      	str	r0, [r3, #0]
 8006016:	3304      	adds	r3, #4
 8006018:	8019      	strh	r1, [r3, #0]
	n1.mac_addr = adr1;
 800601a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800601e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006022:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006026:	6018      	str	r0, [r3, #0]
 8006028:	3304      	adds	r3, #4
 800602a:	8019      	strh	r1, [r3, #0]

	struct rf24_neighbor n2;
	rf24_mac_addr adr2 = { .bytes = { 2, 3, 4, 5, 6, 7 } };
 800602c:	4a3a      	ldr	r2, [pc, #232]	; (8006118 <rf24_urci_transfer_test_topology+0x128>)
 800602e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006032:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006036:	6018      	str	r0, [r3, #0]
 8006038:	3304      	adds	r3, #4
 800603a:	8019      	strh	r1, [r3, #0]
	n2.mac_addr = adr2;
 800603c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006040:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8006044:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006048:	6018      	str	r0, [r3, #0]
 800604a:	3304      	adds	r3, #4
 800604c:	8019      	strh	r1, [r3, #0]

	struct rf24_neighbor n3;
	rf24_mac_addr adr3 = { .bytes = { 3, 4, 5, 6, 7, 8 } };
 800604e:	4a33      	ldr	r2, [pc, #204]	; (800611c <rf24_urci_transfer_test_topology+0x12c>)
 8006050:	f107 0308 	add.w	r3, r7, #8
 8006054:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006058:	6018      	str	r0, [r3, #0]
 800605a:	3304      	adds	r3, #4
 800605c:	8019      	strh	r1, [r3, #0]
	n3.mac_addr = adr3;
 800605e:	f107 0310 	add.w	r3, r7, #16
 8006062:	f107 0208 	add.w	r2, r7, #8
 8006066:	e892 0003 	ldmia.w	r2, {r0, r1}
 800606a:	6018      	str	r0, [r3, #0]
 800606c:	3304      	adds	r3, #4
 800606e:	8019      	strh	r1, [r3, #0]

	n1.next = &n2;
 8006070:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006074:	673b      	str	r3, [r7, #112]	; 0x70
	n2.next = &n3;
 8006076:	f107 0310 	add.w	r3, r7, #16
 800607a:	64fb      	str	r3, [r7, #76]	; 0x4c
	n3.next = NULL;
 800607c:	2300      	movs	r3, #0
 800607e:	62bb      	str	r3, [r7, #40]	; 0x28

	topology.neighbor = &n1;
 8006080:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006084:	677b      	str	r3, [r7, #116]	; 0x74
	topology.next = NULL;
 8006086:	2300      	movs	r3, #0
 8006088:	67bb      	str	r3, [r7, #120]	; 0x78

	uint8_t tx_data_length = 18;
 800608a:	2312      	movs	r3, #18
 800608c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	uint8_t tx_data[tx_data_length];
 8006090:	f897 008f 	ldrb.w	r0, [r7, #143]	; 0x8f
 8006094:	4603      	mov	r3, r0
 8006096:	3b01      	subs	r3, #1
 8006098:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800609c:	b2c1      	uxtb	r1, r0
 800609e:	f04f 0200 	mov.w	r2, #0
 80060a2:	f04f 0300 	mov.w	r3, #0
 80060a6:	f04f 0400 	mov.w	r4, #0
 80060aa:	00d4      	lsls	r4, r2, #3
 80060ac:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80060b0:	00cb      	lsls	r3, r1, #3
 80060b2:	b2c1      	uxtb	r1, r0
 80060b4:	f04f 0200 	mov.w	r2, #0
 80060b8:	f04f 0300 	mov.w	r3, #0
 80060bc:	f04f 0400 	mov.w	r4, #0
 80060c0:	00d4      	lsls	r4, r2, #3
 80060c2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80060c6:	00cb      	lsls	r3, r1, #3
 80060c8:	4603      	mov	r3, r0
 80060ca:	3307      	adds	r3, #7
 80060cc:	08db      	lsrs	r3, r3, #3
 80060ce:	00db      	lsls	r3, r3, #3
 80060d0:	ebad 0d03 	sub.w	sp, sp, r3
 80060d4:	ab02      	add	r3, sp, #8
 80060d6:	3300      	adds	r3, #0
 80060d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	rf24_network_topology_to_tx_data(&topology, tx_data, tx_data_length);
 80060dc:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80060e0:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 80060e4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80060e8:	4618      	mov	r0, r3
 80060ea:	f7fe fd9d 	bl	8004c28 <rf24_network_topology_to_tx_data>

	rf24_mac_transfer_data(UNICAST, &receiver, DATA_TOPOLOGY, tx_data, tx_data_length);
 80060ee:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80060f2:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 80060f6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80060fa:	9300      	str	r3, [sp, #0]
 80060fc:	4613      	mov	r3, r2
 80060fe:	2207      	movs	r2, #7
 8006100:	2000      	movs	r0, #0
 8006102:	f7fd fbb3 	bl	800386c <rf24_mac_transfer_data>
 8006106:	46ad      	mov	sp, r5
}
 8006108:	bf00      	nop
 800610a:	3790      	adds	r7, #144	; 0x90
 800610c:	46bd      	mov	sp, r7
 800610e:	bdb0      	pop	{r4, r5, r7, pc}
 8006110:	0800a4dc 	.word	0x0800a4dc
 8006114:	0800a500 	.word	0x0800a500
 8006118:	0800a508 	.word	0x0800a508
 800611c:	0800a510 	.word	0x0800a510

08006120 <rf24_urci_transmit_mac_frame>:

void rf24_urci_transmit_mac_frame(char* str)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b08a      	sub	sp, #40	; 0x28
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
	rf24_mac_frame mac_frame;

	rf24_urci_string_to_bytes(str, ".,:;", mac_frame.receiver.bytes, 6);
 8006128:	f107 0308 	add.w	r3, r7, #8
 800612c:	1d1a      	adds	r2, r3, #4
 800612e:	2306      	movs	r3, #6
 8006130:	4909      	ldr	r1, [pc, #36]	; (8006158 <rf24_urci_transmit_mac_frame+0x38>)
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 fce2 	bl	8006afc <rf24_urci_string_to_bytes>
	mac_frame.frame_control.type = MANAGEMENT;
 8006138:	7a3b      	ldrb	r3, [r7, #8]
 800613a:	2201      	movs	r2, #1
 800613c:	f362 0385 	bfi	r3, r2, #2, #4
 8006140:	723b      	strb	r3, [r7, #8]
	//mac_frame.frame_control.subtype = MANAGEMENT_TEST;

	rf24_mac_transfer_frame(UNICAST, &mac_frame);
 8006142:	f107 0308 	add.w	r3, r7, #8
 8006146:	4619      	mov	r1, r3
 8006148:	2000      	movs	r0, #0
 800614a:	f7fd fb3f 	bl	80037cc <rf24_mac_transfer_frame>
}
 800614e:	bf00      	nop
 8006150:	3728      	adds	r7, #40	; 0x28
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	0800a4dc 	.word	0x0800a4dc

0800615c <rf24_urci_transfer_topology>:

void rf24_urci_transfer_topology(char* str)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
	rf24_mac_addr mac_addr;
	rf24_urci_string_to_bytes(str, ".,:;", mac_addr.bytes, 6);
 8006164:	f107 0208 	add.w	r2, r7, #8
 8006168:	2306      	movs	r3, #6
 800616a:	4906      	ldr	r1, [pc, #24]	; (8006184 <rf24_urci_transfer_topology+0x28>)
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 fcc5 	bl	8006afc <rf24_urci_string_to_bytes>
	rf24_network_transfer_topology(&mac_addr);
 8006172:	f107 0308 	add.w	r3, r7, #8
 8006176:	4618      	mov	r0, r3
 8006178:	f7fe fdf2 	bl	8004d60 <rf24_network_transfer_topology>
}
 800617c:	bf00      	nop
 800617e:	3710      	adds	r7, #16
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	0800a4dc 	.word	0x0800a4dc

08006188 <rf24_urci_transmit>:

void rf24_urci_transmit(char* str)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b0c8      	sub	sp, #288	; 0x120
 800618c:	af02      	add	r7, sp, #8
 800618e:	1d3b      	adds	r3, r7, #4
 8006190:	6018      	str	r0, [r3, #0]
	rf24_mac_addr mac_addr;
	rf24_urci_string_to_bytes(str, ".,:;", mac_addr.bytes, 6);
 8006192:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8006196:	1d38      	adds	r0, r7, #4
 8006198:	2306      	movs	r3, #6
 800619a:	4915      	ldr	r1, [pc, #84]	; (80061f0 <rf24_urci_transmit+0x68>)
 800619c:	6800      	ldr	r0, [r0, #0]
 800619e:	f000 fcad 	bl	8006afc <rf24_urci_string_to_bytes>

	uint8_t payload[255];
	for(int i=0; i < 255; i++) payload[i] = i;
 80061a2:	2300      	movs	r3, #0
 80061a4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80061a8:	e00e      	b.n	80061c8 <rf24_urci_transmit+0x40>
 80061aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061ae:	b2d9      	uxtb	r1, r3
 80061b0:	f107 020c 	add.w	r2, r7, #12
 80061b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061b8:	4413      	add	r3, r2
 80061ba:	460a      	mov	r2, r1
 80061bc:	701a      	strb	r2, [r3, #0]
 80061be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061c2:	3301      	adds	r3, #1
 80061c4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80061c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061cc:	2bfe      	cmp	r3, #254	; 0xfe
 80061ce:	ddec      	ble.n	80061aa <rf24_urci_transmit+0x22>
	rf24_mac_transfer_data(UNICAST, &mac_addr, DATA_DATA, payload, 255);
 80061d0:	f107 020c 	add.w	r2, r7, #12
 80061d4:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 80061d8:	23ff      	movs	r3, #255	; 0xff
 80061da:	9300      	str	r3, [sp, #0]
 80061dc:	4613      	mov	r3, r2
 80061de:	2206      	movs	r2, #6
 80061e0:	2000      	movs	r0, #0
 80061e2:	f7fd fb43 	bl	800386c <rf24_mac_transfer_data>
}
 80061e6:	bf00      	nop
 80061e8:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	0800a4dc 	.word	0x0800a4dc

080061f4 <rf24_urci_set_datarate>:

void rf24_urci_set_datarate(char* str){
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
	if(strcmp(str, "250KBPS") == 0) rf24_module_set_datarate(rf24_module_datarate_250kbps);
 80061fc:	4910      	ldr	r1, [pc, #64]	; (8006240 <rf24_urci_set_datarate+0x4c>)
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f7f9 ffa4 	bl	800014c <strcmp>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d102      	bne.n	8006210 <rf24_urci_set_datarate+0x1c>
 800620a:	2002      	movs	r0, #2
 800620c:	f7fb fd56 	bl	8001cbc <rf24_module_set_datarate>
	if(strcmp(str, "1MBPS") == 0) rf24_module_set_datarate(rf24_module_datarate_1Mbps);
 8006210:	490c      	ldr	r1, [pc, #48]	; (8006244 <rf24_urci_set_datarate+0x50>)
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f7f9 ff9a 	bl	800014c <strcmp>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d102      	bne.n	8006224 <rf24_urci_set_datarate+0x30>
 800621e:	2000      	movs	r0, #0
 8006220:	f7fb fd4c 	bl	8001cbc <rf24_module_set_datarate>
	if(strcmp(str, "2MBPS") == 0) rf24_module_set_datarate(rf24_module_datarate_2Mbps);
 8006224:	4908      	ldr	r1, [pc, #32]	; (8006248 <rf24_urci_set_datarate+0x54>)
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f7f9 ff90 	bl	800014c <strcmp>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d102      	bne.n	8006238 <rf24_urci_set_datarate+0x44>
 8006232:	2001      	movs	r0, #1
 8006234:	f7fb fd42 	bl	8001cbc <rf24_module_set_datarate>
}
 8006238:	bf00      	nop
 800623a:	3708      	adds	r7, #8
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	0800a518 	.word	0x0800a518
 8006244:	0800a520 	.word	0x0800a520
 8006248:	0800a528 	.word	0x0800a528

0800624c <rf24_urci_get_datarate>:

char* rf24_urci_get_datarate(){
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0

	rf24_module_datarate datarate = rf24_module_get_datarate();
 8006252:	f7fb fd6d 	bl	8001d30 <rf24_module_get_datarate>
 8006256:	4603      	mov	r3, r0
 8006258:	71fb      	strb	r3, [r7, #7]
	char* str = "";
 800625a:	4b0d      	ldr	r3, [pc, #52]	; (8006290 <rf24_urci_get_datarate+0x44>)
 800625c:	603b      	str	r3, [r7, #0]

	switch(datarate)
 800625e:	79fb      	ldrb	r3, [r7, #7]
 8006260:	2b01      	cmp	r3, #1
 8006262:	d00c      	beq.n	800627e <rf24_urci_get_datarate+0x32>
 8006264:	2b02      	cmp	r3, #2
 8006266:	d002      	beq.n	800626e <rf24_urci_get_datarate+0x22>
 8006268:	2b00      	cmp	r3, #0
 800626a:	d004      	beq.n	8006276 <rf24_urci_get_datarate+0x2a>
 800626c:	e00b      	b.n	8006286 <rf24_urci_get_datarate+0x3a>
	{
		case rf24_module_datarate_250kbps:
			str = "250KBPS";
 800626e:	4b09      	ldr	r3, [pc, #36]	; (8006294 <rf24_urci_get_datarate+0x48>)
 8006270:	603b      	str	r3, [r7, #0]
			return str;
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	e008      	b.n	8006288 <rf24_urci_get_datarate+0x3c>
		case rf24_module_datarate_1Mbps:
			str = "1MBPS";
 8006276:	4b08      	ldr	r3, [pc, #32]	; (8006298 <rf24_urci_get_datarate+0x4c>)
 8006278:	603b      	str	r3, [r7, #0]
			return str;
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	e004      	b.n	8006288 <rf24_urci_get_datarate+0x3c>
		case rf24_module_datarate_2Mbps:
			str = "2MBPS";
 800627e:	4b07      	ldr	r3, [pc, #28]	; (800629c <rf24_urci_get_datarate+0x50>)
 8006280:	603b      	str	r3, [r7, #0]
			return str;
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	e000      	b.n	8006288 <rf24_urci_get_datarate+0x3c>
	}

	return str;
 8006286:	683b      	ldr	r3, [r7, #0]
}
 8006288:	4618      	mov	r0, r3
 800628a:	3708      	adds	r7, #8
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	08009e54 	.word	0x08009e54
 8006294:	0800a518 	.word	0x0800a518
 8006298:	0800a520 	.word	0x0800a520
 800629c:	0800a528 	.word	0x0800a528

080062a0 <rf24_urci_print_help>:
	rf24_set_autoretransmit_delay(rf24_autoretransmit_delay_750us);
	rf24_set_autoretransmit_count(rf24_autoretransmit_count_15);*/
}

void rf24_urci_print_help(void)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
	for(int i=0; i < sizeof(urci_cmds)/sizeof(urci_cmds[0]); i++)
 80062a6:	2300      	movs	r3, #0
 80062a8:	607b      	str	r3, [r7, #4]
 80062aa:	e048      	b.n	800633e <rf24_urci_print_help+0x9e>
	{
		if(urci_cmds[i].description){
 80062ac:	4927      	ldr	r1, [pc, #156]	; (800634c <rf24_urci_print_help+0xac>)
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	4613      	mov	r3, r2
 80062b2:	00db      	lsls	r3, r3, #3
 80062b4:	4413      	add	r3, r2
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	440b      	add	r3, r1
 80062ba:	3304      	adds	r3, #4
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d018      	beq.n	80062f4 <rf24_urci_print_help+0x54>
			sprintf(urci_buffer_128, "%-25s %s",  urci_cmds[i].name, urci_cmds[i].description);
 80062c2:	4922      	ldr	r1, [pc, #136]	; (800634c <rf24_urci_print_help+0xac>)
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	4613      	mov	r3, r2
 80062c8:	00db      	lsls	r3, r3, #3
 80062ca:	4413      	add	r3, r2
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	440b      	add	r3, r1
 80062d0:	6818      	ldr	r0, [r3, #0]
 80062d2:	491e      	ldr	r1, [pc, #120]	; (800634c <rf24_urci_print_help+0xac>)
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	4613      	mov	r3, r2
 80062d8:	00db      	lsls	r3, r3, #3
 80062da:	4413      	add	r3, r2
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	440b      	add	r3, r1
 80062e0:	3304      	adds	r3, #4
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4602      	mov	r2, r0
 80062e6:	491a      	ldr	r1, [pc, #104]	; (8006350 <rf24_urci_print_help+0xb0>)
 80062e8:	481a      	ldr	r0, [pc, #104]	; (8006354 <rf24_urci_print_help+0xb4>)
 80062ea:	f000 fe1b 	bl	8006f24 <siprintf>
			rf24_stm32f1xx_usart_write_line(urci_buffer_128);
 80062ee:	4819      	ldr	r0, [pc, #100]	; (8006354 <rf24_urci_print_help+0xb4>)
 80062f0:	f7ff fd61 	bl	8005db6 <rf24_stm32f1xx_usart_write_line>
		}

		if(urci_cmds[i].details){
 80062f4:	4915      	ldr	r1, [pc, #84]	; (800634c <rf24_urci_print_help+0xac>)
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	4613      	mov	r3, r2
 80062fa:	00db      	lsls	r3, r3, #3
 80062fc:	4413      	add	r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	440b      	add	r3, r1
 8006302:	3308      	adds	r3, #8
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d013      	beq.n	8006332 <rf24_urci_print_help+0x92>
			urci_buffer_128[0] = '\0';
 800630a:	4b12      	ldr	r3, [pc, #72]	; (8006354 <rf24_urci_print_help+0xb4>)
 800630c:	2200      	movs	r2, #0
 800630e:	701a      	strb	r2, [r3, #0]
			sprintf(urci_buffer_128, "%-25s %s", "", urci_cmds[i].details);
 8006310:	490e      	ldr	r1, [pc, #56]	; (800634c <rf24_urci_print_help+0xac>)
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	4613      	mov	r3, r2
 8006316:	00db      	lsls	r3, r3, #3
 8006318:	4413      	add	r3, r2
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	440b      	add	r3, r1
 800631e:	3308      	adds	r3, #8
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a0d      	ldr	r2, [pc, #52]	; (8006358 <rf24_urci_print_help+0xb8>)
 8006324:	490a      	ldr	r1, [pc, #40]	; (8006350 <rf24_urci_print_help+0xb0>)
 8006326:	480b      	ldr	r0, [pc, #44]	; (8006354 <rf24_urci_print_help+0xb4>)
 8006328:	f000 fdfc 	bl	8006f24 <siprintf>
			rf24_stm32f1xx_usart_write_line(urci_buffer_128);
 800632c:	4809      	ldr	r0, [pc, #36]	; (8006354 <rf24_urci_print_help+0xb4>)
 800632e:	f7ff fd42 	bl	8005db6 <rf24_stm32f1xx_usart_write_line>
		}

		rf24_stm32f1xx_usart_write_line("");
 8006332:	4809      	ldr	r0, [pc, #36]	; (8006358 <rf24_urci_print_help+0xb8>)
 8006334:	f7ff fd3f 	bl	8005db6 <rf24_stm32f1xx_usart_write_line>
	for(int i=0; i < sizeof(urci_cmds)/sizeof(urci_cmds[0]); i++)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	3301      	adds	r3, #1
 800633c:	607b      	str	r3, [r7, #4]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2b22      	cmp	r3, #34	; 0x22
 8006342:	d9b3      	bls.n	80062ac <rf24_urci_print_help+0xc>
	}
}
 8006344:	bf00      	nop
 8006346:	3708      	adds	r7, #8
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}
 800634c:	0800a59c 	.word	0x0800a59c
 8006350:	0800a530 	.word	0x0800a530
 8006354:	200008a0 	.word	0x200008a0
 8006358:	08009e54 	.word	0x08009e54

0800635c <rf24_urci_help>:

void rf24_urci_help(char *str)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
	for(int i=0; i < sizeof(urci_cmds)/sizeof(urci_cmds[0]); i++)
 8006364:	2300      	movs	r3, #0
 8006366:	60fb      	str	r3, [r7, #12]
 8006368:	e02a      	b.n	80063c0 <rf24_urci_help+0x64>
	{
		if(strcmp(urci_cmds[i].name, str) == 0)
 800636a:	4919      	ldr	r1, [pc, #100]	; (80063d0 <rf24_urci_help+0x74>)
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	4613      	mov	r3, r2
 8006370:	00db      	lsls	r3, r3, #3
 8006372:	4413      	add	r3, r2
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	440b      	add	r3, r1
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	6879      	ldr	r1, [r7, #4]
 800637c:	4618      	mov	r0, r3
 800637e:	f7f9 fee5 	bl	800014c <strcmp>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d118      	bne.n	80063ba <rf24_urci_help+0x5e>
		{
			sprintf(urci_buffer_128, "%-25s %s",  urci_cmds[i].name, urci_cmds[i].description);
 8006388:	4911      	ldr	r1, [pc, #68]	; (80063d0 <rf24_urci_help+0x74>)
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	4613      	mov	r3, r2
 800638e:	00db      	lsls	r3, r3, #3
 8006390:	4413      	add	r3, r2
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	440b      	add	r3, r1
 8006396:	6818      	ldr	r0, [r3, #0]
 8006398:	490d      	ldr	r1, [pc, #52]	; (80063d0 <rf24_urci_help+0x74>)
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	4613      	mov	r3, r2
 800639e:	00db      	lsls	r3, r3, #3
 80063a0:	4413      	add	r3, r2
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	440b      	add	r3, r1
 80063a6:	3304      	adds	r3, #4
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4602      	mov	r2, r0
 80063ac:	4909      	ldr	r1, [pc, #36]	; (80063d4 <rf24_urci_help+0x78>)
 80063ae:	480a      	ldr	r0, [pc, #40]	; (80063d8 <rf24_urci_help+0x7c>)
 80063b0:	f000 fdb8 	bl	8006f24 <siprintf>
			rf24_stm32f1xx_usart_write_line(urci_buffer_128);
 80063b4:	4808      	ldr	r0, [pc, #32]	; (80063d8 <rf24_urci_help+0x7c>)
 80063b6:	f7ff fcfe 	bl	8005db6 <rf24_stm32f1xx_usart_write_line>
	for(int i=0; i < sizeof(urci_cmds)/sizeof(urci_cmds[0]); i++)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	3301      	adds	r3, #1
 80063be:	60fb      	str	r3, [r7, #12]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2b22      	cmp	r3, #34	; 0x22
 80063c4:	d9d1      	bls.n	800636a <rf24_urci_help+0xe>
		}
	}
}
 80063c6:	bf00      	nop
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	0800a59c 	.word	0x0800a59c
 80063d4:	0800a530 	.word	0x0800a530
 80063d8:	200008a0 	.word	0x200008a0

080063dc <rf24_urci_set_crc_length>:
	uint8_t config = rf24_module_read_register(CONFIG);
	rf24_stm32f1xx_usart_write_line(decimal_to_binary(config));
}

void rf24_urci_set_crc_length(uint8_t crc_length)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	4603      	mov	r3, r0
 80063e4:	71fb      	strb	r3, [r7, #7]
	switch(crc_length){
 80063e6:	79fb      	ldrb	r3, [r7, #7]
 80063e8:	2b08      	cmp	r3, #8
 80063ea:	d007      	beq.n	80063fc <rf24_urci_set_crc_length+0x20>
 80063ec:	2b10      	cmp	r3, #16
 80063ee:	d009      	beq.n	8006404 <rf24_urci_set_crc_length+0x28>
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d000      	beq.n	80063f6 <rf24_urci_set_crc_length+0x1a>
		case 0: rf24_module_disable_crc(); break;
		case 8: rf24_module_set_crc_length(rf24_module_crc_length_1byte); break;
		case 16: rf24_module_set_crc_length(rf24_module_crc_length_2bytes); break;
		default:break;
 80063f4:	e00a      	b.n	800640c <rf24_urci_set_crc_length+0x30>
		case 0: rf24_module_disable_crc(); break;
 80063f6:	f7fb fb09 	bl	8001a0c <rf24_module_disable_crc>
 80063fa:	e007      	b.n	800640c <rf24_urci_set_crc_length+0x30>
		case 8: rf24_module_set_crc_length(rf24_module_crc_length_1byte); break;
 80063fc:	2000      	movs	r0, #0
 80063fe:	f7fb fb25 	bl	8001a4c <rf24_module_set_crc_length>
 8006402:	e003      	b.n	800640c <rf24_urci_set_crc_length+0x30>
		case 16: rf24_module_set_crc_length(rf24_module_crc_length_2bytes); break;
 8006404:	2001      	movs	r0, #1
 8006406:	f7fb fb21 	bl	8001a4c <rf24_module_set_crc_length>
 800640a:	bf00      	nop
	}
}
 800640c:	bf00      	nop
 800640e:	3708      	adds	r7, #8
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <rf24_urci_get_crc_length>:

uint8_t rf24_urci_get_crc_length()
{
 8006414:	b580      	push	{r7, lr}
 8006416:	af00      	add	r7, sp, #0
	if(rf24_module_crc_enabled())
 8006418:	f7fb fb08 	bl	8001a2c <rf24_module_crc_enabled>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d007      	beq.n	8006432 <rf24_urci_get_crc_length+0x1e>
	{
		return ( rf24_module_get_crc_length() + 1) * 8;
 8006422:	f7fb fb2f 	bl	8001a84 <rf24_module_get_crc_length>
 8006426:	4603      	mov	r3, r0
 8006428:	3301      	adds	r3, #1
 800642a:	b2db      	uxtb	r3, r3
 800642c:	00db      	lsls	r3, r3, #3
 800642e:	b2db      	uxtb	r3, r3
 8006430:	e000      	b.n	8006434 <rf24_urci_get_crc_length+0x20>
	}
	else return 0;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	bd80      	pop	{r7, pc}

08006438 <rf24_urci_set_tx_address>:

void rf24_urci_set_tx_address(char *str)
{
 8006438:	b5b0      	push	{r4, r5, r7, lr}
 800643a:	b086      	sub	sp, #24
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	466b      	mov	r3, sp
 8006442:	461d      	mov	r5, r3
	// read configured address width from chip
	uint8_t address_width = rf24_module_get_address_width();
 8006444:	f7fb fb90 	bl	8001b68 <rf24_module_get_address_width>
 8006448:	4603      	mov	r3, r0
 800644a:	75fb      	strb	r3, [r7, #23]

	// array to hold converted string address into byte array
	uint8_t address[address_width];
 800644c:	7df8      	ldrb	r0, [r7, #23]
 800644e:	4603      	mov	r3, r0
 8006450:	3b01      	subs	r3, #1
 8006452:	613b      	str	r3, [r7, #16]
 8006454:	b2c1      	uxtb	r1, r0
 8006456:	f04f 0200 	mov.w	r2, #0
 800645a:	f04f 0300 	mov.w	r3, #0
 800645e:	f04f 0400 	mov.w	r4, #0
 8006462:	00d4      	lsls	r4, r2, #3
 8006464:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8006468:	00cb      	lsls	r3, r1, #3
 800646a:	b2c1      	uxtb	r1, r0
 800646c:	f04f 0200 	mov.w	r2, #0
 8006470:	f04f 0300 	mov.w	r3, #0
 8006474:	f04f 0400 	mov.w	r4, #0
 8006478:	00d4      	lsls	r4, r2, #3
 800647a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800647e:	00cb      	lsls	r3, r1, #3
 8006480:	4603      	mov	r3, r0
 8006482:	3307      	adds	r3, #7
 8006484:	08db      	lsrs	r3, r3, #3
 8006486:	00db      	lsls	r3, r3, #3
 8006488:	ebad 0d03 	sub.w	sp, sp, r3
 800648c:	466b      	mov	r3, sp
 800648e:	3300      	adds	r3, #0
 8006490:	60fb      	str	r3, [r7, #12]

	// convert string address into byte address
	rf24_urci_string_to_bytes(str, ".,:;", address, address_width);
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	7dfb      	ldrb	r3, [r7, #23]
 8006496:	4907      	ldr	r1, [pc, #28]	; (80064b4 <rf24_urci_set_tx_address+0x7c>)
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 fb2f 	bl	8006afc <rf24_urci_string_to_bytes>

	// set tx address
	rf24_module_set_tx_address(address, address_width);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	7dfa      	ldrb	r2, [r7, #23]
 80064a2:	4611      	mov	r1, r2
 80064a4:	4618      	mov	r0, r3
 80064a6:	f7fb fcd7 	bl	8001e58 <rf24_module_set_tx_address>
 80064aa:	46ad      	mov	sp, r5
}
 80064ac:	bf00      	nop
 80064ae:	3718      	adds	r7, #24
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bdb0      	pop	{r4, r5, r7, pc}
 80064b4:	0800a4dc 	.word	0x0800a4dc

080064b8 <rf24_urci_get_tx_address>:

char* rf24_urci_get_tx_address(void)
{
 80064b8:	b5b0      	push	{r4, r5, r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	466b      	mov	r3, sp
 80064c0:	461d      	mov	r5, r3
	// read configured address width from chip
	uint8_t address_width = rf24_module_get_address_width();
 80064c2:	f7fb fb51 	bl	8001b68 <rf24_module_get_address_width>
 80064c6:	4603      	mov	r3, r0
 80064c8:	73fb      	strb	r3, [r7, #15]

	// array to hold converted string address into byte array
	uint8_t address[address_width];
 80064ca:	7bf8      	ldrb	r0, [r7, #15]
 80064cc:	4603      	mov	r3, r0
 80064ce:	3b01      	subs	r3, #1
 80064d0:	60bb      	str	r3, [r7, #8]
 80064d2:	b2c1      	uxtb	r1, r0
 80064d4:	f04f 0200 	mov.w	r2, #0
 80064d8:	f04f 0300 	mov.w	r3, #0
 80064dc:	f04f 0400 	mov.w	r4, #0
 80064e0:	00d4      	lsls	r4, r2, #3
 80064e2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80064e6:	00cb      	lsls	r3, r1, #3
 80064e8:	b2c1      	uxtb	r1, r0
 80064ea:	f04f 0200 	mov.w	r2, #0
 80064ee:	f04f 0300 	mov.w	r3, #0
 80064f2:	f04f 0400 	mov.w	r4, #0
 80064f6:	00d4      	lsls	r4, r2, #3
 80064f8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80064fc:	00cb      	lsls	r3, r1, #3
 80064fe:	4603      	mov	r3, r0
 8006500:	3307      	adds	r3, #7
 8006502:	08db      	lsrs	r3, r3, #3
 8006504:	00db      	lsls	r3, r3, #3
 8006506:	ebad 0d03 	sub.w	sp, sp, r3
 800650a:	466b      	mov	r3, sp
 800650c:	3300      	adds	r3, #0
 800650e:	607b      	str	r3, [r7, #4]

	// read tx address from chip
	rf24_module_get_tx_address(address);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4618      	mov	r0, r3
 8006514:	f7fb fcba 	bl	8001e8c <rf24_module_get_tx_address>

	// convert byte array into string and store it in urci_buffer_32
	rf24_urci_bytes_to_string(address, address_width, ':', urci_buffer_32);
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	7bf9      	ldrb	r1, [r7, #15]
 800651c:	4b04      	ldr	r3, [pc, #16]	; (8006530 <rf24_urci_get_tx_address+0x78>)
 800651e:	223a      	movs	r2, #58	; 0x3a
 8006520:	f000 fb14 	bl	8006b4c <rf24_urci_bytes_to_string>

	// return pointer to urci_buffer_32
	return urci_buffer_32;
 8006524:	4b02      	ldr	r3, [pc, #8]	; (8006530 <rf24_urci_get_tx_address+0x78>)
 8006526:	46ad      	mov	sp, r5
}
 8006528:	4618      	mov	r0, r3
 800652a:	3710      	adds	r7, #16
 800652c:	46bd      	mov	sp, r7
 800652e:	bdb0      	pop	{r4, r5, r7, pc}
 8006530:	20000880 	.word	0x20000880

08006534 <rf24_urci_get_attribute_value>:

void rf24_urci_get_attribute_value(char* attribute_identifier, char* attribute_value){
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]

	int i = 0, k = 0;
 800653e:	2300      	movs	r3, #0
 8006540:	60fb      	str	r3, [r7, #12]
 8006542:	2300      	movs	r3, #0
 8006544:	60bb      	str	r3, [r7, #8]

	while(urci_buffer_32[attribute_pos + i] != '\0' && ((attribute_pos+i) < sizeof(urci_buffer_32)))
 8006546:	e021      	b.n	800658c <rf24_urci_get_attribute_value+0x58>
	{
		//usart_write_byte(urci_buffer_32[attribute_pos+i]);

		if(i <= sizeof(attribute_identifier))
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2b04      	cmp	r3, #4
 800654c:	d80d      	bhi.n	800656a <rf24_urci_get_attribute_value+0x36>
		{
			if(urci_buffer_32[attribute_pos + i] != attribute_identifier[i])
 800654e:	4b1c      	ldr	r3, [pc, #112]	; (80065c0 <rf24_urci_get_attribute_value+0x8c>)
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	461a      	mov	r2, r3
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	4413      	add	r3, r2
 8006558:	4a1a      	ldr	r2, [pc, #104]	; (80065c4 <rf24_urci_get_attribute_value+0x90>)
 800655a:	5cd2      	ldrb	r2, [r2, r3]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6879      	ldr	r1, [r7, #4]
 8006560:	440b      	add	r3, r1
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	429a      	cmp	r2, r3
 8006566:	d00e      	beq.n	8006586 <rf24_urci_get_attribute_value+0x52>
			{
				//fuck: no attribute_identifier in input string found
				return;
 8006568:	e025      	b.n	80065b6 <rf24_urci_get_attribute_value+0x82>
			}
		}
		else
		{
			attribute_value[k++] = urci_buffer_32[attribute_pos + i];
 800656a:	4b15      	ldr	r3, [pc, #84]	; (80065c0 <rf24_urci_get_attribute_value+0x8c>)
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	461a      	mov	r2, r3
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	441a      	add	r2, r3
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	1c59      	adds	r1, r3, #1
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	4619      	mov	r1, r3
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	440b      	add	r3, r1
 8006580:	4910      	ldr	r1, [pc, #64]	; (80065c4 <rf24_urci_get_attribute_value+0x90>)
 8006582:	5c8a      	ldrb	r2, [r1, r2]
 8006584:	701a      	strb	r2, [r3, #0]
		}

		i++;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	3301      	adds	r3, #1
 800658a:	60fb      	str	r3, [r7, #12]
	while(urci_buffer_32[attribute_pos + i] != '\0' && ((attribute_pos+i) < sizeof(urci_buffer_32)))
 800658c:	4b0c      	ldr	r3, [pc, #48]	; (80065c0 <rf24_urci_get_attribute_value+0x8c>)
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	461a      	mov	r2, r3
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	4413      	add	r3, r2
 8006596:	4a0b      	ldr	r2, [pc, #44]	; (80065c4 <rf24_urci_get_attribute_value+0x90>)
 8006598:	5cd3      	ldrb	r3, [r2, r3]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d006      	beq.n	80065ac <rf24_urci_get_attribute_value+0x78>
 800659e:	4b08      	ldr	r3, [pc, #32]	; (80065c0 <rf24_urci_get_attribute_value+0x8c>)
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	461a      	mov	r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	4413      	add	r3, r2
 80065a8:	2b1f      	cmp	r3, #31
 80065aa:	d9cd      	bls.n	8006548 <rf24_urci_get_attribute_value+0x14>
	}

	attribute_value[k] = '\0';
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	683a      	ldr	r2, [r7, #0]
 80065b0:	4413      	add	r3, r2
 80065b2:	2200      	movs	r2, #0
 80065b4:	701a      	strb	r2, [r3, #0]
}
 80065b6:	3714      	adds	r7, #20
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bc80      	pop	{r7}
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop
 80065c0:	200006c2 	.word	0x200006c2
 80065c4:	20000880 	.word	0x20000880

080065c8 <rf24_urci_set_rx_address>:


void rf24_urci_set_rx_address(char *str)
{
 80065c8:	b5b0      	push	{r4, r5, r7, lr}
 80065ca:	b088      	sub	sp, #32
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
	// read pipe number from input string
	char attribute_value[5];
	rf24_urci_get_attribute_value(".pipe", attribute_value);
 80065d0:	f107 030c 	add.w	r3, r7, #12
 80065d4:	4619      	mov	r1, r3
 80065d6:	4834      	ldr	r0, [pc, #208]	; (80066a8 <rf24_urci_set_rx_address+0xe0>)
 80065d8:	f7ff ffac 	bl	8006534 <rf24_urci_get_attribute_value>
	uint8_t rx_pipe = atoi(attribute_value);
 80065dc:	f107 030c 	add.w	r3, r7, #12
 80065e0:	4618      	mov	r0, r3
 80065e2:	f000 fb1c 	bl	8006c1e <atoi>
 80065e6:	4603      	mov	r3, r0
 80065e8:	77fb      	strb	r3, [r7, #31]

	switch(rx_pipe)
 80065ea:	7ffb      	ldrb	r3, [r7, #31]
 80065ec:	2b05      	cmp	r3, #5
 80065ee:	d857      	bhi.n	80066a0 <rf24_urci_set_rx_address+0xd8>
 80065f0:	a201      	add	r2, pc, #4	; (adr r2, 80065f8 <rf24_urci_set_rx_address+0x30>)
 80065f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f6:	bf00      	nop
 80065f8:	08006611 	.word	0x08006611
 80065fc:	08006611 	.word	0x08006611
 8006600:	08006685 	.word	0x08006685
 8006604:	08006685 	.word	0x08006685
 8006608:	08006685 	.word	0x08006685
 800660c:	08006685 	.word	0x08006685
	{
		// rx address pipe 0 and pipe 1 are 5 byte registers
		case 0: case 1:
		{
 8006610:	466b      	mov	r3, sp
 8006612:	461d      	mov	r5, r3
			// read configured address width from chip
			uint8_t address_width = rf24_module_get_address_width();
 8006614:	f7fb faa8 	bl	8001b68 <rf24_module_get_address_width>
 8006618:	4603      	mov	r3, r0
 800661a:	777b      	strb	r3, [r7, #29]

			// array to hold converted string address into byte array
			uint8_t address[address_width];
 800661c:	7f78      	ldrb	r0, [r7, #29]
 800661e:	4603      	mov	r3, r0
 8006620:	3b01      	subs	r3, #1
 8006622:	61bb      	str	r3, [r7, #24]
 8006624:	b2c1      	uxtb	r1, r0
 8006626:	f04f 0200 	mov.w	r2, #0
 800662a:	f04f 0300 	mov.w	r3, #0
 800662e:	f04f 0400 	mov.w	r4, #0
 8006632:	00d4      	lsls	r4, r2, #3
 8006634:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8006638:	00cb      	lsls	r3, r1, #3
 800663a:	b2c1      	uxtb	r1, r0
 800663c:	f04f 0200 	mov.w	r2, #0
 8006640:	f04f 0300 	mov.w	r3, #0
 8006644:	f04f 0400 	mov.w	r4, #0
 8006648:	00d4      	lsls	r4, r2, #3
 800664a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800664e:	00cb      	lsls	r3, r1, #3
 8006650:	4603      	mov	r3, r0
 8006652:	3307      	adds	r3, #7
 8006654:	08db      	lsrs	r3, r3, #3
 8006656:	00db      	lsls	r3, r3, #3
 8006658:	ebad 0d03 	sub.w	sp, sp, r3
 800665c:	466b      	mov	r3, sp
 800665e:	3300      	adds	r3, #0
 8006660:	617b      	str	r3, [r7, #20]

			// convert string address into byte address
			rf24_urci_string_to_bytes(str, ".,:;", address, address_width);
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	7f7b      	ldrb	r3, [r7, #29]
 8006666:	4911      	ldr	r1, [pc, #68]	; (80066ac <rf24_urci_set_rx_address+0xe4>)
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 fa47 	bl	8006afc <rf24_urci_string_to_bytes>

			// write address
			rf24_module_readwrite_register(write, RX_ADDR_P0 + rx_pipe, address, address_width);
 800666e:	7ffb      	ldrb	r3, [r7, #31]
 8006670:	330a      	adds	r3, #10
 8006672:	b2d9      	uxtb	r1, r3
 8006674:	697a      	ldr	r2, [r7, #20]
 8006676:	7f7b      	ldrb	r3, [r7, #29]
 8006678:	2001      	movs	r0, #1
 800667a:	f7fb f812 	bl	80016a2 <rf24_module_readwrite_register>
			return;
 800667e:	bf00      	nop
 8006680:	46ad      	mov	sp, r5
 8006682:	e00d      	b.n	80066a0 <rf24_urci_set_rx_address+0xd8>
		}

		// rx address pipe 2 - 5 are 8 bit registers
		case 2: case 3: case 4: case 5:
		{
			uint8_t address = atoi(str);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 faca 	bl	8006c1e <atoi>
 800668a:	4603      	mov	r3, r0
 800668c:	77bb      	strb	r3, [r7, #30]
			rf24_module_write_register(RX_ADDR_P0 + rx_pipe, address);
 800668e:	7ffb      	ldrb	r3, [r7, #31]
 8006690:	330a      	adds	r3, #10
 8006692:	b2db      	uxtb	r3, r3
 8006694:	7fba      	ldrb	r2, [r7, #30]
 8006696:	4611      	mov	r1, r2
 8006698:	4618      	mov	r0, r3
 800669a:	f7fa ffe1 	bl	8001660 <rf24_module_write_register>
			return;
 800669e:	bf00      	nop
		}
	}
}
 80066a0:	3720      	adds	r7, #32
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bdb0      	pop	{r4, r5, r7, pc}
 80066a6:	bf00      	nop
 80066a8:	0800a53c 	.word	0x0800a53c
 80066ac:	0800a4dc 	.word	0x0800a4dc

080066b0 <rf24_urci_get_rx_address>:

char* rf24_urci_get_rx_address()
{
 80066b0:	b5b0      	push	{r4, r5, r7, lr}
 80066b2:	b086      	sub	sp, #24
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	466b      	mov	r3, sp
 80066b8:	461d      	mov	r5, r3
	// read pipe number from input string
	char attribute_value[5];
	rf24_urci_get_attribute_value(".pipe", attribute_value);
 80066ba:	1d3b      	adds	r3, r7, #4
 80066bc:	4619      	mov	r1, r3
 80066be:	4836      	ldr	r0, [pc, #216]	; (8006798 <rf24_urci_get_rx_address+0xe8>)
 80066c0:	f7ff ff38 	bl	8006534 <rf24_urci_get_attribute_value>
	uint8_t rx_pipe = atoi(attribute_value);
 80066c4:	1d3b      	adds	r3, r7, #4
 80066c6:	4618      	mov	r0, r3
 80066c8:	f000 faa9 	bl	8006c1e <atoi>
 80066cc:	4603      	mov	r3, r0
 80066ce:	75fb      	strb	r3, [r7, #23]

	// get current address width from chip
	uint8_t address_width = rf24_module_get_address_width();
 80066d0:	f7fb fa4a 	bl	8001b68 <rf24_module_get_address_width>
 80066d4:	4603      	mov	r3, r0
 80066d6:	75bb      	strb	r3, [r7, #22]

	// create an array to hold rx address
	uint8_t address[address_width];
 80066d8:	7db8      	ldrb	r0, [r7, #22]
 80066da:	4603      	mov	r3, r0
 80066dc:	3b01      	subs	r3, #1
 80066de:	613b      	str	r3, [r7, #16]
 80066e0:	b2c1      	uxtb	r1, r0
 80066e2:	f04f 0200 	mov.w	r2, #0
 80066e6:	f04f 0300 	mov.w	r3, #0
 80066ea:	f04f 0400 	mov.w	r4, #0
 80066ee:	00d4      	lsls	r4, r2, #3
 80066f0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80066f4:	00cb      	lsls	r3, r1, #3
 80066f6:	b2c1      	uxtb	r1, r0
 80066f8:	f04f 0200 	mov.w	r2, #0
 80066fc:	f04f 0300 	mov.w	r3, #0
 8006700:	f04f 0400 	mov.w	r4, #0
 8006704:	00d4      	lsls	r4, r2, #3
 8006706:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800670a:	00cb      	lsls	r3, r1, #3
 800670c:	4603      	mov	r3, r0
 800670e:	3307      	adds	r3, #7
 8006710:	08db      	lsrs	r3, r3, #3
 8006712:	00db      	lsls	r3, r3, #3
 8006714:	ebad 0d03 	sub.w	sp, sp, r3
 8006718:	466b      	mov	r3, sp
 800671a:	3300      	adds	r3, #0
 800671c:	60fb      	str	r3, [r7, #12]

	switch(rx_pipe)
 800671e:	7dfb      	ldrb	r3, [r7, #23]
 8006720:	2b05      	cmp	r3, #5
 8006722:	d82b      	bhi.n	800677c <rf24_urci_get_rx_address+0xcc>
 8006724:	a201      	add	r2, pc, #4	; (adr r2, 800672c <rf24_urci_get_rx_address+0x7c>)
 8006726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800672a:	bf00      	nop
 800672c:	08006745 	.word	0x08006745
 8006730:	08006745 	.word	0x08006745
 8006734:	08006757 	.word	0x08006757
 8006738:	08006757 	.word	0x08006757
 800673c:	08006757 	.word	0x08006757
 8006740:	08006757 	.word	0x08006757
	{
		case 0: case 1:
		{
			rf24_module_readwrite_register(read, RX_ADDR_P0 + rx_pipe, address, address_width);
 8006744:	7dfb      	ldrb	r3, [r7, #23]
 8006746:	330a      	adds	r3, #10
 8006748:	b2d9      	uxtb	r1, r3
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	7dbb      	ldrb	r3, [r7, #22]
 800674e:	2000      	movs	r0, #0
 8006750:	f7fa ffa7 	bl	80016a2 <rf24_module_readwrite_register>
			break;
 8006754:	e012      	b.n	800677c <rf24_urci_get_rx_address+0xcc>
		}
		case 2: case 3: case 4: case 5:
		{
			rf24_module_readwrite_register(read, RX_ADDR_P1, address, address_width);
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	7dbb      	ldrb	r3, [r7, #22]
 800675a:	210b      	movs	r1, #11
 800675c:	2000      	movs	r0, #0
 800675e:	f7fa ffa0 	bl	80016a2 <rf24_module_readwrite_register>
			address[address_width-1] = rf24_module_read_register(RX_ADDR_P0 + rx_pipe);
 8006762:	7dfb      	ldrb	r3, [r7, #23]
 8006764:	330a      	adds	r3, #10
 8006766:	b2da      	uxtb	r2, r3
 8006768:	7dbb      	ldrb	r3, [r7, #22]
 800676a:	1e5c      	subs	r4, r3, #1
 800676c:	4610      	mov	r0, r2
 800676e:	f7fa ff5d 	bl	800162c <rf24_module_read_register>
 8006772:	4603      	mov	r3, r0
 8006774:	461a      	mov	r2, r3
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	551a      	strb	r2, [r3, r4]
			break;
 800677a:	bf00      	nop
		}
	}

	// convert address into string and store in urci_buffer_128
	rf24_urci_bytes_to_string(address, address_width, ":", urci_buffer_128);
 800677c:	68f8      	ldr	r0, [r7, #12]
 800677e:	4b07      	ldr	r3, [pc, #28]	; (800679c <rf24_urci_get_rx_address+0xec>)
 8006780:	b2da      	uxtb	r2, r3
 8006782:	7db9      	ldrb	r1, [r7, #22]
 8006784:	4b06      	ldr	r3, [pc, #24]	; (80067a0 <rf24_urci_get_rx_address+0xf0>)
 8006786:	f000 f9e1 	bl	8006b4c <rf24_urci_bytes_to_string>

	// return pointer of urci_buffer_128
	return urci_buffer_128;
 800678a:	4b05      	ldr	r3, [pc, #20]	; (80067a0 <rf24_urci_get_rx_address+0xf0>)
 800678c:	46ad      	mov	sp, r5
}
 800678e:	4618      	mov	r0, r3
 8006790:	3718      	adds	r7, #24
 8006792:	46bd      	mov	sp, r7
 8006794:	bdb0      	pop	{r4, r5, r7, pc}
 8006796:	bf00      	nop
 8006798:	0800a53c 	.word	0x0800a53c
 800679c:	0800a544 	.word	0x0800a544
 80067a0:	200008a0 	.word	0x200008a0

080067a4 <rf24_urci_set_payload_width>:

void rf24_urci_set_payload_width(uint8_t payload_size)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	4603      	mov	r3, r0
 80067ac:	71fb      	strb	r3, [r7, #7]
	char attribute_value[5];

	// read pipe number from input string
	rf24_urci_get_attribute_value(".pipe", attribute_value);
 80067ae:	f107 0308 	add.w	r3, r7, #8
 80067b2:	4619      	mov	r1, r3
 80067b4:	480a      	ldr	r0, [pc, #40]	; (80067e0 <rf24_urci_set_payload_width+0x3c>)
 80067b6:	f7ff febd 	bl	8006534 <rf24_urci_get_attribute_value>
	uint8_t rx_pipe = atoi(attribute_value);
 80067ba:	f107 0308 	add.w	r3, r7, #8
 80067be:	4618      	mov	r0, r3
 80067c0:	f000 fa2d 	bl	8006c1e <atoi>
 80067c4:	4603      	mov	r3, r0
 80067c6:	73fb      	strb	r3, [r7, #15]

	rf24_module_write_register(RX_PW_P0 + rx_pipe, payload_size);
 80067c8:	7bfb      	ldrb	r3, [r7, #15]
 80067ca:	3311      	adds	r3, #17
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	79fa      	ldrb	r2, [r7, #7]
 80067d0:	4611      	mov	r1, r2
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7fa ff44 	bl	8001660 <rf24_module_write_register>
}
 80067d8:	bf00      	nop
 80067da:	3710      	adds	r7, #16
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	0800a53c 	.word	0x0800a53c

080067e4 <rf24_urci_get_payload_width>:

uint8_t rf24_urci_get_payload_width()
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
	char attribute_value[5];

	// read pipe number from input string
	rf24_urci_get_attribute_value(".pipe", attribute_value);
 80067ea:	463b      	mov	r3, r7
 80067ec:	4619      	mov	r1, r3
 80067ee:	480a      	ldr	r0, [pc, #40]	; (8006818 <rf24_urci_get_payload_width+0x34>)
 80067f0:	f7ff fea0 	bl	8006534 <rf24_urci_get_attribute_value>
	uint8_t rx_pipe = atoi(attribute_value);
 80067f4:	463b      	mov	r3, r7
 80067f6:	4618      	mov	r0, r3
 80067f8:	f000 fa11 	bl	8006c1e <atoi>
 80067fc:	4603      	mov	r3, r0
 80067fe:	71fb      	strb	r3, [r7, #7]

	return rf24_module_read_register(RX_PW_P0 + rx_pipe);
 8006800:	79fb      	ldrb	r3, [r7, #7]
 8006802:	3311      	adds	r3, #17
 8006804:	b2db      	uxtb	r3, r3
 8006806:	4618      	mov	r0, r3
 8006808:	f7fa ff10 	bl	800162c <rf24_module_read_register>
 800680c:	4603      	mov	r3, r0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3708      	adds	r7, #8
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	0800a53c 	.word	0x0800a53c

0800681c <rf24_urci_call>:
	flags.cmd_get = false;
	flags.cmd_set = false;
}

// assigns given command and values through uart to rf24 get and set functions
void rf24_urci_call(urci_cmd cmd){
 800681c:	b084      	sub	sp, #16
 800681e:	b580      	push	{r7, lr}
 8006820:	b08e      	sub	sp, #56	; 0x38
 8006822:	af00      	add	r7, sp, #0
 8006824:	f107 0c40 	add.w	ip, r7, #64	; 0x40
 8006828:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	uint8_t value;
	char str[50];

	// convert value array as defined type in command struct
	if(flags.cmd_set)
 800682c:	4b44      	ldr	r3, [pc, #272]	; (8006940 <rf24_urci_call+0x124>)
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	f003 0320 	and.w	r3, r3, #32
 8006834:	b2db      	uxtb	r3, r3
 8006836:	2b00      	cmp	r3, #0
 8006838:	d01b      	beq.n	8006872 <rf24_urci_call+0x56>
	{
		switch(cmd.set_type)
 800683a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800683e:	2b00      	cmp	r3, #0
 8006840:	d002      	beq.n	8006848 <rf24_urci_call+0x2c>
 8006842:	2b01      	cmp	r3, #1
 8006844:	d00c      	beq.n	8006860 <rf24_urci_call+0x44>
			case rf24_urci_string:
			{
				cmd.fct_ptr_set_string(urci_buffer_128);
				break;
			}
			default: break;
 8006846:	e00f      	b.n	8006868 <rf24_urci_call+0x4c>
				value = atoi(urci_buffer_128);
 8006848:	483e      	ldr	r0, [pc, #248]	; (8006944 <rf24_urci_call+0x128>)
 800684a:	f000 f9e8 	bl	8006c1e <atoi>
 800684e:	4603      	mov	r3, r0
 8006850:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				cmd.fct_ptr_set_uint8(value);
 8006854:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006856:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800685a:	4610      	mov	r0, r2
 800685c:	4798      	blx	r3
				break;
 800685e:	e003      	b.n	8006868 <rf24_urci_call+0x4c>
				cmd.fct_ptr_set_string(urci_buffer_128);
 8006860:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006862:	4838      	ldr	r0, [pc, #224]	; (8006944 <rf24_urci_call+0x128>)
 8006864:	4798      	blx	r3
				break;
 8006866:	bf00      	nop
		}
		flags.cmd_set = false;
 8006868:	4a35      	ldr	r2, [pc, #212]	; (8006940 <rf24_urci_call+0x124>)
 800686a:	7813      	ldrb	r3, [r2, #0]
 800686c:	f36f 1345 	bfc	r3, #5, #1
 8006870:	7013      	strb	r3, [r2, #0]
	}

	if(flags.cmd_get)
 8006872:	4b33      	ldr	r3, [pc, #204]	; (8006940 <rf24_urci_call+0x124>)
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800687a:	b2db      	uxtb	r3, r3
 800687c:	2b00      	cmp	r3, #0
 800687e:	d058      	beq.n	8006932 <rf24_urci_call+0x116>
	{
		switch(cmd.get_type)
 8006880:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006884:	2b01      	cmp	r3, #1
 8006886:	d02b      	beq.n	80068e0 <rf24_urci_call+0xc4>
 8006888:	2b02      	cmp	r3, #2
 800688a:	d047      	beq.n	800691c <rf24_urci_call+0x100>
 800688c:	2b00      	cmp	r3, #0
 800688e:	d14b      	bne.n	8006928 <rf24_urci_call+0x10c>
		{
			case rf24_urci_uint8:
			{
				rf24_stm32f1xx_usart_write_str(cmd.name);
 8006890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006892:	4618      	mov	r0, r3
 8006894:	f7ff fa74 	bl	8005d80 <rf24_stm32f1xx_usart_write_str>
				if(flags.attribute){
 8006898:	4b29      	ldr	r3, [pc, #164]	; (8006940 <rf24_urci_call+0x124>)
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	f003 0310 	and.w	r3, r3, #16
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d008      	beq.n	80068b8 <rf24_urci_call+0x9c>
					rf24_urci_get_attribute_value(".pipe", str);
 80068a6:	1d3b      	adds	r3, r7, #4
 80068a8:	4619      	mov	r1, r3
 80068aa:	4827      	ldr	r0, [pc, #156]	; (8006948 <rf24_urci_call+0x12c>)
 80068ac:	f7ff fe42 	bl	8006534 <rf24_urci_get_attribute_value>
					rf24_stm32f1xx_usart_write_str(str);
 80068b0:	1d3b      	adds	r3, r7, #4
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7ff fa64 	bl	8005d80 <rf24_stm32f1xx_usart_write_str>
				}
				rf24_stm32f1xx_usart_write_byte(rf24_urci_separator_symbol);
 80068b8:	203d      	movs	r0, #61	; 0x3d
 80068ba:	f7ff fa45 	bl	8005d48 <rf24_stm32f1xx_usart_write_byte>
				value = cmd.fct_ptr_get_uint8();
 80068be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068c0:	4798      	blx	r3
 80068c2:	4603      	mov	r3, r0
 80068c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				itoa(value, str, 10);
 80068c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80068cc:	1d39      	adds	r1, r7, #4
 80068ce:	220a      	movs	r2, #10
 80068d0:	4618      	mov	r0, r3
 80068d2:	f000 f9e5 	bl	8006ca0 <itoa>
				rf24_stm32f1xx_usart_write_line(str);
 80068d6:	1d3b      	adds	r3, r7, #4
 80068d8:	4618      	mov	r0, r3
 80068da:	f7ff fa6c 	bl	8005db6 <rf24_stm32f1xx_usart_write_line>
				break;
 80068de:	e023      	b.n	8006928 <rf24_urci_call+0x10c>
			}
			case rf24_urci_string:
			{
				rf24_stm32f1xx_usart_write_str(cmd.name);
 80068e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068e2:	4618      	mov	r0, r3
 80068e4:	f7ff fa4c 	bl	8005d80 <rf24_stm32f1xx_usart_write_str>
				if(flags.attribute){
 80068e8:	4b15      	ldr	r3, [pc, #84]	; (8006940 <rf24_urci_call+0x124>)
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	f003 0310 	and.w	r3, r3, #16
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d008      	beq.n	8006908 <rf24_urci_call+0xec>
					rf24_urci_get_attribute_value(".pipe", str);
 80068f6:	1d3b      	adds	r3, r7, #4
 80068f8:	4619      	mov	r1, r3
 80068fa:	4813      	ldr	r0, [pc, #76]	; (8006948 <rf24_urci_call+0x12c>)
 80068fc:	f7ff fe1a 	bl	8006534 <rf24_urci_get_attribute_value>
					rf24_stm32f1xx_usart_write_str(str);
 8006900:	1d3b      	adds	r3, r7, #4
 8006902:	4618      	mov	r0, r3
 8006904:	f7ff fa3c 	bl	8005d80 <rf24_stm32f1xx_usart_write_str>
				}
				rf24_stm32f1xx_usart_write_byte(rf24_urci_separator_symbol);
 8006908:	203d      	movs	r0, #61	; 0x3d
 800690a:	f7ff fa1d 	bl	8005d48 <rf24_stm32f1xx_usart_write_byte>
				rf24_stm32f1xx_usart_write_line(cmd.fct_ptr_get_string());
 800690e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006910:	4798      	blx	r3
 8006912:	4603      	mov	r3, r0
 8006914:	4618      	mov	r0, r3
 8006916:	f7ff fa4e 	bl	8005db6 <rf24_stm32f1xx_usart_write_line>
				break;
 800691a:	e005      	b.n	8006928 <rf24_urci_call+0x10c>
			}
			case rf24_urci_void:
			{
				cmd.fct_ptr();
 800691c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800691e:	4798      	blx	r3
				rf24_stm32f1xx_usart_write_line("OK");
 8006920:	480a      	ldr	r0, [pc, #40]	; (800694c <rf24_urci_call+0x130>)
 8006922:	f7ff fa48 	bl	8005db6 <rf24_stm32f1xx_usart_write_line>
				break;
 8006926:	bf00      	nop
			}
		}
		flags.cmd_get = false;
 8006928:	4a05      	ldr	r2, [pc, #20]	; (8006940 <rf24_urci_call+0x124>)
 800692a:	7813      	ldrb	r3, [r2, #0]
 800692c:	f36f 1386 	bfc	r3, #6, #1
 8006930:	7013      	strb	r3, [r2, #0]
	}
}
 8006932:	bf00      	nop
 8006934:	3738      	adds	r7, #56	; 0x38
 8006936:	46bd      	mov	sp, r7
 8006938:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800693c:	b004      	add	sp, #16
 800693e:	4770      	bx	lr
 8006940:	200006c0 	.word	0x200006c0
 8006944:	200008a0 	.word	0x200008a0
 8006948:	0800a53c 	.word	0x0800a53c
 800694c:	0800a548 	.word	0x0800a548

08006950 <rf24_urci_match>:

void rf24_urci_match(){
 8006950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006952:	b089      	sub	sp, #36	; 0x24
 8006954:	af06      	add	r7, sp, #24
		usart_write_line(urci_buffer_32);
		usart_write_str("urci_buffer_128: ");
		usart_write_line(urci_buffer_128);*/
	#endif

	for(int i=0; i < sizeof(urci_cmds) / sizeof(urci_cmds[0]); i++)
 8006956:	2300      	movs	r3, #0
 8006958:	607b      	str	r3, [r7, #4]
 800695a:	e023      	b.n	80069a4 <rf24_urci_match+0x54>
	{
		if(strcmp(urci_buffer_32, urci_cmds[i].name) == 0)
 800695c:	4915      	ldr	r1, [pc, #84]	; (80069b4 <rf24_urci_match+0x64>)
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	4613      	mov	r3, r2
 8006962:	00db      	lsls	r3, r3, #3
 8006964:	4413      	add	r3, r2
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	440b      	add	r3, r1
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4619      	mov	r1, r3
 800696e:	4812      	ldr	r0, [pc, #72]	; (80069b8 <rf24_urci_match+0x68>)
 8006970:	f7f9 fbec 	bl	800014c <strcmp>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d111      	bne.n	800699e <rf24_urci_match+0x4e>
			#ifdef DEBUG
				//usart_write_str("URCI_MATCH: ");
				//usart_write_line(URCI_CMDS[i].name);
			#endif

			rf24_urci_call(urci_cmds[i]);
 800697a:	490e      	ldr	r1, [pc, #56]	; (80069b4 <rf24_urci_match+0x64>)
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	4613      	mov	r3, r2
 8006980:	00db      	lsls	r3, r3, #3
 8006982:	4413      	add	r3, r2
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	18ce      	adds	r6, r1, r3
 8006988:	466d      	mov	r5, sp
 800698a:	f106 0410 	add.w	r4, r6, #16
 800698e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006990:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006992:	6823      	ldr	r3, [r4, #0]
 8006994:	602b      	str	r3, [r5, #0]
 8006996:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800699a:	f7ff ff3f 	bl	800681c <rf24_urci_call>
	for(int i=0; i < sizeof(urci_cmds) / sizeof(urci_cmds[0]); i++)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	3301      	adds	r3, #1
 80069a2:	607b      	str	r3, [r7, #4]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2b22      	cmp	r3, #34	; 0x22
 80069a8:	d9d8      	bls.n	800695c <rf24_urci_match+0xc>
		}
	}
}
 80069aa:	bf00      	nop
 80069ac:	370c      	adds	r7, #12
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069b2:	bf00      	nop
 80069b4:	0800a59c 	.word	0x0800a59c
 80069b8:	20000880 	.word	0x20000880

080069bc <rf24_urci_putc>:

- Takes single chars from uart buffer and writes them into the arrays RF24_URCI_COMMAND and RF24_URCI_VALUE.
- Converts uart inputs of the form "<rfchannel=1>" into RF24_URCI_COMMAND = "rfchannel", RF24_URCI_VALUE = "1".
- Command name is stored in buffer RF24_URCI_COMMAND, command value is stored in RF24_URCI_VALUE
*/
void rf24_urci_putc(char data){
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	4603      	mov	r3, r0
 80069c4:	71fb      	strb	r3, [r7, #7]

	switch(data){
 80069c6:	79fb      	ldrb	r3, [r7, #7]
 80069c8:	2b3d      	cmp	r3, #61	; 0x3d
 80069ca:	d009      	beq.n	80069e0 <rf24_urci_putc+0x24>
 80069cc:	2b3e      	cmp	r3, #62	; 0x3e
 80069ce:	d01b      	beq.n	8006a08 <rf24_urci_putc+0x4c>
 80069d0:	2b3c      	cmp	r3, #60	; 0x3c
 80069d2:	d158      	bne.n	8006a86 <rf24_urci_putc+0xca>
		// data is start symbol: '<'
		case rf24_urci_start_symbol:
			flags.start = true;												// remember start symbol detected to fill command array
 80069d4:	4a44      	ldr	r2, [pc, #272]	; (8006ae8 <rf24_urci_putc+0x12c>)
 80069d6:	7813      	ldrb	r3, [r2, #0]
 80069d8:	f043 0302 	orr.w	r3, r3, #2
 80069dc:	7013      	strb	r3, [r2, #0]
			break;
 80069de:	e07f      	b.n	8006ae0 <rf24_urci_putc+0x124>

		// data is separator symbol: '='
		case rf24_urci_separator_symbol:
			flags.start = false;											// remember end of command array, beginning of value array
 80069e0:	4a41      	ldr	r2, [pc, #260]	; (8006ae8 <rf24_urci_putc+0x12c>)
 80069e2:	7813      	ldrb	r3, [r2, #0]
 80069e4:	f36f 0341 	bfc	r3, #1, #1
 80069e8:	7013      	strb	r3, [r2, #0]
			flags.separator = true;											// remember separator found
 80069ea:	4a3f      	ldr	r2, [pc, #252]	; (8006ae8 <rf24_urci_putc+0x12c>)
 80069ec:	7813      	ldrb	r3, [r2, #0]
 80069ee:	f043 0308 	orr.w	r3, r3, #8
 80069f2:	7013      	strb	r3, [r2, #0]
			urci_buffer_32[counter] = '\0';									// null terminate command array
 80069f4:	4b3d      	ldr	r3, [pc, #244]	; (8006aec <rf24_urci_putc+0x130>)
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	461a      	mov	r2, r3
 80069fa:	4b3d      	ldr	r3, [pc, #244]	; (8006af0 <rf24_urci_putc+0x134>)
 80069fc:	2100      	movs	r1, #0
 80069fe:	5499      	strb	r1, [r3, r2]
			counter = 0;													// reset counter
 8006a00:	4b3a      	ldr	r3, [pc, #232]	; (8006aec <rf24_urci_putc+0x130>)
 8006a02:	2200      	movs	r2, #0
 8006a04:	701a      	strb	r2, [r3, #0]
			break;
 8006a06:	e06b      	b.n	8006ae0 <rf24_urci_putc+0x124>

		// data is termination symbol, reset flags and process command+value to a generic function: '>'
		case rf24_urci_end_symbol:
			if(flags.separator) flags.cmd_set = true;						// if a separator symbol is found, command is a SET type (write into rf-module register)
 8006a08:	4b37      	ldr	r3, [pc, #220]	; (8006ae8 <rf24_urci_putc+0x12c>)
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	f003 0308 	and.w	r3, r3, #8
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d005      	beq.n	8006a22 <rf24_urci_putc+0x66>
 8006a16:	4a34      	ldr	r2, [pc, #208]	; (8006ae8 <rf24_urci_putc+0x12c>)
 8006a18:	7813      	ldrb	r3, [r2, #0]
 8006a1a:	f043 0320 	orr.w	r3, r3, #32
 8006a1e:	7013      	strb	r3, [r2, #0]
 8006a20:	e004      	b.n	8006a2c <rf24_urci_putc+0x70>
			else flags.cmd_get = true;										// if no separator detected, command is a GET type (read from rf-module register)
 8006a22:	4a31      	ldr	r2, [pc, #196]	; (8006ae8 <rf24_urci_putc+0x12c>)
 8006a24:	7813      	ldrb	r3, [r2, #0]
 8006a26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a2a:	7013      	strb	r3, [r2, #0]

			if(!flags.separator) urci_buffer_32[counter] = '\0';			// null terminate command array in case no separator was found
 8006a2c:	4b2e      	ldr	r3, [pc, #184]	; (8006ae8 <rf24_urci_putc+0x12c>)
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	f003 0308 	and.w	r3, r3, #8
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d105      	bne.n	8006a46 <rf24_urci_putc+0x8a>
 8006a3a:	4b2c      	ldr	r3, [pc, #176]	; (8006aec <rf24_urci_putc+0x130>)
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	461a      	mov	r2, r3
 8006a40:	4b2b      	ldr	r3, [pc, #172]	; (8006af0 <rf24_urci_putc+0x134>)
 8006a42:	2100      	movs	r1, #0
 8006a44:	5499      	strb	r1, [r3, r2]
			urci_buffer_128[counter] = '\0';								// null terminate value array
 8006a46:	4b29      	ldr	r3, [pc, #164]	; (8006aec <rf24_urci_putc+0x130>)
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	4b29      	ldr	r3, [pc, #164]	; (8006af4 <rf24_urci_putc+0x138>)
 8006a4e:	2100      	movs	r1, #0
 8006a50:	5499      	strb	r1, [r3, r2]

			flags.enable = false;											// stop reading chars into uart remote control routine (prevents calling rf24_urci_putc)
 8006a52:	4a25      	ldr	r2, [pc, #148]	; (8006ae8 <rf24_urci_putc+0x12c>)
 8006a54:	7813      	ldrb	r3, [r2, #0]
 8006a56:	f36f 0300 	bfc	r3, #0, #1
 8006a5a:	7013      	strb	r3, [r2, #0]
			flags.start = false;											// reset start flag
 8006a5c:	4a22      	ldr	r2, [pc, #136]	; (8006ae8 <rf24_urci_putc+0x12c>)
 8006a5e:	7813      	ldrb	r3, [r2, #0]
 8006a60:	f36f 0341 	bfc	r3, #1, #1
 8006a64:	7013      	strb	r3, [r2, #0]
			flags.separator = false;										// reset end flag
 8006a66:	4a20      	ldr	r2, [pc, #128]	; (8006ae8 <rf24_urci_putc+0x12c>)
 8006a68:	7813      	ldrb	r3, [r2, #0]
 8006a6a:	f36f 03c3 	bfc	r3, #3, #1
 8006a6e:	7013      	strb	r3, [r2, #0]
			flags.attribute = false;
 8006a70:	4a1d      	ldr	r2, [pc, #116]	; (8006ae8 <rf24_urci_putc+0x12c>)
 8006a72:	7813      	ldrb	r3, [r2, #0]
 8006a74:	f36f 1304 	bfc	r3, #4, #1
 8006a78:	7013      	strb	r3, [r2, #0]
			counter = 0;													// reset counter
 8006a7a:	4b1c      	ldr	r3, [pc, #112]	; (8006aec <rf24_urci_putc+0x130>)
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	701a      	strb	r2, [r3, #0]

			rf24_urci_match();												// call rf24_urci_match which fetches the assigned rf24 function to the input command
 8006a80:	f7ff ff66 	bl	8006950 <rf24_urci_match>
			break;
 8006a84:	e02c      	b.n	8006ae0 <rf24_urci_putc+0x124>

		// data is either part of command name or its value, proceed filling arrays
		default:
			if(flags.start) urci_buffer_32[counter] = data;					// fill command buffer
 8006a86:	4b18      	ldr	r3, [pc, #96]	; (8006ae8 <rf24_urci_putc+0x12c>)
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	f003 0302 	and.w	r3, r3, #2
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d005      	beq.n	8006aa0 <rf24_urci_putc+0xe4>
 8006a94:	4b15      	ldr	r3, [pc, #84]	; (8006aec <rf24_urci_putc+0x130>)
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	4619      	mov	r1, r3
 8006a9a:	4a15      	ldr	r2, [pc, #84]	; (8006af0 <rf24_urci_putc+0x134>)
 8006a9c:	79fb      	ldrb	r3, [r7, #7]
 8006a9e:	5453      	strb	r3, [r2, r1]
			if(flags.separator) urci_buffer_128[counter] = data;			// fill value buffer
 8006aa0:	4b11      	ldr	r3, [pc, #68]	; (8006ae8 <rf24_urci_putc+0x12c>)
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	f003 0308 	and.w	r3, r3, #8
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d005      	beq.n	8006aba <rf24_urci_putc+0xfe>
 8006aae:	4b0f      	ldr	r3, [pc, #60]	; (8006aec <rf24_urci_putc+0x130>)
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	4a0f      	ldr	r2, [pc, #60]	; (8006af4 <rf24_urci_putc+0x138>)
 8006ab6:	79fb      	ldrb	r3, [r7, #7]
 8006ab8:	5453      	strb	r3, [r2, r1]
			if(data == rf24_urci_attribute_symbol){
 8006aba:	79fb      	ldrb	r3, [r7, #7]
 8006abc:	2b2e      	cmp	r3, #46	; 0x2e
 8006abe:	d108      	bne.n	8006ad2 <rf24_urci_putc+0x116>
				flags.attribute = true;
 8006ac0:	4a09      	ldr	r2, [pc, #36]	; (8006ae8 <rf24_urci_putc+0x12c>)
 8006ac2:	7813      	ldrb	r3, [r2, #0]
 8006ac4:	f043 0310 	orr.w	r3, r3, #16
 8006ac8:	7013      	strb	r3, [r2, #0]
				attribute_pos = counter;
 8006aca:	4b08      	ldr	r3, [pc, #32]	; (8006aec <rf24_urci_putc+0x130>)
 8006acc:	781a      	ldrb	r2, [r3, #0]
 8006ace:	4b0a      	ldr	r3, [pc, #40]	; (8006af8 <rf24_urci_putc+0x13c>)
 8006ad0:	701a      	strb	r2, [r3, #0]
			}
			counter++;														// increment counter
 8006ad2:	4b06      	ldr	r3, [pc, #24]	; (8006aec <rf24_urci_putc+0x130>)
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	b2da      	uxtb	r2, r3
 8006ada:	4b04      	ldr	r3, [pc, #16]	; (8006aec <rf24_urci_putc+0x130>)
 8006adc:	701a      	strb	r2, [r3, #0]
			break;
 8006ade:	bf00      	nop
	}
}
 8006ae0:	bf00      	nop
 8006ae2:	3708      	adds	r7, #8
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	200006c0 	.word	0x200006c0
 8006aec:	200006c1 	.word	0x200006c1
 8006af0:	20000880 	.word	0x20000880
 8006af4:	200008a0 	.word	0x200008a0
 8006af8:	200006c2 	.word	0x200006c2

08006afc <rf24_urci_string_to_bytes>:

// HELPER FUNCTIONS

uint8_t rf24_urci_string_to_bytes(char *str_in, char* delimiters, uint8_t *array_out, uint8_t array_out_length){
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b086      	sub	sp, #24
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	607a      	str	r2, [r7, #4]
 8006b08:	70fb      	strb	r3, [r7, #3]

	int count = 0;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	617b      	str	r3, [r7, #20]

	char *ptr = strtok(str_in, delimiters);
 8006b0e:	68b9      	ldr	r1, [r7, #8]
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	f000 fa3f 	bl	8006f94 <strtok>
 8006b16:	6138      	str	r0, [r7, #16]

	while(ptr != NULL) {
 8006b18:	e010      	b.n	8006b3c <rf24_urci_string_to_bytes+0x40>
		array_out[count++] = atoi(ptr);
 8006b1a:	6938      	ldr	r0, [r7, #16]
 8006b1c:	f000 f87f 	bl	8006c1e <atoi>
 8006b20:	4601      	mov	r1, r0
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	1c5a      	adds	r2, r3, #1
 8006b26:	617a      	str	r2, [r7, #20]
 8006b28:	461a      	mov	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	b2ca      	uxtb	r2, r1
 8006b30:	701a      	strb	r2, [r3, #0]
		ptr = strtok(NULL, delimiters);
 8006b32:	68b9      	ldr	r1, [r7, #8]
 8006b34:	2000      	movs	r0, #0
 8006b36:	f000 fa2d 	bl	8006f94 <strtok>
 8006b3a:	6138      	str	r0, [r7, #16]
	while(ptr != NULL) {
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d1eb      	bne.n	8006b1a <rf24_urci_string_to_bytes+0x1e>
	}

	return true;
 8006b42:	2301      	movs	r3, #1
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3718      	adds	r7, #24
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <rf24_urci_bytes_to_string>:

void rf24_urci_bytes_to_string(uint8_t *address_in, uint8_t address_length, const char delimiter, char *str_out){
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b088      	sub	sp, #32
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	607b      	str	r3, [r7, #4]
 8006b56:	460b      	mov	r3, r1
 8006b58:	72fb      	strb	r3, [r7, #11]
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	72bb      	strb	r3, [r7, #10]

	bool first = true;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i < address_length; i++){
 8006b62:	2300      	movs	r3, #0
 8006b64:	61bb      	str	r3, [r7, #24]
 8006b66:	e02b      	b.n	8006bc0 <rf24_urci_bytes_to_string+0x74>

		char ascii_digits[4];
		itoa(address_in[i], ascii_digits, 10);
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	4618      	mov	r0, r3
 8006b72:	f107 0314 	add.w	r3, r7, #20
 8006b76:	220a      	movs	r2, #10
 8006b78:	4619      	mov	r1, r3
 8006b7a:	f000 f891 	bl	8006ca0 <itoa>

		if(first){
 8006b7e:	7ffb      	ldrb	r3, [r7, #31]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d008      	beq.n	8006b96 <rf24_urci_bytes_to_string+0x4a>
			strcpy(str_out, ascii_digits);
 8006b84:	f107 0314 	add.w	r3, r7, #20
 8006b88:	4619      	mov	r1, r3
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 f9f9 	bl	8006f82 <strcpy>
			first = false;
 8006b90:	2300      	movs	r3, #0
 8006b92:	77fb      	strb	r3, [r7, #31]
 8006b94:	e011      	b.n	8006bba <rf24_urci_bytes_to_string+0x6e>
		}
		else{
			strcat(str_out, ":");
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f7f9 fae2 	bl	8000160 <strlen>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	490a      	ldr	r1, [pc, #40]	; (8006bd0 <rf24_urci_bytes_to_string+0x84>)
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	460b      	mov	r3, r1
 8006baa:	881b      	ldrh	r3, [r3, #0]
 8006bac:	8013      	strh	r3, [r2, #0]
			strcat(str_out, ascii_digits);
 8006bae:	f107 0314 	add.w	r3, r7, #20
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 f9d5 	bl	8006f64 <strcat>
	for(int i=0; i < address_length; i++){
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	61bb      	str	r3, [r7, #24]
 8006bc0:	7afb      	ldrb	r3, [r7, #11]
 8006bc2:	69ba      	ldr	r2, [r7, #24]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	dbcf      	blt.n	8006b68 <rf24_urci_bytes_to_string+0x1c>
		}
	}
}
 8006bc8:	bf00      	nop
 8006bca:	3720      	adds	r7, #32
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	0800a544 	.word	0x0800a544

08006bd4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8006bd4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8006bd6:	e003      	b.n	8006be0 <LoopCopyDataInit>

08006bd8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8006bd8:	4b0b      	ldr	r3, [pc, #44]	; (8006c08 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8006bda:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8006bdc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8006bde:	3104      	adds	r1, #4

08006be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8006be0:	480a      	ldr	r0, [pc, #40]	; (8006c0c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8006be2:	4b0b      	ldr	r3, [pc, #44]	; (8006c10 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8006be4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8006be6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8006be8:	d3f6      	bcc.n	8006bd8 <CopyDataInit>
  ldr r2, =_sbss
 8006bea:	4a0a      	ldr	r2, [pc, #40]	; (8006c14 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8006bec:	e002      	b.n	8006bf4 <LoopFillZerobss>

08006bee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8006bee:	2300      	movs	r3, #0
  str r3, [r2], #4
 8006bf0:	f842 3b04 	str.w	r3, [r2], #4

08006bf4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8006bf4:	4b08      	ldr	r3, [pc, #32]	; (8006c18 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8006bf6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8006bf8:	d3f9      	bcc.n	8006bee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006bfa:	f7f9 fabf 	bl	800017c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006bfe:	f000 f813 	bl	8006c28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006c02:	f7f9 fab5 	bl	8000170 <main>
  bx lr
 8006c06:	4770      	bx	lr
  ldr r3, =_sidata
 8006c08:	0800abf4 	.word	0x0800abf4
  ldr r0, =_sdata
 8006c0c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8006c10:	20000664 	.word	0x20000664
  ldr r2, =_sbss
 8006c14:	20000664 	.word	0x20000664
  ldr r3, = _ebss
 8006c18:	20000924 	.word	0x20000924

08006c1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006c1c:	e7fe      	b.n	8006c1c <ADC1_2_IRQHandler>

08006c1e <atoi>:
 8006c1e:	220a      	movs	r2, #10
 8006c20:	2100      	movs	r1, #0
 8006c22:	f000 ba87 	b.w	8007134 <strtol>
	...

08006c28 <__libc_init_array>:
 8006c28:	b570      	push	{r4, r5, r6, lr}
 8006c2a:	2500      	movs	r5, #0
 8006c2c:	4e0c      	ldr	r6, [pc, #48]	; (8006c60 <__libc_init_array+0x38>)
 8006c2e:	4c0d      	ldr	r4, [pc, #52]	; (8006c64 <__libc_init_array+0x3c>)
 8006c30:	1ba4      	subs	r4, r4, r6
 8006c32:	10a4      	asrs	r4, r4, #2
 8006c34:	42a5      	cmp	r5, r4
 8006c36:	d109      	bne.n	8006c4c <__libc_init_array+0x24>
 8006c38:	f000 fe32 	bl	80078a0 <_init>
 8006c3c:	2500      	movs	r5, #0
 8006c3e:	4e0a      	ldr	r6, [pc, #40]	; (8006c68 <__libc_init_array+0x40>)
 8006c40:	4c0a      	ldr	r4, [pc, #40]	; (8006c6c <__libc_init_array+0x44>)
 8006c42:	1ba4      	subs	r4, r4, r6
 8006c44:	10a4      	asrs	r4, r4, #2
 8006c46:	42a5      	cmp	r5, r4
 8006c48:	d105      	bne.n	8006c56 <__libc_init_array+0x2e>
 8006c4a:	bd70      	pop	{r4, r5, r6, pc}
 8006c4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006c50:	4798      	blx	r3
 8006c52:	3501      	adds	r5, #1
 8006c54:	e7ee      	b.n	8006c34 <__libc_init_array+0xc>
 8006c56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006c5a:	4798      	blx	r3
 8006c5c:	3501      	adds	r5, #1
 8006c5e:	e7f2      	b.n	8006c46 <__libc_init_array+0x1e>
 8006c60:	0800abec 	.word	0x0800abec
 8006c64:	0800abec 	.word	0x0800abec
 8006c68:	0800abec 	.word	0x0800abec
 8006c6c:	0800abf0 	.word	0x0800abf0

08006c70 <__itoa>:
 8006c70:	1e93      	subs	r3, r2, #2
 8006c72:	2b22      	cmp	r3, #34	; 0x22
 8006c74:	b510      	push	{r4, lr}
 8006c76:	460c      	mov	r4, r1
 8006c78:	d904      	bls.n	8006c84 <__itoa+0x14>
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	461c      	mov	r4, r3
 8006c7e:	700b      	strb	r3, [r1, #0]
 8006c80:	4620      	mov	r0, r4
 8006c82:	bd10      	pop	{r4, pc}
 8006c84:	2a0a      	cmp	r2, #10
 8006c86:	d109      	bne.n	8006c9c <__itoa+0x2c>
 8006c88:	2800      	cmp	r0, #0
 8006c8a:	da07      	bge.n	8006c9c <__itoa+0x2c>
 8006c8c:	232d      	movs	r3, #45	; 0x2d
 8006c8e:	700b      	strb	r3, [r1, #0]
 8006c90:	2101      	movs	r1, #1
 8006c92:	4240      	negs	r0, r0
 8006c94:	4421      	add	r1, r4
 8006c96:	f000 fa63 	bl	8007160 <__utoa>
 8006c9a:	e7f1      	b.n	8006c80 <__itoa+0x10>
 8006c9c:	2100      	movs	r1, #0
 8006c9e:	e7f9      	b.n	8006c94 <__itoa+0x24>

08006ca0 <itoa>:
 8006ca0:	f7ff bfe6 	b.w	8006c70 <__itoa>

08006ca4 <malloc>:
 8006ca4:	4b02      	ldr	r3, [pc, #8]	; (8006cb0 <malloc+0xc>)
 8006ca6:	4601      	mov	r1, r0
 8006ca8:	6818      	ldr	r0, [r3, #0]
 8006caa:	f000 b879 	b.w	8006da0 <_malloc_r>
 8006cae:	bf00      	nop
 8006cb0:	20000494 	.word	0x20000494

08006cb4 <free>:
 8006cb4:	4b02      	ldr	r3, [pc, #8]	; (8006cc0 <free+0xc>)
 8006cb6:	4601      	mov	r1, r0
 8006cb8:	6818      	ldr	r0, [r3, #0]
 8006cba:	f000 b825 	b.w	8006d08 <_free_r>
 8006cbe:	bf00      	nop
 8006cc0:	20000494 	.word	0x20000494

08006cc4 <memcmp>:
 8006cc4:	b530      	push	{r4, r5, lr}
 8006cc6:	2400      	movs	r4, #0
 8006cc8:	42a2      	cmp	r2, r4
 8006cca:	d101      	bne.n	8006cd0 <memcmp+0xc>
 8006ccc:	2000      	movs	r0, #0
 8006cce:	e007      	b.n	8006ce0 <memcmp+0x1c>
 8006cd0:	5d03      	ldrb	r3, [r0, r4]
 8006cd2:	3401      	adds	r4, #1
 8006cd4:	190d      	adds	r5, r1, r4
 8006cd6:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8006cda:	42ab      	cmp	r3, r5
 8006cdc:	d0f4      	beq.n	8006cc8 <memcmp+0x4>
 8006cde:	1b58      	subs	r0, r3, r5
 8006ce0:	bd30      	pop	{r4, r5, pc}

08006ce2 <memcpy>:
 8006ce2:	b510      	push	{r4, lr}
 8006ce4:	1e43      	subs	r3, r0, #1
 8006ce6:	440a      	add	r2, r1
 8006ce8:	4291      	cmp	r1, r2
 8006cea:	d100      	bne.n	8006cee <memcpy+0xc>
 8006cec:	bd10      	pop	{r4, pc}
 8006cee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cf6:	e7f7      	b.n	8006ce8 <memcpy+0x6>

08006cf8 <memset>:
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	4402      	add	r2, r0
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d100      	bne.n	8006d02 <memset+0xa>
 8006d00:	4770      	bx	lr
 8006d02:	f803 1b01 	strb.w	r1, [r3], #1
 8006d06:	e7f9      	b.n	8006cfc <memset+0x4>

08006d08 <_free_r>:
 8006d08:	b538      	push	{r3, r4, r5, lr}
 8006d0a:	4605      	mov	r5, r0
 8006d0c:	2900      	cmp	r1, #0
 8006d0e:	d043      	beq.n	8006d98 <_free_r+0x90>
 8006d10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d14:	1f0c      	subs	r4, r1, #4
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	bfb8      	it	lt
 8006d1a:	18e4      	addlt	r4, r4, r3
 8006d1c:	f000 fa73 	bl	8007206 <__malloc_lock>
 8006d20:	4a1e      	ldr	r2, [pc, #120]	; (8006d9c <_free_r+0x94>)
 8006d22:	6813      	ldr	r3, [r2, #0]
 8006d24:	4610      	mov	r0, r2
 8006d26:	b933      	cbnz	r3, 8006d36 <_free_r+0x2e>
 8006d28:	6063      	str	r3, [r4, #4]
 8006d2a:	6014      	str	r4, [r2, #0]
 8006d2c:	4628      	mov	r0, r5
 8006d2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d32:	f000 ba69 	b.w	8007208 <__malloc_unlock>
 8006d36:	42a3      	cmp	r3, r4
 8006d38:	d90b      	bls.n	8006d52 <_free_r+0x4a>
 8006d3a:	6821      	ldr	r1, [r4, #0]
 8006d3c:	1862      	adds	r2, r4, r1
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	bf01      	itttt	eq
 8006d42:	681a      	ldreq	r2, [r3, #0]
 8006d44:	685b      	ldreq	r3, [r3, #4]
 8006d46:	1852      	addeq	r2, r2, r1
 8006d48:	6022      	streq	r2, [r4, #0]
 8006d4a:	6063      	str	r3, [r4, #4]
 8006d4c:	6004      	str	r4, [r0, #0]
 8006d4e:	e7ed      	b.n	8006d2c <_free_r+0x24>
 8006d50:	4613      	mov	r3, r2
 8006d52:	685a      	ldr	r2, [r3, #4]
 8006d54:	b10a      	cbz	r2, 8006d5a <_free_r+0x52>
 8006d56:	42a2      	cmp	r2, r4
 8006d58:	d9fa      	bls.n	8006d50 <_free_r+0x48>
 8006d5a:	6819      	ldr	r1, [r3, #0]
 8006d5c:	1858      	adds	r0, r3, r1
 8006d5e:	42a0      	cmp	r0, r4
 8006d60:	d10b      	bne.n	8006d7a <_free_r+0x72>
 8006d62:	6820      	ldr	r0, [r4, #0]
 8006d64:	4401      	add	r1, r0
 8006d66:	1858      	adds	r0, r3, r1
 8006d68:	4282      	cmp	r2, r0
 8006d6a:	6019      	str	r1, [r3, #0]
 8006d6c:	d1de      	bne.n	8006d2c <_free_r+0x24>
 8006d6e:	6810      	ldr	r0, [r2, #0]
 8006d70:	6852      	ldr	r2, [r2, #4]
 8006d72:	4401      	add	r1, r0
 8006d74:	6019      	str	r1, [r3, #0]
 8006d76:	605a      	str	r2, [r3, #4]
 8006d78:	e7d8      	b.n	8006d2c <_free_r+0x24>
 8006d7a:	d902      	bls.n	8006d82 <_free_r+0x7a>
 8006d7c:	230c      	movs	r3, #12
 8006d7e:	602b      	str	r3, [r5, #0]
 8006d80:	e7d4      	b.n	8006d2c <_free_r+0x24>
 8006d82:	6820      	ldr	r0, [r4, #0]
 8006d84:	1821      	adds	r1, r4, r0
 8006d86:	428a      	cmp	r2, r1
 8006d88:	bf01      	itttt	eq
 8006d8a:	6811      	ldreq	r1, [r2, #0]
 8006d8c:	6852      	ldreq	r2, [r2, #4]
 8006d8e:	1809      	addeq	r1, r1, r0
 8006d90:	6021      	streq	r1, [r4, #0]
 8006d92:	6062      	str	r2, [r4, #4]
 8006d94:	605c      	str	r4, [r3, #4]
 8006d96:	e7c9      	b.n	8006d2c <_free_r+0x24>
 8006d98:	bd38      	pop	{r3, r4, r5, pc}
 8006d9a:	bf00      	nop
 8006d9c:	200006c4 	.word	0x200006c4

08006da0 <_malloc_r>:
 8006da0:	b570      	push	{r4, r5, r6, lr}
 8006da2:	1ccd      	adds	r5, r1, #3
 8006da4:	f025 0503 	bic.w	r5, r5, #3
 8006da8:	3508      	adds	r5, #8
 8006daa:	2d0c      	cmp	r5, #12
 8006dac:	bf38      	it	cc
 8006dae:	250c      	movcc	r5, #12
 8006db0:	2d00      	cmp	r5, #0
 8006db2:	4606      	mov	r6, r0
 8006db4:	db01      	blt.n	8006dba <_malloc_r+0x1a>
 8006db6:	42a9      	cmp	r1, r5
 8006db8:	d903      	bls.n	8006dc2 <_malloc_r+0x22>
 8006dba:	230c      	movs	r3, #12
 8006dbc:	6033      	str	r3, [r6, #0]
 8006dbe:	2000      	movs	r0, #0
 8006dc0:	bd70      	pop	{r4, r5, r6, pc}
 8006dc2:	f000 fa20 	bl	8007206 <__malloc_lock>
 8006dc6:	4a21      	ldr	r2, [pc, #132]	; (8006e4c <_malloc_r+0xac>)
 8006dc8:	6814      	ldr	r4, [r2, #0]
 8006dca:	4621      	mov	r1, r4
 8006dcc:	b991      	cbnz	r1, 8006df4 <_malloc_r+0x54>
 8006dce:	4c20      	ldr	r4, [pc, #128]	; (8006e50 <_malloc_r+0xb0>)
 8006dd0:	6823      	ldr	r3, [r4, #0]
 8006dd2:	b91b      	cbnz	r3, 8006ddc <_malloc_r+0x3c>
 8006dd4:	4630      	mov	r0, r6
 8006dd6:	f000 f895 	bl	8006f04 <_sbrk_r>
 8006dda:	6020      	str	r0, [r4, #0]
 8006ddc:	4629      	mov	r1, r5
 8006dde:	4630      	mov	r0, r6
 8006de0:	f000 f890 	bl	8006f04 <_sbrk_r>
 8006de4:	1c43      	adds	r3, r0, #1
 8006de6:	d124      	bne.n	8006e32 <_malloc_r+0x92>
 8006de8:	230c      	movs	r3, #12
 8006dea:	4630      	mov	r0, r6
 8006dec:	6033      	str	r3, [r6, #0]
 8006dee:	f000 fa0b 	bl	8007208 <__malloc_unlock>
 8006df2:	e7e4      	b.n	8006dbe <_malloc_r+0x1e>
 8006df4:	680b      	ldr	r3, [r1, #0]
 8006df6:	1b5b      	subs	r3, r3, r5
 8006df8:	d418      	bmi.n	8006e2c <_malloc_r+0x8c>
 8006dfa:	2b0b      	cmp	r3, #11
 8006dfc:	d90f      	bls.n	8006e1e <_malloc_r+0x7e>
 8006dfe:	600b      	str	r3, [r1, #0]
 8006e00:	18cc      	adds	r4, r1, r3
 8006e02:	50cd      	str	r5, [r1, r3]
 8006e04:	4630      	mov	r0, r6
 8006e06:	f000 f9ff 	bl	8007208 <__malloc_unlock>
 8006e0a:	f104 000b 	add.w	r0, r4, #11
 8006e0e:	1d23      	adds	r3, r4, #4
 8006e10:	f020 0007 	bic.w	r0, r0, #7
 8006e14:	1ac3      	subs	r3, r0, r3
 8006e16:	d0d3      	beq.n	8006dc0 <_malloc_r+0x20>
 8006e18:	425a      	negs	r2, r3
 8006e1a:	50e2      	str	r2, [r4, r3]
 8006e1c:	e7d0      	b.n	8006dc0 <_malloc_r+0x20>
 8006e1e:	684b      	ldr	r3, [r1, #4]
 8006e20:	428c      	cmp	r4, r1
 8006e22:	bf16      	itet	ne
 8006e24:	6063      	strne	r3, [r4, #4]
 8006e26:	6013      	streq	r3, [r2, #0]
 8006e28:	460c      	movne	r4, r1
 8006e2a:	e7eb      	b.n	8006e04 <_malloc_r+0x64>
 8006e2c:	460c      	mov	r4, r1
 8006e2e:	6849      	ldr	r1, [r1, #4]
 8006e30:	e7cc      	b.n	8006dcc <_malloc_r+0x2c>
 8006e32:	1cc4      	adds	r4, r0, #3
 8006e34:	f024 0403 	bic.w	r4, r4, #3
 8006e38:	42a0      	cmp	r0, r4
 8006e3a:	d005      	beq.n	8006e48 <_malloc_r+0xa8>
 8006e3c:	1a21      	subs	r1, r4, r0
 8006e3e:	4630      	mov	r0, r6
 8006e40:	f000 f860 	bl	8006f04 <_sbrk_r>
 8006e44:	3001      	adds	r0, #1
 8006e46:	d0cf      	beq.n	8006de8 <_malloc_r+0x48>
 8006e48:	6025      	str	r5, [r4, #0]
 8006e4a:	e7db      	b.n	8006e04 <_malloc_r+0x64>
 8006e4c:	200006c4 	.word	0x200006c4
 8006e50:	200006c8 	.word	0x200006c8

08006e54 <srand>:
 8006e54:	b538      	push	{r3, r4, r5, lr}
 8006e56:	4b0d      	ldr	r3, [pc, #52]	; (8006e8c <srand+0x38>)
 8006e58:	4605      	mov	r5, r0
 8006e5a:	681c      	ldr	r4, [r3, #0]
 8006e5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006e5e:	b97b      	cbnz	r3, 8006e80 <srand+0x2c>
 8006e60:	2018      	movs	r0, #24
 8006e62:	f7ff ff1f 	bl	8006ca4 <malloc>
 8006e66:	4a0a      	ldr	r2, [pc, #40]	; (8006e90 <srand+0x3c>)
 8006e68:	4b0a      	ldr	r3, [pc, #40]	; (8006e94 <srand+0x40>)
 8006e6a:	63a0      	str	r0, [r4, #56]	; 0x38
 8006e6c:	e9c0 2300 	strd	r2, r3, [r0]
 8006e70:	4b09      	ldr	r3, [pc, #36]	; (8006e98 <srand+0x44>)
 8006e72:	2201      	movs	r2, #1
 8006e74:	6083      	str	r3, [r0, #8]
 8006e76:	230b      	movs	r3, #11
 8006e78:	8183      	strh	r3, [r0, #12]
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8006e80:	2200      	movs	r2, #0
 8006e82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006e84:	611d      	str	r5, [r3, #16]
 8006e86:	615a      	str	r2, [r3, #20]
 8006e88:	bd38      	pop	{r3, r4, r5, pc}
 8006e8a:	bf00      	nop
 8006e8c:	20000494 	.word	0x20000494
 8006e90:	abcd330e 	.word	0xabcd330e
 8006e94:	e66d1234 	.word	0xe66d1234
 8006e98:	0005deec 	.word	0x0005deec

08006e9c <rand>:
 8006e9c:	b538      	push	{r3, r4, r5, lr}
 8006e9e:	4b13      	ldr	r3, [pc, #76]	; (8006eec <rand+0x50>)
 8006ea0:	681c      	ldr	r4, [r3, #0]
 8006ea2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006ea4:	b97b      	cbnz	r3, 8006ec6 <rand+0x2a>
 8006ea6:	2018      	movs	r0, #24
 8006ea8:	f7ff fefc 	bl	8006ca4 <malloc>
 8006eac:	4a10      	ldr	r2, [pc, #64]	; (8006ef0 <rand+0x54>)
 8006eae:	4b11      	ldr	r3, [pc, #68]	; (8006ef4 <rand+0x58>)
 8006eb0:	63a0      	str	r0, [r4, #56]	; 0x38
 8006eb2:	e9c0 2300 	strd	r2, r3, [r0]
 8006eb6:	4b10      	ldr	r3, [pc, #64]	; (8006ef8 <rand+0x5c>)
 8006eb8:	2201      	movs	r2, #1
 8006eba:	6083      	str	r3, [r0, #8]
 8006ebc:	230b      	movs	r3, #11
 8006ebe:	8183      	strh	r3, [r0, #12]
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8006ec6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006ec8:	480c      	ldr	r0, [pc, #48]	; (8006efc <rand+0x60>)
 8006eca:	690a      	ldr	r2, [r1, #16]
 8006ecc:	694b      	ldr	r3, [r1, #20]
 8006ece:	4350      	muls	r0, r2
 8006ed0:	4c0b      	ldr	r4, [pc, #44]	; (8006f00 <rand+0x64>)
 8006ed2:	fb04 0003 	mla	r0, r4, r3, r0
 8006ed6:	fba2 2304 	umull	r2, r3, r2, r4
 8006eda:	4403      	add	r3, r0
 8006edc:	1c54      	adds	r4, r2, #1
 8006ede:	f143 0500 	adc.w	r5, r3, #0
 8006ee2:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8006ee6:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8006eea:	bd38      	pop	{r3, r4, r5, pc}
 8006eec:	20000494 	.word	0x20000494
 8006ef0:	abcd330e 	.word	0xabcd330e
 8006ef4:	e66d1234 	.word	0xe66d1234
 8006ef8:	0005deec 	.word	0x0005deec
 8006efc:	5851f42d 	.word	0x5851f42d
 8006f00:	4c957f2d 	.word	0x4c957f2d

08006f04 <_sbrk_r>:
 8006f04:	b538      	push	{r3, r4, r5, lr}
 8006f06:	2300      	movs	r3, #0
 8006f08:	4c05      	ldr	r4, [pc, #20]	; (8006f20 <_sbrk_r+0x1c>)
 8006f0a:	4605      	mov	r5, r0
 8006f0c:	4608      	mov	r0, r1
 8006f0e:	6023      	str	r3, [r4, #0]
 8006f10:	f000 fcb8 	bl	8007884 <_sbrk>
 8006f14:	1c43      	adds	r3, r0, #1
 8006f16:	d102      	bne.n	8006f1e <_sbrk_r+0x1a>
 8006f18:	6823      	ldr	r3, [r4, #0]
 8006f1a:	b103      	cbz	r3, 8006f1e <_sbrk_r+0x1a>
 8006f1c:	602b      	str	r3, [r5, #0]
 8006f1e:	bd38      	pop	{r3, r4, r5, pc}
 8006f20:	20000920 	.word	0x20000920

08006f24 <siprintf>:
 8006f24:	b40e      	push	{r1, r2, r3}
 8006f26:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f2a:	b500      	push	{lr}
 8006f2c:	b09c      	sub	sp, #112	; 0x70
 8006f2e:	ab1d      	add	r3, sp, #116	; 0x74
 8006f30:	9002      	str	r0, [sp, #8]
 8006f32:	9006      	str	r0, [sp, #24]
 8006f34:	9107      	str	r1, [sp, #28]
 8006f36:	9104      	str	r1, [sp, #16]
 8006f38:	4808      	ldr	r0, [pc, #32]	; (8006f5c <siprintf+0x38>)
 8006f3a:	4909      	ldr	r1, [pc, #36]	; (8006f60 <siprintf+0x3c>)
 8006f3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f40:	9105      	str	r1, [sp, #20]
 8006f42:	6800      	ldr	r0, [r0, #0]
 8006f44:	a902      	add	r1, sp, #8
 8006f46:	9301      	str	r3, [sp, #4]
 8006f48:	f000 f9ba 	bl	80072c0 <_svfiprintf_r>
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	9b02      	ldr	r3, [sp, #8]
 8006f50:	701a      	strb	r2, [r3, #0]
 8006f52:	b01c      	add	sp, #112	; 0x70
 8006f54:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f58:	b003      	add	sp, #12
 8006f5a:	4770      	bx	lr
 8006f5c:	20000494 	.word	0x20000494
 8006f60:	ffff0208 	.word	0xffff0208

08006f64 <strcat>:
 8006f64:	4603      	mov	r3, r0
 8006f66:	b510      	push	{r4, lr}
 8006f68:	781a      	ldrb	r2, [r3, #0]
 8006f6a:	1c5c      	adds	r4, r3, #1
 8006f6c:	b93a      	cbnz	r2, 8006f7e <strcat+0x1a>
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f74:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f78:	2a00      	cmp	r2, #0
 8006f7a:	d1f9      	bne.n	8006f70 <strcat+0xc>
 8006f7c:	bd10      	pop	{r4, pc}
 8006f7e:	4623      	mov	r3, r4
 8006f80:	e7f2      	b.n	8006f68 <strcat+0x4>

08006f82 <strcpy>:
 8006f82:	4603      	mov	r3, r0
 8006f84:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f88:	f803 2b01 	strb.w	r2, [r3], #1
 8006f8c:	2a00      	cmp	r2, #0
 8006f8e:	d1f9      	bne.n	8006f84 <strcpy+0x2>
 8006f90:	4770      	bx	lr
	...

08006f94 <strtok>:
 8006f94:	4b13      	ldr	r3, [pc, #76]	; (8006fe4 <strtok+0x50>)
 8006f96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f9a:	681d      	ldr	r5, [r3, #0]
 8006f9c:	4606      	mov	r6, r0
 8006f9e:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8006fa0:	460f      	mov	r7, r1
 8006fa2:	b9b4      	cbnz	r4, 8006fd2 <strtok+0x3e>
 8006fa4:	2050      	movs	r0, #80	; 0x50
 8006fa6:	f7ff fe7d 	bl	8006ca4 <malloc>
 8006faa:	65a8      	str	r0, [r5, #88]	; 0x58
 8006fac:	e9c0 4400 	strd	r4, r4, [r0]
 8006fb0:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006fb4:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006fb8:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8006fbc:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006fc0:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006fc4:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006fc8:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8006fcc:	6184      	str	r4, [r0, #24]
 8006fce:	7704      	strb	r4, [r0, #28]
 8006fd0:	6244      	str	r4, [r0, #36]	; 0x24
 8006fd2:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8006fd4:	4639      	mov	r1, r7
 8006fd6:	4630      	mov	r0, r6
 8006fd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fdc:	2301      	movs	r3, #1
 8006fde:	f000 b803 	b.w	8006fe8 <__strtok_r>
 8006fe2:	bf00      	nop
 8006fe4:	20000494 	.word	0x20000494

08006fe8 <__strtok_r>:
 8006fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fea:	b918      	cbnz	r0, 8006ff4 <__strtok_r+0xc>
 8006fec:	6810      	ldr	r0, [r2, #0]
 8006fee:	b908      	cbnz	r0, 8006ff4 <__strtok_r+0xc>
 8006ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ff2:	4620      	mov	r0, r4
 8006ff4:	4604      	mov	r4, r0
 8006ff6:	460f      	mov	r7, r1
 8006ff8:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006ffc:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007000:	b91e      	cbnz	r6, 800700a <__strtok_r+0x22>
 8007002:	b96d      	cbnz	r5, 8007020 <__strtok_r+0x38>
 8007004:	6015      	str	r5, [r2, #0]
 8007006:	4628      	mov	r0, r5
 8007008:	e7f2      	b.n	8006ff0 <__strtok_r+0x8>
 800700a:	42b5      	cmp	r5, r6
 800700c:	d1f6      	bne.n	8006ffc <__strtok_r+0x14>
 800700e:	2b00      	cmp	r3, #0
 8007010:	d1ef      	bne.n	8006ff2 <__strtok_r+0xa>
 8007012:	6014      	str	r4, [r2, #0]
 8007014:	7003      	strb	r3, [r0, #0]
 8007016:	e7eb      	b.n	8006ff0 <__strtok_r+0x8>
 8007018:	462b      	mov	r3, r5
 800701a:	e00d      	b.n	8007038 <__strtok_r+0x50>
 800701c:	b926      	cbnz	r6, 8007028 <__strtok_r+0x40>
 800701e:	461c      	mov	r4, r3
 8007020:	4623      	mov	r3, r4
 8007022:	460f      	mov	r7, r1
 8007024:	f813 5b01 	ldrb.w	r5, [r3], #1
 8007028:	f817 6b01 	ldrb.w	r6, [r7], #1
 800702c:	42b5      	cmp	r5, r6
 800702e:	d1f5      	bne.n	800701c <__strtok_r+0x34>
 8007030:	2d00      	cmp	r5, #0
 8007032:	d0f1      	beq.n	8007018 <__strtok_r+0x30>
 8007034:	2100      	movs	r1, #0
 8007036:	7021      	strb	r1, [r4, #0]
 8007038:	6013      	str	r3, [r2, #0]
 800703a:	e7d9      	b.n	8006ff0 <__strtok_r+0x8>

0800703c <_strtol_l.isra.0>:
 800703c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007040:	4680      	mov	r8, r0
 8007042:	4689      	mov	r9, r1
 8007044:	4692      	mov	sl, r2
 8007046:	461e      	mov	r6, r3
 8007048:	460f      	mov	r7, r1
 800704a:	463d      	mov	r5, r7
 800704c:	9808      	ldr	r0, [sp, #32]
 800704e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007052:	f000 f8c3 	bl	80071dc <__locale_ctype_ptr_l>
 8007056:	4420      	add	r0, r4
 8007058:	7843      	ldrb	r3, [r0, #1]
 800705a:	f013 0308 	ands.w	r3, r3, #8
 800705e:	d132      	bne.n	80070c6 <_strtol_l.isra.0+0x8a>
 8007060:	2c2d      	cmp	r4, #45	; 0x2d
 8007062:	d132      	bne.n	80070ca <_strtol_l.isra.0+0x8e>
 8007064:	2201      	movs	r2, #1
 8007066:	787c      	ldrb	r4, [r7, #1]
 8007068:	1cbd      	adds	r5, r7, #2
 800706a:	2e00      	cmp	r6, #0
 800706c:	d05d      	beq.n	800712a <_strtol_l.isra.0+0xee>
 800706e:	2e10      	cmp	r6, #16
 8007070:	d109      	bne.n	8007086 <_strtol_l.isra.0+0x4a>
 8007072:	2c30      	cmp	r4, #48	; 0x30
 8007074:	d107      	bne.n	8007086 <_strtol_l.isra.0+0x4a>
 8007076:	782b      	ldrb	r3, [r5, #0]
 8007078:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800707c:	2b58      	cmp	r3, #88	; 0x58
 800707e:	d14f      	bne.n	8007120 <_strtol_l.isra.0+0xe4>
 8007080:	2610      	movs	r6, #16
 8007082:	786c      	ldrb	r4, [r5, #1]
 8007084:	3502      	adds	r5, #2
 8007086:	2a00      	cmp	r2, #0
 8007088:	bf14      	ite	ne
 800708a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800708e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8007092:	2700      	movs	r7, #0
 8007094:	fbb1 fcf6 	udiv	ip, r1, r6
 8007098:	4638      	mov	r0, r7
 800709a:	fb06 1e1c 	mls	lr, r6, ip, r1
 800709e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80070a2:	2b09      	cmp	r3, #9
 80070a4:	d817      	bhi.n	80070d6 <_strtol_l.isra.0+0x9a>
 80070a6:	461c      	mov	r4, r3
 80070a8:	42a6      	cmp	r6, r4
 80070aa:	dd23      	ble.n	80070f4 <_strtol_l.isra.0+0xb8>
 80070ac:	1c7b      	adds	r3, r7, #1
 80070ae:	d007      	beq.n	80070c0 <_strtol_l.isra.0+0x84>
 80070b0:	4584      	cmp	ip, r0
 80070b2:	d31c      	bcc.n	80070ee <_strtol_l.isra.0+0xb2>
 80070b4:	d101      	bne.n	80070ba <_strtol_l.isra.0+0x7e>
 80070b6:	45a6      	cmp	lr, r4
 80070b8:	db19      	blt.n	80070ee <_strtol_l.isra.0+0xb2>
 80070ba:	2701      	movs	r7, #1
 80070bc:	fb00 4006 	mla	r0, r0, r6, r4
 80070c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80070c4:	e7eb      	b.n	800709e <_strtol_l.isra.0+0x62>
 80070c6:	462f      	mov	r7, r5
 80070c8:	e7bf      	b.n	800704a <_strtol_l.isra.0+0xe>
 80070ca:	2c2b      	cmp	r4, #43	; 0x2b
 80070cc:	bf04      	itt	eq
 80070ce:	1cbd      	addeq	r5, r7, #2
 80070d0:	787c      	ldrbeq	r4, [r7, #1]
 80070d2:	461a      	mov	r2, r3
 80070d4:	e7c9      	b.n	800706a <_strtol_l.isra.0+0x2e>
 80070d6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80070da:	2b19      	cmp	r3, #25
 80070dc:	d801      	bhi.n	80070e2 <_strtol_l.isra.0+0xa6>
 80070de:	3c37      	subs	r4, #55	; 0x37
 80070e0:	e7e2      	b.n	80070a8 <_strtol_l.isra.0+0x6c>
 80070e2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80070e6:	2b19      	cmp	r3, #25
 80070e8:	d804      	bhi.n	80070f4 <_strtol_l.isra.0+0xb8>
 80070ea:	3c57      	subs	r4, #87	; 0x57
 80070ec:	e7dc      	b.n	80070a8 <_strtol_l.isra.0+0x6c>
 80070ee:	f04f 37ff 	mov.w	r7, #4294967295
 80070f2:	e7e5      	b.n	80070c0 <_strtol_l.isra.0+0x84>
 80070f4:	1c7b      	adds	r3, r7, #1
 80070f6:	d108      	bne.n	800710a <_strtol_l.isra.0+0xce>
 80070f8:	2322      	movs	r3, #34	; 0x22
 80070fa:	4608      	mov	r0, r1
 80070fc:	f8c8 3000 	str.w	r3, [r8]
 8007100:	f1ba 0f00 	cmp.w	sl, #0
 8007104:	d107      	bne.n	8007116 <_strtol_l.isra.0+0xda>
 8007106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800710a:	b102      	cbz	r2, 800710e <_strtol_l.isra.0+0xd2>
 800710c:	4240      	negs	r0, r0
 800710e:	f1ba 0f00 	cmp.w	sl, #0
 8007112:	d0f8      	beq.n	8007106 <_strtol_l.isra.0+0xca>
 8007114:	b10f      	cbz	r7, 800711a <_strtol_l.isra.0+0xde>
 8007116:	f105 39ff 	add.w	r9, r5, #4294967295
 800711a:	f8ca 9000 	str.w	r9, [sl]
 800711e:	e7f2      	b.n	8007106 <_strtol_l.isra.0+0xca>
 8007120:	2430      	movs	r4, #48	; 0x30
 8007122:	2e00      	cmp	r6, #0
 8007124:	d1af      	bne.n	8007086 <_strtol_l.isra.0+0x4a>
 8007126:	2608      	movs	r6, #8
 8007128:	e7ad      	b.n	8007086 <_strtol_l.isra.0+0x4a>
 800712a:	2c30      	cmp	r4, #48	; 0x30
 800712c:	d0a3      	beq.n	8007076 <_strtol_l.isra.0+0x3a>
 800712e:	260a      	movs	r6, #10
 8007130:	e7a9      	b.n	8007086 <_strtol_l.isra.0+0x4a>
	...

08007134 <strtol>:
 8007134:	4b08      	ldr	r3, [pc, #32]	; (8007158 <strtol+0x24>)
 8007136:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007138:	681c      	ldr	r4, [r3, #0]
 800713a:	4d08      	ldr	r5, [pc, #32]	; (800715c <strtol+0x28>)
 800713c:	6a23      	ldr	r3, [r4, #32]
 800713e:	2b00      	cmp	r3, #0
 8007140:	bf08      	it	eq
 8007142:	462b      	moveq	r3, r5
 8007144:	9300      	str	r3, [sp, #0]
 8007146:	4613      	mov	r3, r2
 8007148:	460a      	mov	r2, r1
 800714a:	4601      	mov	r1, r0
 800714c:	4620      	mov	r0, r4
 800714e:	f7ff ff75 	bl	800703c <_strtol_l.isra.0>
 8007152:	b003      	add	sp, #12
 8007154:	bd30      	pop	{r4, r5, pc}
 8007156:	bf00      	nop
 8007158:	20000494 	.word	0x20000494
 800715c:	200004f8 	.word	0x200004f8

08007160 <__utoa>:
 8007160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007162:	b08b      	sub	sp, #44	; 0x2c
 8007164:	4605      	mov	r5, r0
 8007166:	460c      	mov	r4, r1
 8007168:	466e      	mov	r6, sp
 800716a:	4b1b      	ldr	r3, [pc, #108]	; (80071d8 <__utoa+0x78>)
 800716c:	f103 0c20 	add.w	ip, r3, #32
 8007170:	4637      	mov	r7, r6
 8007172:	6818      	ldr	r0, [r3, #0]
 8007174:	6859      	ldr	r1, [r3, #4]
 8007176:	3308      	adds	r3, #8
 8007178:	c703      	stmia	r7!, {r0, r1}
 800717a:	4563      	cmp	r3, ip
 800717c:	463e      	mov	r6, r7
 800717e:	d1f7      	bne.n	8007170 <__utoa+0x10>
 8007180:	6818      	ldr	r0, [r3, #0]
 8007182:	791b      	ldrb	r3, [r3, #4]
 8007184:	6038      	str	r0, [r7, #0]
 8007186:	713b      	strb	r3, [r7, #4]
 8007188:	1e93      	subs	r3, r2, #2
 800718a:	2b22      	cmp	r3, #34	; 0x22
 800718c:	f04f 0300 	mov.w	r3, #0
 8007190:	d904      	bls.n	800719c <__utoa+0x3c>
 8007192:	7023      	strb	r3, [r4, #0]
 8007194:	461c      	mov	r4, r3
 8007196:	4620      	mov	r0, r4
 8007198:	b00b      	add	sp, #44	; 0x2c
 800719a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800719c:	1e66      	subs	r6, r4, #1
 800719e:	fbb5 f0f2 	udiv	r0, r5, r2
 80071a2:	fb02 5510 	mls	r5, r2, r0, r5
 80071a6:	af0a      	add	r7, sp, #40	; 0x28
 80071a8:	443d      	add	r5, r7
 80071aa:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 80071ae:	1c59      	adds	r1, r3, #1
 80071b0:	f806 5f01 	strb.w	r5, [r6, #1]!
 80071b4:	4605      	mov	r5, r0
 80071b6:	b968      	cbnz	r0, 80071d4 <__utoa+0x74>
 80071b8:	4622      	mov	r2, r4
 80071ba:	5460      	strb	r0, [r4, r1]
 80071bc:	4423      	add	r3, r4
 80071be:	1b19      	subs	r1, r3, r4
 80071c0:	1b10      	subs	r0, r2, r4
 80071c2:	4281      	cmp	r1, r0
 80071c4:	dde7      	ble.n	8007196 <__utoa+0x36>
 80071c6:	7811      	ldrb	r1, [r2, #0]
 80071c8:	7818      	ldrb	r0, [r3, #0]
 80071ca:	f802 0b01 	strb.w	r0, [r2], #1
 80071ce:	f803 1901 	strb.w	r1, [r3], #-1
 80071d2:	e7f4      	b.n	80071be <__utoa+0x5e>
 80071d4:	460b      	mov	r3, r1
 80071d6:	e7e2      	b.n	800719e <__utoa+0x3e>
 80071d8:	0800aa88 	.word	0x0800aa88

080071dc <__locale_ctype_ptr_l>:
 80071dc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80071e0:	4770      	bx	lr

080071e2 <__ascii_mbtowc>:
 80071e2:	b082      	sub	sp, #8
 80071e4:	b901      	cbnz	r1, 80071e8 <__ascii_mbtowc+0x6>
 80071e6:	a901      	add	r1, sp, #4
 80071e8:	b142      	cbz	r2, 80071fc <__ascii_mbtowc+0x1a>
 80071ea:	b14b      	cbz	r3, 8007200 <__ascii_mbtowc+0x1e>
 80071ec:	7813      	ldrb	r3, [r2, #0]
 80071ee:	600b      	str	r3, [r1, #0]
 80071f0:	7812      	ldrb	r2, [r2, #0]
 80071f2:	1c10      	adds	r0, r2, #0
 80071f4:	bf18      	it	ne
 80071f6:	2001      	movne	r0, #1
 80071f8:	b002      	add	sp, #8
 80071fa:	4770      	bx	lr
 80071fc:	4610      	mov	r0, r2
 80071fe:	e7fb      	b.n	80071f8 <__ascii_mbtowc+0x16>
 8007200:	f06f 0001 	mvn.w	r0, #1
 8007204:	e7f8      	b.n	80071f8 <__ascii_mbtowc+0x16>

08007206 <__malloc_lock>:
 8007206:	4770      	bx	lr

08007208 <__malloc_unlock>:
 8007208:	4770      	bx	lr

0800720a <__ssputs_r>:
 800720a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800720e:	688e      	ldr	r6, [r1, #8]
 8007210:	4682      	mov	sl, r0
 8007212:	429e      	cmp	r6, r3
 8007214:	460c      	mov	r4, r1
 8007216:	4690      	mov	r8, r2
 8007218:	4699      	mov	r9, r3
 800721a:	d837      	bhi.n	800728c <__ssputs_r+0x82>
 800721c:	898a      	ldrh	r2, [r1, #12]
 800721e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007222:	d031      	beq.n	8007288 <__ssputs_r+0x7e>
 8007224:	2302      	movs	r3, #2
 8007226:	6825      	ldr	r5, [r4, #0]
 8007228:	6909      	ldr	r1, [r1, #16]
 800722a:	1a6f      	subs	r7, r5, r1
 800722c:	6965      	ldr	r5, [r4, #20]
 800722e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007232:	fb95 f5f3 	sdiv	r5, r5, r3
 8007236:	f109 0301 	add.w	r3, r9, #1
 800723a:	443b      	add	r3, r7
 800723c:	429d      	cmp	r5, r3
 800723e:	bf38      	it	cc
 8007240:	461d      	movcc	r5, r3
 8007242:	0553      	lsls	r3, r2, #21
 8007244:	d530      	bpl.n	80072a8 <__ssputs_r+0x9e>
 8007246:	4629      	mov	r1, r5
 8007248:	f7ff fdaa 	bl	8006da0 <_malloc_r>
 800724c:	4606      	mov	r6, r0
 800724e:	b950      	cbnz	r0, 8007266 <__ssputs_r+0x5c>
 8007250:	230c      	movs	r3, #12
 8007252:	f04f 30ff 	mov.w	r0, #4294967295
 8007256:	f8ca 3000 	str.w	r3, [sl]
 800725a:	89a3      	ldrh	r3, [r4, #12]
 800725c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007260:	81a3      	strh	r3, [r4, #12]
 8007262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007266:	463a      	mov	r2, r7
 8007268:	6921      	ldr	r1, [r4, #16]
 800726a:	f7ff fd3a 	bl	8006ce2 <memcpy>
 800726e:	89a3      	ldrh	r3, [r4, #12]
 8007270:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007278:	81a3      	strh	r3, [r4, #12]
 800727a:	6126      	str	r6, [r4, #16]
 800727c:	443e      	add	r6, r7
 800727e:	6026      	str	r6, [r4, #0]
 8007280:	464e      	mov	r6, r9
 8007282:	6165      	str	r5, [r4, #20]
 8007284:	1bed      	subs	r5, r5, r7
 8007286:	60a5      	str	r5, [r4, #8]
 8007288:	454e      	cmp	r6, r9
 800728a:	d900      	bls.n	800728e <__ssputs_r+0x84>
 800728c:	464e      	mov	r6, r9
 800728e:	4632      	mov	r2, r6
 8007290:	4641      	mov	r1, r8
 8007292:	6820      	ldr	r0, [r4, #0]
 8007294:	f000 faaf 	bl	80077f6 <memmove>
 8007298:	68a3      	ldr	r3, [r4, #8]
 800729a:	2000      	movs	r0, #0
 800729c:	1b9b      	subs	r3, r3, r6
 800729e:	60a3      	str	r3, [r4, #8]
 80072a0:	6823      	ldr	r3, [r4, #0]
 80072a2:	441e      	add	r6, r3
 80072a4:	6026      	str	r6, [r4, #0]
 80072a6:	e7dc      	b.n	8007262 <__ssputs_r+0x58>
 80072a8:	462a      	mov	r2, r5
 80072aa:	f000 fabd 	bl	8007828 <_realloc_r>
 80072ae:	4606      	mov	r6, r0
 80072b0:	2800      	cmp	r0, #0
 80072b2:	d1e2      	bne.n	800727a <__ssputs_r+0x70>
 80072b4:	6921      	ldr	r1, [r4, #16]
 80072b6:	4650      	mov	r0, sl
 80072b8:	f7ff fd26 	bl	8006d08 <_free_r>
 80072bc:	e7c8      	b.n	8007250 <__ssputs_r+0x46>
	...

080072c0 <_svfiprintf_r>:
 80072c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c4:	461d      	mov	r5, r3
 80072c6:	898b      	ldrh	r3, [r1, #12]
 80072c8:	b09d      	sub	sp, #116	; 0x74
 80072ca:	061f      	lsls	r7, r3, #24
 80072cc:	4680      	mov	r8, r0
 80072ce:	460c      	mov	r4, r1
 80072d0:	4616      	mov	r6, r2
 80072d2:	d50f      	bpl.n	80072f4 <_svfiprintf_r+0x34>
 80072d4:	690b      	ldr	r3, [r1, #16]
 80072d6:	b96b      	cbnz	r3, 80072f4 <_svfiprintf_r+0x34>
 80072d8:	2140      	movs	r1, #64	; 0x40
 80072da:	f7ff fd61 	bl	8006da0 <_malloc_r>
 80072de:	6020      	str	r0, [r4, #0]
 80072e0:	6120      	str	r0, [r4, #16]
 80072e2:	b928      	cbnz	r0, 80072f0 <_svfiprintf_r+0x30>
 80072e4:	230c      	movs	r3, #12
 80072e6:	f8c8 3000 	str.w	r3, [r8]
 80072ea:	f04f 30ff 	mov.w	r0, #4294967295
 80072ee:	e0c8      	b.n	8007482 <_svfiprintf_r+0x1c2>
 80072f0:	2340      	movs	r3, #64	; 0x40
 80072f2:	6163      	str	r3, [r4, #20]
 80072f4:	2300      	movs	r3, #0
 80072f6:	9309      	str	r3, [sp, #36]	; 0x24
 80072f8:	2320      	movs	r3, #32
 80072fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80072fe:	2330      	movs	r3, #48	; 0x30
 8007300:	f04f 0b01 	mov.w	fp, #1
 8007304:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007308:	9503      	str	r5, [sp, #12]
 800730a:	4637      	mov	r7, r6
 800730c:	463d      	mov	r5, r7
 800730e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007312:	b10b      	cbz	r3, 8007318 <_svfiprintf_r+0x58>
 8007314:	2b25      	cmp	r3, #37	; 0x25
 8007316:	d13e      	bne.n	8007396 <_svfiprintf_r+0xd6>
 8007318:	ebb7 0a06 	subs.w	sl, r7, r6
 800731c:	d00b      	beq.n	8007336 <_svfiprintf_r+0x76>
 800731e:	4653      	mov	r3, sl
 8007320:	4632      	mov	r2, r6
 8007322:	4621      	mov	r1, r4
 8007324:	4640      	mov	r0, r8
 8007326:	f7ff ff70 	bl	800720a <__ssputs_r>
 800732a:	3001      	adds	r0, #1
 800732c:	f000 80a4 	beq.w	8007478 <_svfiprintf_r+0x1b8>
 8007330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007332:	4453      	add	r3, sl
 8007334:	9309      	str	r3, [sp, #36]	; 0x24
 8007336:	783b      	ldrb	r3, [r7, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	f000 809d 	beq.w	8007478 <_svfiprintf_r+0x1b8>
 800733e:	2300      	movs	r3, #0
 8007340:	f04f 32ff 	mov.w	r2, #4294967295
 8007344:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007348:	9304      	str	r3, [sp, #16]
 800734a:	9307      	str	r3, [sp, #28]
 800734c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007350:	931a      	str	r3, [sp, #104]	; 0x68
 8007352:	462f      	mov	r7, r5
 8007354:	2205      	movs	r2, #5
 8007356:	f817 1b01 	ldrb.w	r1, [r7], #1
 800735a:	4850      	ldr	r0, [pc, #320]	; (800749c <_svfiprintf_r+0x1dc>)
 800735c:	f000 fa3d 	bl	80077da <memchr>
 8007360:	9b04      	ldr	r3, [sp, #16]
 8007362:	b9d0      	cbnz	r0, 800739a <_svfiprintf_r+0xda>
 8007364:	06d9      	lsls	r1, r3, #27
 8007366:	bf44      	itt	mi
 8007368:	2220      	movmi	r2, #32
 800736a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800736e:	071a      	lsls	r2, r3, #28
 8007370:	bf44      	itt	mi
 8007372:	222b      	movmi	r2, #43	; 0x2b
 8007374:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007378:	782a      	ldrb	r2, [r5, #0]
 800737a:	2a2a      	cmp	r2, #42	; 0x2a
 800737c:	d015      	beq.n	80073aa <_svfiprintf_r+0xea>
 800737e:	462f      	mov	r7, r5
 8007380:	2000      	movs	r0, #0
 8007382:	250a      	movs	r5, #10
 8007384:	9a07      	ldr	r2, [sp, #28]
 8007386:	4639      	mov	r1, r7
 8007388:	f811 3b01 	ldrb.w	r3, [r1], #1
 800738c:	3b30      	subs	r3, #48	; 0x30
 800738e:	2b09      	cmp	r3, #9
 8007390:	d94d      	bls.n	800742e <_svfiprintf_r+0x16e>
 8007392:	b1b8      	cbz	r0, 80073c4 <_svfiprintf_r+0x104>
 8007394:	e00f      	b.n	80073b6 <_svfiprintf_r+0xf6>
 8007396:	462f      	mov	r7, r5
 8007398:	e7b8      	b.n	800730c <_svfiprintf_r+0x4c>
 800739a:	4a40      	ldr	r2, [pc, #256]	; (800749c <_svfiprintf_r+0x1dc>)
 800739c:	463d      	mov	r5, r7
 800739e:	1a80      	subs	r0, r0, r2
 80073a0:	fa0b f000 	lsl.w	r0, fp, r0
 80073a4:	4318      	orrs	r0, r3
 80073a6:	9004      	str	r0, [sp, #16]
 80073a8:	e7d3      	b.n	8007352 <_svfiprintf_r+0x92>
 80073aa:	9a03      	ldr	r2, [sp, #12]
 80073ac:	1d11      	adds	r1, r2, #4
 80073ae:	6812      	ldr	r2, [r2, #0]
 80073b0:	9103      	str	r1, [sp, #12]
 80073b2:	2a00      	cmp	r2, #0
 80073b4:	db01      	blt.n	80073ba <_svfiprintf_r+0xfa>
 80073b6:	9207      	str	r2, [sp, #28]
 80073b8:	e004      	b.n	80073c4 <_svfiprintf_r+0x104>
 80073ba:	4252      	negs	r2, r2
 80073bc:	f043 0302 	orr.w	r3, r3, #2
 80073c0:	9207      	str	r2, [sp, #28]
 80073c2:	9304      	str	r3, [sp, #16]
 80073c4:	783b      	ldrb	r3, [r7, #0]
 80073c6:	2b2e      	cmp	r3, #46	; 0x2e
 80073c8:	d10c      	bne.n	80073e4 <_svfiprintf_r+0x124>
 80073ca:	787b      	ldrb	r3, [r7, #1]
 80073cc:	2b2a      	cmp	r3, #42	; 0x2a
 80073ce:	d133      	bne.n	8007438 <_svfiprintf_r+0x178>
 80073d0:	9b03      	ldr	r3, [sp, #12]
 80073d2:	3702      	adds	r7, #2
 80073d4:	1d1a      	adds	r2, r3, #4
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	9203      	str	r2, [sp, #12]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	bfb8      	it	lt
 80073de:	f04f 33ff 	movlt.w	r3, #4294967295
 80073e2:	9305      	str	r3, [sp, #20]
 80073e4:	4d2e      	ldr	r5, [pc, #184]	; (80074a0 <_svfiprintf_r+0x1e0>)
 80073e6:	2203      	movs	r2, #3
 80073e8:	7839      	ldrb	r1, [r7, #0]
 80073ea:	4628      	mov	r0, r5
 80073ec:	f000 f9f5 	bl	80077da <memchr>
 80073f0:	b138      	cbz	r0, 8007402 <_svfiprintf_r+0x142>
 80073f2:	2340      	movs	r3, #64	; 0x40
 80073f4:	1b40      	subs	r0, r0, r5
 80073f6:	fa03 f000 	lsl.w	r0, r3, r0
 80073fa:	9b04      	ldr	r3, [sp, #16]
 80073fc:	3701      	adds	r7, #1
 80073fe:	4303      	orrs	r3, r0
 8007400:	9304      	str	r3, [sp, #16]
 8007402:	7839      	ldrb	r1, [r7, #0]
 8007404:	2206      	movs	r2, #6
 8007406:	4827      	ldr	r0, [pc, #156]	; (80074a4 <_svfiprintf_r+0x1e4>)
 8007408:	1c7e      	adds	r6, r7, #1
 800740a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800740e:	f000 f9e4 	bl	80077da <memchr>
 8007412:	2800      	cmp	r0, #0
 8007414:	d038      	beq.n	8007488 <_svfiprintf_r+0x1c8>
 8007416:	4b24      	ldr	r3, [pc, #144]	; (80074a8 <_svfiprintf_r+0x1e8>)
 8007418:	bb13      	cbnz	r3, 8007460 <_svfiprintf_r+0x1a0>
 800741a:	9b03      	ldr	r3, [sp, #12]
 800741c:	3307      	adds	r3, #7
 800741e:	f023 0307 	bic.w	r3, r3, #7
 8007422:	3308      	adds	r3, #8
 8007424:	9303      	str	r3, [sp, #12]
 8007426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007428:	444b      	add	r3, r9
 800742a:	9309      	str	r3, [sp, #36]	; 0x24
 800742c:	e76d      	b.n	800730a <_svfiprintf_r+0x4a>
 800742e:	fb05 3202 	mla	r2, r5, r2, r3
 8007432:	2001      	movs	r0, #1
 8007434:	460f      	mov	r7, r1
 8007436:	e7a6      	b.n	8007386 <_svfiprintf_r+0xc6>
 8007438:	2300      	movs	r3, #0
 800743a:	250a      	movs	r5, #10
 800743c:	4619      	mov	r1, r3
 800743e:	3701      	adds	r7, #1
 8007440:	9305      	str	r3, [sp, #20]
 8007442:	4638      	mov	r0, r7
 8007444:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007448:	3a30      	subs	r2, #48	; 0x30
 800744a:	2a09      	cmp	r2, #9
 800744c:	d903      	bls.n	8007456 <_svfiprintf_r+0x196>
 800744e:	2b00      	cmp	r3, #0
 8007450:	d0c8      	beq.n	80073e4 <_svfiprintf_r+0x124>
 8007452:	9105      	str	r1, [sp, #20]
 8007454:	e7c6      	b.n	80073e4 <_svfiprintf_r+0x124>
 8007456:	fb05 2101 	mla	r1, r5, r1, r2
 800745a:	2301      	movs	r3, #1
 800745c:	4607      	mov	r7, r0
 800745e:	e7f0      	b.n	8007442 <_svfiprintf_r+0x182>
 8007460:	ab03      	add	r3, sp, #12
 8007462:	9300      	str	r3, [sp, #0]
 8007464:	4622      	mov	r2, r4
 8007466:	4b11      	ldr	r3, [pc, #68]	; (80074ac <_svfiprintf_r+0x1ec>)
 8007468:	a904      	add	r1, sp, #16
 800746a:	4640      	mov	r0, r8
 800746c:	f3af 8000 	nop.w
 8007470:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007474:	4681      	mov	r9, r0
 8007476:	d1d6      	bne.n	8007426 <_svfiprintf_r+0x166>
 8007478:	89a3      	ldrh	r3, [r4, #12]
 800747a:	065b      	lsls	r3, r3, #25
 800747c:	f53f af35 	bmi.w	80072ea <_svfiprintf_r+0x2a>
 8007480:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007482:	b01d      	add	sp, #116	; 0x74
 8007484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007488:	ab03      	add	r3, sp, #12
 800748a:	9300      	str	r3, [sp, #0]
 800748c:	4622      	mov	r2, r4
 800748e:	4b07      	ldr	r3, [pc, #28]	; (80074ac <_svfiprintf_r+0x1ec>)
 8007490:	a904      	add	r1, sp, #16
 8007492:	4640      	mov	r0, r8
 8007494:	f000 f882 	bl	800759c <_printf_i>
 8007498:	e7ea      	b.n	8007470 <_svfiprintf_r+0x1b0>
 800749a:	bf00      	nop
 800749c:	0800aab7 	.word	0x0800aab7
 80074a0:	0800aabd 	.word	0x0800aabd
 80074a4:	0800aac1 	.word	0x0800aac1
 80074a8:	00000000 	.word	0x00000000
 80074ac:	0800720b 	.word	0x0800720b

080074b0 <_printf_common>:
 80074b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074b4:	4691      	mov	r9, r2
 80074b6:	461f      	mov	r7, r3
 80074b8:	688a      	ldr	r2, [r1, #8]
 80074ba:	690b      	ldr	r3, [r1, #16]
 80074bc:	4606      	mov	r6, r0
 80074be:	4293      	cmp	r3, r2
 80074c0:	bfb8      	it	lt
 80074c2:	4613      	movlt	r3, r2
 80074c4:	f8c9 3000 	str.w	r3, [r9]
 80074c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80074cc:	460c      	mov	r4, r1
 80074ce:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074d2:	b112      	cbz	r2, 80074da <_printf_common+0x2a>
 80074d4:	3301      	adds	r3, #1
 80074d6:	f8c9 3000 	str.w	r3, [r9]
 80074da:	6823      	ldr	r3, [r4, #0]
 80074dc:	0699      	lsls	r1, r3, #26
 80074de:	bf42      	ittt	mi
 80074e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80074e4:	3302      	addmi	r3, #2
 80074e6:	f8c9 3000 	strmi.w	r3, [r9]
 80074ea:	6825      	ldr	r5, [r4, #0]
 80074ec:	f015 0506 	ands.w	r5, r5, #6
 80074f0:	d107      	bne.n	8007502 <_printf_common+0x52>
 80074f2:	f104 0a19 	add.w	sl, r4, #25
 80074f6:	68e3      	ldr	r3, [r4, #12]
 80074f8:	f8d9 2000 	ldr.w	r2, [r9]
 80074fc:	1a9b      	subs	r3, r3, r2
 80074fe:	42ab      	cmp	r3, r5
 8007500:	dc29      	bgt.n	8007556 <_printf_common+0xa6>
 8007502:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007506:	6822      	ldr	r2, [r4, #0]
 8007508:	3300      	adds	r3, #0
 800750a:	bf18      	it	ne
 800750c:	2301      	movne	r3, #1
 800750e:	0692      	lsls	r2, r2, #26
 8007510:	d42e      	bmi.n	8007570 <_printf_common+0xc0>
 8007512:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007516:	4639      	mov	r1, r7
 8007518:	4630      	mov	r0, r6
 800751a:	47c0      	blx	r8
 800751c:	3001      	adds	r0, #1
 800751e:	d021      	beq.n	8007564 <_printf_common+0xb4>
 8007520:	6823      	ldr	r3, [r4, #0]
 8007522:	68e5      	ldr	r5, [r4, #12]
 8007524:	f003 0306 	and.w	r3, r3, #6
 8007528:	2b04      	cmp	r3, #4
 800752a:	bf18      	it	ne
 800752c:	2500      	movne	r5, #0
 800752e:	f8d9 2000 	ldr.w	r2, [r9]
 8007532:	f04f 0900 	mov.w	r9, #0
 8007536:	bf08      	it	eq
 8007538:	1aad      	subeq	r5, r5, r2
 800753a:	68a3      	ldr	r3, [r4, #8]
 800753c:	6922      	ldr	r2, [r4, #16]
 800753e:	bf08      	it	eq
 8007540:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007544:	4293      	cmp	r3, r2
 8007546:	bfc4      	itt	gt
 8007548:	1a9b      	subgt	r3, r3, r2
 800754a:	18ed      	addgt	r5, r5, r3
 800754c:	341a      	adds	r4, #26
 800754e:	454d      	cmp	r5, r9
 8007550:	d11a      	bne.n	8007588 <_printf_common+0xd8>
 8007552:	2000      	movs	r0, #0
 8007554:	e008      	b.n	8007568 <_printf_common+0xb8>
 8007556:	2301      	movs	r3, #1
 8007558:	4652      	mov	r2, sl
 800755a:	4639      	mov	r1, r7
 800755c:	4630      	mov	r0, r6
 800755e:	47c0      	blx	r8
 8007560:	3001      	adds	r0, #1
 8007562:	d103      	bne.n	800756c <_printf_common+0xbc>
 8007564:	f04f 30ff 	mov.w	r0, #4294967295
 8007568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800756c:	3501      	adds	r5, #1
 800756e:	e7c2      	b.n	80074f6 <_printf_common+0x46>
 8007570:	2030      	movs	r0, #48	; 0x30
 8007572:	18e1      	adds	r1, r4, r3
 8007574:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007578:	1c5a      	adds	r2, r3, #1
 800757a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800757e:	4422      	add	r2, r4
 8007580:	3302      	adds	r3, #2
 8007582:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007586:	e7c4      	b.n	8007512 <_printf_common+0x62>
 8007588:	2301      	movs	r3, #1
 800758a:	4622      	mov	r2, r4
 800758c:	4639      	mov	r1, r7
 800758e:	4630      	mov	r0, r6
 8007590:	47c0      	blx	r8
 8007592:	3001      	adds	r0, #1
 8007594:	d0e6      	beq.n	8007564 <_printf_common+0xb4>
 8007596:	f109 0901 	add.w	r9, r9, #1
 800759a:	e7d8      	b.n	800754e <_printf_common+0x9e>

0800759c <_printf_i>:
 800759c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80075a0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80075a4:	460c      	mov	r4, r1
 80075a6:	7e09      	ldrb	r1, [r1, #24]
 80075a8:	b085      	sub	sp, #20
 80075aa:	296e      	cmp	r1, #110	; 0x6e
 80075ac:	4617      	mov	r7, r2
 80075ae:	4606      	mov	r6, r0
 80075b0:	4698      	mov	r8, r3
 80075b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075b4:	f000 80b3 	beq.w	800771e <_printf_i+0x182>
 80075b8:	d822      	bhi.n	8007600 <_printf_i+0x64>
 80075ba:	2963      	cmp	r1, #99	; 0x63
 80075bc:	d036      	beq.n	800762c <_printf_i+0x90>
 80075be:	d80a      	bhi.n	80075d6 <_printf_i+0x3a>
 80075c0:	2900      	cmp	r1, #0
 80075c2:	f000 80b9 	beq.w	8007738 <_printf_i+0x19c>
 80075c6:	2958      	cmp	r1, #88	; 0x58
 80075c8:	f000 8083 	beq.w	80076d2 <_printf_i+0x136>
 80075cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075d0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80075d4:	e032      	b.n	800763c <_printf_i+0xa0>
 80075d6:	2964      	cmp	r1, #100	; 0x64
 80075d8:	d001      	beq.n	80075de <_printf_i+0x42>
 80075da:	2969      	cmp	r1, #105	; 0x69
 80075dc:	d1f6      	bne.n	80075cc <_printf_i+0x30>
 80075de:	6820      	ldr	r0, [r4, #0]
 80075e0:	6813      	ldr	r3, [r2, #0]
 80075e2:	0605      	lsls	r5, r0, #24
 80075e4:	f103 0104 	add.w	r1, r3, #4
 80075e8:	d52a      	bpl.n	8007640 <_printf_i+0xa4>
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	6011      	str	r1, [r2, #0]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	da03      	bge.n	80075fa <_printf_i+0x5e>
 80075f2:	222d      	movs	r2, #45	; 0x2d
 80075f4:	425b      	negs	r3, r3
 80075f6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80075fa:	486f      	ldr	r0, [pc, #444]	; (80077b8 <_printf_i+0x21c>)
 80075fc:	220a      	movs	r2, #10
 80075fe:	e039      	b.n	8007674 <_printf_i+0xd8>
 8007600:	2973      	cmp	r1, #115	; 0x73
 8007602:	f000 809d 	beq.w	8007740 <_printf_i+0x1a4>
 8007606:	d808      	bhi.n	800761a <_printf_i+0x7e>
 8007608:	296f      	cmp	r1, #111	; 0x6f
 800760a:	d020      	beq.n	800764e <_printf_i+0xb2>
 800760c:	2970      	cmp	r1, #112	; 0x70
 800760e:	d1dd      	bne.n	80075cc <_printf_i+0x30>
 8007610:	6823      	ldr	r3, [r4, #0]
 8007612:	f043 0320 	orr.w	r3, r3, #32
 8007616:	6023      	str	r3, [r4, #0]
 8007618:	e003      	b.n	8007622 <_printf_i+0x86>
 800761a:	2975      	cmp	r1, #117	; 0x75
 800761c:	d017      	beq.n	800764e <_printf_i+0xb2>
 800761e:	2978      	cmp	r1, #120	; 0x78
 8007620:	d1d4      	bne.n	80075cc <_printf_i+0x30>
 8007622:	2378      	movs	r3, #120	; 0x78
 8007624:	4865      	ldr	r0, [pc, #404]	; (80077bc <_printf_i+0x220>)
 8007626:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800762a:	e055      	b.n	80076d8 <_printf_i+0x13c>
 800762c:	6813      	ldr	r3, [r2, #0]
 800762e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007632:	1d19      	adds	r1, r3, #4
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	6011      	str	r1, [r2, #0]
 8007638:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800763c:	2301      	movs	r3, #1
 800763e:	e08c      	b.n	800775a <_printf_i+0x1be>
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007646:	6011      	str	r1, [r2, #0]
 8007648:	bf18      	it	ne
 800764a:	b21b      	sxthne	r3, r3
 800764c:	e7cf      	b.n	80075ee <_printf_i+0x52>
 800764e:	6813      	ldr	r3, [r2, #0]
 8007650:	6825      	ldr	r5, [r4, #0]
 8007652:	1d18      	adds	r0, r3, #4
 8007654:	6010      	str	r0, [r2, #0]
 8007656:	0628      	lsls	r0, r5, #24
 8007658:	d501      	bpl.n	800765e <_printf_i+0xc2>
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	e002      	b.n	8007664 <_printf_i+0xc8>
 800765e:	0668      	lsls	r0, r5, #25
 8007660:	d5fb      	bpl.n	800765a <_printf_i+0xbe>
 8007662:	881b      	ldrh	r3, [r3, #0]
 8007664:	296f      	cmp	r1, #111	; 0x6f
 8007666:	bf14      	ite	ne
 8007668:	220a      	movne	r2, #10
 800766a:	2208      	moveq	r2, #8
 800766c:	4852      	ldr	r0, [pc, #328]	; (80077b8 <_printf_i+0x21c>)
 800766e:	2100      	movs	r1, #0
 8007670:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007674:	6865      	ldr	r5, [r4, #4]
 8007676:	2d00      	cmp	r5, #0
 8007678:	60a5      	str	r5, [r4, #8]
 800767a:	f2c0 8095 	blt.w	80077a8 <_printf_i+0x20c>
 800767e:	6821      	ldr	r1, [r4, #0]
 8007680:	f021 0104 	bic.w	r1, r1, #4
 8007684:	6021      	str	r1, [r4, #0]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d13d      	bne.n	8007706 <_printf_i+0x16a>
 800768a:	2d00      	cmp	r5, #0
 800768c:	f040 808e 	bne.w	80077ac <_printf_i+0x210>
 8007690:	4665      	mov	r5, ip
 8007692:	2a08      	cmp	r2, #8
 8007694:	d10b      	bne.n	80076ae <_printf_i+0x112>
 8007696:	6823      	ldr	r3, [r4, #0]
 8007698:	07db      	lsls	r3, r3, #31
 800769a:	d508      	bpl.n	80076ae <_printf_i+0x112>
 800769c:	6923      	ldr	r3, [r4, #16]
 800769e:	6862      	ldr	r2, [r4, #4]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	bfde      	ittt	le
 80076a4:	2330      	movle	r3, #48	; 0x30
 80076a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80076aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80076ae:	ebac 0305 	sub.w	r3, ip, r5
 80076b2:	6123      	str	r3, [r4, #16]
 80076b4:	f8cd 8000 	str.w	r8, [sp]
 80076b8:	463b      	mov	r3, r7
 80076ba:	aa03      	add	r2, sp, #12
 80076bc:	4621      	mov	r1, r4
 80076be:	4630      	mov	r0, r6
 80076c0:	f7ff fef6 	bl	80074b0 <_printf_common>
 80076c4:	3001      	adds	r0, #1
 80076c6:	d14d      	bne.n	8007764 <_printf_i+0x1c8>
 80076c8:	f04f 30ff 	mov.w	r0, #4294967295
 80076cc:	b005      	add	sp, #20
 80076ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80076d2:	4839      	ldr	r0, [pc, #228]	; (80077b8 <_printf_i+0x21c>)
 80076d4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80076d8:	6813      	ldr	r3, [r2, #0]
 80076da:	6821      	ldr	r1, [r4, #0]
 80076dc:	1d1d      	adds	r5, r3, #4
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	6015      	str	r5, [r2, #0]
 80076e2:	060a      	lsls	r2, r1, #24
 80076e4:	d50b      	bpl.n	80076fe <_printf_i+0x162>
 80076e6:	07ca      	lsls	r2, r1, #31
 80076e8:	bf44      	itt	mi
 80076ea:	f041 0120 	orrmi.w	r1, r1, #32
 80076ee:	6021      	strmi	r1, [r4, #0]
 80076f0:	b91b      	cbnz	r3, 80076fa <_printf_i+0x15e>
 80076f2:	6822      	ldr	r2, [r4, #0]
 80076f4:	f022 0220 	bic.w	r2, r2, #32
 80076f8:	6022      	str	r2, [r4, #0]
 80076fa:	2210      	movs	r2, #16
 80076fc:	e7b7      	b.n	800766e <_printf_i+0xd2>
 80076fe:	064d      	lsls	r5, r1, #25
 8007700:	bf48      	it	mi
 8007702:	b29b      	uxthmi	r3, r3
 8007704:	e7ef      	b.n	80076e6 <_printf_i+0x14a>
 8007706:	4665      	mov	r5, ip
 8007708:	fbb3 f1f2 	udiv	r1, r3, r2
 800770c:	fb02 3311 	mls	r3, r2, r1, r3
 8007710:	5cc3      	ldrb	r3, [r0, r3]
 8007712:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007716:	460b      	mov	r3, r1
 8007718:	2900      	cmp	r1, #0
 800771a:	d1f5      	bne.n	8007708 <_printf_i+0x16c>
 800771c:	e7b9      	b.n	8007692 <_printf_i+0xf6>
 800771e:	6813      	ldr	r3, [r2, #0]
 8007720:	6825      	ldr	r5, [r4, #0]
 8007722:	1d18      	adds	r0, r3, #4
 8007724:	6961      	ldr	r1, [r4, #20]
 8007726:	6010      	str	r0, [r2, #0]
 8007728:	0628      	lsls	r0, r5, #24
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	d501      	bpl.n	8007732 <_printf_i+0x196>
 800772e:	6019      	str	r1, [r3, #0]
 8007730:	e002      	b.n	8007738 <_printf_i+0x19c>
 8007732:	066a      	lsls	r2, r5, #25
 8007734:	d5fb      	bpl.n	800772e <_printf_i+0x192>
 8007736:	8019      	strh	r1, [r3, #0]
 8007738:	2300      	movs	r3, #0
 800773a:	4665      	mov	r5, ip
 800773c:	6123      	str	r3, [r4, #16]
 800773e:	e7b9      	b.n	80076b4 <_printf_i+0x118>
 8007740:	6813      	ldr	r3, [r2, #0]
 8007742:	1d19      	adds	r1, r3, #4
 8007744:	6011      	str	r1, [r2, #0]
 8007746:	681d      	ldr	r5, [r3, #0]
 8007748:	6862      	ldr	r2, [r4, #4]
 800774a:	2100      	movs	r1, #0
 800774c:	4628      	mov	r0, r5
 800774e:	f000 f844 	bl	80077da <memchr>
 8007752:	b108      	cbz	r0, 8007758 <_printf_i+0x1bc>
 8007754:	1b40      	subs	r0, r0, r5
 8007756:	6060      	str	r0, [r4, #4]
 8007758:	6863      	ldr	r3, [r4, #4]
 800775a:	6123      	str	r3, [r4, #16]
 800775c:	2300      	movs	r3, #0
 800775e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007762:	e7a7      	b.n	80076b4 <_printf_i+0x118>
 8007764:	6923      	ldr	r3, [r4, #16]
 8007766:	462a      	mov	r2, r5
 8007768:	4639      	mov	r1, r7
 800776a:	4630      	mov	r0, r6
 800776c:	47c0      	blx	r8
 800776e:	3001      	adds	r0, #1
 8007770:	d0aa      	beq.n	80076c8 <_printf_i+0x12c>
 8007772:	6823      	ldr	r3, [r4, #0]
 8007774:	079b      	lsls	r3, r3, #30
 8007776:	d413      	bmi.n	80077a0 <_printf_i+0x204>
 8007778:	68e0      	ldr	r0, [r4, #12]
 800777a:	9b03      	ldr	r3, [sp, #12]
 800777c:	4298      	cmp	r0, r3
 800777e:	bfb8      	it	lt
 8007780:	4618      	movlt	r0, r3
 8007782:	e7a3      	b.n	80076cc <_printf_i+0x130>
 8007784:	2301      	movs	r3, #1
 8007786:	464a      	mov	r2, r9
 8007788:	4639      	mov	r1, r7
 800778a:	4630      	mov	r0, r6
 800778c:	47c0      	blx	r8
 800778e:	3001      	adds	r0, #1
 8007790:	d09a      	beq.n	80076c8 <_printf_i+0x12c>
 8007792:	3501      	adds	r5, #1
 8007794:	68e3      	ldr	r3, [r4, #12]
 8007796:	9a03      	ldr	r2, [sp, #12]
 8007798:	1a9b      	subs	r3, r3, r2
 800779a:	42ab      	cmp	r3, r5
 800779c:	dcf2      	bgt.n	8007784 <_printf_i+0x1e8>
 800779e:	e7eb      	b.n	8007778 <_printf_i+0x1dc>
 80077a0:	2500      	movs	r5, #0
 80077a2:	f104 0919 	add.w	r9, r4, #25
 80077a6:	e7f5      	b.n	8007794 <_printf_i+0x1f8>
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d1ac      	bne.n	8007706 <_printf_i+0x16a>
 80077ac:	7803      	ldrb	r3, [r0, #0]
 80077ae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077b6:	e76c      	b.n	8007692 <_printf_i+0xf6>
 80077b8:	0800aac8 	.word	0x0800aac8
 80077bc:	0800aad9 	.word	0x0800aad9

080077c0 <__ascii_wctomb>:
 80077c0:	b149      	cbz	r1, 80077d6 <__ascii_wctomb+0x16>
 80077c2:	2aff      	cmp	r2, #255	; 0xff
 80077c4:	bf8b      	itete	hi
 80077c6:	238a      	movhi	r3, #138	; 0x8a
 80077c8:	700a      	strbls	r2, [r1, #0]
 80077ca:	6003      	strhi	r3, [r0, #0]
 80077cc:	2001      	movls	r0, #1
 80077ce:	bf88      	it	hi
 80077d0:	f04f 30ff 	movhi.w	r0, #4294967295
 80077d4:	4770      	bx	lr
 80077d6:	4608      	mov	r0, r1
 80077d8:	4770      	bx	lr

080077da <memchr>:
 80077da:	b510      	push	{r4, lr}
 80077dc:	b2c9      	uxtb	r1, r1
 80077de:	4402      	add	r2, r0
 80077e0:	4290      	cmp	r0, r2
 80077e2:	4603      	mov	r3, r0
 80077e4:	d101      	bne.n	80077ea <memchr+0x10>
 80077e6:	2300      	movs	r3, #0
 80077e8:	e003      	b.n	80077f2 <memchr+0x18>
 80077ea:	781c      	ldrb	r4, [r3, #0]
 80077ec:	3001      	adds	r0, #1
 80077ee:	428c      	cmp	r4, r1
 80077f0:	d1f6      	bne.n	80077e0 <memchr+0x6>
 80077f2:	4618      	mov	r0, r3
 80077f4:	bd10      	pop	{r4, pc}

080077f6 <memmove>:
 80077f6:	4288      	cmp	r0, r1
 80077f8:	b510      	push	{r4, lr}
 80077fa:	eb01 0302 	add.w	r3, r1, r2
 80077fe:	d807      	bhi.n	8007810 <memmove+0x1a>
 8007800:	1e42      	subs	r2, r0, #1
 8007802:	4299      	cmp	r1, r3
 8007804:	d00a      	beq.n	800781c <memmove+0x26>
 8007806:	f811 4b01 	ldrb.w	r4, [r1], #1
 800780a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800780e:	e7f8      	b.n	8007802 <memmove+0xc>
 8007810:	4283      	cmp	r3, r0
 8007812:	d9f5      	bls.n	8007800 <memmove+0xa>
 8007814:	1881      	adds	r1, r0, r2
 8007816:	1ad2      	subs	r2, r2, r3
 8007818:	42d3      	cmn	r3, r2
 800781a:	d100      	bne.n	800781e <memmove+0x28>
 800781c:	bd10      	pop	{r4, pc}
 800781e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007822:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007826:	e7f7      	b.n	8007818 <memmove+0x22>

08007828 <_realloc_r>:
 8007828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800782a:	4607      	mov	r7, r0
 800782c:	4614      	mov	r4, r2
 800782e:	460e      	mov	r6, r1
 8007830:	b921      	cbnz	r1, 800783c <_realloc_r+0x14>
 8007832:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007836:	4611      	mov	r1, r2
 8007838:	f7ff bab2 	b.w	8006da0 <_malloc_r>
 800783c:	b922      	cbnz	r2, 8007848 <_realloc_r+0x20>
 800783e:	f7ff fa63 	bl	8006d08 <_free_r>
 8007842:	4625      	mov	r5, r4
 8007844:	4628      	mov	r0, r5
 8007846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007848:	f000 f814 	bl	8007874 <_malloc_usable_size_r>
 800784c:	42a0      	cmp	r0, r4
 800784e:	d20f      	bcs.n	8007870 <_realloc_r+0x48>
 8007850:	4621      	mov	r1, r4
 8007852:	4638      	mov	r0, r7
 8007854:	f7ff faa4 	bl	8006da0 <_malloc_r>
 8007858:	4605      	mov	r5, r0
 800785a:	2800      	cmp	r0, #0
 800785c:	d0f2      	beq.n	8007844 <_realloc_r+0x1c>
 800785e:	4631      	mov	r1, r6
 8007860:	4622      	mov	r2, r4
 8007862:	f7ff fa3e 	bl	8006ce2 <memcpy>
 8007866:	4631      	mov	r1, r6
 8007868:	4638      	mov	r0, r7
 800786a:	f7ff fa4d 	bl	8006d08 <_free_r>
 800786e:	e7e9      	b.n	8007844 <_realloc_r+0x1c>
 8007870:	4635      	mov	r5, r6
 8007872:	e7e7      	b.n	8007844 <_realloc_r+0x1c>

08007874 <_malloc_usable_size_r>:
 8007874:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007878:	1f18      	subs	r0, r3, #4
 800787a:	2b00      	cmp	r3, #0
 800787c:	bfbc      	itt	lt
 800787e:	580b      	ldrlt	r3, [r1, r0]
 8007880:	18c0      	addlt	r0, r0, r3
 8007882:	4770      	bx	lr

08007884 <_sbrk>:
 8007884:	4b04      	ldr	r3, [pc, #16]	; (8007898 <_sbrk+0x14>)
 8007886:	4602      	mov	r2, r0
 8007888:	6819      	ldr	r1, [r3, #0]
 800788a:	b909      	cbnz	r1, 8007890 <_sbrk+0xc>
 800788c:	4903      	ldr	r1, [pc, #12]	; (800789c <_sbrk+0x18>)
 800788e:	6019      	str	r1, [r3, #0]
 8007890:	6818      	ldr	r0, [r3, #0]
 8007892:	4402      	add	r2, r0
 8007894:	601a      	str	r2, [r3, #0]
 8007896:	4770      	bx	lr
 8007898:	200006cc 	.word	0x200006cc
 800789c:	20000928 	.word	0x20000928

080078a0 <_init>:
 80078a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078a2:	bf00      	nop
 80078a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078a6:	bc08      	pop	{r3}
 80078a8:	469e      	mov	lr, r3
 80078aa:	4770      	bx	lr

080078ac <_fini>:
 80078ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ae:	bf00      	nop
 80078b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078b2:	bc08      	pop	{r3}
 80078b4:	469e      	mov	lr, r3
 80078b6:	4770      	bx	lr
